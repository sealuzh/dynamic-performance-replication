/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:10:01 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 26;
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 26);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 26. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[4];
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      javaParserTokenManager0.setDebugStream((PrintStream) null);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T3X'SxY,wh'Zl");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit((JavaCharStream) null, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jK4~");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`<X \t{");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 37);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZCM6d'x");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<STRING_LITERAL>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(88, token0.kind);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&,PQ%\"/Gcc.pp`");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(105, token0.kind);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZWF:j5\"A");
      char[] charArray0 = new char[1];
      stringReader0.read(charArray0);
      StringReader stringReader1 = new StringReader("ZWF:j5\"A");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 8.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("EX5@m9187eo\"N=|7");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 2);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 17.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("'g");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\\'g\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("=5]8wd");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(87, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("=", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/HC6>e:NK%r5");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[3];
      int int0 = stringReader0.read(charArray0);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'/', 'H', 'C'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 3);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/HC6>e:NK%r5");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("/HC6>e:NK%r5");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(104, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("/", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(4, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("HC6", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token2.beginColumn);
      assertEquals(5, token2.endColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(124, token2.kind);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(">", token2.toString());
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("\"int\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(5, token0.endColumn);
      assertEquals(73, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("\"int\"", token0.toString());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader(".3_?iICl74@");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(70, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(".3", token0.toString());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("?>:_-fm22PDFqhT&3");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(91, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("?", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token_GTToken0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(124, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(">", token1.toString());
      assertNotSame(token1, token_GTToken0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/HC6>e:NK%r5");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[5];
      StringReader stringReader1 = new StringReader("/HC6>e:NK%r5");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int0 = stringReader0.read(charArray0);
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'/', 'H', 'C', '6', '>'}, charArray0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("e", token0.toString());
      assertNotSame(stringReader0, stringReader1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KSTING_LITERAL>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(14, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(14, javaCharStream0.getColumn());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("KSTING_LITERAL", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(14, javaCharStream0.bufpos);
      assertEquals(15, token1.endColumn);
      assertEquals(15, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(124, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(">", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("epnk;Fj");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(4, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("epnk", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(83, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(5, token1.endColumn);
      assertEquals(5, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(";", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(7, token2.endColumn);
      assertEquals(6, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals("Fj", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("w${PNa5P+kc");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("w$", token0.toString());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",lf-[:YR>qLx");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(84, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(",", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("lf", token1.toString());
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("VZqq`q ");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 97);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(4, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("VZqq", token0.toString());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZWF:j5\"A");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("ZWF", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(4, token1.beginColumn);
      assertEquals(92, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(4, token1.endColumn);
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(":", token1.toString());
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IN_FORMAL_COMMENT");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(73, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(15, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(16, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals("N_FORMAL_COMMENT", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(16, token1.beginColumn);
      assertEquals(16, token1.endColumn);
      assertEquals(16, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'g';
      charArray0[1] = 'O';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'g', 'O', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertArrayEquals(new char[] {'g', 'O', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(bufferedReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0);
      assertArrayEquals(new char[] {'g', 'O', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertArrayEquals(new char[] {'g', 'O', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'g', 'O', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'g', 'O', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("gO", token0.toString());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("!g1.@y~>?_");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(89, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("!", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("g1", token1.toString());
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/HC6>e:NK%r5");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("tEe6sq*2@)/LZyh*");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("tEe6sq", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(103, token1.kind);
      assertEquals(7, token1.endColumn);
      assertEquals(7, token1.beginColumn);
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals("*", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%-RsCg");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(108, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("%", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(102, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("-", token1.toString());
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("^M!");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(107, token0.kind);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("^", token0.toString());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<token of kind 7>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("<", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream1.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(6, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(6, javaCharStream1.getEndColumn());
      assertEquals(6, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("token", token1.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(9, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(8, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(8, javaCharStream1.getBeginColumn());
      assertEquals(9, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(9, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("of", token2.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream1.bufpos);
      assertEquals(74, token3.kind);
      assertEquals(11, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(14, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(14, javaCharStream1.getEndColumn());
      assertEquals(14, javaCharStream1.getColumn());
      assertEquals(11, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("kind", token3.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZWF:j 5\"A");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[5];
      int int0 = stringReader0.read(charArray0);
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'Z', 'W', 'F', ':', 'j'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("tF={f#G+u~EL'5%k");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("tF", token0.toString());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertNull(token_GTToken1.toString());
      
      StringReader stringReader0 = new StringReader("transient");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, token0.endColumn);
      assertEquals(60, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals("transient", token0.toString());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(9, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fjZR?]&");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("fjZR", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(91, token1.kind);
      assertEquals(5, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals("?", token1.toString());
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2");
      assertNotNull(stringReader0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertNotNull(charArrayReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertNotNull(bufferedReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("O", token0.toString());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<token of kind 7>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream1.backup(988);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3107, javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3107, javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader("l%kOOF ^2#z#iK");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      token_GTToken0.endLine = (-5299);
      assertNull(token_GTToken0.toString());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("l", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(108, token1.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("%", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(74, token2.kind);
      assertEquals(6, token2.endColumn);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals("kOOF", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, token3.beginColumn);
      assertEquals(107, token3.kind);
      assertEquals(8, token3.endColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals("^", token3.toString());
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("a");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("a", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNull(token_GTToken0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("a", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0P8\"S");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\">>\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(73, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("\">>\"", token0.toString());
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("*");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(103, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("*", token0.toString());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Un\"C U<}#W7");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("Un", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 12.  Encountered: <EOF> after : \"\\\"C U<}#W7\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertNull(token_GTToken1.toString());
      
      StringReader stringReader0 = new StringReader("T)woylq| p=h");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("T", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(78, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(")", token1.toString());
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("EX5@m9187eo\"N=|7");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.jjround = 0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("EX5", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(4, token1.endColumn);
      assertEquals(86, token1.kind);
      assertEquals(4, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("@", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(11, token2.endColumn);
      assertEquals(5, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals("m9187eo", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ck<A-\")V.T6%a')xj");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("Ck", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(88, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("<", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(4, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("A", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("QT'% E]tY d.GA");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("QT", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: \" \" (32), after : \"\\'%\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IN_FORMA}_COIMMENT");
      assertNotNull(stringReader0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(8, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals("IN_FORMA", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(80, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(9, token1.beginColumn);
      assertEquals(9, token1.endColumn);
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals("}", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("r^COjQ}A");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("r", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(107, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("^", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(107, token2.kind);
      assertEquals(2, token2.endColumn);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("^", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("M");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("M", token0.toString());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZWF:j5\"A");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[1];
      int int0 = stringReader0.read(charArray0);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      
      StringReader stringReader1 = new StringReader("ZWF:j5\"A");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("WF", token0.toString());
      assertNotSame(stringReader0, stringReader1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R;y!sg]uvTPhf");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("R", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(83, token1.kind);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(";", token1.toString());
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7.]n@{l@");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(",lf-[:YR>qLx");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("b[%6=KL.rqmK Y3NL0");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("b", token0.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_1d~$g}~7>pG0n[.8");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("(rQid`]|'#o-/p.");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("_1d", token0.toString());
      assertNotSame(stringReader0, stringReader1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~f>j");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringReader stringReader1 = new StringReader("~f>j");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader1);
      assertNotNull(lineNumberReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(90, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("~", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("f", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0S");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      StringReader stringReader2 = new StringReader("");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f(Za-3}f6=*gbjxRan");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("f", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(77, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("(", token1.toString());
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader("8KqF ~");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("+=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(110, token0.kind);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("+=", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertNull(token_GTToken1.toString());
      
      StringReader stringReader0 = new StringReader("==");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(93, token1.kind);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("==", token1.toString());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("EX5@m9187eo\"N=|7");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("Invalid escape character at line ");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '+';
      charArray0[4] = '+';
      charArray0[5] = '+';
      charArray0[6] = '+';
      charArray0[7] = '+';
      int int0 = stringReader1.read(charArray0);
      assertEquals(8, int0);
      assertArrayEquals(new char[] {'I', 'n', 'v', 'a', 'l', 'i', 'd', ' '}, charArray0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 8);
      assertNotNull(bufferedReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager1.input_stream = javaCharStream0;
      assertEquals(0, javaParserTokenManager1.input_stream.getBeginColumn());
      assertEquals(0, javaParserTokenManager1.input_stream.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(6, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals("escape", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"\f\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(73, token0.kind);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("\"\f\"", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("", token2.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("Z+\"g");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("Z", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(101, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("+", token1.toString());
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'n';
      charArray0[1] = 'B';
      charArray0[2] = 'd';
      charArray0[3] = 'W';
      charArray0[4] = 'Z';
      charArray0[5] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'n', 'B', 'd', 'W', 'Z', '\"'}, charArray0);
      assertNotNull(charArrayReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertArrayEquals(new char[] {'n', 'B', 'd', 'W', 'Z', '\"'}, charArray0);
      assertNotNull(bufferedReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0);
      assertArrayEquals(new char[] {'n', 'B', 'd', 'W', 'Z', '\"'}, charArray0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0);
      assertArrayEquals(new char[] {'n', 'B', 'd', 'W', 'Z', '\"'}, charArray0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'n', 'B', 'd', 'W', 'Z', '\"'}, charArray0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'n', 'B', 'd', 'W', 'Z', '\"'}, charArray0);
      assertNotNull(token0);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("nBdWZ", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(5);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 5. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("+=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      javaParserTokenManager0.curLexState = (-667);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals("", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(87, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals("=", token1.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertNull(token_GTToken1.toString());
      
      StringReader stringReader0 = new StringReader("q%B?");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("q", token0.toString());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("dNhe-MG8&8n2MjY");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("dNhe", token0.toString());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",lf-[:YR>qLx");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = '^';
      charArray0[2] = '&';
      charArray0[3] = '&';
      charArray0[4] = '&';
      charArray0[5] = '^';
      int int0 = stringReader0.read(charArray0);
      assertEquals(6, int0);
      assertArrayEquals(new char[] {',', 'l', 'f', '-', '[', ':'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("YR", token0.toString());
      
      javaParserTokenManager0.SwitchTo(1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("Ck<A-\")V.T6%a')xj");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("$L;cw<q");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("$L", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(83, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(";", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token0.equals((Object)token1));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("$L", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token0, token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(5, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("cw", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("D-Z&zc?kZ3ZmF!PaSG}");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("D", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(102, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("-", token1.toString());
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"int\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.jjround = (-1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\\"\" (34), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",lf-[:YR>qLx");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("+da0~-&h-]L5#b");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(101, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("+", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(101, token1.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("+", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(101, token1.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("+", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("EX5@m9187eo\"N=|7");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[6];
      charArray0[1] = '1';
      charArray0[2] = 'v';
      int int0 = stringReader0.read(charArray0);
      assertEquals(6, int0);
      assertArrayEquals(new char[] {'E', 'X', '5', '@', 'm', '9'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader("<INTEGER_LITERAL>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(88, token0.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("<", token0.toString());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("xd9)y'CI");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.AdjustBuffSize();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("xd9", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(4, token1.beginColumn);
      assertEquals(78, token1.kind);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(")", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(5, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(5, token2.endColumn);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("y", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("xd9)y'CI");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = '&';
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'x', 'd'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0P8\"S");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[10];
      charArray0[1] = '\u0083';
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<token of kind 7>");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 't';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'<', 't', 'o', 'k'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 113);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("en", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(5, token1.endColumn);
      assertEquals(4, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("of", token1.toString());
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("import");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(38, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(6, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("import", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(6, token1.endColumn);
      assertEquals(6, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader("this");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(57, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("this", token0.toString());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3tNkem of kind 7>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("T3X'SxY,wh'Zl");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("T3X", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 6.  Encountered: \"x\" (120), after : \"\\'S\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zZCM6d'x");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(6, token0.endColumn);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals("zZCM6d", token0.toString());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0go,ADk4f2");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)82;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-74), (byte)87, (byte)102, (byte)82}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 821, (byte) (-74), (-2277));
      assertArrayEquals(new byte[] {(byte) (-74), (byte)87, (byte)102, (byte)82}, byteArray0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertArrayEquals(new byte[] {(byte) (-74), (byte)87, (byte)102, (byte)82}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertArrayEquals(new byte[] {(byte) (-74), (byte)87, (byte)102, (byte)82}, byteArray0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 821, column -74.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(81, token0.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("[", token0.toString());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f{*@+");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      stringReader0.reset();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(1, javaCharStream2.getColumn());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(1, javaCharStream2.getEndColumn());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals(1, javaCharStream2.getBeginColumn());
      assertEquals("f", token0.toString());
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(79, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(2, javaCharStream2.getEndColumn());
      assertEquals(2, javaCharStream2.getColumn());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals(2, javaCharStream2.getBeginColumn());
      assertEquals("{", token1.toString());
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vS}JVEL}&uS");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("t.`~\f9tJ[U");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader1);
      assertNotNull(lineNumberReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("t", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(85, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(".", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/HC6>e:NK%r5");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("2G>AcK2sn");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = 'd';
      charArray0[2] = '3';
      charArray0[3] = 'D';
      charArray0[4] = 'P';
      charArray0[5] = 'E';
      charArray0[6] = 'J';
      int int0 = stringReader1.read(charArray0);
      assertEquals(7, int0);
      assertArrayEquals(new char[] {'2', 'G', '>', 'A', 'c', 'K', '2'}, charArray0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader1, 950);
      assertNotNull(bufferedReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int1 = stringReader0.read(charArray0);
      assertEquals(7, int1);
      assertArrayEquals(new char[] {'/', 'H', 'C', '6', '>', 'e', ':'}, charArray0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(int1 == int0);
      assertNotSame(stringReader0, stringReader1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("sn", token0.toString());
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZWF:j5\"A");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("?lK}Hr[XB}2im");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(91, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("?", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("lK", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(3, token2.endColumn);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("lK", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("if");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = '1';
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(36, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("if", token0.toString());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("EX5@m9187eoX<=|7");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[1] = '=';
      charArray0[2] = '!';
      charArray0[3] = '*';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'E', 'X', '5', '@'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 4);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(8, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("m9187eoX", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(10, token1.endColumn);
      assertEquals(94, token1.kind);
      assertEquals(9, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("<=", token1.toString());
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("b&,PQ\"/Gcc.pp`");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("b", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0S");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = 'v';
      charArray0[1] = 'x';
      charArray0[3] = 'x';
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'0', 'S', '\u0000', 'x'}, charArray0);
      
      StringReader stringReader1 = new StringReader("n>0PfUogR5xh");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("n", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(124, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(">", token1.toString());
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vS}JVEL}&uS");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("t.`~\f9tJ[U");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader1);
      assertNotNull(lineNumberReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("t", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("t", token0.toString());
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/HC6>e:NK%r5");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("GFt0wRJ 4De&M8p2+");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringReader stringReader2 = new StringReader("/HC6>e:NK%r5");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(mockFileInputStream0, 56, (-1));
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream2);
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream1.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(7, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(7, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(7, javaCharStream1.getEndColumn());
      assertEquals("GFt0wRJ", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7.]n@{l@");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '#';
      charArray0[2] = '{';
      charArray0[3] = '`';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'7', '.', ']', 'n'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 31);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = bufferedReader0.ready();
      assertTrue(boolean0);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('@', char0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(79, token0.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("{", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("l", token1.toString());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("di{_'bUUgCL");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("di", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("Ck<A-\")V.T6%a')xj");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("$L;cw<q");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int0 = stringReader1.read();
      assertEquals(36, int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("L", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(83, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(";", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(4, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("cw", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotNull(token3);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token3.endColumn);
      assertEquals(5, token3.beginColumn);
      assertEquals(88, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("<", token3.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n'4w");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[0];
      int int0 = stringReader0.read(charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      StringReader stringReader1 = new StringReader("{");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("n", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager1.jjFillToken();
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("n", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vS}JVEL}&uS");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("vS", token0.toString());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("Ck<A-\")V.T6%a')xj");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("$L;cw<q");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = '_';
      charArray0[3] = 'J';
      int int0 = stringReader1.read(charArray0);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'$', 'L', ';', 'c'}, charArray0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager2.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("w", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("EX5@m9187eo\"N=|7");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      int int0 = stringReader0.read(charArray0);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'E'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("EX5@m9187eo\"N=|7");
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.printf("", (Object[]) javaParserTokenManager0.jjstrLiteralImages);
      assertNotNull(printStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      javaParserTokenManager0.debugStream = printStream0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("X5", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = '%';
      charArray0[2] = 'v';
      charArray0[3] = '9';
      charArray0[4] = 'P';
      charArray0[5] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 3150);
      assertArrayEquals(new char[] {'&', '%', 'v', '9', 'P', '9'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertArrayEquals(new char[] {'&', '%', 'v', '9', 'P', '9'}, charArray0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertArrayEquals(new char[] {'&', '%', 'v', '9', 'P', '9'}, charArray0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertArrayEquals(new char[] {'&', '%', 'v', '9', 'P', '9'}, charArray0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'&', '%', 'v', '9', 'P', '9'}, charArray0);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(105, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals("&", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'&', '%', 'v', '9', 'P', '9'}, charArray0);
      assertNotNull(token1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(108, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals("%", token1.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      StringReader stringReader0 = new StringReader("--");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(100, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("--", token0.toString());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("try");
      assertNotNull(stringReader0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(62, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("try", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      try { 
        javaCharStream1.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }
}
