/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 19:00:22 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-461));
      classWriter0.index = (-461);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-461), "", "", "", "");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-461));
      classWriter0.index = (-461);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-461), "", "", "", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(81);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", (String) null, "");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(81);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2730), "", "", (String) null, "");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(73);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 73, "3>T*fglC0", "3>T*fglC0", (String) null, "3>T*fglC0");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(73);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-451), "RuntimeInvisibleAnnotations", "Class not found", "6=bF0", "RuntimeInvisibleAnnotations");
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector();
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-461));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-461), "", "", "", "");
      fieldWriter0.visitAnnotation("aBgf'A1j$?g6", false);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(81);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2730), "5]@*grZiP=XzxE", "5]@*grZiP=XzxE", (String) null, "5]@*grZiP=XzxE");
      fieldWriter0.visitAnnotation("", true);
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-461));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-461), ":{.L*%hC[!n", ":{.L*%hC[!n", ":{.L*%hC[!n", ":{.L*%hC[!n");
      classWriter0.version = (-461);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2776, "", "", "", (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(81);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2730), "5]@*grZiP=XzxE", "5]@*grZiP=XzxE", (String) null, "5]@*grZiP=XzxE");
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-461));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-461), ":{.L*%hC[!n", ":{.L*%hC[!n", ":{.L*%hC[!n", ":{.L*%hC[!n");
      classWriter0.version = (-461);
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-461));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-461), "", "", "", "");
      fieldWriter0.visitAnnotation("aBgf'A1j$?g6", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2776, "", "", "", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(81);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2730), "5]@*grZiP=XzxE", "5]@*grZiP=XzxE", (String) null, "5]@*grZiP=XzxE");
      fieldWriter0.visitAnnotation("", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), "/h/d/", "/h/d/", "/h/d/", "/h/d/");
      Object object0 = new Object();
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, (-19), "", "", "/h/d/", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@5244d497
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(73);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-451), "RuntimeInvisibleAnnotations", "Class not found", "6=bF0", "RuntimeInvisibleAnnotations");
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(81);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2730), "", "", "", "");
      Attribute attribute0 = new Attribute((String) null);
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
