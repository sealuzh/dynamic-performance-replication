/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 05:18:29 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer integer0 = new Integer((-4093));
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.put("wheel.json.JSONObject$Null", false);
      jSONObject0.toString((-4177984), 118);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONObject("p/^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"p/^\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("|Ojp{EQ\"");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |Ojp{EQ\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Short, String> hashMap0 = new HashMap<Short, String>();
      hashMap0.put((Short) null, "Untercminated string");
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject("{}");
      jSONObject0.append("{}", hashMap0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.remove("{}");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Float float0 = Float.valueOf(520.28656F);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("v0Ldt3kIl+2(", float0);
      String string0 = jSONObject1.optString("v0Ldt3kIl+2(");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Double double0 = new Double(7.585696186760758);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("{\n                                                                                                                      \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                      \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                      \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                           }", (long) 2549);
      long long0 = jSONObject0.optLong("{\n                                                                                                                      \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                      \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                      \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                           }");
      assertEquals(4, jSONObject0.length());
      assertEquals(2549L, long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Untercminated string", (-58512545));
      long long0 = jSONObject0.optLong("Untercminated string");
      assertEquals((-58512545L), long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("1", "1");
      JSONArray jSONArray0 = jSONObject1.optJSONArray("1");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("4mL>B QLFz)cdA,N", 23);
      int int0 = jSONObject0.optInt("4mL>B QLFz)cdA,N");
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",m&-.7[/rt7.GNWT*D ", (-1.0));
      int int0 = jSONObject0.optInt(",m&-.7[/rt7.GNWT*D ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.accumulate("JSONArray initial value should be a string or collection or array.", byte0);
      double double0 = jSONObject1.optDouble("JSONArray initial value should be a string or collection or array.");
      assertEquals(2, jSONObject0.length());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", (-2905L));
      double double0 = jSONObject1.optDouble("Bad value from toJSONString: ");
      assertEquals((-2905.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("1", "1");
      JSONArray jSONArray0 = (JSONArray)jSONObject0.opt("1");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("SEMtA&fQT2LM{O", "SEMtA&fQT2LM{O");
      boolean boolean0 = jSONObject1.has("SEMtA&fQT2LM{O");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("1444.54090151370", (Map) hashMap0);
      String string0 = jSONObject0.getString("1444.54090151370");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", byte0);
      jSONObject1.getLong("");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(58);
      jSONObject0.append("1", integer0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("1");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.putOpt("t", byte0);
      jSONObject0.getInt("t");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Float float0 = new Float((float) (-3542));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("null", float0);
      int int0 = jSONObject0.getInt("null");
      assertEquals((-3542), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", byte0);
      jSONObject1.getDouble("");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Untercminated string", (-58512545));
      double double0 = jSONObject0.getDouble("Untercminated string");
      assertEquals((-5.8512545E7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      String string0 = JSONObject.valueToString(hashMap0, (-2647), (-2093064));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 44, 0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.toString(100, 0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Integer integer0 = new Integer((-4093));
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.toString(0, 118);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-2484));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.remove("");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("java.lang.Float@00000000020", object0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", true);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gmAB0lJ ", (Map) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Short, String> hashMap0 = new HashMap<Short, String>();
      Short short0 = new Short((short)48);
      hashMap0.put(short0, "Untercminated string");
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("] is not a JSONObject.");
      assertNotSame(jSONObject1, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      jSONObject0.put("", (Map) hashMap0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("", (Collection) linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("\"] is not a JSONArray.\"", object0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(stringWriter0, stringArray0);
      Float float0 = new Float((-573.9562615141));
      JSONObject jSONObject1 = jSONObject0.put("", (Object) float0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.put("", (-1L));
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wv/j", (double) (short)48);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Long long0 = new Long((-6L));
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      try { 
        jSONObject0.put("", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString((String) null, "Unclosed comment");
      assertEquals("Unclosed comment", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("java.lang.Float@0000000002", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject("3sWFs/}pl=k^P", stringArray0);
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("{}", (long) (-1636));
      assertEquals((-1636L), long0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      long long0 = jSONObject0.optLong("", 3351L);
      assertEquals(1, jSONObject0.length());
      assertEquals(3351L, long0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.optJSONObject((String) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt(":", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt((String) null, 47);
      assertEquals(47, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("T>Z1|GG$KG0", (-563));
      assertEquals((-563), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("wai", 1463.846);
      assertEquals(1463.846, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble((String) null, (-791.15030753234));
      assertEquals((-791.15030753234), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+`u");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      boolean boolean1 = jSONObject0.optBoolean("");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.opt("\"\"");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("1444.54090151370");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1444.54090151370\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("0.00");
      JSONObject jSONObject0 = new JSONObject((Object) jSONTokener0);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("1", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+`u");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Short short0 = new Short((short)160);
      JSONObject jSONObject0 = new JSONObject(short0);
      try { 
        jSONObject0.put((String) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Double double0 = new Double(935.167587838);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(double0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("D+!(z>", 0L);
      String string0 = jSONObject1.toString(119, 1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-848), (-1170));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = JSONObject.quote("/'JUafLqC#iN");
      assertEquals("\"/'JUafLqC#iN\"", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "\\u";
      String string1 = JSONObject.quote(string0);
      assertEquals("\"\\\\u\"", string1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Double double0 = new Double(6.764715538372318);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = jSONObject0.toString(952, (-230));
      JSONObject.quote(string0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, float0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("java.lang.Short@0000000002.", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Short short0 = new Short((short)45);
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.put((String) null, (Object) jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.optString("", "");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.putOpt("", byte0);
      double double0 = jSONObject0.optDouble("", 0.0);
      assertEquals(2, jSONObject0.length());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+`u");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      double double0 = jSONObject0.optDouble("+`u", (double) 0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.opt("");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Untercminated string", (-58512545));
      HashMap<Short, String> hashMap0 = new HashMap<Short, String>();
      jSONObject1.put("val", (Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject((Object) "val");
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Double double0 = Double.valueOf(2556.271);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("95.00", "95.00");
      try { 
        jSONObject0.getLong("95.00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"95.00\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Long long0 = new Long(1);
      JSONObject jSONObject0 = new JSONObject(long0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("t", (Collection) linkedList0);
      try { 
        jSONObject1.getInt("t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"t\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Integer integer0 = new Integer(10);
      JSONObject jSONObject0 = new JSONObject(integer0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("[37KwYs`V&KV`$35pZ", object0);
      try { 
        jSONObject1.getDouble("[37KwYs`V&KV`$35pZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[37KwYs`V&KV`$35pZ\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("0", (-2790));
      try { 
        jSONObject1.getBoolean("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.accumulate("+`u", "+`u");
      jSONObject1.get("+`u");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      int int0 = jSONObject0.optInt("", (-10384350));
      assertEquals((-10384350), int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<JSONObject, JSONArray> hashMap0 = new HashMap<JSONObject, JSONArray>();
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      hashMap0.putIfAbsent(jSONObject0, jSONArray0);
      assertEquals(3, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.write(stringWriter0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<JSONObject, JSONArray> hashMap0 = new HashMap<JSONObject, JSONArray>();
      Double double0 = new Double(1.0);
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.put("5", (Map) hashMap0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Integer integer0 = new Integer((int) byte0);
      jSONObject0.toString((int) integer0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      Set<Map.Entry<Byte, Byte>> set0 = (Set<Map.Entry<Byte, Byte>>)hashMap0.entrySet();
      String string0 = JSONObject.valueToString(set0, 4, (-42833328));
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      String string0 = JSONObject.valueToString(hashMap0, 44, 44);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.append("DPe<^:2Px-:t,p`>m", jSONObject0);
      // Undeclared exception!
      jSONObject0.toString(128, 128);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Integer integer0 = new Integer((int) byte0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("", object0);
      jSONObject1.toString((int) integer0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 0, (byte)1);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<Short, String> hashMap0 = new HashMap<Short, String>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject.valueToString(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("Null pointer", "Null pointer");
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject1.put("] is not a JSONArray.", (Collection) linkedList0);
      String string0 = jSONObject0.toString(0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Long long0 = new Long(1);
      JSONObject jSONObject0 = new JSONObject(long0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("t", (Collection) linkedList0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Float float0 = new Float((double) (-58512545));
      jSONArray0.put((Object) float0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONObject("\u0005GJ+ J907O3i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\u0005GJ+ J907O3i\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = JSONObject.quote("L;t<qX&Y5O7</");
      assertEquals("\"L;t<qX&Y5O7<\\/\"", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = JSONObject.quote("\b");
      assertEquals("\"\\b\"", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+`u");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "+`u";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\u0005GJ+ J907O3i", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(" of ", true);
      boolean boolean0 = jSONObject1.getBoolean(" of ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.putOpt("", byte0);
      jSONObject0.optString("", "bQm+VLis");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Short, String> hashMap0 = new HashMap<Short, String>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("] is not a JSONObject.");
      assertEquals(0, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject0.put("issubstring", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("issubstring");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("9Zsw@5w~t4mnL/t9n", (double) 0L);
      double double0 = jSONObject0.optDouble("9Zsw@5w~t4mnL/t9n");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Double double0 = new Double(7.585696186760758);
      JSONObject jSONObject0 = new JSONObject(double0);
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("is", false);
      Float float0 = new Float(0.0);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Untercminated string", (-58512545));
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a JSONArray.", (Collection) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.putOpt("", byte0);
      jSONObject0.getLong("");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject1 = jSONObject0.put(".", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject(".");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Unterminated string", (-58512549));
      try { 
        jSONObject0.getJSONObject("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject1 = jSONObject0.put("HE5zcsco]UWUYD", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("HE5zcsco]UWUYD");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Double double0 = new Double(7.585696186760758);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("{\n                                                                                                                      \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                      \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                      \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                           }", (long) 2549);
      try { 
        jSONObject1.getJSONArray("{\n                                                                                                                      \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                      \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                      \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                           }");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n                                                                                                                      \\\"java.lang.String@0000000002\\\": java.lang.Boolean@0000000003,\\n                                                                                                                      \\\"java.lang.String@0000000004\\\": java.lang.Boolean@0000000005,\\n                                                                                                                      \\\"java.lang.String@0000000006\\\": \\\"java.lang.Class@0000000007\\\"\\n                                                           }\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      jSONObject0.put("Null pointer", (Object) double0);
      int int0 = jSONObject0.getInt("Null pointer");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+`u");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("+`u", (Object) "+`u");
      try { 
        jSONObject0.getBoolean("+`u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+`u\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", false);
      boolean boolean0 = jSONObject1.getBoolean("] is not a JSONObject.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = JSONObject.doubleToString(899.652518248);
      assertEquals("899.652518248", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-58512545));
      assertEquals("-5.8512545E7", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("java.lang.Long@00000000020", "java.lang.Long@00000000020");
      Float float0 = new Float((double) 97);
      try { 
        jSONObject0.append("java.lang.Long@00000000020", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.lang.Long@00000000020] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.append(" DTH`-*pK f av", (Object) null);
      jSONObject0.append(" DTH`-*pK f av", jSONObject0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte) (-114));
      jSONObject0.append("bH?~E0", byte0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("bH?~E0", object0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.accumulate(",\n", boolean0);
      boolean boolean1 = jSONObject0.optBoolean(",\n");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", byte0);
      jSONObject1.accumulate("", "");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "vas");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("Untercminated string", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{ze:t lPIJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 10 of {ze:t lPIJ
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\n                                                                  \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                  \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                  \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                           }");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertFalse(jSONTokener0.more());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{HOD9");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {HOD9
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("t", byte0);
      boolean boolean0 = jSONObject1.isNull("t");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Null pointer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Null pointer
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\"] is not a JSONArray.\"", 0.0);
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject0.getDouble("\"] is not a JSONArray.\"");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+`u");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
