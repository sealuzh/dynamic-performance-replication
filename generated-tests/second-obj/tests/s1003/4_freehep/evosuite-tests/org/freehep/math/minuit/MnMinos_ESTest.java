/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:54:02 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.FunctionMinimum;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MinimumSeed;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MnAlgebraicSymMatrix;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnApplication;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnMinos;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserTransformation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnMinos_ESTest extends MnMinos_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumState minimumState0 = new MinimumState(15);
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, (MnUserTransformation) null);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 59.37);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 15);
      // Undeclared exception!
      try { 
        mnMinos0.range(15, 59.37, 15);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      FunctionMinimum.MnReachedCallLimit functionMinimum_MnReachedCallLimit0 = new FunctionMinimum.MnReachedCallLimit();
      FunctionMinimum functionMinimum0 = new FunctionMinimum((MinimumSeed) null, linkedList0, 2353.27623104, functionMinimum_MnReachedCallLimit0);
      MnMinos mnMinos0 = new MnMinos((FCNBase) null, functionMinimum0);
      // Undeclared exception!
      try { 
        mnMinos0.upval(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumState minimumState0 = new MinimumState(15);
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, (MnUserTransformation) null);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 59.37);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      // Undeclared exception!
      try { 
        mnMinos0.upval(15, 691.509);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumState minimumState0 = new MinimumState(2126);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 10000.0);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 2126);
      // Undeclared exception!
      try { 
        mnMinos0.loval(2126, (double) 2126, 2126);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(353);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 353);
      mnAlgebraicVector0.clone();
      mnAlgebraicVector0.clone();
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 11.080245038371013, 1);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 11.080245038371013);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 353);
      // Undeclared exception!
      try { 
        mnMinos0.loval(2208);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2208, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnMinos mnMinos0 = new MnMinos(fCNBase0, (FunctionMinimum) null);
      // Undeclared exception!
      try { 
        mnMinos0.loval((-35));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(5);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 1.0E-35);
      mnAlgebraicVector0.toString();
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1.0E-35, 5);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnAlgebraicVector mnAlgebraicVector1 = minimumState0.vec();
      mnAlgebraicVector1.toString();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 1.0E-35);
      MinimumSeed minimumSeed1 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnAlgebraicVector0.clone();
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 0.00000 0.00000 0.00000 0.00000 \n", 1240.811295, (-1521.29), (-302.3), (-1521.29));
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      // Undeclared exception!
      try { 
        mnMinos0.lower(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 5;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(5);
      mnAlgebraicVector0.toString();
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 5);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 5, 5);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      mnUserTransformation0.add(">[|q7[Lu3gk", (-0.8149043463676229), 5, (-0.8149043463676229), 5);
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 5);
      mnUserTransformation0.clone();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      // Undeclared exception!
      try { 
        mnMinos0.upper(0, (double) 5, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 5;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(5);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 5);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 5, 5);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      mnAlgebraicVector0.toString();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 5);
      MnAlgebraicVector mnAlgebraicVector1 = new MnAlgebraicVector(5);
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 0.00000 0.00000 0.00000 0.00000 \n", 5, 5, 0.0, 5);
      functionMinimum0.userParameters();
      int int1 = 0;
      functionMinimum0.add(minimumState0);
      MnStrategy mnStrategy0 = new MnStrategy();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      // Undeclared exception!
      try { 
        mnMinos0.minos(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(356);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-2709.743195586));
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(356);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 0, (-1149));
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnUserTransformation0.add("!)l#}7TS'|rKbjXw\"l", (-1149));
      mnUserTransformation0.add("k ]kY\"rV9sI", 0.0, (-2709.743195586));
      MinimumSeed minimumSeed1 = new MinimumSeed(minimumState0, mnUserTransformation0);
      MinimumSeed minimumSeed2 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed1, 0.1);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      // Undeclared exception!
      try { 
        mnMinos0.minos(0, (double) 0, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(1);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 1);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1, 1);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnAlgebraicVector mnAlgebraicVector1 = new MnAlgebraicVector(1);
      MnAlgebraicVector mnAlgebraicVector2 = new MnAlgebraicVector(1);
      mnUserTransformation0.add("jN(u(<j\rK{N7cE", 0.0, (-355.5314193101649), 0.0, 1);
      mnAlgebraicVector1.toString();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 1);
      functionMinimum0.add(minimumState0);
      functionMinimum0.toString();
      MnAlgebraicVector mnAlgebraicVector3 = new MnAlgebraicVector(1);
      mnUserTransformation0.add("\n\nMinuit did successfully converge.\n\n# of function calls: 1\nminimum function value: 1.00000\nminimum edm: 1.00000\nminimum internal state vector: LAVector parameters:\n\n0.00000 \n\n\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 || jN(u(<j\rK{N7cE ||   free   ||   0.500000 || no\n\n\n\n\nMnUserCovariance: \n\n\nMnUserCovariance parameter correlations: \n\n\n\nMnGlobalCorrelationCoeff: \n\n\n\n", 1, 1, 1, (-355.5314193101649));
      mnAlgebraicVector0.clone();
      functionMinimum0.add(minimumState0);
      MnMinos mnMinos0 = new MnMinos((FCNBase) null, functionMinimum0, 1);
      // Undeclared exception!
      try { 
        mnMinos0.lower(0, (double) 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnFcn", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(22);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 22);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 22, 22);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      mnUserTransformation0.add("cq),RUa0]v6Vr9Ab-(", 22);
      mnAlgebraicVector0.toString();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnAlgebraicVector0.clone();
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 1.0);
      MnAlgebraicVector mnAlgebraicVector1 = new MnAlgebraicVector(22);
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 \n", 1347.805294, 0.0, (-23.894737472588307), (-1769.6746165597));
      functionMinimum0.userParameters();
      int int0 = 0;
      functionMinimum0.add(minimumState0);
      MnStrategy mnStrategy0 = new MnStrategy();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      MnApplication.DEFAULT_MAXFCN = 0;
      // Undeclared exception!
      try { 
        mnMinos0.lower(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(1);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 1);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1, 1);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      mnAlgebraicVector0.toString();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnAlgebraicVector0.clone();
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 1.0);
      MnAlgebraicVector mnAlgebraicVector1 = new MnAlgebraicVector(1);
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 \n", 1347.805294, 0.0, 1.0, (-1769.6746165597));
      functionMinimum0.userParameters();
      functionMinimum0.add(minimumState0);
      MnStrategy mnStrategy0 = new MnStrategy();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      MnCross mnCross0 = mnMinos0.upval(0, 10.0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(1);
      mnAlgebraicVector0.toString();
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 1);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1, 1);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      mnUserTransformation0.clone();
      mnAlgebraicVector0.toString();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      minimumState0.vec();
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 1.0);
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 \n", 1347.805294, 0.0, 1347.805294, (-1755.7544925187187));
      MnStrategy mnStrategy0 = new MnStrategy();
      functionMinimum0.userParameters();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (double)0, 1859.574958621, (-1755.7544925187187), (double)0).when(fCNBase0).valueOf(any(double[].class));
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      mnMinos0.lower(0);
      // Undeclared exception!
      try { 
        mnMinos0.range(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(1);
      mnAlgebraicVector0.toString();
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 1);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1, 1);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      mnUserTransformation0.clone();
      mnAlgebraicVector0.toString();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      minimumState0.vec();
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 1.0);
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 \n", 1347.805294, (-0.1401608137565914), 1347.805294, (-0.1401608137565914));
      MnStrategy mnStrategy0 = new MnStrategy();
      functionMinimum0.userParameters();
      functionMinimum0.userCovariance();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-0.1401608137565914), (double)1, 1859.574958621, (double)1, (double)0).when(fCNBase0).valueOf(any(double[].class));
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      mnMinos0.upper(0);
      // Undeclared exception!
      try { 
        mnMinos0.range(1135);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1135, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(1);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 1);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1, 1);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      mnAlgebraicVector0.toString();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnAlgebraicVector0.clone();
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 1);
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 \n", 1347.805294, 0.0, 1347.805294, (-1769.6746165597));
      functionMinimum0.userParameters();
      functionMinimum0.add(minimumState0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      mnMinos0.minos(0, 1347.805294, 0);
      mnMinos0.lower(0);
      functionMinimum0.userCovariance();
      // Undeclared exception!
      try { 
        mnMinos0.upval(113, 913.1312419287144);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 113, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
