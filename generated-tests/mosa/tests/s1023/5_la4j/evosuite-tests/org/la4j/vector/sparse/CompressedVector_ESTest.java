/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:46:02 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      CompressedVector compressedVector0 = CompressedVector.fromCSV("0.000");
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply((SparseVector) compressedVector0, (SparseVector) compressedVector0);
      assertEquals(1, vector0.length());
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      Vector vector0 = compressedVector0.blankOfLength(694);
      assertEquals(694, vector0.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(16, 16);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.toString();
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(32, (double) 32, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(4445, 649);
      compressedVector0.set(649, 649);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      compressedVector0.setAll(0);
      // Undeclared exception!
      try { 
        compressedVector0.set(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      boolean boolean0 = compressedVector0.nonZeroAt(2304);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.nonZeroIterator();
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 687;
      doubleArray0[1] = (double) 687;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(687);
      compressedVector0.setAll(687);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(32, vectorFunction0);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      compressedVector0.is(vectorPredicate0);
      compressedVector0.swapElements(965, 32);
      compressedVector0.swapElements(655, (-3051));
      boolean boolean0 = compressedVector0.nonZeroAt((-3051));
      assertEquals(686, compressedVector0.cardinality());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(660);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(660, compressedVector0.length());
      
      String string0 = compressedVector0.toCSV();
      assertNotNull(string0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(660, compressedVector0.length());
      
      compressedVector0.swapElements(660, 660);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(660, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("RjN6<Z;aH(Hd~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random((-1293), (double) (-1293), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(6, 6);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      
      compressedVector0.swapElements(6, 1);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(2, (-1715));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1715.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2);
      assertNotNull(compressedVector0);
      assertEquals(2, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      double double0 = compressedVector0.getOrElse(0, (-100));
      assertEquals((-100.0), double0, 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll((-1.0));
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-15);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(9);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(10, 10);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(10, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(10);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(10, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(10, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer((-1145));
      assertNotNull(integer0);
      assertEquals((-1145), (int)integer0);
      
      Integer integer1 = hashMap0.put(integer0, (Integer) null);
      assertNull(integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(308, 3);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(308, compressedVector0.length());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 308;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-831.748641181)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3613, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(308, compressedVector0.length());
      assertEquals(0.003246753246753247, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3613).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction1);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(308, compressedVector0.length());
      assertEquals(0.006493506493506494, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(308.0);
      assertEquals(308, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(308, compressedVector0.length());
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
      assertEquals(308, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(308, compressedVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.divide(1867.1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(308, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(308, compressedVector0.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(308, compressedVector1.cardinality());
      assertEquals(308, compressedVector1.length());
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.blankOfLength(3);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertEquals(308, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(308, compressedVector0.length());
      assertEquals(3, compressedVector2.length());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(6, 6);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(6);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-2779), 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(677, 677);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(677, compressedVector0.length());
      
      compressedVector0.setAll(677);
      assertEquals(677, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(677, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(670, vectorFunction0);
      assertEquals(676, compressedVector0.cardinality());
      assertEquals(677, compressedVector0.length());
      assertEquals(0.9985228951255539, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(7, 7);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(339.898);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = compressedVector0.fold(vectorAccumulator0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-176), vectorFunction0);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer(1377);
      assertNotNull(integer0);
      assertEquals(1377, (int)integer0);
      
      Float float0 = new Float((double) 1377);
      assertNotNull(float0);
      assertEquals(1377.0F, (float)float0, 0.01F);
      
      Float float1 = hashMap0.put(integer0, float0);
      assertNull(float1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(672);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(672, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(672);
      assertEquals(672, compressedVector0.cardinality());
      assertEquals(672, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(672, compressedVector0.cardinality());
      assertEquals(672, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(2, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(6, 6);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      
      compressedVector0.setAll(6);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(6, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(687);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(687, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(687);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(687, compressedVector0.length());
      assertEquals(687, compressedVector0.cardinality());
      
      compressedVector0.set(9, 9);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(687, compressedVector0.length());
      assertEquals(687, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(763, 763);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(763, compressedVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(5);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(763, compressedVector0.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(5, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(637, 655);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 655.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer(637);
      assertNotNull(integer0);
      assertEquals(637, (int)integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertNull(integer1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 651);
      assertNotNull(compressedVector0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(651, compressedVector0.length());
      assertEquals(0.0015360983102918587, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(687, 687);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(687, compressedVector0.length());
      
      compressedVector0.setAll(687);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(687, compressedVector0.cardinality());
      assertEquals(687, compressedVector0.length());
      
      double double0 = compressedVector0.getOrElse(681, 681);
      assertEquals(687.0, double0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(687, compressedVector0.cardinality());
      assertEquals(687, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(687);
      assertNotNull(compressedVector0);
      assertEquals(687, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(687);
      assertEquals(687, compressedVector0.length());
      assertEquals(687, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      compressedVector0.set(9, 0.0);
      assertEquals(687, compressedVector0.length());
      assertEquals(0.9985443959243085, compressedVector0.density(), 0.01);
      assertEquals(686, compressedVector0.cardinality());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(687, compressedVector0.length());
      assertEquals(0.9985443959243085, compressedVector0.density(), 0.01);
      assertEquals(686, compressedVector0.cardinality());
      
      double double0 = compressedVector0.getOrElse(9, (-667.898729234));
      assertEquals((-667.898729234), double0, 0.01);
      assertEquals(687, compressedVector0.length());
      assertEquals(0.9985443959243085, compressedVector0.density(), 0.01);
      assertEquals(686, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(672);
      assertNotNull(compressedVector0);
      assertEquals(672, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(672);
      assertEquals(672, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(672, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(3, 672);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(687, 687);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(687, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(687);
      assertEquals(687, compressedVector0.length());
      assertEquals(687, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      assertNotNull(ooPlaceVectorHadamardProduct0);
      
      CompressedVector compressedVector1 = (CompressedVector)ooPlaceVectorHadamardProduct0.apply((SparseVector) compressedVector0, (SparseVector) compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(687, compressedVector0.length());
      assertEquals(687, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(687, compressedVector1.cardinality());
      assertEquals(687, compressedVector1.length());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertNotNull(byteArray0);
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(687, compressedVector0.length());
      assertEquals(687, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(6);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(6);
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements(6, 3);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(8);
      assertNotNull(compressedVector0);
      assertEquals(8, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(6, 6);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(6);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      
      compressedVector0.swapElements(6, (-3763));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(687);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(687, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(687);
      assertEquals(687, compressedVector0.cardinality());
      assertEquals(687, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)687).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(32, vectorFunction0);
      assertEquals(687, compressedVector0.cardinality());
      assertEquals(687, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      assertNotNull(ooPlaceVectorHadamardProduct0);
      
      CompressedVector compressedVector1 = (CompressedVector)ooPlaceVectorHadamardProduct0.apply((SparseVector) compressedVector0, (SparseVector) compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(687, compressedVector0.cardinality());
      assertEquals(687, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(687, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(687, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(7, 6);
      assertNotNull(compressedVector0);
      assertEquals(7, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(37.66888826341);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)6).when(vectorAccumulator0).accumulate();
      double double0 = compressedVector0.fold(vectorAccumulator0);
      assertEquals(6.0, double0, 0.01);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector1.length());
      assertEquals(7, compressedVector1.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(687, 687);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(687, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(687);
      assertEquals(687, compressedVector0.cardinality());
      assertEquals(687, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      double double0 = compressedVector0.max();
      assertEquals(687.0, double0, 0.01);
      assertEquals(687, compressedVector0.cardinality());
      assertEquals(687, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      compressedVector0.set(0, 0);
      assertEquals(687, compressedVector0.length());
      assertEquals(686, compressedVector0.cardinality());
      assertEquals(0.9985443959243085, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(672);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(672, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(672);
      assertEquals(672, compressedVector0.cardinality());
      assertEquals(672, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(9, (-3109));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(687);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(687, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(687);
      assertEquals(687, compressedVector0.cardinality());
      assertEquals(687, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt((-1320));
      assertFalse(boolean0);
      assertEquals(687, compressedVector0.cardinality());
      assertEquals(687, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(52, 52);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(52, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(52);
      assertEquals(52, compressedVector0.length());
      assertEquals(52, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt(2);
      assertTrue(boolean0);
      assertEquals(52, compressedVector0.length());
      assertEquals(52, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(647);
      assertNotNull(compressedVector0);
      assertEquals(647, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(647, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      assertNotNull(ooPlaceVectorHadamardProduct0);
      
      CompressedVector compressedVector1 = CompressedVector.zero(647);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(647, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(672);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(672, compressedVector0.length());
      
      compressedVector0.setAll(672);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(672, compressedVector0.cardinality());
      assertEquals(672, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-2375), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertNotNull(sparseVector0);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertSame(compressedVector0, sparseVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(6);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      
      compressedVector0.setAll(6);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)6, (double)6, (double)6, (double)6, 100.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      
      compressedVector0.swapElements(6, 6);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(6, 6);
      assertNotNull(compressedVector0);
      assertEquals(6, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(6);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements(3, 4);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      int[] intArray0 = new int[1];
      intArray0[0] = 6;
      CompressedVector compressedVector0 = new CompressedVector(6, 6, doubleArray0, intArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {6.0, 6.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {6}, intArray0);
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertArrayEquals(new double[] {6.0, 6.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {6}, intArray0);
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(694);
      assertNotNull(compressedVector0);
      assertEquals(694, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(694);
      assertEquals(694, compressedVector0.length());
      assertEquals(694, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, (-2042));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      assertNotNull(ooPlaceVectorHadamardProduct0);
      
      CompressedVector compressedVector0 = new CompressedVector(6, 6);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)6).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction0);
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.swapElements(3, 6);
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(685);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(685, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(685);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(685, compressedVector0.length());
      assertEquals(685, compressedVector0.cardinality());
      
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      assertNotNull(ooPlaceVectorHadamardProduct0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(663, vectorFunction0);
      assertEquals(0.9985401459854014, compressedVector0.density(), 0.01);
      assertEquals(685, compressedVector0.length());
      assertEquals(684, compressedVector0.cardinality());
      
      compressedVector0.swapElements(685, 337);
      assertEquals(0.9985401459854014, compressedVector0.density(), 0.01);
      assertEquals(685, compressedVector0.length());
      assertEquals(684, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(685);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(685, compressedVector0.length());
      
      compressedVector0.setAll(685);
      assertEquals(685, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(685, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(32, vectorFunction0);
      assertEquals(684, compressedVector0.cardinality());
      assertEquals(0.9985401459854014, compressedVector0.density(), 0.01);
      assertEquals(685, compressedVector0.length());
      
      compressedVector0.swapElements(32, 137);
      assertEquals(684, compressedVector0.cardinality());
      assertEquals(0.9985401459854014, compressedVector0.density(), 0.01);
      assertEquals(685, compressedVector0.length());
      
      int int0 = (-3051);
      MockRandom mockRandom0 = new MockRandom(137);
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector1 = new CompressedVector();
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      
      // Undeclared exception!
      try { 
        compressedVector1.swapElements(655, 685);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(687);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(687, compressedVector0.length());
      
      compressedVector0.setAll(687);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(687, compressedVector0.cardinality());
      assertEquals(687, compressedVector0.length());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
      assertNotNull(decimalFormat0);
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      
      DecimalFormat decimalFormat1 = (DecimalFormat)NumberFormat.getInstance();
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertNotNull(decimalFormat1);
      assertNotSame(decimalFormat1, decimalFormat0);
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals("", decimalFormat1.getPositivePrefix());
      
      String string0 = compressedVector0.toMatrixMarket((NumberFormat) decimalFormat0);
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertNotNull(string0);
      assertNotSame(decimalFormat0, decimalFormat1);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(687, compressedVector0.cardinality());
      assertEquals(687, compressedVector0.length());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(32, vectorFunction0);
      assertEquals(686, compressedVector0.cardinality());
      assertEquals(0.9985443959243085, compressedVector0.density(), 0.01);
      assertEquals(687, compressedVector0.length());
      
      compressedVector0.swapElements(965, 32);
      assertEquals(686, compressedVector0.cardinality());
      assertEquals(0.9985443959243085, compressedVector0.density(), 0.01);
      assertEquals(687, compressedVector0.length());
      
      BasicVector basicVector0 = (BasicVector)compressedVector0.toDenseVector();
      assertNotNull(basicVector0);
      assertEquals(686, compressedVector0.cardinality());
      assertEquals(0.9985443959243085, compressedVector0.density(), 0.01);
      assertEquals(687, compressedVector0.length());
      assertEquals(687, basicVector0.length());
      
      compressedVector0.swapElements(655, (-3051));
      assertEquals(686, compressedVector0.cardinality());
      assertEquals(0.9985443959243085, compressedVector0.density(), 0.01);
      assertEquals(687, compressedVector0.length());
      
      boolean boolean0 = compressedVector0.nonZeroAt((-3051));
      assertTrue(boolean0);
      assertEquals(686, compressedVector0.cardinality());
      assertEquals(0.9985443959243085, compressedVector0.density(), 0.01);
      assertEquals(687, compressedVector0.length());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      compressedVector0.set(654, (-2717.6));
      assertEquals(686, compressedVector0.cardinality());
      assertEquals(0.9985443959243085, compressedVector0.density(), 0.01);
      assertEquals(687, compressedVector0.length());
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.set(655, (-3051));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(687, compressedVector0.cardinality());
      assertEquals(687, compressedVector0.length());
  }
}
