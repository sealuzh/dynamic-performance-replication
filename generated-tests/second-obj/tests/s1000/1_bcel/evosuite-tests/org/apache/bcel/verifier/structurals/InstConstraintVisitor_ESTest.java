/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:30:30 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.ATHROW;
import org.apache.bcel.generic.BALOAD;
import org.apache.bcel.generic.BASTORE;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BREAKPOINT;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CALOAD;
import org.apache.bcel.generic.CASTORE;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.D2I;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DALOAD;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DREM;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.DUP2_X1;
import org.apache.bcel.generic.DUP2_X2;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.DUP_X2;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.F2L;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FALOAD;
import org.apache.bcel.generic.FASTORE;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.FRETURN;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2B;
import org.apache.bcel.generic.I2C;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.I2F;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IALOAD;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.IASTORE;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGE;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMPDEP1;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.INVOKEINTERFACE;
import org.apache.bcel.generic.INVOKESTATIC;
import org.apache.bcel.generic.INVOKEVIRTUAL;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.IRETURN;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.ISHR;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.InstructionListObserver;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2D;
import org.apache.bcel.generic.L2F;
import org.apache.bcel.generic.L2I;
import org.apache.bcel.generic.LADD;
import org.apache.bcel.generic.LALOAD;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LASTORE;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.LDC_W;
import org.apache.bcel.generic.LDIV;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.LOR;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.MONITORENTER;
import org.apache.bcel.generic.MONITOREXIT;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.POP;
import org.apache.bcel.generic.POP2;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.PUTFIELD;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.RETURN;
import org.apache.bcel.generic.SASTORE;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.SWAP;
import org.apache.bcel.generic.StackInstruction;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstConstraintVisitor_ESTest extends InstConstraintVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      CALOAD cALOAD0 = new CALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCALOAD(cALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(4191);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCPInstruction(iNVOKEDYNAMIC0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackInstruction((StackInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP2(iMPDEP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP2.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GOTO_W gOTO_W0 = new GOTO_W((InstructionHandle) null);
      instConstraintVisitor0.visitGOTO_W(gOTO_W0);
      FADD fADD0 = new FADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFADD(fADD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ALOAD aLOAD0 = new ALOAD(198);
      instConstraintVisitor0.visitALOAD(aLOAD0);
      assertEquals(2, aLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBREAKPOINT(bREAKPOINT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitNOP((NOP) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L0QYx\"q.kIP");
      SIPUSH sIPUSH0 = new SIPUSH((short) (-1));
      ICONST iCONST0 = new ICONST((short) (-1));
      instConstraintVisitor0.visitICONST(iCONST0);
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      assertEquals((short)17, sIPUSH0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(1026, 1026);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEINTERFACE(iNVOKEINTERFACE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(1859);
      instConstraintVisitor0.visitGETSTATIC(gETSTATIC0);
      assertEquals(1859, gETSTATIC0.getIndex());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitDLOAD((DLOAD) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BIPUSH bIPUSH0 = new BIPUSH((byte)62);
      instConstraintVisitor0.visitBIPUSH(bIPUSH0);
      assertEquals("bipush", bIPUSH0.getName());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitDCONST((DCONST) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = new INVOKEVIRTUAL(0);
      instConstraintVisitor0.visitInvokeInstruction(iNVOKEVIRTUAL0);
      assertEquals(3, iNVOKEVIRTUAL0.getLength());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(709);
      GOTO gOTO0 = new GOTO((InstructionHandle) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitGOTO(gOTO0);
      FRETURN fRETURN0 = new FRETURN();
      L2D l2D0 = new L2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2D(l2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP1(iMPDEP1_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP1.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FSTORE fSTORE0 = new FSTORE(818);
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      assertEquals(4, fSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LLOAD lLOAD0 = new LLOAD(0);
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      assertEquals(1, lLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LCONST lCONST0 = new LCONST(0L);
      lCONST0.toString(true);
      instConstraintVisitor0.visitLCONST(lCONST0);
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList((CompoundInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(64);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEDYNAMIC(iNVOKEDYNAMIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INVOKEDYNAMIC instruction is not supported at this time
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      assertEquals("aconst_null", aCONST_NULL0.getName());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISTORE iSTORE0 = new ISTORE(1);
      instConstraintVisitor0.visitISTORE(iSTORE0);
      assertEquals(1, iSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ('");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LCMP lCMP0 = new LCMP();
      lCMP0.toString();
      lCMP0.copy();
      instConstraintVisitor0.setMethodGen((MethodGen) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLCMP(lCMP0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitJSR_W((JSR_W) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LASTORE lASTORE0 = new LASTORE();
      FCONST fCONST0 = new FCONST(0.0F);
      instConstraintVisitor0.visitFCONST(fCONST0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLASTORE(lASTORE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSUB(lSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSUB constraint violated: The value at the stack top is not of type 'long', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(57);
      ObjectType objectType0 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(57, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2S((I2S) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      ObjectType.getInstance("y?");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DALOAD dALOAD0 = new DALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDALOAD(dALOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DALOAD constraint violated: The 'index' is not of type int but of type SimpleElementValue class does not know how to stringify type .
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(376);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack0 = new OperandStack(376, objectType0);
      OperandStack operandStack1 = new OperandStack(376, objectType0);
      operandStack1.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      operandStack0.toString();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor1.setFrame(frame0);
      SWAP sWAP0 = new SWAP();
      FREM fREM0 = new FREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor1.visitFREM(fREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FREM constraint violated: The value at the stack top is not of type 'float', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(401);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(401, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      DMUL dMUL0 = new DMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDMUL(dMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DMUL constraint violated: The value at the stack top is not of type 'double', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(414);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(414, objectType0);
      ObjectType.getInstance("y?");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDIV(lDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDIV constraint violated: The value at the stack top is not of type 'long', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(203, 61);
      ObjectType objectType0 = ObjectType.getInstance(" stack slots: only ");
      OperandStack operandStack0 = new OperandStack(61, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSASTORE((SASTORE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(414);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(414, objectType0);
      ObjectType objectType1 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.equals(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFASTORE((FASTORE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SIPUSH sIPUSH0 = new SIPUSH((short) (-4516));
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      D2F d2F0 = new D2F();
      byte[] byteArray0 = new byte[4];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      instructionList0.copy();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      PUTFIELD pUTFIELD0 = new PUTFIELD((byte)0);
      InstConstraintVisitor instConstraintVisitor2 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor2.visitTABLESWITCH((TABLESWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(366);
      ObjectType objectType0 = new ObjectType("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(366, objectType0);
      OperandStack operandStack1 = new OperandStack(366, objectType0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.clone();
      localVariables1.getClone();
      I2C i2C0 = new I2C();
      IALOAD iALOAD0 = new IALOAD();
      INEG iNEG0 = new INEG();
      iNEG0.toString((ConstantPool) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINEG(iNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction INEG constraint violated: The value at the stack top is not of type 'int', but of type 'SimpleElemeXtValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = ObjectType.getInstance("1Oo");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      ObjectType objectType1 = new ObjectType("1Oo");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      BASTORE bASTORE0 = new BASTORE();
      frame0.equals(bASTORE0);
      instConstraintVisitor0.setFrame(frame0);
      frame0.clone();
      LRETURN lRETURN0 = new LRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLRETURN(lRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LRETURN constraint violated: The value at the stack top is not of type 'long', but of type '1Oo'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ISHR iSHR0 = new ISHR();
      ISHR iSHR1 = new ISHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHR(iSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHR constraint violated: The value at the stack top is not of type 'int', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      ObjectType.getInstance("");
      LocalVariables localVariables1 = new LocalVariables(223);
      localVariables0.getClone();
      localVariables1.clone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DALOAD dALOAD0 = new DALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLE((IF_ICMPLE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(414);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(414, objectType0);
      ObjectType.getInstance("y?");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.equals(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      LRETURN lRETURN0 = new LRETURN();
      LLOAD lLOAD0 = new LLOAD(348);
      LREM lREM0 = new LREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLREM(lREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LREM constraint violated: The value at the stack top is not of type 'long', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(416);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(416, objectType0);
      ObjectType objectType1 = new ObjectType("3itack slots: only ");
      OperandStack operandStack1 = new OperandStack(416, objectType1);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGE((IF_ICMPGE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(414);
      ObjectType objectType0 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(414, objectType0);
      ObjectType objectType1 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.equals(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)65;
      byteArray0[6] = (byte)65;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGE((IFGE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(414);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(414, objectType0);
      ObjectType.getInstance("y?");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.equals(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      ISHR iSHR0 = new ISHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D((I2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = ObjectType.getInstance("=~1c<w M=");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      F2L f2L0 = new F2L();
      int int0 = Character.BYTES;
      LSHR lSHR0 = new LSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHR(lSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L=~1c<w M=;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 203;
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(203, 203);
      ObjectType objectType0 = new ObjectType("3itack slots: only ");
      OperandStack operandStack0 = new OperandStack(203, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      F2L f2L0 = new F2L();
      I2L i2L0 = new I2L();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3itack slots: only ");
      ATHROW aTHROW0 = new ATHROW();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW(aTHROW0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Missing class: java.lang.ClassNotFoundException: Exception while looking for class 3itack slots: only : org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: 3itack slots: only .class
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      int int0 = 414;
      LocalVariables localVariables0 = new LocalVariables(414);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(414, objectType0);
      ObjectType.getInstance("y?");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.equals(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      DUP dUP0 = new DUP();
      instConstraintVisitor0.visitDUP(dUP0);
      LMUL lMUL0 = new LMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackProducer(lSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSUB constraint violated: Cannot consume 4 stack slots: only 1 slot(s) left on stack!
         // Stack:
         // Slots used: 1 MaxStack: 414.
         // SimpleElementValue class does not know how to stringify type  (Size: 1)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(414);
      localVariables0.merge(localVariables0);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(414, objectType0);
      ObjectType.getInstance("y?");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.equals(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      DNEG dNEG0 = new DNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDNEG(dNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DNEG constraint violated: The value at the stack top is not of type 'double', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(376);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(376, objectType0);
      ObjectType.getInstance("y?");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      LocalVariables localVariables1 = new LocalVariables(376);
      localVariables1.getClone();
      OperandStack operandStack1 = new OperandStack(376);
      IOR iOR0 = new IOR();
      operandStack1.equals(iOR0);
      Frame frame1 = new Frame(localVariables1, operandStack1);
      frame0.toString();
      ICONST iCONST0 = new ICONST(2);
      instConstraintVisitor0.setFrame(frame0);
      F2L f2L0 = new F2L();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      I2C i2C0 = new I2C();
      F2D f2D0 = new F2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2D(f2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2D constraint violated: The value at the stack top is not of type 'float', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(414);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(414, objectType0);
      ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.toString();
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      LRETURN lRETURN0 = new LRETURN();
      LLOAD lLOAD0 = new LLOAD(348);
      D2I d2I0 = new D2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2I(d2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2I constraint violated: The value at the stack top is not of type 'double', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(414);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(414, objectType0);
      ObjectType.getInstance("y?");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.equals(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      MockURI.create("");
      IMUL iMUL0 = new IMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMUL(iMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IMUL constraint violated: The value at the stack top is not of type 'int', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BasicType basicType0 = Type.BOOLEAN;
      OperandStack operandStack0 = new OperandStack(27, basicType0.STRINGBUFFER);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack1.getClone();
      LocalVariables localVariables0 = new LocalVariables(27);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      POP pOP0 = new POP();
      POP pOP1 = new POP();
      instConstraintVisitor0.visitPOP(pOP1);
      NEWARRAY nEWARRAY0 = new NEWARRAY(((Type) ((org.apache.bcel.generic.Type) basicType0).CLASS).LONG);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEWARRAY(nEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction NEWARRAY constraint violated: The value at the stack top is not of type 'int', but of type 'java.lang.StringBuffer'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(414);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(414, objectType0);
      operandStack0.clone();
      ObjectType.getInstance("y?");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      frame0.equals(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)65;
      MockURI.create("");
      LRETURN lRETURN0 = new LRETURN();
      FSUB fSUB0 = new FSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFSUB(fSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSUB constraint violated: The value at the stack top is not of type 'float', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(401);
      String string0 = "SimpleElementValue class does not know how to stringify type ";
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(401, objectType0);
      ObjectType objectType1 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      DMUL dMUL0 = new DMUL();
      MockFile mockFile0 = new MockFile("SimpleElementValue class does not know how to stringify type ");
      MockFile mockFile1 = new MockFile(mockFile0, "SimpleElementValue class does not know how to stringify type ");
      ASTORE aSTORE0 = new ASTORE(401);
      LMUL lMUL0 = new LMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLMUL(lMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LMUL constraint violated: The value at the stack top is not of type 'long', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      ObjectType objectType1 = ObjectType.getInstance("y?");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Type.getMethodSignature(objectType1, objectType1.NO_ARGS);
      AALOAD aALOAD0 = new AALOAD();
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPNE(iF_ICMPNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPNE constraint violated: The value at the stack top is not of type 'int', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(401);
      ObjectType objectType0 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(401, objectType0);
      ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      LLOAD lLOAD0 = new LLOAD(401);
      instConstraintVisitor0.visitFLOAD((FLOAD) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM((DREM) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 203;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(203, 203);
      ObjectType objectType0 = new ObjectType("3itack slots: only ");
      OperandStack operandStack0 = new OperandStack(203, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      DNEG dNEG0 = new DNEG();
      frame0.equals(dNEG0);
      instConstraintVisitor0.setFrame(frame0);
      F2L f2L0 = new F2L();
      I2L i2L0 = new I2L();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3itack slots: only ");
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X1(dUP2_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(2);
      ObjectType objectType0 = ObjectType.getInstance("s.-8");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      SWAP sWAP0 = new SWAP();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/' but of type '");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      L2D l2D0 = new L2D();
      MockPrintStream mockPrintStream0 = new MockPrintStream("s.-8");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2D(l2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2D constraint violated: The value at the stack top is not of type 'long', but of type 's.-8'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      ObjectType objectType1 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      instConstraintVisitor0.setFrame(frame0);
      frame0.clone();
      AALOAD aALOAD0 = new AALOAD();
      F2L f2L0 = new F2L();
      D2I d2I0 = new D2I();
      F2L f2L1 = new F2L();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2L(f2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2L constraint violated: The value at the stack top is not of type 'float', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(2);
      localVariables0.clone();
      ObjectType objectType0 = new ObjectType("s.-8");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      SWAP sWAP0 = new SWAP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-1624.004385));
      InstructionList instructionList0 = new InstructionList(pUSH0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InstructionList instructionList1 = instructionList0.copy();
      InstructionHandle instructionHandle0 = instructionList1.append((Instruction) lSUB0);
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLT(iF_ICMPLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPLT constraint violated: The value at the stack top is not of type 'int', but of type 's.-8'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(414);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(414, objectType0);
      ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      LRETURN lRETURN0 = new LRETURN();
      LLOAD lLOAD0 = new LLOAD(348);
      LREM lREM0 = new LREM();
      LSTORE lSTORE0 = new LSTORE(348);
      instConstraintVisitor0.visitLSTORE(lSTORE0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      D2L d2L0 = new D2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2L(d2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2L constraint violated: The value at the stack top is not of type 'double', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      ObjectType objectType1 = new ObjectType("y?");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      frame0.equals(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE((InstructionHandle) null);
      iF_ICMPNE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPNE0);
      LALOAD lALOAD0 = new LALOAD();
      LALOAD lALOAD1 = new LALOAD();
      F2L f2L0 = new F2L();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FRETURN fRETURN0 = new FRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFRETURN(fRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FRETURN constraint violated: The value at the stack top is not of type 'float', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(376);
      ObjectType objectType0 = ObjectType.getInstance("Method to invoke must not be '<clinit>'.");
      OperandStack operandStack0 = new OperandStack(376, objectType0);
      ObjectType objectType1 = new ObjectType("y?");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Boolean boolean0 = new Boolean("eZ~f$wSdqu}GuL1SEW");
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      frame0.equals(iMPDEP1_0);
      instConstraintVisitor0.setFrame(frame0);
      LSHL lSHL0 = new LSHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHL(lSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `clinit>'/;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(462);
      ObjectType objectType0 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(462, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      LocalVariables localVariables1 = new LocalVariables(237);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      instConstraintVisitor0.setFrame(frame0);
      F2L f2L0 = new F2L();
      I2L i2L0 = new I2L();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SimpleElementValue class does not know how to stringify type ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType1 = new ObjectType("()LSimpleElementValue class does not know how to stringify type ;");
      GETFIELD gETFIELD0 = new GETFIELD(934);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitGETFIELD(gETFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(423);
      localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(423, objectType0);
      ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame1 = new Frame(localVariables1, operandStack0);
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      I2C i2C0 = new I2C();
      LNEG lNEG0 = new LNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLNEG(lNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LNEG constraint violated: The value at the stack top is not of type 'long', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 366;
      LocalVariables localVariables0 = new LocalVariables(366);
      ObjectType objectType0 = new ObjectType("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(366, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = new OperandStack(366);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      instConstraintVisitor0.setFrame(frame0);
      IFGE iFGE0 = new IFGE((InstructionHandle) null);
      iFGE0.negate();
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, 366);
      IFNONNULL iFNONNULL0 = new IFNONNULL((InstructionHandle) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SimpleElemeXtValue class does not know how to stringify type ");
      instConstraintVisitor0.visitIFNONNULL(iFNONNULL0);
      LLOAD lLOAD0 = new LLOAD(3476);
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      IXOR iXOR0 = new IXOR();
      IREM iREM0 = new IREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIREM(iREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IREM constraint violated: The value at the stack top is not of type 'int', but of type 'SimpleElemeXtValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(414);
      Frame frame0 = new Frame(414, 414);
      instConstraintVisitor0.setFrame(frame0);
      DLOAD dLOAD0 = new DLOAD(9);
      instConstraintVisitor0.visitLocalVariableInstruction(dLOAD0);
      LDC_W lDC_W0 = new LDC_W(2401);
      int int0 = 2054;
      LDC_W lDC_W1 = new LDC_W(2054);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDC_W(lDC_W1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(393);
      ObjectType objectType0 = ObjectType.getInstance(".");
      LocalVariables localVariables1 = new LocalVariables(393);
      localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString(".");
      LRETURN lRETURN0 = new LRETURN();
      LXOR lXOR0 = new LXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLXOR(lXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LXOR constraint violated: The value at the stack top is not of type 'long', but of type '.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(389);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(389, objectType0);
      ObjectType.getInstance("_");
      LocalVariables localVariables1 = new LocalVariables(389);
      localVariables1.getClone();
      localVariables0.toString();
      localVariables1.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DALOAD dALOAD0 = new DALOAD();
      instConstraintVisitor0.visitARETURN((ARETURN) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      F2L f2L0 = new F2L();
      I2L i2L0 = new I2L();
      IFGE iFGE0 = new IFGE((InstructionHandle) null);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFGE0);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      IFNULL iFNULL0 = new IFNULL(instructionHandle0);
      iFNULL0.toString();
      instConstraintVisitor0.visitIFNULL(iFNULL0);
      LSTORE lSTORE0 = new LSTORE(386);
      LSTORE lSTORE1 = new LSTORE(219);
      LSTORE lSTORE2 = null;
      try {
        lSTORE2 = new LSTORE((-1474));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: -1474
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(376);
      ObjectType objectType0 = new ObjectType("l<z0p8Vp@");
      localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(376, objectType0);
      ObjectType objectType1 = new ObjectType("5jX8");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      localVariables1.getClone();
      LocalVariables localVariables2 = localVariables1.getClone();
      Frame frame1 = new Frame(localVariables2, operandStack0);
      OperandStack operandStack1 = new OperandStack(1, objectType0);
      operandStack1.merge(operandStack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DCMPL dCMPL0 = new DCMPL();
      instConstraintVisitor0.setFrame(frame1);
      IXOR iXOR0 = new IXOR();
      MockPrintStream mockPrintStream0 = new MockPrintStream("f6x;{93M*=RP");
      IFNE iFNE0 = new IFNE((InstructionHandle) null);
      iFNE0.negate();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFNE(iFNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Ll<z0p8Vp@;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(414);
      localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(414, objectType0);
      ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      LRETURN lRETURN0 = new LRETURN();
      ISUB iSUB0 = new ISUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISUB(iSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISUB constraint violated: The value at the stack top is not of type 'int', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(414);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(414, objectType0);
      ObjectType.getInstance("y?");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.equals(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      MockURI.create("");
      LRETURN lRETURN0 = new LRETURN();
      IMUL iMUL0 = new IMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOR((LOR) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      localVariables0.getClone();
      ObjectType objectType1 = new ObjectType("y?");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      frame0.equals(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE((InstructionHandle) null);
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ((InstructionHandle) null);
      iF_ACMPEQ0.setTarget((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPEQ(iF_ACMPEQ0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(0);
      ObjectType objectType0 = ObjectType.getInstance("=n%DI\"Y&QBC_0R");
      OperandStack operandStack0 = new OperandStack(603, objectType0);
      ObjectType objectType1 = new ObjectType("java.lang.Long");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RETURN rETURN0 = new RETURN();
      frame0.equals(rETURN0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lconst_1");
      instConstraintVisitor0.setFrame(frame0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      D2F d2F0 = new D2F();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      d2F0.getType(constantPoolGen0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2F(d2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2F constraint violated: The value at the stack top is not of type 'double', but of type '=n%DI\"Y&QBC_0R'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      ObjectType objectType1 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      frame0.equals(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      IREM iREM0 = new IREM();
      frame0.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FADD fADD0 = new FADD();
      FADD fADD1 = new FADD();
      I2B i2B0 = new I2B();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2B(i2B0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2B constraint violated: The value at the stack top is not of type 'int', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = new ObjectType("SimpleElemXtValue class does not know how to stringify type ");
      ObjectType.getInstance("SimpleElemXtValue class does not know how to stringify type ");
      localVariables0.toString();
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      ObjectType objectType1 = new ObjectType("y?");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LXOR lXOR0 = new LXOR();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables1.getClone();
      Frame frame1 = new Frame(localVariables2, operandStack0);
      INVOKEINTERFACE iNVOKEINTERFACE0 = null;
      DCMPL dCMPL0 = new DCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPL(dCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPL constraint violated: The value at the stack top is not of type 'double', but of type 'SimpleElemXtValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 203;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cVkc<%R|>f:n<y:(");
      ObjectType objectType0 = new ObjectType("3itack slots: only ");
      OperandStack operandStack0 = new OperandStack(203, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      operandStack0.getClone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      F2L f2L0 = new F2L();
      I2L i2L0 = new I2L();
      LSTORE lSTORE0 = new LSTORE(203);
      LSTORE lSTORE1 = new LSTORE(203);
      LSTORE lSTORE2 = new LSTORE(203);
      DCMPG dCMPG0 = new DCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPG(dCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPG constraint violated: The value at the stack top is not of type 'double', but of type '3itack slots: only '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      frame0.equals(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      frame0.clone();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DADD dADD0 = new DADD();
      dADD0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDADD(dADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DADD constraint violated: The value at the stack top is not of type 'double', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(366);
      ObjectType objectType0 = new ObjectType("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(366, objectType0);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      boolean boolean0 = new Boolean("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack1 = new OperandStack(366);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      IFGE iFGE0 = new IFGE((InstructionHandle) null);
      iFGE0.setTarget((InstructionHandle) null);
      L2F l2F0 = new L2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F(l2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2F constraint violated: The value at the stack top is not of type 'long', but of type 'SimpleElemeXtValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(414);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(414, objectType0);
      ObjectType objectType1 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      Frame frame0 = new Frame(414, 414);
      frame0.equals(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      DLOAD dLOAD0 = new DLOAD(414);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLocalVariableInstruction(dLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DLOAD constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IXOR iXOR0 = new IXOR();
      LocalVariables localVariables0 = new LocalVariables(366);
      ObjectType objectType0 = new ObjectType("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(366, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = new OperandStack(366, objectType0);
      instConstraintVisitor0.setFrame(frame0);
      localVariables0.getClone();
      DDIV dDIV0 = new DDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV(dDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DDIV constraint violated: The value at the stack top is not of type 'double', but of type 'SimpleElemeXtValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = new ObjectType("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      ObjectType.getInstance("SimpleElemeXtValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = new OperandStack(386);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack2 = operandStack1.getClone();
      Frame frame1 = new Frame(localVariables0, operandStack2);
      F2L f2L0 = new F2L();
      instConstraintVisitor0.setFrame(frame0);
      LALOAD lALOAD0 = new LALOAD();
      DUP dUP0 = new DUP();
      instConstraintVisitor0.visitDUP(dUP0);
      IASTORE iASTORE0 = new IASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIASTORE(iASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IASTORE constraint violated: The value at the stack top is not of type 'int', but of type 'SimpleElemeXtValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(414);
      localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(414, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      I2C i2C0 = new I2C();
      // Undeclared exception!
      try { 
        i2C0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2C constraint violated: The value at the stack top is not of type 'int', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      ObjectType objectType1 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      frame0.equals(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      frame0.clone();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      IREM iREM0 = new IREM();
      operandStack0.equals(iREM0);
      frame0.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      FADD fADD0 = new FADD();
      FADD fADD1 = new FADD();
      DMUL dMUL0 = new DMUL();
      F2L f2L0 = new F2L();
      DMUL dMUL1 = new DMUL();
      FNEG fNEG0 = new FNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIADD((IADD) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(401);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(401, objectType0);
      ObjectType objectType1 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack1.getClone();
      Frame frame0 = new Frame(401, 401);
      instConstraintVisitor0.setFrame(frame0);
      SWAP sWAP0 = new SWAP();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DNEG dNEG0 = new DNEG();
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = new INVOKEVIRTUAL(401);
      D2L d2L0 = new D2L();
      D2L d2L1 = new D2L();
      ISTORE iSTORE0 = new ISTORE(401);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(iSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISTORE constraint violated: Cannot STORE: Stack to read from is empty.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(414);
      FileSystemHandling.shouldAllThrowIOExceptions();
      localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(414, objectType0);
      ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      I2C i2C0 = new I2C();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG((FNEG) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(401);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(401, objectType0);
      ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack1 = operandStack0.getClone();
      OperandStack operandStack2 = operandStack1.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack2);
      instConstraintVisitor0.setFrame(frame0);
      SWAP sWAP0 = new SWAP();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      DNEG dNEG0 = new DNEG();
      DSTORE dSTORE0 = new DSTORE(401);
      instConstraintVisitor0.visitDSTORE(dSTORE0);
      ISTORE iSTORE0 = new ISTORE(401);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(iSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISTORE constraint violated: Stack top type and STOREing Instruction type mismatch: Stack top: 'SimpleElementValue class does not know how to stringify type '; Instruction type: 'int'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(393);
      ObjectType objectType0 = ObjectType.getInstance(".");
      LocalVariables localVariables1 = new LocalVariables(393);
      localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE((InstructionHandle) null);
      IfInstruction ifInstruction0 = iF_ICMPNE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      F2L f2L0 = new F2L();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      LDC2_W lDC2_W0 = new LDC2_W(27);
      DASTORE dASTORE0 = new DASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackProducer(lDC2_W0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDC2_W constraint violated: Cannot produce 2 stack slots: only 1 free stack slot(s) left.
         // Stack:
         // Slots used: 1 MaxStack: 2.
         // . (Size: 1)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(4096);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(4096, objectType0);
      ObjectType objectType1 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      MockFile mockFile0 = new MockFile("SimpleElementValue class does not know how to stringify type ", "SimpleElementValue class does not know how to stringify type ");
      MockFile mockFile1 = new MockFile(mockFile0, "SimpleElementValue class does not know how to stringify type ");
      mockFile1.toURL();
      ASTORE aSTORE0 = new ASTORE(4096);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      aSTORE0.getType(constantPoolGen0);
      instConstraintVisitor0.visitASTORE(aSTORE0);
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      IXOR iXOR0 = new IXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIXOR(iXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IXOR constraint violated: The value at the stack top is not of type 'int', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(414);
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(414, objectType0);
      ObjectType.getInstance("y?");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.equals(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      MockURI.create("");
      FMUL fMUL0 = new FMUL();
      FMUL fMUL1 = new FMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFMUL(fMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FMUL constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = new ObjectType("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      ObjectType.getInstance("y?");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.equals(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE((InstructionHandle) null);
      IFNONNULL iFNONNULL0 = new IFNONNULL((InstructionHandle) null);
      instConstraintVisitor0.visitIFNONNULL(iFNONNULL0);
      FCMPL fCMPL0 = new FCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPL(fCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPL constraint violated: The value at the stack top is not of type 'float', but of type 'SimpleElemeXtValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(414);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(414, objectType0);
      ObjectType objectType1 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      LocalVariables localVariables1 = new LocalVariables(414);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h");
      Frame frame0 = new Frame(localVariables1, operandStack0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      instConstraintVisitor0.setFrame(frame0);
      IFLT iFLT0 = new IFLT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLT(iFLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFLT constraint violated: The value at the stack top is not of type 'int', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      ObjectType objectType1 = new ObjectType("");
      LocalVariables localVariables1 = new LocalVariables(386);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      frame0.equals(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      frame0.equals("SimpleElementValue class does not know how to stringify type ");
      operandStack0.getClone();
      GETSTATIC gETSTATIC0 = new GETSTATIC(603);
      FLOAD fLOAD0 = new FLOAD(603);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLocalVariableInstruction(fLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FLOAD constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(414);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(414, objectType0);
      ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      LRETURN lRETURN0 = new LRETURN();
      LLOAD lLOAD0 = new LLOAD(348);
      LREM lREM0 = new LREM();
      LSTORE lSTORE0 = new LSTORE(348);
      L2I l2I0 = new L2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2I(l2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2I constraint violated: The value at the stack top is not of type 'long', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(3, objectType0);
      ObjectType objectType1 = new ObjectType("FwRop^J;75CuOC|p`R@");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      objectType0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LADD lADD0 = new LADD();
      frame0.equals(lADD0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kO)H1");
      frame0.getClone();
      OperandStack operandStack1 = new OperandStack(386);
      ISHR iSHR0 = new ISHR();
      FCMPG fCMPG0 = new FCMPG();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = Constants.CONSTRUCTOR_NAME;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPG(fCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPG constraint violated: The value at the stack top is not of type 'float', but of type 'SimpleElemeXtValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(4353);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "' upper stack types should be 'int' but aren't.");
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(4353, objectType0);
      Frame.getThis();
      operandStack0.initializeObject((UninitializedObjectType) null);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FADD fADD0 = new FADD();
      FADD fADD1 = new FADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFADD(fADD1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FADD constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = ObjectType.getInstance("=~1c<w M=");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      F2L f2L0 = new F2L();
      int int0 = Character.BYTES;
      DRETURN dRETURN0 = new DRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDRETURN(dRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L=~1c<w M=;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      ObjectType objectType1 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      instConstraintVisitor0.setFrame(frame0);
      frame0.clone();
      frame0.getClone();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      IREM iREM0 = new IREM();
      operandStack0.equals(iREM0);
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE((InstructionHandle) null);
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2I((F2I) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables1.getClone();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ObjectType objectType0 = new ObjectType("nt@xt8>Vf[/P\"YYHLTW");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      Frame frame0 = new Frame(localVariables2, operandStack0);
      OperandStack operandStack1 = new OperandStack(238, objectType0);
      ObjectType.getInstance("nt@xt8>Vf[/P\"YYHLTW");
      LocalVariables localVariables3 = new LocalVariables(233);
      operandStack0.getClone();
      operandStack1.getClone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      InstructionList instructionList0 = new InstructionList();
      InstructionList instructionList1 = instructionList0.copy();
      instructionList0.insert(instructionList1);
      ConstantFloat constantFloat0 = new ConstantFloat(233);
      ILOAD iLOAD0 = new ILOAD(2);
      instConstraintVisitor0.visitILOAD(iLOAD0);
      IFNONNULL iFNONNULL0 = new IFNONNULL((InstructionHandle) null);
      IFNONNULL iFNONNULL1 = new IFNONNULL((InstructionHandle) null);
      FASTORE fASTORE0 = new FASTORE();
      Constant[] constantArray0 = new Constant[2];
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      FDIV fDIV0 = new FDIV();
      fDIV0.consumeStack(constantPoolGen0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFDIV(fDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FDIV constraint violated: The value at the stack top is not of type 'float', but of type 'nt@xt8>Vf[.P\"YYHLTW'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(366);
      ObjectType objectType0 = new ObjectType("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(366, objectType0);
      OperandStack operandStack1 = new OperandStack(366, objectType0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.clone();
      localVariables1.getClone();
      I2C i2C0 = new I2C();
      IALOAD iALOAD0 = new IALOAD();
      INEG iNEG0 = new INEG();
      I2C i2C1 = new I2C();
      ISHL iSHL0 = new ISHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHL(iSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHL constraint violated: The value at the stack top is not of type 'int', but of type 'SimpleElemeXtValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      int int0 = 401;
      LocalVariables localVariables0 = new LocalVariables(401);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(401, objectType0);
      ObjectType objectType1 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      MockFile mockFile0 = new MockFile("SimpleElementValue class does not know how to stringify type ");
      FCMPG fCMPG0 = new FCMPG();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = Constants.CONSTRUCTOR_NAME;
      LADD lADD0 = new LADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLADD(lADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LADD constraint violated: The value at the stack top is not of type 'long', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(603);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.merge(localVariables0);
      ObjectType objectType0 = ObjectType.getInstance("s.-8");
      localVariables1.merge(localVariables0);
      OperandStack operandStack0 = new OperandStack(116, objectType0);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame frame1 = frame0.getClone();
      FRETURN fRETURN0 = new FRETURN();
      frame1.equals(fRETURN0);
      instConstraintVisitor0.setFrame(frame1);
      IOR iOR0 = new IOR();
      OperandStack operandStack1 = new OperandStack(116, objectType0);
      SASTORE sASTORE0 = new SASTORE();
      operandStack1.equals(sASTORE0);
      Frame frame2 = new Frame(localVariables1, operandStack1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIAND((IAND) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(462);
      ObjectType objectType0 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(462, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      LocalVariables localVariables1 = new LocalVariables(237);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      instConstraintVisitor0.setFrame(frame0);
      F2L f2L0 = new F2L();
      I2L i2L0 = new I2L();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SimpleElementValue class does not know how to stringify type ");
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(3);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF(iNSTANCEOF0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(603);
      localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("Gy?");
      LocalVariables localVariables1 = new LocalVariables(603);
      OperandStack operandStack0 = new OperandStack(291, objectType0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack1 = new OperandStack(79, objectType0);
      operandStack1.clone();
      localVariables0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor1.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, false);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      instructionList0.copy();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) lSUB0);
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor1.visitIF_ICMPGT(iF_ICMPGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPGT constraint violated: The value at the stack top is not of type 'int', but of type 'Gy?'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = new ObjectType("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Object object0 = frame0.clone();
      frame0.equals(object0);
      instConstraintVisitor0.setFrame(frame0);
      frame0.clone();
      DLOAD dLOAD0 = new DLOAD(1156);
      instConstraintVisitor0.setFrame(frame0);
      SWAP sWAP0 = new SWAP();
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(386);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      L2F l2F0 = new L2F();
      L2D l2D0 = new L2D();
      F2L f2L0 = new F2L();
      SWAP sWAP1 = new SWAP();
      ConstantFloat constantFloat0 = new ConstantFloat(2.0F);
      LREM lREM0 = new LREM();
      ASTORE aSTORE0 = new ASTORE(1156);
      instConstraintVisitor0.visitStoreInstruction(aSTORE0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2F((I2F) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = new ObjectType("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      ObjectType.getInstance("SimpleElemeXtValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = new OperandStack(386);
      FileSystemHandling.shouldAllThrowIOExceptions();
      operandStack1.getClone();
      F2L f2L0 = new F2L();
      instConstraintVisitor0.setFrame(frame0);
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE((InstructionHandle) null);
      iF_ICMPNE0.negate();
      LALOAD lALOAD0 = new LALOAD();
      DUP dUP0 = new DUP();
      instConstraintVisitor0.visitDUP(dUP0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      DRETURN dRETURN0 = new DRETURN();
      I2C i2C0 = new I2C();
      assertEquals(1, i2C0.getLength());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      frame0.equals(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      frame0.getClone();
      SWAP sWAP0 = new SWAP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSWAP(sWAP0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(401);
      localVariables0.toString();
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(401, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      DMUL dMUL0 = new DMUL();
      IUSHR iUSHR0 = new IUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIUSHR(iUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IUSHR constraint violated: The value at the stack top is not of type 'int', but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(396);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(3, objectType0);
      ObjectType objectType1 = new ObjectType("FwRop^J;75CuOC|p`R@");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      objectType0.toString();
      operandStack0.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LADD lADD0 = new LADD();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      LLOAD lLOAD0 = new LLOAD(414);
      instConstraintVisitor0.visitFLOAD((FLOAD) null);
      DREM dREM0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIDIV((IDIV) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(366);
      ObjectType objectType0 = new ObjectType("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(366, objectType0);
      ObjectType.getInstance("SimpleElemeXtValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = new OperandStack(366);
      ObjectType objectType1 = ObjectType.getInstance("");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType1);
      Frame.setThis(uninitializedObjectType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      instConstraintVisitor0.setFrame(frame0);
      IFGE iFGE0 = new IFGE((InstructionHandle) null);
      IfInstruction ifInstruction0 = iFGE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, 366);
      IFNONNULL iFNONNULL0 = new IFNONNULL((InstructionHandle) null);
      instConstraintVisitor0.visitIFNONNULL(iFNONNULL0);
      LLOAD lLOAD0 = new LLOAD(3476);
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2(dUP2_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "' must not be greater than max_locals-2 '");
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = new ObjectType("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      ObjectType.getInstance("SimpleElemeXtValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.getClone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      instConstraintVisitor0.setFrame(frame0);
      NEWARRAY nEWARRAY0 = new NEWARRAY((byte)0);
      InstructionList instructionList0 = new InstructionList(nEWARRAY0);
      InstructionList instructionList1 = instructionList0.copy();
      InstructionList instructionList2 = instructionList0.copy();
      InstructionHandle instructionHandle0 = instructionList1.append(instructionList0);
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.removeObserver(instructionListObserver0);
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE(instructionHandle0);
      JSR jSR0 = new JSR(instructionHandle0);
      instructionList0.insert(instructionHandle0, instructionList2);
      instConstraintVisitor0.visitJSR(jSR0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPNE(iF_ACMPNE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(484);
      ObjectType objectType0 = new ObjectType("a:>=");
      localVariables0.toString();
      localVariables0.toString();
      OperandStack operandStack0 = new OperandStack(484, objectType0);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      LocalVariables localVariables1 = new LocalVariables(484);
      localVariables1.getClone();
      instConstraintVisitor0.setFrame(frame0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      F2I f2I0 = new F2I();
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      FRETURN fRETURN0 = new FRETURN();
      IALOAD iALOAD0 = new IALOAD();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLUSHR((LUSHR) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(414);
      ObjectType objectType0 = new ObjectType("SimpleElementValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(414, objectType0);
      ObjectType.getInstance("SimpleElementValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = operandStack0.getClone();
      frame0.getClone();
      operandStack0.toString();
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.getClone();
      operandStack1.getClone();
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(414);
      aNEWARRAY0.copy();
      ANEWARRAY aNEWARRAY1 = new ANEWARRAY(414);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitANEWARRAY(aNEWARRAY1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ANEWARRAY constraint violated: The 'count' at the stack top is not of type 'int' but of type 'SimpleElementValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(1665, objectType0);
      localVariables0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      LocalVariables localVariables1 = new LocalVariables(3108);
      operandStack0.push(objectType0);
      localVariables0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      I2C i2C0 = new I2C();
      NEWARRAY nEWARRAY0 = new NEWARRAY(objectType0.FLOAT);
      FLOAD fLOAD0 = new FLOAD(3108);
      LAND lAND0 = new LAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLAND(lAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LAND constraint violated: The value at the stack top is not of type 'long', but of type 'SimpleElemeXtValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(3098);
      ObjectType objectType0 = new ObjectType("SimpleElemXtValue class does not know how to stringify type ");
      ObjectType objectType1 = ObjectType.getInstance("SimpleElemXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(3098, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType1);
      Frame.setThis(uninitializedObjectType0);
      operandStack0.pop();
      Frame.setThis(uninitializedObjectType0);
      ICONST iCONST0 = new ICONST(2);
      operandStack0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = new IRETURN();
      frame0.equals(iRETURN0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("ity{IMX&mn)<_kxj:%");
      RET rET0 = new RET(51);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRET(rET0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction RET constraint violated: Expecting a ReturnaddressType in local variable 51.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = new ObjectType("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      ObjectType.getInstance("SimpleElemeXtValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.getClone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      instConstraintVisitor0.setFrame(frame0);
      IFGE iFGE0 = new IFGE((InstructionHandle) null);
      iFGE0.negate();
      IFNONNULL iFNONNULL0 = new IFNONNULL((InstructionHandle) null);
      I2L i2L0 = new I2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDASTORE((DASTORE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BasicType basicType0 = Type.BOOLEAN;
      OperandStack operandStack0 = new OperandStack(27, basicType0.STRINGBUFFER);
      OperandStack operandStack1 = operandStack0.getClone();
      LocalVariables localVariables0 = new LocalVariables(27);
      POP pOP0 = new POP();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-77);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      operandStack1.getClone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      instConstraintVisitor0.setFrame(frame0);
      NEWARRAY nEWARRAY0 = new NEWARRAY((byte)0);
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      LUSHR lUSHR0 = new LUSHR();
      IINC iINC0 = new IINC(27, 27);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(2);
      ObjectType objectType0 = ObjectType.getInstance("eQhGE^G>z(!((");
      OperandStack operandStack0 = new OperandStack(61, objectType0);
      InstructionList instructionList0 = new InstructionList();
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack0.merge(operandStack1);
      OperandStack operandStack2 = operandStack0.getClone();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Frame frame0 = new Frame(localVariables0, operandStack2);
      instConstraintVisitor0.setFrame(frame0);
      I2L i2L0 = new I2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2L(i2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2L constraint violated: The value at the stack top is not of type 'int', but of type 'eQhGE^G>z(!(('.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(3098);
      ObjectType objectType0 = new ObjectType("SimpleElemXtValue class does not know how to stringify type ");
      ObjectType.getInstance("SimpleElemXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(3098, objectType0);
      ObjectType objectType1 = new ObjectType("g");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      Frame.setThis((UninitializedObjectType) null);
      DCMPL dCMPL0 = new DCMPL();
      localVariables0.merge(localVariables1);
      ICONST iCONST0 = new ICONST(2);
      Frame.setThis((UninitializedObjectType) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3Asg63!~vcKREC4^%b0A");
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = new IRETURN();
      frame0.equals(iRETURN0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("ity{IMX&mn)<_kxj:%");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DASTORE dASTORE0 = new DASTORE();
      IINC iINC0 = new IINC(2, 18);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not of type int but of type <unknown object>.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(366);
      ObjectType objectType0 = new ObjectType("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(366, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = new OperandStack(366, objectType0);
      localVariables0.clone();
      ObjectType objectType1 = new ObjectType("SimpleElemeXtValue class does not know how to stringify type ");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType1);
      Frame.setThis(uninitializedObjectType0);
      instConstraintVisitor0.setFrame(frame0);
      IFGE iFGE0 = new IFGE((InstructionHandle) null);
      iFGE0.negate();
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, 1);
      LLOAD lLOAD0 = new LLOAD(1);
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      FRETURN fRETURN0 = new FRETURN();
      IALOAD iALOAD0 = new IALOAD();
      Boolean boolean0 = new Boolean("SimpleElemeXtValue class does not know how to stringify type ");
      DSUB dSUB0 = new DSUB();
      POP pOP0 = new POP();
      instConstraintVisitor0.visitPOP(pOP0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDSUB(dSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSUB constraint violated: The value at the stack top is not of type 'double', but of type 'SimpleElemeXtValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IXOR iXOR0 = new IXOR();
      LocalVariables localVariables0 = new LocalVariables(366);
      ObjectType objectType0 = new ObjectType("Now verifying: ");
      OperandStack operandStack0 = new OperandStack(366, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      ObjectType objectType1 = new ObjectType("Now verifying: ");
      Frame.getThis();
      instConstraintVisitor0.setFrame(frame0);
      localVariables0.getClone();
      IFGE iFGE0 = new IFGE((InstructionHandle) null);
      iFGE0.negate();
      IFNONNULL iFNONNULL0 = new IFNONNULL((InstructionHandle) null);
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPEQ(iF_ICMPEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPEQ constraint violated: The value at the stack top is not of type 'int', but of type 'Now verifying: '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(0);
      ObjectType objectType0 = ObjectType.getInstance("=n%DI\"Y&QBC_0R");
      OperandStack operandStack0 = new OperandStack(603, objectType0);
      LocalVariables localVariables1 = new LocalVariables(0);
      localVariables0.merge(localVariables1);
      ObjectType objectType1 = new ObjectType("java.lang.Long");
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RETURN rETURN0 = new RETURN();
      frame0.equals(rETURN0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lconst_1");
      instConstraintVisitor0.setFrame(frame0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      D2F d2F0 = new D2F();
      IFEQ iFEQ0 = new IFEQ((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFEQ(iFEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFEQ constraint violated: The value at the stack top is not of type 'int', but of type '=n%DI\"Y&QBC_0R'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(396);
      ObjectType objectType0 = new ObjectType("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(3, objectType0);
      ObjectType objectType1 = new ObjectType("SimpleElemeXtValue class does not know how to stringify type ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      objectType0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LADD lADD0 = new LADD();
      frame0.equals(lADD0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kO)H;1");
      POP2 pOP2_0 = new POP2();
      POP2 pOP2_1 = new POP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPOP2(pOP2_1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction POP2 constraint violated: Stack top size should be 2 but stack top is 'SimpleElemeXtValue class does not know how to stringify type ' of size '1'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(2);
      ObjectType objectType0 = new ObjectType(" w6;?]zcM+5B.t'g:H");
      OperandStack operandStack0 = new OperandStack(65518, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ISHR iSHR0 = new ISHR();
      ILOAD iLOAD0 = new ILOAD(2);
      instConstraintVisitor0.visitILOAD(iLOAD0);
      CHECKCAST cHECKCAST0 = new CHECKCAST(65518);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCHECKCAST(cHECKCAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(366);
      ObjectType objectType0 = new ObjectType("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(366, objectType0);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = new OperandStack(366, objectType0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2(dUP2_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(3098);
      ObjectType objectType0 = new ObjectType("SimpleElemXtValue class does not know how to stringify type ");
      ObjectType objectType1 = new ObjectType("SimpleElemXtValue class does not know how to stringify type ");
      ObjectType objectType2 = (ObjectType)objectType1.getFirstCommonSuperclass(objectType0);
      OperandStack operandStack0 = new OperandStack(3098, objectType2);
      ObjectType objectType3 = new ObjectType("Stack next-to-top must be of type float[] but is '");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      BasicType basicType0 = (BasicType)Type.getType("SimpleElemXtValue class does not know how to stringify type ");
      Type.getMethodSignature(objectType0, objectType1.NO_ARGS);
      operandStack0.equals(objectType1);
      UninitializedObjectType uninitializedObjectType1 = Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      basicType0.OBJECT.toString();
      UninitializedObjectType uninitializedObjectType2 = new UninitializedObjectType(uninitializedObjectType1.STRING);
      Frame.setThis(uninitializedObjectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      IFGE iFGE0 = new IFGE((InstructionHandle) null);
      iFGE0.negate();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY((short)203, (short)203);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMULTIANEWARRAY(mULTIANEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction MULTIANEWARRAY constraint violated: The '203' upper stack types should be 'int' but aren't.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(366);
      ObjectType objectType0 = new ObjectType("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(366, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = new OperandStack(366);
      ObjectType objectType1 = ObjectType.getInstance("SimpleElemeXtValue class does not know how to stringify type ");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType1);
      Frame.setThis(uninitializedObjectType0);
      instConstraintVisitor0.setFrame(frame0);
      OperandStack operandStack2 = operandStack1.getClone();
      OperandStack operandStack3 = operandStack2.getClone();
      Frame frame1 = new Frame(localVariables0, operandStack3);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      instConstraintVisitor0.setFrame(frame0);
      LASTORE lASTORE0 = new LASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLASTORE(lASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LASTORE constraint violated: The value at the stack top is not of type 'long', but of type 'SimpleElemeXtValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType objectType0 = ObjectType.getInstance("kCkHNIP");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      ObjectType objectType1 = ObjectType.getInstance("kCkHNIP");
      OperandStack operandStack1 = new OperandStack(386);
      operandStack0.push(objectType1);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      frame0.clone();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(386, 386);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(194, 386);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      lCMP0.toString(constantPool0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLCMP(lCMP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LCMP constraint violated: The value at the stack top is not of type 'long', but of type 'kCkHNIP'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(366);
      ObjectType objectType0 = new ObjectType("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(366, objectType0);
      localVariables0.getClone();
      operandStack0.push(objectType0);
      objectType0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      uninitializedObjectType0.isCastableTo(objectType0);
      Frame.setThis(uninitializedObjectType0);
      OperandStack operandStack1 = new OperandStack(366, objectType0);
      UninitializedObjectType uninitializedObjectType1 = Frame.getThis();
      uninitializedObjectType1.isAssignmentCompatibleWith(objectType0);
      Frame.setThis(uninitializedObjectType1);
      instConstraintVisitor0.setFrame(frame0);
      IFGE iFGE0 = new IFGE((InstructionHandle) null);
      iFGE0.setTarget((InstructionHandle) null);
      iFGE0.negate();
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, 366);
      IFNONNULL iFNONNULL0 = new IFNONNULL((InstructionHandle) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(366);
      D2F d2F0 = new D2F();
      PUSH pUSH1 = new PUSH(constantPoolGen0, 366);
      IFNONNULL iFNONNULL1 = new IFNONNULL((InstructionHandle) null);
      IOR iOR0 = new IOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIOR(iOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IOR constraint violated: The value at the stack top is not of type 'int', but of type 'SimpleElemeXtValue class does not know how to stringify type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(366);
      ObjectType objectType0 = new ObjectType("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(366, objectType0);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = new OperandStack(366, objectType0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      IFGE iFGE0 = new IFGE((InstructionHandle) null);
      iFGE0.setTarget((InstructionHandle) null);
      iFGE0.negate();
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, 366);
      IFNONNULL iFNONNULL0 = new IFNONNULL((InstructionHandle) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      D2F d2F0 = new D2F();
      PUSH pUSH1 = new PUSH(constantPoolGen0, (-1470));
      IFNONNULL iFNONNULL1 = new IFNONNULL((InstructionHandle) null);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      D2F d2F1 = new D2F();
      DUP2 dUP2_0 = new DUP2();
      instConstraintVisitor0.visitDUP2(dUP2_0);
      LSTORE lSTORE0 = new LSTORE(96);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(840, 96);
      FREM fREM0 = new FREM();
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARRAYLENGTH(aRRAYLENGTH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ARRAYLENGTH constraint violated: The 'arrayref' does not refer to an array but is of type SimpleElemeXtValue class does not know how to stringify type .
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(386);
      ObjectType.getInstance("SimpleElemeXtValue class does not know how to stringify type ");
      ObjectType objectType0 = ObjectType.getInstance("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(386, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack1 = operandStack0.getClone();
      LocalVariables localVariables1 = new LocalVariables(386);
      Frame frame0 = new Frame(localVariables1, operandStack1);
      localVariables1.toString();
      instConstraintVisitor0.setFrame((Frame) null);
      F2L f2L0 = new F2L();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("SimpleElemeXtValue class does not know how to stringify type ");
      IRETURN iRETURN0 = new IRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIRETURN((IRETURN) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(366);
      ObjectType objectType0 = new ObjectType("SimpleElemeXtValue class does not know how to stringify type ");
      OperandStack operandStack0 = new OperandStack(366, objectType0);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      localVariables0.getClone();
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      localVariables0.toString();
      instConstraintVisitor0.setFrame(frame0);
      SWAP sWAP0 = new SWAP();
      Frame frame1 = frame0.getClone();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      I2L i2L0 = new I2L();
      DASTORE dASTORE0 = new DASTORE();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      DUP_X1 dUP_X1_0 = new DUP_X1();
      instConstraintVisitor0.visitDUP_X1(dUP_X1_0);
      L2I l2I0 = new L2I();
      BASTORE bASTORE0 = new BASTORE();
      NEW nEW0 = new NEW(366);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEW(nEW0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }
}
