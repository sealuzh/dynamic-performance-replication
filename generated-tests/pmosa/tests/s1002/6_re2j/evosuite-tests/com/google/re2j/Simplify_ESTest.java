/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 20:21:07 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import com.google.re2j.Simplify;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Simplify_ESTest extends Simplify_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = (-830);
      regexp0.max = (-830);
      Simplify.simplify(regexp0);
      regexp0.toString();
      Regexp regexp1 = Simplify.simplify(regexp0);
      regexp1.equals(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      regexp1.op = regexp_Op1;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.min = 0;
      regexp0.cap = 0;
      Regexp regexp2 = Simplify.simplify(regexp1);
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexp1.equals(regexp_Op0);
      regexp3.name = "";
      regexp3.subs = regexp0.subs;
      regexp2.equals(regexp3);
      regexp1.reinit();
      Regexp regexp4 = Simplify.simplify(regexp0);
      Simplify.simplify(regexp2);
      Simplify.simplify(regexp2);
      Simplify.simplify(regexp4);
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp5 = new Regexp(regexp_Op1);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.op = regexp_Op0;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Simplify.simplify(regexp1);
      Regexp regexp3 = Simplify.simplify(regexp2);
      regexp1.toString();
      regexp0.min = 0;
      Regexp regexp4 = Simplify.simplify(regexp2);
      Simplify.simplify(regexp2);
      Regexp regexp5 = Simplify.simplify(regexp4);
      Regexp regexp6 = Simplify.simplify(regexp2);
      Simplify.simplify(regexp4);
      Regexp regexp7 = Simplify.simplify(regexp6);
      regexp7.min = 0;
      Simplify.simplify(regexp5);
      Simplify.simplify(regexp7);
      Simplify.simplify(regexp0);
      Simplify.simplify(regexp4);
      Simplify.simplify(regexp0);
      Regexp regexp8 = Simplify.simplify(regexp3);
      assertSame(regexp8, regexp5);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.max = 89;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      regexp1.op = regexp_Op1;
      regexp1.subs = regexpArray0;
      Regexp regexp2 = Simplify.simplify(regexp1);
      assertNotSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.max = (-1980);
      Regexp[] regexpArray0 = new Regexp[1];
      regexp1.subs = regexpArray0;
      Regexp regexp2 = Simplify.simplify(regexp1);
      Regexp regexp3 = Simplify.simplify(regexp2);
      assertFalse(regexp3.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.name = "r  0Z0&HtVcYG3K";
      regexp1.max = (-1980);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp1;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp[] regexpArray1 = new Regexp[1];
      regexpArray1[0] = regexp0;
      regexp1.subs = regexpArray1;
      Regexp regexp2 = Simplify.simplify(regexp1);
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp2);
      Regexp regexp3 = new Regexp(regexp1);
      Regexp regexp4 = Simplify.simplify(regexp3);
      assertNotSame(regexp4, regexp2);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.max = 0;
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[0] = regexp0;
      regexpArray0[5] = regexp0;
      regexp1.op = regexp_Op0;
      regexpArray0[6] = regexp1;
      regexp0.reinit();
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      regexp1.max = 80;
      regexp1.subs = regexpArray0;
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.min = 393;
      Simplify.simplify(regexp1);
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      regexp2.op = regexp_Op1;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.max = 0;
      Regexp[] regexpArray0 = new Regexp[8];
      regexp0.name = "";
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[0] = regexp0;
      regexpArray0[5] = regexp0;
      regexp1.op = regexp_Op0;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      regexp1.max = 80;
      regexp1.subs = regexp0.subs;
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.min = 393;
      Regexp regexp3 = Simplify.simplify(regexp1);
      Regexp regexp4 = Simplify.simplify(regexp2);
      Regexp regexp5 = Simplify.simplify(regexp1);
      Regexp[] regexpArray1 = new Regexp[7];
      regexpArray1[0] = regexp1;
      regexpArray1[1] = regexp5;
      regexpArray1[2] = regexp1;
      regexpArray1[3] = regexp3;
      regexpArray1[4] = regexp0;
      regexpArray1[5] = regexp3;
      regexpArray1[6] = regexp0;
      regexp5.subs = regexpArray1;
      int[] intArray0 = new int[1];
      intArray0[0] = 80;
      regexp5.runes = intArray0;
      Regexp regexp6 = Simplify.simplify(regexp5);
      assertTrue(regexp6.equals((Object)regexp3));
      
      Simplify.simplify(regexp0);
      Simplify.simplify(regexp0);
      Regexp regexp7 = Simplify.simplify(regexp0);
      assertFalse(regexp7.equals((Object)regexp4));
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.max = 0;
      Regexp[] regexpArray0 = new Regexp[8];
      regexp0.name = "";
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[0] = regexp0;
      regexpArray0[5] = regexp0;
      regexp1.op = regexp_Op0;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      regexp1.max = 80;
      regexp1.subs = regexp0.subs;
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.min = 393;
      Regexp regexp3 = Simplify.simplify(regexp1);
      Simplify.simplify(regexp2);
      Regexp regexp4 = Simplify.simplify(regexp1);
      Regexp[] regexpArray1 = new Regexp[7];
      regexpArray1[0] = regexp1;
      regexpArray1[1] = regexp4;
      regexpArray1[2] = regexp1;
      regexpArray1[3] = regexp3;
      Regexp regexp5 = Simplify.simplify(regexp4);
      assertTrue(regexp5.equals((Object)regexp3));
      
      regexpArray1[4] = regexp5;
      regexpArray1[5] = regexp3;
      regexpArray1[6] = regexp0;
      regexp4.subs = regexpArray1;
      int[] intArray0 = new int[1];
      regexp5.flags = 52;
      intArray0[0] = 80;
      regexp4.runes = intArray0;
      Simplify.simplify(regexp4);
      Simplify.simplify(regexpArray0[6]);
      Regexp regexp6 = Simplify.simplify(regexp3);
      assertSame(regexp6, regexp3);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp2 = Simplify.simplify(regexp0);
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      Regexp regexp3 = Simplify.simplify(regexp1);
      regexpArray0[4] = regexp3;
      regexpArray0[5] = regexp0;
      regexp0.subs = regexpArray0;
      regexp1.reinit();
      Regexp[] regexpArray1 = new Regexp[6];
      regexp1.min = 1;
      regexp1.subs = regexpArray1;
      Simplify.simplify(regexp1);
      Regexp regexp4 = Simplify.simplify(regexp1);
      assertFalse(regexp4.equals((Object)regexp3));
  }
}
