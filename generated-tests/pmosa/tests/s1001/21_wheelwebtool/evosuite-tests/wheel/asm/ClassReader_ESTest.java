/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 17:33:51 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(271);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      assertEquals(4, ClassReader.SKIP_FRAMES);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 2);
      classReader0.accept((ClassVisitor) classWriter0, 27);
      assertEquals(271, classReader0.header);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(2);
      classReader0.accept((ClassVisitor) classWriter0, 2);
      Label[] labelArray0 = new Label[0];
      ClassWriter classWriter1 = new ClassWriter(1930);
      int int0 = 1452;
      classReader0.accept((ClassVisitor) classWriter1, (Attribute[]) null, (-916));
      Edge edge0 = new Edge();
      Edge edge1 = edge0.next;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, (-300));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 186);
      classReader0.accept((ClassVisitor) classWriter0, 101);
      PipedInputStream pipedInputStream0 = null;
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(2);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      PipedInputStream pipedInputStream0 = null;
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(217);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassAdapter classAdapter1 = new ClassAdapter(classAdapter0);
      classWriter0.newField("Code", "wheel.asm.Edge", "/;^qt9o6");
      ClassWriter classWriter1 = new ClassWriter(6);
      classWriter1.newClass("RuntimeInvisibleAnnotations");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 6);
      pipedInputStream0.skip((-1491L));
      ClassWriter classWriter2 = new ClassWriter(2);
      classReader0.accept((ClassVisitor) classWriter2, 2);
      classReader0.readClass(92, (char[]) null);
      classReader0.getItem(1);
      classReader0.getAccess();
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 33, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 425
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "wheel.asm.Edge";
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 4, (-128));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18724
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(1930);
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, (-916));
      Edge edge0 = new Edge();
      Edge edge1 = edge0.next;
      int int0 = (-346);
      ClassReader classReader1 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter1 = new ClassWriter(classReader1, 2);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter1);
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = 'b';
      charArray0[2] = '}';
      charArray0[3] = 'O';
      charArray0[4] = 'J';
      classReader0.readConst(6, charArray0);
      // Undeclared exception!
      try { 
        classWriter1.newField("/;^qt9o6", "RunieVisibleParameterAnnotations", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 186);
      classWriter0.newMethodItem("The wildcard list must not be null", "The wildcard list must not be null", "<init>", true);
      classReader0.accept((ClassVisitor) classWriter0, 269);
      classReader0.readUnsignedShort(258);
      // Undeclared exception!
      try { 
        classReader0.readLong((-2120));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2120
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(1930);
      Attribute[] attributeArray0 = null;
      int int0 = (-916);
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, (-916));
      Edge edge0 = new Edge();
      Edge edge1 = edge0.next;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      classReader0.getInterfaces();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(2);
      classReader0.accept((ClassVisitor) classWriter0, 22);
      classReader0.getClassName();
      classReader0.readUnsignedShort(2);
      classReader0.copyPool(classWriter0);
      assertEquals(271, classReader0.header);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(4);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 2);
      classReader0.readConst(2, (char[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)31;
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(byteArray0, 150, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      ClassReader classReader1 = new ClassReader(classReader0.b, 325, 183);
      classReader1.getSuperName();
      ClassReader classReader2 = new ClassReader(classReader1.b);
      ClassWriter classWriter1 = new ClassWriter(classReader2, 1701);
      // Undeclared exception!
      try { 
        classReader1.copyPool(classWriter1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(2);
      classReader0.accept((ClassVisitor) classWriter0, 2);
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      ClassWriter classWriter1 = new ClassWriter(classReader0, 3130);
      ClassWriter classWriter2 = new ClassWriter(classReader1, (-884));
      classReader0.copyPool(classWriter2);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        classReader1.readClass(2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "wheel.asm.Edge";
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(4);
      int int0 = 3256;
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 3256);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 26, (-2155));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 425
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(271, classReader0.header);
      
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.newFieldItem("wheel.asm.Edge", "wheel.asm.ClassReader", "wheel.asm.ClassReader");
      classReader0.accept((ClassVisitor) classWriter0, 2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      ClassReader classReader1 = new ClassReader(byteArrayInputStream0);
      short short0 = classReader0.readShort(84);
      assertEquals((short)25443, short0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Edge edge0 = new Edge();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Edge edge0 = new Edge();
      ClassReader classReader0 = new ClassReader("java/lang/Throwable");
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertNotNull(string0);
      
      long long0 = classReader0.readLong(2);
      assertEquals((-4990551337076522668L), long0);
      assertEquals(4463, classReader0.header);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.thisName = "ZeK#&w(MrO~oMX";
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = 'E';
      charArray0[2] = 'h';
      charArray0[3] = '&';
      charArray0[4] = '@';
      charArray0[5] = 'h';
      charArray0[6] = ',';
      charArray0[7] = '4';
      // Undeclared exception!
      try { 
        classReader0.readConst(11, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(classReader0, (-28));
      Edge edge0 = new Edge();
      classReader0.getInterfaces();
      // Undeclared exception!
      try { 
        classReader0.readByte((-28));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -28
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(224);
      classWriter0.newDouble(2);
      classWriter0.newFieldItem("SourceFile", "!=@", "wheel.asm.Edge");
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      classReader1.accept((ClassVisitor) classWriter0, 1);
      classReader1.accept((ClassVisitor) classWriter0, 24);
      int int0 = 32;
      classReader1.readInt(int0);
      classReader0.getClassName();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.newFieldItem("SourceFile", "!=@", "wheel.asm.Edge");
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      classReader1.accept((ClassVisitor) classWriter0, 1);
      classReader1.accept((ClassVisitor) classWriter0, 24);
      classReader1.readUnsignedShort(classReader0.SKIP_CODE);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(224);
      Item item0 = new Item(1);
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      classReader1.accept((ClassVisitor) classWriter0, 185);
      classReader1.accept((ClassVisitor) classWriter0, (-2298));
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = 'U';
      charArray0[2] = 'l';
      charArray0[3] = '#';
      charArray0[4] = 'F';
      charArray0[5] = ']';
      charArray0[6] = ';';
      charArray0[7] = 'Y';
      classReader1.readConst(369, charArray0);
      Attribute[] attributeArray0 = new Attribute[0];
      int int0 = 160;
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, int0);
      int int1 = 3121;
      classReader0.readUnsignedShort(int1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.newFieldItem("SourceFile", "!=@", "wheel.asm.Edge");
      classWriter0.newClassItem("GTohE<l/]\"*U;:{kl");
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      classReader1.accept((ClassVisitor) classWriter0, 1);
      // Undeclared exception!
      try { 
        classReader1.getItem((-1500));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1500
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassReader classReader1 = new ClassReader(classReader0.b, 325, 183);
      // Undeclared exception!
      try { 
        classReader1.getInterfaces();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(224);
      Item item0 = new Item(1);
      Item item1 = new Item(224);
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      classReader1.accept((ClassVisitor) classWriter0, 1);
      classReader1.accept((ClassVisitor) classWriter0, 25165824);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(224);
      Item item0 = new Item(1);
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      classReader1.accept((ClassVisitor) classWriter0, 1);
      classReader1.accept((ClassVisitor) classWriter0, 185);
      classReader1.accept((ClassVisitor) classWriter0, (-2298));
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = 'U';
      charArray0[2] = 'l';
      charArray0[3] = '#';
      charArray0[4] = 'F';
      charArray0[5] = ']';
      charArray0[6] = ';';
      charArray0[7] = 'Y';
      classReader1.readConst(369, charArray0);
      Attribute[] attributeArray0 = new Attribute[0];
      int int0 = 160;
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, int0);
      int int1 = (-399);
      classReader0.readLong(int1);
  }
}
