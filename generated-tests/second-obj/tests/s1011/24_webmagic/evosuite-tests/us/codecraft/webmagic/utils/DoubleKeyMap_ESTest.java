/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:59:04 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Map<String, String>, Map<Object, Integer>> hashMap0 = new HashMap<Map<String, String>, Map<Object, Integer>>();
      DoubleKeyMap<Map<String, String>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Object, Integer>(hashMap0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Map<Object, Map<Map<String, String>, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<String, String>, String> doubleKeyMap1 = new DoubleKeyMap<Object, Map<String, String>, String>(map0, class0);
      HashMap<Map<String, String>, String> hashMap0 = new HashMap<Map<String, String>, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) "", (Map<Map<String, String>, String>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0, class0);
      Map<String, Object> map0 = doubleKeyMap0.remove("[mAk]*biq");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(hashMap0, class0);
      String string0 = doubleKeyMap0.remove((Object) class0, "wrong proto type map ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      hashMap0.remove((Object) "");
      hashMap0.put((Object) null, (Map<Object, Object>) null);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(hashMap0, class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, object0, (Object) "wrong proto type map ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      doubleKeyMap0.remove("]8/");
      doubleKeyMap0.get("]8/", "]8/");
      DoubleKeyMap<Object, Map<String, String>, Map<String, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Map<String, String>, Map<String, String>>();
      doubleKeyMap1.put((Object) null, (Map<String, String>) null, (Map<String, String>) null);
      doubleKeyMap0.newMap();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      doubleKeyMap1.put((Object) null, (Map<String, String>) hashMap2, (Map<String, String>) null);
      HashMap<Map<String, String>, Map<String, String>> hashMap3 = new HashMap<Map<String, String>, Map<String, String>>();
      HashMap<Object, Map<String, String>> hashMap4 = new HashMap<Object, Map<String, String>>();
      assertEquals(0, hashMap4.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      doubleKeyMap0.remove("(^k;~=7dXbFUtb", (Object) "");
      Map<Object, Object> map0 = doubleKeyMap0.newMap();
      doubleKeyMap0.put("", (Object) map0, "C'yy4[Wl>xKB");
      String string0 = doubleKeyMap0.remove("", (Object) "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      doubleKeyMap0.put("", (Object) "", "");
      Object object0 = new Object();
      doubleKeyMap0.remove("", (Object) "");
      Map<String, String> map0 = doubleKeyMap0.newMap();
      doubleKeyMap0.remove("", (Object) map0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<String, String>, Map<String, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Map<String, String>, Map<String, String>>();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap2 = null;
      try {
        doubleKeyMap2 = new DoubleKeyMap<String, Integer, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      Map<Object, Object> map0 = doubleKeyMap0.newMap();
      doubleKeyMap0.put("", (Object) map0, "C'yy4[Wl>xKB");
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      doubleKeyMap0.remove("]8/", (Object) "]8/");
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, String> doubleKeyMap1 = new DoubleKeyMap<String, String, String>();
      doubleKeyMap1.put("]8/", "Ht0d6Wga'=IHS", "wLBLiI@UiJN");
      doubleKeyMap1.get("]8/", "]8/");
      DoubleKeyMap<Object, Map<String, String>, Map<String, String>> doubleKeyMap2 = new DoubleKeyMap<Object, Map<String, String>, Map<String, String>>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<Map<String, String>, Map<String, String>> hashMap2 = new HashMap<Map<String, String>, Map<String, String>>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap3 = null;
      try {
        doubleKeyMap3 = new DoubleKeyMap<Object, Integer, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
