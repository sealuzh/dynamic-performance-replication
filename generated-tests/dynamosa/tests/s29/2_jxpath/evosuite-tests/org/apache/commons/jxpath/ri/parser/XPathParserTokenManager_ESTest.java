/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 18:34:20 GMT 2019
 */

package org.apache.commons.jxpath.ri.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import org.apache.commons.jxpath.ri.parser.SimpleCharStream;
import org.apache.commons.jxpath.ri.parser.Token;
import org.apache.commons.jxpath.ri.parser.XPathParserTokenManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathParserTokenManager_ESTest extends XPathParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("name");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("name", token0.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(55, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MT',TXcsG+S!o");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("MT", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("MT", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 0, 0, 0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.setDebugStream((PrintStream) null);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit((SimpleCharStream) null, 110);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 110. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 11);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 11. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-258), (-258));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, byteArray0.length);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, byteArray0.length);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-258), simpleCharStream0.getBeginColumn());
      assertEquals((-258), simpleCharStream0.getBeginLine());
      assertEquals((-258), simpleCharStream0.getLine());
      assertEquals((-258), simpleCharStream0.getColumn());
      assertEquals((-258), simpleCharStream0.getEndColumn());
      assertEquals((-258), simpleCharStream0.getEndLine());
      assertEquals(".", token0.toString());
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(82, token0.kind);
      assertEquals((-258), token0.beginColumn);
      assertEquals((-258), token0.endColumn);
      assertEquals((-258), token0.endLine);
      assertEquals((-258), token0.beginLine);
      assertEquals(5, byteArray0.length);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, (-258));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -258. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8N<kVq8Op`OUo51-N");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("8", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]*DP]fX'mN");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 56, (-4826));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(56, simpleCharStream0.getEndLine());
      assertEquals((-4826), simpleCharStream0.getBeginColumn());
      assertEquals((-4826), simpleCharStream0.getEndColumn());
      assertEquals((-4826), simpleCharStream0.getColumn());
      assertEquals(56, simpleCharStream0.getLine());
      assertEquals(56, simpleCharStream0.getBeginLine());
      assertEquals("]", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-4826), token0.endColumn);
      assertEquals(85, token0.kind);
      assertEquals((-4826), token0.beginColumn);
      assertEquals(56, token0.endLine);
      assertEquals(56, token0.beginLine);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 56);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 56. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.ReInit((SimpleCharStream) null);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qB");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1891), (-1538));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      simpleCharStream0.ReInit((InputStream) mockFileInputStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(fileDescriptor0.valid());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals("", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-1025), (-1025));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(4, byteArray0.length);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(4, byteArray0.length);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1025), simpleCharStream0.getColumn());
      assertEquals((-1025), simpleCharStream0.getLine());
      assertEquals((-1025), simpleCharStream0.getBeginColumn());
      assertEquals((-1025), simpleCharStream0.getEndColumn());
      assertEquals((-1025), simpleCharStream0.getEndLine());
      assertEquals((-1025), simpleCharStream0.getBeginLine());
      assertEquals(".", token0.toString());
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-1025), token0.beginColumn);
      assertEquals((-1025), token0.endLine);
      assertEquals((-1025), token0.beginLine);
      assertEquals(82, token0.kind);
      assertEquals((-1025), token0.endColumn);
      assertEquals(4, byteArray0.length);
      assertNotNull(token0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1025), simpleCharStream0.getColumn());
      assertEquals((-1025), simpleCharStream0.getLine());
      assertEquals((-1025), simpleCharStream0.getBeginColumn());
      assertEquals((-1025), simpleCharStream0.getEndColumn());
      assertEquals((-1025), simpleCharStream0.getEndLine());
      assertEquals((-1025), simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IY'G*");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("IY", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Kd {\"dVBf");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.available = (-2031);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{7:<Nar\u0003@cT:Sk3|K");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.bufpos = 4634;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4634, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4635
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = null;
      try {
        xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null, 201);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 201. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("self::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-939), 10);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.SwitchTo(0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(119);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 119. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 0, 0, 0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo((-848));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -848. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!=");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("!=", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(12, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qB");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1891), (-1538));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-1891), simpleCharStream0.getEndLine());
      assertEquals((-1537), simpleCharStream0.getEndColumn());
      assertEquals((-1891), simpleCharStream0.getBeginLine());
      assertEquals((-1891), simpleCharStream0.getLine());
      assertEquals((-1537), simpleCharStream0.getColumn());
      assertEquals((-1538), simpleCharStream0.getBeginColumn());
      assertEquals("qB", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1891), token0.beginLine);
      assertEquals((-1537), token0.endColumn);
      assertEquals((-1891), token0.endLine);
      assertEquals((-1538), token0.beginColumn);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)13, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 391);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)13, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (-1025), (-479));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)13, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(3, byteArray0.length);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)13, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(3, byteArray0.length);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1024, column 1.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("div");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-105);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-105), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-105), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertEquals(5, byteArray0.length);
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream1);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-105), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertEquals(5, byteArray0.length);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u0517\" (1303), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-88);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-88), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-88), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(sequenceInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, (byte) (-125), 29);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-88), (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArray0.length);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-88), (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArray0.length);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-125), simpleCharStream0.getEndLine());
      assertEquals(29, simpleCharStream0.getEndColumn());
      assertEquals(29, simpleCharStream0.getBeginColumn());
      assertEquals(29, simpleCharStream0.getColumn());
      assertEquals((-125), simpleCharStream0.getBeginLine());
      assertEquals((-125), simpleCharStream0.getLine());
      assertEquals("\u01E8", token0.toString());
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-88), (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-125), token0.endLine);
      assertEquals(29, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(29, token0.beginColumn);
      assertEquals((-125), token0.beginLine);
      assertEquals(4, byteArray0.length);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-125);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-88), (byte) (-43), (byte) (-125), (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-88), (byte) (-43), (byte) (-125), (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, byteArray0.length);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-88), (byte) (-43), (byte) (-125), (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, byteArray0.length);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("\u0428\u0543", token0.toString());
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-88), (byte) (-43), (byte) (-125), (byte)0, (byte)0}, byteArray0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(6, byteArray0.length);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte) (-125);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-43), (byte) (-125), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte) (-43), (byte) (-125), (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArray0.length);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte) (-43), (byte) (-125), (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArray0.length);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("\u0543", token0.toString());
      assertArrayEquals(new byte[] {(byte) (-43), (byte) (-125), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(4, byteArray0.length);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      byteArray0[2] = (byte) (-18);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte) (-18), (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte) (-18), (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(5, byteArray0.length);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte) (-18), (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(5, byteArray0.length);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 6.  Encountered: <EOF> after : \"\\'\\ufffd\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-43);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-43), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte) (-43), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArray0.length);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte) (-43), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArray0.length);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'@35_~UFs\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 11.  Encountered: <EOF> after : \"\\'@35_~UFs\\\"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-88);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)105, (byte)66, (byte) (-88), (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)105, (byte)66, (byte) (-88), (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(sequenceInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, 3286, 112);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)105, (byte)66, (byte) (-88), (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, byteArray0.length);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)105, (byte)66, (byte) (-88), (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, byteArray0.length);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3286, simpleCharStream0.getEndLine());
      assertEquals(113, simpleCharStream0.getEndColumn());
      assertEquals(113, simpleCharStream0.getColumn());
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals(3286, simpleCharStream0.getBeginLine());
      assertEquals(3286, simpleCharStream0.getLine());
      assertEquals("iB", token0.toString());
      assertArrayEquals(new byte[] {(byte)105, (byte)66, (byte) (-88), (byte)0, (byte)0}, byteArray0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(112, token0.beginColumn);
      assertEquals(3286, token0.endLine);
      assertEquals(113, token0.endColumn);
      assertEquals(3286, token0.beginLine);
      assertEquals(5, byteArray0.length);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)51, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)51, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
      assertEquals(8, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)51, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, byteArray0.length);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)51, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, byteArray0.length);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(".3", token0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)51, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(8, byteArray0.length);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)51, (byte)46, (byte)51, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)51, (byte)46, (byte)51, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, byteArray0.length);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)51, (byte)46, (byte)51, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, byteArray0.length);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("3.3", token0.toString());
      assertArrayEquals(new byte[] {(byte)51, (byte)46, (byte)51, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(20, token0.kind);
      assertEquals(8, byteArray0.length);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, byteArray0.length);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, byteArray0.length);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("''", token0.toString());
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(18, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(5, byteArray0.length);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"namespace::\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("\"namespace::\"", token0.toString());
      assertEquals(12, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(18, token0.kind);
      assertEquals(13, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("folloling::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.jjround = (-1);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("follol", token0.toString());
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(6, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("substring-before");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(16, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(16, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("substring-before", token0.toString());
      assertEquals(15, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(60, token0.kind);
      assertEquals(16, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("following-sibling::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(19, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(19, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("following-sibling::", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(18, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(19, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(45, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"ancestor-or-self::\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals('\"', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 0);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(19, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(19, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("ancestor-or-self::", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(18, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(19, token0.endColumn);
      assertEquals(44, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("following::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("following::", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(10, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(11, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(42, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("namespace::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals("namespace::", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(10, simpleCharStream0.bufpos);
      assertEquals(40, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(11, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("format-number");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("format-number", token0.toString());
      assertEquals(12, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(13, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(77, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("position");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("position", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(8, token0.endColumn);
      assertEquals(49, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("normalize-space");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(15, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("normalize-space", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(14, simpleCharStream0.bufpos);
      assertEquals(15, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(64, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("string-length");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("string-length", token0.toString());
      assertEquals(12, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(13, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(63, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"parent::\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals("parent::", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(8, token0.endColumn);
      assertEquals(37, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("comment");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("comment", token0.toString());
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(33, token0.kind);
      assertEquals(7, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"namespace-uri\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals('\"', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(14, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(14, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("namespace-uri", token0.toString());
      assertEquals(13, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(14, token0.endColumn);
      assertEquals(2, token0.beginColumn);
      assertEquals(54, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("false", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(5, token0.endColumn);
      assertEquals(69, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("child::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("child::", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(7, token0.endColumn);
      assertEquals(36, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("last");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("last", token0.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(48, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mnam2spac<::\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 100, 100);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      int int0 = stringReader0.read();
      assertEquals(77, int0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(107, simpleCharStream0.getEndColumn());
      assertEquals(100, simpleCharStream0.getBeginLine());
      assertEquals(100, simpleCharStream0.getLine());
      assertEquals(107, simpleCharStream0.getColumn());
      assertEquals(100, simpleCharStream0.getBeginColumn());
      assertEquals(100, simpleCharStream0.getEndLine());
      assertEquals("nam2spac", token0.toString());
      assertEquals(7, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(107, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(100, token0.beginColumn);
      assertEquals(100, token0.endLine);
      assertEquals(100, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("starts-with");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals("starts-with", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(10, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(58, token0.kind);
      assertEquals(11, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("div");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("div", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(30, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sum");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("sum", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(73, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"key\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('\"', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals("key", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(52, token0.kind);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(4, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("text");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals("text", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(32, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("count");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("count", token0.toString());
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(50, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("not", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(67, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("processing-instruction");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(22, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(22, simpleCharStream0.getEndColumn());
      assertEquals("processing-instruction", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(21, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(22, token0.endColumn);
      assertEquals(34, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("contains");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("contains", token0.toString());
      assertEquals(7, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(59, token0.kind);
      assertEquals(8, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("preceding::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("preceding::", token0.toString());
      assertEquals(10, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(11, token0.endColumn);
      assertEquals(41, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"and\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals('\"', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals("and", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(4, token0.endColumn);
      assertEquals(28, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"translate\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('\"', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(10, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(10, simpleCharStream0.getColumn());
      assertEquals("translate", token0.toString());
      assertEquals(9, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(10, token0.endColumn);
      assertEquals(65, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.jxpath.ri.parser.SimpleCharStream");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(52, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(52, simpleCharStream0.getColumn());
      assertEquals("org.apache.commons.jxpath.ri.parser.SimpleCharStream", token0.toString());
      assertEquals(51, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(52, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("id");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("id", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(51, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(6, byteArray0.length);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(6, byteArray0.length);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("//", token0.toString());
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(7, token0.kind);
      assertEquals(6, byteArray0.length);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      int int0 = stringReader0.read();
      assertEquals(102, int0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("alse", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"descendant-or-self::\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 101, (byte)46, (byte)46);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(46, simpleCharStream0.getBeginColumn());
      assertEquals(101, simpleCharStream0.getEndLine());
      assertEquals(46, simpleCharStream0.getEndColumn());
      assertEquals(101, simpleCharStream0.getBeginLine());
      assertEquals(46, simpleCharStream0.getColumn());
      assertEquals(101, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('\"', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(46, simpleCharStream0.getBeginColumn());
      assertEquals(101, simpleCharStream0.getEndLine());
      assertEquals(46, simpleCharStream0.getEndColumn());
      assertEquals(101, simpleCharStream0.getBeginLine());
      assertEquals(46, simpleCharStream0.getColumn());
      assertEquals(101, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(47, simpleCharStream0.getBeginColumn());
      assertEquals(101, simpleCharStream0.getEndLine());
      assertEquals(101, simpleCharStream0.getBeginLine());
      assertEquals(66, simpleCharStream0.getEndColumn());
      assertEquals(66, simpleCharStream0.getColumn());
      assertEquals(101, simpleCharStream0.getLine());
      assertEquals("descendant-or-self::", token0.toString());
      assertEquals(20, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(47, token0.kind);
      assertEquals(101, token0.beginLine);
      assertEquals(66, token0.endColumn);
      assertEquals(101, token0.endLine);
      assertEquals(47, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sdiv");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("sdiv", token0.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)115, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)115, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(10, byteArray0.length);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)115, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(10, byteArray0.length);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("s", token0.toString());
      assertArrayEquals(new byte[] {(byte)115, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(10, byteArray0.length);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, byteArray0.length);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, byteArray0.length);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("..", token0.toString());
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(83, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(6, byteArray0.length);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 6154, (-4585));
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(9, byteArray0.length);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(9, byteArray0.length);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 6154, column -4585.  Encountered: \"{\" (123), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Sz'Fl^h\"X/S(L]WQ");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals('S', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("z", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(2, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yeb97i`?YMRXv#:\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("yeb97i", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(6, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x:8;dS");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("x", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w%[#QzEEf4'K z");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("w", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|vF+GXQhwaH*+3W{?n");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("|", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(8, token0.kind);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("vF", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(78, token1.kind);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uTum6W_");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("uTum6W_", token0.toString());
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(7, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("processing-instruction");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals('p', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(22, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(22, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("rocessing-instruction", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(21, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(22, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4mZDn-ILq%R+ 6");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("4", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(9, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(9, simpleCharStream0.getColumn());
      assertEquals("mZDn-ILq", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, simpleCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(9, token1.endColumn);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Rl=Jy({d)8+dN't");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 5, 1501, 13);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(5, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getEndLine());
      assertEquals(1501, simpleCharStream0.getColumn());
      assertEquals(1501, simpleCharStream0.getBeginColumn());
      assertEquals(1501, simpleCharStream0.getEndColumn());
      assertEquals(5, simpleCharStream0.getLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals('R', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(5, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getEndLine());
      assertEquals(1501, simpleCharStream0.getColumn());
      assertEquals(1501, simpleCharStream0.getBeginColumn());
      assertEquals(1501, simpleCharStream0.getEndColumn());
      assertEquals(5, simpleCharStream0.getLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1502, simpleCharStream0.getColumn());
      assertEquals(5, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getEndLine());
      assertEquals(1502, simpleCharStream0.getBeginColumn());
      assertEquals(1502, simpleCharStream0.getEndColumn());
      assertEquals(5, simpleCharStream0.getLine());
      assertEquals("l", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1502, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(5, token0.endLine);
      assertEquals(5, token0.beginLine);
      assertEquals(1502, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8<kq8Op`Uo51-N");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("8", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("<", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(13, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals("kq8Op", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(78, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(7, token2.endColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jxRV!]^");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("jxRV", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(4, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">h>6S");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(">", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(15, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("h", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(e!W4y");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('(', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("e", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_[=W z4V(#@8>p\"H");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("_", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^,@WE/[C?sMk{g");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"^\" (94), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q72P[2Sy{>");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("q72P", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(4, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("[", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(5, token1.endColumn);
      assertEquals(5, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(84, token1.kind);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Zj*@>E");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("Zj", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FY.>");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('F', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("Y.", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V{OaKCPrV(");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("V", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Slt;UK`yn=fL#m5IXA");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("Slt", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(';', char0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("UK", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(5, token1.beginColumn);
      assertEquals(6, token1.endColumn);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R&P,bi67");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("R", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QUgP]A;pzx");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("QUgP", token0.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("]", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(5, token1.endColumn);
      assertEquals(85, token1.kind);
      assertEquals(5, token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("POtP\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("POtP", token0.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L\"e)-tx 45Y");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("L", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Kd {\"dVBf");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("Kd", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JJ*q@;E,[F{H&Gt#a");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("JJ", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("HWNct|c");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("HWNct", token0.toString());
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(5, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G<v");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("G", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("F", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("56E");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("56", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("E", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<CombiningChar>");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("<", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(13, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(14, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(14, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("CombiningChar", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(13, simpleCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(14, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Bw EAbY&&xkuroSJpb");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("Bw", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A1x");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("A1x", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@w5");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("@", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(86, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("O?t<h\f0G&TB&v-gDj");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("O", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"?\" (63), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!=");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals('!', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("=", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(11, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"<\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('\"', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("<", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(13, token0.kind);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Slt;UK`yn=fL#m5IXA");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("Slt", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \";\" (59), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"pavent::\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("pavent", token0.toString());
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(":", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(79, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(7, token1.endColumn);
      assertEquals(7, token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9:8;d");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("9", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8N<kVq8Op`OUo51-N");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("8", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("N", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(78, token1.kind);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{7:<Nar\u0003@cT:Sk3|K");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('{', char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("7", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6X@B'*ha");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("6", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2strMfg\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("2", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A1x");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      int int0 = stringReader0.read();
      assertEquals(65, int0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("1", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0T.cio%]Zmu=?*Jd");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("0", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("T.cio", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(6, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-names%acE::\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("-", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(10, token0.kind);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("names", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(6, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("+", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(9, token0.kind);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]*DP]fX'mN");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(']', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 0);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("*", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(88, token0.kind);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals("DP", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(4, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4o-TV)[/KaZ]");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("4", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("o-TV", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(78, token1.kind);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(6, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(")", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(6, token2.endColumn);
      assertEquals(6, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(81, token2.kind);
      assertEquals(1, token2.endLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ggnm(Vy7At5|#g8a^Z");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals("ggnm", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(4, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals("(", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(80, token1.kind);
      assertEquals(5, token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)38}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-258), (byte)38);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)38}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, byteArray0.length);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)38}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, byteArray0.length);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -258, column 39.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d,%Y;M'-4b3U!:6?");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 56, 56);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(56, simpleCharStream0.getColumn());
      assertEquals(56, simpleCharStream0.getLine());
      assertEquals(56, simpleCharStream0.getEndColumn());
      assertEquals(56, simpleCharStream0.getBeginColumn());
      assertEquals(56, simpleCharStream0.getEndLine());
      assertEquals(56, simpleCharStream0.getBeginLine());
      assertEquals("d", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(56, token0.beginLine);
      assertEquals(56, token0.beginColumn);
      assertEquals(56, token0.endColumn);
      assertEquals(56, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(56, simpleCharStream0.getLine());
      assertEquals(57, simpleCharStream0.getEndColumn());
      assertEquals(57, simpleCharStream0.getColumn());
      assertEquals(57, simpleCharStream0.getBeginColumn());
      assertEquals(56, simpleCharStream0.getEndLine());
      assertEquals(56, simpleCharStream0.getBeginLine());
      assertEquals(",", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(57, token1.beginColumn);
      assertEquals(56, token1.beginLine);
      assertEquals(87, token1.kind);
      assertEquals(56, token1.endLine);
      assertEquals(57, token1.endColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 56, column 58.  Encountered: \"%\" (37), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Wgj$");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("Wgj", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("$", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(17, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(4, token1.endColumn);
      assertEquals(4, token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#gV8h+J&i(");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("subsring-a fter");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(10, simpleCharStream0.getEndColumn());
      assertEquals(10, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("subsring-a", token0.toString());
      assertEquals(9, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(10, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fallse");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals("fallse", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("diOAv");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("diOAv", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(5, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("56b");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("56", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("b", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(78, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X9IL!AB2X~&!NI6y]");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals("X9IL", token0.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 6.  Encountered: \"A\" (65), after : \"!\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"ancestor-orself::\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals('\"', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(16, simpleCharStream0.getColumn());
      assertEquals(16, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals("ancestor-orself", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(15, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(16, token0.endColumn);
      assertEquals(2, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader("format-GFmber");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("format-GFmber", token0.toString());
      assertEquals(12, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(13, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"string\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals('\"', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("string", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(56, token0.kind);
      assertEquals(7, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"name\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (byte)46, (byte)46, 123);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(46, simpleCharStream0.getLine());
      assertEquals(46, simpleCharStream0.getEndColumn());
      assertEquals(46, simpleCharStream0.getColumn());
      assertEquals(46, simpleCharStream0.getBeginColumn());
      assertEquals(46, simpleCharStream0.getEndLine());
      assertEquals(46, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('\"', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(46, simpleCharStream0.getLine());
      assertEquals(46, simpleCharStream0.getEndColumn());
      assertEquals(46, simpleCharStream0.getColumn());
      assertEquals(46, simpleCharStream0.getBeginColumn());
      assertEquals(46, simpleCharStream0.getEndLine());
      assertEquals(46, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(50, simpleCharStream0.getEndColumn());
      assertEquals(46, simpleCharStream0.getLine());
      assertEquals(47, simpleCharStream0.getBeginColumn());
      assertEquals(50, simpleCharStream0.getColumn());
      assertEquals(46, simpleCharStream0.getEndLine());
      assertEquals(46, simpleCharStream0.getBeginLine());
      assertEquals("name", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(46, token0.beginLine);
      assertEquals(55, token0.kind);
      assertEquals(50, token0.endColumn);
      assertEquals(46, token0.endLine);
      assertEquals(47, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sxR>=]^");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("sxR", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(">=", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, token1.beginColumn);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(16, token1.kind);
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader("following:m");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(9, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(9, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("following", token0.toString());
      assertEquals(8, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(9, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("substring-after");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(15, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("substring-after", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(14, simpleCharStream0.bufpos);
      assertEquals(61, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(15, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader("56E");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.setDebugStream(xPathParserTokenManager0.debugStream);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }
}
