/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 20:29:38 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.zip.Deflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.DeflaterSink;
import okio.HashingSink;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        byteString0.substring(1237, 65);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      String string0 = byteString1.toString();
      assertEquals("[hex=6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d]", string0);
      
      ByteString byteString2 = byteString0.hmacSha512(byteString1);
      boolean boolean0 = byteString2.endsWith(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("-9223372036854775808");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: -
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("U+xW@Y)]u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: U+xW@Y)]u
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byte[] byteArray0 = byteString0.internalArray();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("I");
      int int0 = byteString0.lastIndexOf(byteString0);
      assertEquals(0, int0);
      assertEquals(1, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      byteString1.EMPTY.lastIndexOf(byteArray0, 2119);
      byteString1.endsWith(byteArray0);
      String string0 = byteString1.toString();
      assertEquals("[hex=6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      boolean boolean0 = byteString1.endsWith(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      byte[] byteArray0 = new byte[0];
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.endsWith(byteString1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.encodeUtf8("?");
      byteString0.EMPTY.hashCode();
      String string0 = byteString0.toString();
      assertEquals("[text=?]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha256();
      int int0 = byteString0.indexOf(byteArray0, (-295));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("Jv|)JM*oe-Qv=vO2");
      assertNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("4");
      // Undeclared exception!
      try { 
        byteString0.substring(76);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("-01N}'A|5CJq0");
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("(ee/W[Y2<9NW$^~>W", charset0);
      MockFile mockFile0 = new MockFile("(ee/W[Y2<9NW$^~>W", "(ee/W[Y2<9NW$^~>W");
      ByteString byteString1 = byteString0.substring(0, 0);
      assertEquals(13, byteString0.size());
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
      
      ByteString byteString1 = byteString0.toAsciiUppercase();
      Charset.defaultCharset();
      Charset.defaultCharset();
      ByteString byteString2 = new ByteString(byteArray0);
      byteString1.toString();
      String string0 = byteString2.toString();
      assertEquals("[hex=0c000000000000]", string0);
      
      ByteString byteString3 = byteString2.sha1();
      byteString3.EMPTY.substring((int) (byte)0);
      int int0 = byteString1.compareTo(byteString2);
      assertEquals(0, int0);
      
      byteString1.sha256();
      assertTrue(byteString0.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString byteString1 = byteString0.toAsciiLowercase();
      Buffer buffer0 = new Buffer();
      byteString1.write(buffer0);
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      byteString1.compareTo(byteString0);
      ByteString byteString2 = byteString0.sha256();
      assertEquals(32, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString byteString1 = byteString0.md5();
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      String string0 = byteString1.utf8();
      assertNotNull(string0);
      
      int int0 = byteString0.indexOf(byteString1, 48);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      byteString0.toString();
      boolean boolean0 = byteString1.rangeEquals(1220, byteArray0, 1220, 1220);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("RwvT=\"#Cd0_qT");
      byte[] byteArray0 = byteString0.toByteArray();
      int int0 = byteString0.indexOf(byteArray0, 2360);
      assertEquals(13, byteString0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("HmacSHA1", 0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("I");
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.startsWith((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("e}yF");
      ByteString byteString1 = byteString0.sha1();
      int int0 = byteString1.lastIndexOf(byteString0, 24);
      assertEquals((-1), int0);
      
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertFalse(boolean0);
      
      int int1 = byteString0.size();
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("zgqq@$xvCwE+2j@<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: z
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha1();
      ByteString byteString1 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("7|r%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: |
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("endIndex > length(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: n
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("4");
      ByteString byteString1 = byteString0.toAsciiLowercase();
      String string0 = byteString0.utf8();
      assertSame(byteString0, byteString1);
      assertEquals("4", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Pipe pipe0 = new Pipe(3497L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha512(pipe_PipeSink0);
      ByteString byteString0 = hashingSink0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=c884ee44cee8484a8e442840a66a800ca620e404044ce4ac8484a82ea46ce8ce4ca0ae4c4a8482408884e8a28cceec2864484e4a4c4eca8ea44842ca882caa4e]", string0);
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("e}yF");
      String string0 = byteString0.base64Url();
      assertEquals("ZX15Rg==", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      byteString1.toString();
      byteString1.hex();
      byteString0.endsWith(byteString1);
      ByteString byteString2 = byteString1.hmacSha256(byteString0);
      assertNotSame(byteString0, byteString2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("e}yF");
      String string0 = byteString0.base64();
      assertEquals("ZX15Rg==", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream(21);
      try { 
        ByteString.read(pipedInputStream0, 21);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Mo8A-=ioz.");
      Object object0 = new Object();
      boolean boolean0 = byteString0.EMPTY.equals(object0);
      assertFalse(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[text=Mo8A-=ioz.]", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hex();
      String string0 = byteString0.hex();
      assertEquals("00000000000000", string0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.md5();
      int int0 = byteString0.indexOf(byteString1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString byteString1 = byteString0.toAsciiLowercase();
      ByteString byteString2 = byteString0.sha512();
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = ByteString.encodeUtf8("-01N}'A|5CJq0");
      ByteString.encodeUtf8("2/Ov;N2M^#/;");
      String string0 = byteString0.toString();
      assertEquals("[text=-01N}'A|5CJq0]", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("QFBj\"Ay7?_~dw~hTr$", 110);
      PipedInputStream pipedInputStream0 = new PipedInputStream(82);
      // Undeclared exception!
      try { 
        ByteString.read(pipedInputStream0, (-953));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -953
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("-01N}'A|5CJbq0");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString1.sha256();
      // Undeclared exception!
      try { 
        byteString1.substring((-441));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.rangeEquals((-3010), byteArray0, (-3010), (-3010));
      ByteString byteString1 = byteString0.sha1();
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.sha256();
      ByteString byteString1 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Expected leading [09a-fA-F] character but was 0x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: x
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      int int0 = byteString1.EMPTY.lastIndexOf(byteString0, 57);
      assertEquals((-1), int0);
      
      ByteString byteString2 = new ByteString(byteArray0);
      String string0 = byteString2.toString();
      assertEquals("[hex=aa]", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      byteString0.EMPTY.rangeEquals(0, byteArray0, 0, 0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      boolean boolean0 = byteString0.EMPTY.startsWith(byteArray0);
      assertFalse(boolean0);
      
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      ByteString byteString3 = new ByteString(byteArray0);
      byteString2.equals(byteString1);
      byteString0.internalArray();
      String string0 = byteString3.toString();
      assertEquals("[hex=aa]", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("?");
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      HashingSink hashingSink0 = HashingSink.sha1(deflaterSink0);
      ByteString byteString1 = hashingSink0.hash();
      String string0 = byteString0.toString();
      assertEquals("[text=?]", string0);
      
      String string1 = byteString1.toString();
      assertEquals("[hex=a84884444484444a484448488484e48488a44c48]", string1);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSink hashingSink1 = HashingSink.sha512(hashingSink0);
      ByteString byteString2 = hashingSink1.hash();
      byteString2.internalArray();
      ByteString byteString3 = byteString0.md5();
      boolean boolean0 = byteString0.equals(byteString1);
      assertFalse(boolean0);
      
      byteString3.sha256();
      assertFalse(byteString0.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
      
      ByteString byteString1 = byteString0.toAsciiUppercase();
      Charset.defaultCharset();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString.of(byteBuffer0);
      ByteString byteString2 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=44444444444444]", string0);
      
      ByteString byteString3 = new ByteString(byteArray0);
      byteString0.equals(byteString2);
      byteString2.internalArray();
      assertTrue(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      byteString0.EMPTY.rangeEquals(0, byteArray0, 0, 1093);
      int int0 = ObjectStreamConstants.baseWireHandle;
      Charset charset0 = Charset.defaultCharset();
      String string0 = null;
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeString("!fa", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 4406);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      boolean boolean0 = byteString0.EMPTY.startsWith(byteArray0);
      assertFalse(boolean0);
      
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      byteString2.EMPTY.base64();
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString2.equals((Object)byteString1));
      
      ByteString byteString3 = new ByteString(byteArray0);
      assertTrue(byteString3.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("-01N}'A|5CJq0");
      assertEquals(13, byteString0.size());
      
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("(ee/W[Y2<9NW$^~>W", charset0);
      MockFile mockFile0 = new MockFile("(ee/W[Y2<9NW$^~>W", "(ee/W[Y2<9NW$^~>W");
      ByteString byteString1 = byteString0.substring(10, 10);
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.of(byteArray0, 0, 0);
      ByteString byteString2 = byteString0.sha1();
      int int0 = byteString1.compareTo(byteString2);
      assertEquals(0, byteString1.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("US-ASCII");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1682);
      byteString0.write(bufferedOutputStream0);
      assertEquals(6, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      byteString0.EMPTY.rangeEquals(0, byteArray0, 0, 0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      byteString0.EMPTY.startsWith(byteArray0);
      byteString0.sha1();
      PipedInputStream pipedInputStream0 = new PipedInputStream(8257536);
      ByteString byteString1 = ByteString.read(pipedInputStream0, 0);
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Pipe pipe0 = new Pipe(3497L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      HashingSink hashingSink0 = HashingSink.sha512(realBufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=88444e44c448444a8e448444a88a444ca8844444444ce4a84484888ea48848844ca4ae484a4488448844e4a84cc4488884484e4a4c4ec84e844448c8888ca844]", string0);
      
      byteString0.size();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString byteString1 = realBufferedSource0.readByteString();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("-01N}'A|5CJbq0");
      String string0 = byteString0.toString();
      Charset charset0 = Charset.defaultCharset();
      String string1 = byteString0.string(charset0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.sha256();
      byteString1.hmacSha256(byteString0);
      ByteString byteString2 = new ByteString(byteArray0);
      String string0 = byteString1.utf8;
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 17, 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.startsWith(byteArray0);
      byteString0.toAsciiUppercase();
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)42;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte)39;
      byteArray1[2] = (byte)42;
      byteArray1[3] = (byte)39;
      byteArray1[4] = (byte)42;
      byteArray1[5] = (byte)70;
      byteArray1[6] = (byte)42;
      byteString1.startsWith(byteArray1);
      byteString0.toString();
      ByteString.of(byteArray0);
      try { 
        MockURI.URI("NW^~7:(oc.r+(", "`ICby0m509y+KhHki", "NW^~7:(oc.r+(", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: NW^~7:(oc.r+(://`ICby0m509y+KhHkiNW%5E~7:(oc.r+(
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      ByteString byteString0 = new ByteString(byteArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      byteString0.equals(object2);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.toString();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        ByteString.read(byteArrayInputStream0, (byte)50);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("?");
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      HashingSink hashingSink0 = HashingSink.sha1(deflaterSink0);
      Buffer buffer1 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HashingSink.sha512(deflaterSink0);
      ByteString byteString1 = hashingSink0.hash();
      ByteString byteString2 = byteString0.hmacSha512(byteString1);
      byteString2.toString();
      byteString0.hmacSha1(byteString1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ByteString.encodeUtf8("e}yF");
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }
}
