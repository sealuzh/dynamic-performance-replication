/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 01:15:33 GMT 2019
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-451.16328604);
      doubleArray0[1] = 4.9E-324;
      doubleArray0[2] = (-2085.50035);
      doubleArray0[3] = (-84.7166);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 121.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-731.86335935);
      doubleArray0[8] = 8.68749516769185E-12;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      String string0 = matrix0.mkString(numberFormat0);
      assertEquals("203,548.311 -0   940,901.191   38,221.02 -451.163  -54,590.758 -0   330,189.878 -0\n         -0  0            -0          -0        0            0  0            -0  0\n940,901.191 -0  4,349,311.71 176,676.499 -2,085.5 -252,345.542 -0 1,526,301.292 -0\n  38,221.02 -0   176,676.499   7,176.902  -84.717  -10,250.709 -0    62,000.975 -0\n   -451.163  0      -2,085.5     -84.717        1          121  0      -731.863  0\n-54,590.758  0  -252,345.542 -10,250.709      121       14,641  0   -88,555.466  0\n         -0  0            -0          -0        0            0  0            -0  0\n330,189.878 -0 1,526,301.292  62,000.975 -731.863  -88,555.466 -0   535,623.977 -0\n         -0  0            -0          -0        0            0  0            -0  0\n", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("        ");
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      int int0 = matrix0.rank();
      assertEquals(0, int0);
      assertEquals(1, matrix0.columns());
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "%%MatrixMarket matrix coordinate real general ";
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(1352);
      DenseVector denseVector0 = DenseVector.zero(1352);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateColumn(4, vectorFunction0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3844, 3844, 3844);
      Vector vector0 = columnMajorSparseMatrix0.toColumnVector();
      // Undeclared exception!
      columnMajorSparseMatrix0.insertRow(3, vector0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(1);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      Matrix matrix1 = Matrix.unit(1, 1);
      Matrix matrix2 = matrix0.hadamardProduct(matrix1);
      double double0 = matrix0.determinant();
      assertEquals(1.0, double0, 0.01);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      String string0 = matrix2.toMatrixMarket(numberFormat0);
      assertEquals("%%MatrixMarket matrix array real general\n1 1\n100%\n", string0);
      
      matrix0.swapRows(1, 1);
      matrix2.columnMajorIterator();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      matrix2.withDecompositor(linearAlgebra_DecompositorFactory0);
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)matrix2));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 4512;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 4512;
      doubleArray0[1] = (double) 4512;
      doubleArray0[3] = (double) 4512;
      doubleArray0[4] = (double) 4512;
      doubleArray0[5] = (-150.51370851433);
      doubleArray0[6] = (double) 4512;
      Matrix matrix0 = Matrix.from1DArray(4512, 4512, doubleArray0);
      int int1 = 247;
      Matrix matrix1 = matrix0.blankOfRows(247);
      int[] intArray0 = new int[4];
      matrix1.toRowVector();
      int int2 = 219;
      intArray0[2] = 247;
      intArray0[3] = 247;
      // Undeclared exception!
      try { 
        matrix1.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '247' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      linkedList0.iterator();
      Matrix matrix0 = sparseVector0.toRowMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      int int0 = (-1945);
      // Undeclared exception!
      try { 
        Matrix.constant((-660), (-1945), (-1814.4));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(16, 16, 16);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      int int0 = matrix0.rank();
      assertEquals(0, int0);
      assertEquals(16, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "\n";
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("\n");
      int int0 = 17;
      columnMajorSparseMatrix0.determinant();
      int int1 = (-129);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(17, (-129));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 17x-129
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      linkedList0.iterator();
      Matrix matrix0 = sparseVector0.toRowMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      int int0 = (-1945);
      // Undeclared exception!
      try { 
        Matrix.constant((-660), (-1945), (-1814.4));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 32;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(32, 32);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      rowMajorSparseMatrix0.equals(matrix0, 1448.93989479);
      int int1 = (-1325);
      int[] intArray0 = new int[3];
      intArray0[0] = 32;
      intArray0[1] = (-1325);
      intArray0[2] = (-1325);
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '32' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(5);
      denseMatrix0.euclideanNorm();
      Matrix matrix0 = denseMatrix0.transpose();
      matrix0.removeFirstColumn();
      denseMatrix0.removeFirstColumn();
      denseMatrix0.multiply(1.0);
      // Undeclared exception!
      try { 
        matrix0.setColumn(378, (-52.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1);
      // Undeclared exception!
      try { 
        denseMatrix0.power((-4497));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -4497.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(25);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      sparseMatrix0.non(matrixPredicate0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.updateColumn(25, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '25' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, 1658.194, (Random) null);
      rowMajorSparseMatrix0.setRow(0, 1.0);
      double double0 = (-1093.32039706);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0, 0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      int int1 = (-2280);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert(matrix0, 0, (-2280));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 0x-2280
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(6, 6);
      boolean boolean0 = rowMajorSparseMatrix0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 900;
      int int1 = 881;
      Matrix matrix0 = Matrix.constant(900, 881, (-1.0));
      matrix0.iteratorOfColumn(900);
      matrix0.blankOfColumns(900);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(30, 30);
      matrix0.toBinary();
      Matrix matrix1 = matrix0.subtract((double) 30);
      matrix1.determinant();
      // Undeclared exception!
      try { 
        SparseVector.random(440, (double) 440, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 7;
      Matrix matrix0 = Matrix.unit(7, 7);
      matrix0.minInRow(3);
      Matrix matrix1 = matrix0.blank();
      matrix1.toString();
      matrix1.equals((Object) matrix0);
      matrix1.iteratorOfRow(123);
      // Undeclared exception!
      try { 
        matrix1.maxInRow(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 17;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(17);
      denseMatrix0.rowMajorIterator();
      denseMatrix0.setColumn(9, (double) 9);
      int int1 = (-3299);
      // Undeclared exception!
      try { 
        denseMatrix0.set((-3299), (-611), 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 37;
      int int1 = 5;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(37, 5);
      double double0 = (-72.0);
      sparseMatrix0.add((-72.0));
      sparseMatrix0.toRowMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 2;
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 2);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.blank();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(635, 2, 2);
      rowMajorSparseMatrix0.equals(matrix1, 4.9E-324);
      // Undeclared exception!
      try { 
        matrix1.insert((Matrix) rowMajorSparseMatrix0, (-1), 635, 635, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1, 635
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 2;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(2, 2, 0.0, (Random) mockRandom0);
      int int1 = 10;
      int int2 = 896;
      int int3 = (-2150);
      columnMajorSparseMatrix0.nonZeroRowMajorIterator();
      int int4 = 5;
      columnMajorSparseMatrix0.removeFirstRow();
      Matrix.zero(10, 10);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert((Matrix) null, 10, 2, 896, (-2150), 10, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 896, -2150
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2736.29;
      doubleArray1[1] = (-1328.878);
      doubleArray1[2] = 928.5098129;
      doubleArray1[3] = 1.6963937481440345E-10;
      doubleArray1[4] = (-709.0);
      doubleArray1[5] = 782.5;
      doubleArray1[6] = 570.5454927685;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-4024.01303896);
      doubleArray2[1] = 1.6963937481440345E-10;
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.max();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(7, 2, 2);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      matrix0.toCSV(numberFormat0);
      // Undeclared exception!
      try { 
        matrix0.removeRow((-701));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(951, 1508.67059);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(951, 7);
      columnMajorSparseMatrix0.removeFirstRow();
      MockRandom mockRandom0 = new MockRandom();
      double[][] doubleArray0 = new double[0][9];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1508.67059;
      doubleArray1[1] = (double) 7;
      doubleArray1[2] = (double) 951;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray1);
      ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, sparseVector0);
      DenseVector denseVector0 = DenseVector.random(951, mockRandom0);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, denseVector0);
      matrix0.multiply(vector0);
      // Undeclared exception!
      try { 
        matrix0.removeColumn((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..950
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 16;
      SparseVector sparseVector0 = SparseVector.zero(16, 13);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      matrix0.insertColumn(13, sparseVector0);
      // Undeclared exception!
      try { 
        matrix0.removeColumn(16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..15
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(9, 1920);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertColumn(9, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RowMajorSparseMatrix.diagonal(2515, 2515);
      RowMajorSparseMatrix.identity(2664);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(0, (-966.0));
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(1155, mockRandom0);
      // Undeclared exception!
      try { 
        matrix0.insertRow(1, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 8.68749516769185E-12;
      doubleArray0[1] = 782.5;
      doubleArray0[2] = (-2317.8648);
      doubleArray0[3] = (-4399.0);
      doubleArray0[4] = 3141.596085397604;
      doubleArray0[5] = 0.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      int int0 = 17;
      Matrix matrix1 = matrix0.copyOfRows(17);
      // Undeclared exception!
      try { 
        matrix1.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(17, 17);
      sparseMatrix0.equals((Matrix) sparseMatrix0, 2970.208043922063);
      Matrix matrix0 = sparseMatrix0.shuffle();
      Matrix matrix1 = matrix0.multiply(1.9633820163005063E-4);
      matrix0.swapRows(567, 567);
      assertTrue(matrix0.equals((Object)sparseMatrix0));
      
      sparseMatrix0.iterator();
      assertFalse(sparseMatrix0.equals((Object)matrix1));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 13;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(13, 8.68749516769185E-12);
      denseMatrix0.hashCode();
      denseMatrix0.determinant();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("&dtyPzz]:,H~}#M;&p", decimalFormatSymbols0);
      denseMatrix0.mkString((NumberFormat) decimalFormat0);
      String string0 = "org.la4j.iterator.ColumnMajorMatrixIterator";
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("org.la4j.iterator.ColumnMajorMatrixIterator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(1, 782.5);
      matrix0.diagonalProduct();
      Matrix matrix1 = Matrix.constant(1, 1, 782.5);
      matrix0.toBinary();
      matrix1.rank();
      matrix1.add(matrix0);
      int int0 = 9;
      MockRandom mockRandom0 = new MockRandom(1);
      // Undeclared exception!
      try { 
        SparseVector.random(32, 328.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 9;
      Matrix matrix0 = Matrix.unit(9, 9);
      matrix0.maxInRow(8);
      matrix0.blankOfColumns(1107);
      int[] intArray0 = new int[4];
      intArray0[0] = 8;
      intArray0[1] = 9;
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      // Undeclared exception!
      try { 
        SparseVector.zero((-255), (-255));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -255
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1502);
      Matrix matrix0 = columnMajorSparseMatrix0.add((double) 1502);
      matrix0.iteratorOfRow(1502);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 11);
      // Undeclared exception!
      try { 
        matrix0.setRow(22, (Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 11. Should be: 1502.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.zero(924);
      Matrix matrix0 = denseVector0.toRowMatrix();
      double double0 = matrix0.min();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(10, 10, mockRandom0);
      // Undeclared exception!
      try { 
        denseMatrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      int int1 = 1000;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(0, 1000);
      Matrix matrix0 = denseMatrix0.copyOfShape(1000, 0);
      denseMatrix0.infinityNorm();
      denseMatrix0.columns();
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, 1000, 1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1000 rows and 1000 cols at 0, 0 in a 1000x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(13, (-479.2235));
      matrix0.toString();
      matrix0.setAll(13);
      matrix0.removeFirstColumn();
      Matrix matrix1 = matrix0.rotate();
      matrix0.swapColumns(2409, 2409);
      matrix0.diagonalProduct();
      matrix1.hashCode();
      // Undeclared exception!
      try { 
        matrix0.removeColumn(2409);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..12
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 21;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(21);
      columnMajorSparseMatrix0.setAll(21);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.updateColumn(21, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(747, 10);
      matrix0.spliterator();
      // Undeclared exception!
      try { 
        matrix0.swapColumns(747, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 748
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3847, 3847);
      sparseMatrix0.nonZeroAt(46, 46);
      // Undeclared exception!
      try { 
        sparseMatrix0.sliceTopLeft((-930), (-930));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-930][0..-930].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = null;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("    ");
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) null, 1910, 1217, 1217, 1217, 1217, 1217);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 1217, 1217
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1497, 1497);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(sparseMatrix0, sparseMatrix0);
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1497;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 1497;
      doubleArray2[1] = 8.68749516769185E-12;
      doubleArray2[2] = (double) 1497;
      doubleArray2[3] = (double) 1497;
      doubleArray2[4] = (double) 1497;
      doubleArray2[5] = (double) 1497;
      doubleArray2[6] = 1717.39852485;
      doubleArray2[7] = (double) 1497;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 1311.344514;
      doubleArray3[1] = (double) 1497;
      doubleArray3[2] = 1717.39852485;
      doubleArray3[3] = 8.68749516769185E-12;
      doubleArray3[4] = 1717.39852485;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 1311.344514;
      doubleArray4[1] = 1311.344514;
      doubleArray4[2] = (double) 1497;
      doubleArray4[3] = 1717.39852485;
      doubleArray4[4] = 1717.39852485;
      doubleArray4[5] = 8.68749516769185E-12;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 1717.39852485;
      doubleArray5[1] = 8.68749516769185E-12;
      doubleArray5[2] = 8.68749516769185E-12;
      doubleArray5[3] = 1717.39852485;
      doubleArray5[4] = 1.9633820163005063E-4;
      doubleArray5[5] = 1717.39852485;
      doubleArray5[6] = 1717.39852485;
      doubleArray5[7] = 1311.344514;
      doubleArray5[8] = 293.0094677349;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 1717.39852485;
      doubleArray6[1] = 977.0;
      doubleArray6[2] = 8.68749516769185E-12;
      doubleArray6[3] = (double) 1497;
      doubleArray0[5] = doubleArray6;
      Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      sparseMatrix0.kroneckerProduct(matrix0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 17.0;
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.setAll(17.0);
      VectorFunction vectorFunction0 = null;
      // Undeclared exception!
      try { 
        matrix0.transformRow(1332, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 2;
      Matrix matrix0 = Matrix.unit(2, 2);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      Matrix matrix1 = Matrix.diagonal(1716, 1716);
      matrix1.rowMajorIterator();
      matrix0.determinant();
      matrix0.multiplyByItsTranspose();
      Vector vector0 = null;
      // Undeclared exception!
      try { 
        matrix0.insertRow((-585), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 1452;
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        SparseMatrix.zero(1452, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 6;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(6);
      Double double0 = new Double(6);
      Double.min(6, (-493.669930695696));
      sparseMatrix0.equals((Object) double0);
      int int1 = 1465;
      // Undeclared exception!
      try { 
        sparseMatrix0.sliceBottomRight(6, 1465);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [6..6][1465..6].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 582;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(582, 582, 582);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      columnMajorSparseMatrix0.foldColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 103.114;
      doubleArray1[1] = 462.46866743;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 2654.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-1831.37664622);
      doubleArray1[6] = (-1.0);
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      int int0 = 1000;
      rowMajorSparseMatrix0.blankOfColumns(1000);
      Matrix matrix0 = rowMajorSparseMatrix0.shuffle();
      matrix0.insert((Matrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        Matrix.fromCSV(":h");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 16;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(16, 16);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply((double) 16);
      int int1 = 33;
      matrix0.norm();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.maxInColumn(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 31);
      Locale locale0 = Locale.KOREAN;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      sparseVector0.toCSV(numberFormat0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      // Undeclared exception!
      try { 
        Matrix.block(denseMatrix0, denseMatrix0, matrix0, denseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '32' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3);
      DenseMatrix.random(3, 22, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 962);
      Matrix matrix0 = denseVector0.toRowMatrix();
      Matrix matrix1 = matrix0.divide(0.0);
      assertFalse(matrix1.equals((Object)matrix0));
      assertEquals(962, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 8.68749516769185E-12;
      doubleArray0[1] = 8.68749516769185E-12;
      doubleArray0[2] = (-2317.8648);
      doubleArray0[3] = (-4399.0);
      doubleArray0[4] = 3141.596085397604;
      doubleArray0[5] = 0.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.copyOfRows(17);
      double double0 = new Double((-2317.8648));
      matrix1.iteratorOfColumn(17);
      matrix1.euclideanNorm();
      Matrix matrix2 = matrix0.rotate();
      matrix2.swapRows(17, 17);
      matrix1.infinityNorm();
      int[] intArray0 = new int[6];
      intArray0[0] = 17;
      intArray0[1] = 17;
      intArray0[2] = 17;
      intArray0[3] = 17;
      intArray0[4] = 17;
      intArray0[5] = 17;
      int[] intArray1 = new int[1];
      intArray1[0] = 17;
      // Undeclared exception!
      try { 
        matrix1.select(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 3410;
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 3410);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      sparseVector0.blankOfLength(3410);
      sparseVector0.product();
      matrix0.toSparseMatrix();
      sparseVector0.setAll(3410);
      matrix0.columns();
      matrix0.hashCode();
      Matrix matrix1 = matrix0.subtract((double) 1);
      Matrix.constant(3, 3, 0.0);
      Matrix matrix2 = Matrix.zero(375, 375);
      matrix2.rotate();
      // Undeclared exception!
      try { 
        matrix2.insert(matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 3410 rows and 1 cols at 0, 0 in a 375x375 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(32, Integer.MAX_VALUE);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      matrix0.hashCode();
      // Undeclared exception!
      try { 
        matrix0.setColumn(Integer.MAX_VALUE, (-966.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2147483647' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-3154.4818);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-3154.4818);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-2351.546963453507);
      doubleArray3[2] = (-3154.4818);
      doubleArray0[2] = doubleArray3;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.transpose();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 973;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(973, 973);
      int int1 = (-2357);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertColumn((-2357), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..972
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 305;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(305);
      int int1 = (-2719);
      int int2 = 0;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.transform((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 48;
      int int1 = Integer.MAX_VALUE;
      SparseVector sparseVector0 = SparseVector.zero(48, Integer.MAX_VALUE);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        matrix0.product();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom(3255L);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(5, mockRandom0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.setRow((-2254), (double) (-2254));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 14;
      Matrix.identity(14);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = (-4642);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero(32, (-4642), (-4642));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 32x-4642
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      int int1 = 3299;
      int int2 = (-2064);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(Integer.MAX_VALUE, 3299, (-2064));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.fromCSV("6");
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      Matrix matrix1 = Matrix.fromCSV("6");
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix1);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      String string0 = columnMajorSparseMatrix0.toCSV(numberFormat0);
      assertTrue(matrix1.equals((Object)matrix0));
      assertEquals("\u00A46.00, \u00A46.00\n\u00A46.00, \u00A46.00\n", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 10;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(10);
      int int1 = 1462;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.removeColumn(1462);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..9
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 3299;
      Matrix matrix0 = Matrix.constant(3299, 3299, 3299);
      // Undeclared exception!
      try { 
        matrix0.hadamardProduct((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed(9);
      Matrix matrix0 = Matrix.randomSymmetric(9, mockRandom0);
      Matrix matrix1 = Matrix.zero(9, 9);
      matrix0.subtract(matrix1);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      double[] doubleArray0 = new double[0];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      ooPlaceVectorHadamardProduct0.partiallyApply((SparseVector) null);
      // Undeclared exception!
      try { 
        ooPlaceVectorHadamardProduct0.apply((SparseVector) null, sparseVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(9, 3826, (double[]) null);
      // Undeclared exception!
      try { 
        denseMatrix0.manhattanNorm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 20;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(7, 7, 20);
      int int1 = 2719;
      int int2 = 3846;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(23, 20, 0.0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.subtract((Matrix) denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 7x7 does not equal to 23x20.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      MockRandom mockRandom0 = new MockRandom(3);
      DenseMatrix denseMatrix0 = DenseMatrix.random(3, 22, mockRandom0);
      assertEquals(22, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      Matrix matrix1 = matrix0.removeLastRow();
      assertEquals(2, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(4);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)denseVector0.toRowMatrix();
      denseVector0.product();
      basic2DMatrix0.mkString("tF5 `#~ALO@S-WCE]y", "THESE_ARE_EMPTY");
      basic2DMatrix0.subtract(7.5783996073437);
      // Undeclared exception!
      try { 
        ((Matrix)basic2DMatrix0).ensureDimensionsAreCorrect((-174), (-174));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -174x-174
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("        ");
      Matrix matrix0 = columnMajorSparseMatrix0.add(1435.15072329079);
      Matrix matrix1 = matrix0.multiplyByItsTranspose();
      matrix1.equals((Object) columnMajorSparseMatrix0);
      matrix1.columnMajorIterator();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1435.15072329079;
      doubleArray0[1] = 1435.15072329079;
      doubleArray0[2] = (double) (-1327);
      doubleArray0[3] = (double) (-1327);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix1.setColumn((-1327), (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 4. Should be: 1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 2211;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2941.923805760751;
      doubleArray0[1] = (double) 2211;
      Matrix matrix0 = Matrix.from1DArray(2211, 2211, doubleArray0);
      int int1 = 4;
      int int2 = 3015;
      // Undeclared exception!
      try { 
        matrix0.power(3015);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = 139.0;
      Matrix matrix0 = Matrix.diagonal(0, 139.0);
      Matrix matrix1 = matrix0.copyOfRows(0);
      matrix1.euclideanNorm();
      int int0 = 3950;
      matrix0.power(3950);
      matrix1.toMatrixMarket();
      int int1 = 17;
      DenseVector denseVector0 = DenseVector.unit(17);
      // Undeclared exception!
      try { 
        matrix0.insertColumn(0, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3817, 3817, 3817);
      Vector vector0 = columnMajorSparseMatrix0.toColumnVector();
      assertEquals(3817, vector0.length());
      assertEquals(3817, columnMajorSparseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 3846;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(3846, 3846);
      // Undeclared exception!
      columnMajorSparseMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(3535, 3872);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = matrix0.toColumnMajorSparseMatrix();
      assertEquals(1, columnMajorSparseMatrix0.rows());
      assertEquals(3535, columnMajorSparseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 8;
      Matrix matrix0 = Matrix.from1DArray(3856, 8, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.toSparseMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Integer integer0 = new Integer(48);
      linkedList0.pollFirst();
      linkedList0.add(integer0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      int int0 = 589;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      linkedList0.offerFirst(integer0);
      denseVector0.manhattanNorm();
      matrix0.transformColumn(589, vectorFunction0);
      // Undeclared exception!
      try { 
        matrix0.is((AdvancedMatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(15, 4176.7801940524);
      MockRandom mockRandom0 = new MockRandom(15);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      Matrix matrix1 = Matrix.randomSymmetric(15, mockRandom0);
      Matrix matrix2 = matrix1.blankOfShape(15, 15);
      Matrix matrix3 = matrix1.blankOfShape(15, 15);
      Matrix matrix4 = matrix0.subtract((-1.0));
      matrix4.sum();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_QR;
      matrix4.withDecompositor(linearAlgebra_DecompositorFactory0);
      matrix4.toDenseMatrix();
      matrix2.toRowMajorSparseMatrix();
      matrix3.maxInColumn(0);
      // Undeclared exception!
      try { 
        matrix4.minInColumn(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 589;
      int int1 = 1212;
      int int2 = 2545;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(589, 1212, 2545);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      NumberFormat numberFormat0 = null;
      matrix0.toMatrixMarket((NumberFormat) null);
      matrix0.copyOfColumns(589);
      double double0 = 1.6963937481440345E-10;
      matrix0.equals((Matrix) rowMajorSparseMatrix0, 1.6963937481440345E-10);
      int int3 = (-114);
      VectorFunction vectorFunction0 = null;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.transformColumn((-114), (VectorFunction) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-114' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(1774);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      // Undeclared exception!
      matrix0.withSolver(linearAlgebra_SolverFactory0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2, 0.0);
      Matrix matrix0 = sparseMatrix0.sliceTopLeft(2, 2);
      Matrix matrix1 = matrix0.blankOfColumns(337);
      matrix1.toRowVector();
      // Undeclared exception!
      try { 
        sparseMatrix0.is((AdvancedMatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(2409, 115);
      DenseVector denseVector0 = DenseVector.zero(2409);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      matrix0.columnMajorIterator();
      assertEquals(2409, matrix0.columns());
      assertEquals(2409, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 6);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      // Undeclared exception!
      try { 
        ((Matrix)basic2DMatrix0).ensureIndexesAreInBounds(653, (-1334));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '653' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 37;
      double double0 = (-361.149326330749);
      Matrix matrix0 = Matrix.diagonal(37, (-361.149326330749));
      // Undeclared exception!
      try { 
        matrix0.removeRow(37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..36
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 2;
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(2, 2, 0.0, (Random) mockRandom0);
      Matrix matrix0 = null;
      int int1 = 10;
      int int2 = 896;
      int int3 = (-2160);
      columnMajorSparseMatrix0.nonZeroRowMajorIterator();
      int int4 = 5;
      Matrix matrix1 = columnMajorSparseMatrix0.removeFirstRow();
      // Undeclared exception!
      try { 
        matrix1.multiply((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(3874, 3874);
      sparseVector0.blankOfLength(3874);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector1 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector1);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      matrix0.mkString(numberFormat0, "", "Destination position out of bounds: ");
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.foldColumns(vectorAccumulator0);
      Matrix matrix1 = null;
      // Undeclared exception!
      try { 
        Matrix.unit(13, (-2726));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = (-968);
      // Undeclared exception!
      try { 
        Matrix.unit((-968), (-968));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(17, 17);
      // Undeclared exception!
      try { 
        SparseMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '18' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(1);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-684.8);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3876;
      Matrix matrix0 = Matrix.from1DArray(3876, 0, doubleArray0);
      matrix0.toDenseMatrix();
      matrix0.blankOfRows(0);
      // Undeclared exception!
      try { 
        matrix0.blankOfColumns((-1506337439));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Matrix.constant(949, 949, 949);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix.identity(949);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1258, 1258);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(13, 818);
      assertEquals(818, sparseMatrix0.columns());
      
      Matrix matrix0 = rowMajorSparseMatrix0.sliceBottomRight((-2632), 1258);
      assertEquals(0, matrix0.columns());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = matrix0.foldRows(vectorAccumulator0);
      assertEquals(3890, doubleArray0.length);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = rowMajorSparseMatrix0.is(matrixPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(2111, (-1.0));
      columnMajorSparseMatrix0.minInRow(2);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      String string0 = "pE&PYW";
      Vector vector0 = columnMajorSparseMatrix0.getRow(2111);
      // Undeclared exception!
      columnMajorSparseMatrix0.insertColumn(1804, vector0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(32);
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.multiply((double) 32);
      rowMajorSparseMatrix0.sliceBottomRight(32, (-1470));
      int int0 = (-1);
      // Undeclared exception!
      try { 
        ((Matrix)cRSMatrix0).ensureIndexesAreInBounds((-1470), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1470' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = (-248);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from1DArray((-248), (-248), (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -248x-248
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("`.3)YMvL2:L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(17);
      assertEquals(17, denseMatrix0.rows());
      
      double double0 = denseMatrix0.infinityNorm();
      assertEquals(1.0, double0, 0.01);
      
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      Matrix matrix1 = matrix0.sliceTopLeft(17, 17);
      assertEquals(17, denseMatrix0.columns());
      assertTrue(matrix1.equals((Object)denseMatrix0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      int int0 = 2;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(2, 2);
      Matrix matrix0 = ooPlaceKroneckerProduct0.applyCommon(denseMatrix0, denseMatrix0);
      matrix0.trace();
      int int1 = (-2145855532);
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 16.0;
      doubleArray1[1] = 16.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 16.0;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = 16.0;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(0, 1000);
      int int0 = 3617;
      int int1 = 806;
      Matrix matrix0 = denseMatrix0.copyOfShape(3617, 806);
      // Undeclared exception!
      matrix0.removeLastColumn();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 8;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 8;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(8, 8, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 686.0918389692021;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 241.1434263;
      doubleArray1[4] = 362.81835575;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 241.1434263;
      doubleArray3[1] = 241.1434263;
      doubleArray3[2] = 686.0918389692021;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 686.0918389692021;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 241.1434263;
      doubleArray3[7] = 362.81835575;
      doubleArray3[8] = 362.81835575;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 362.81835575;
      doubleArray4[1] = 686.0918389692021;
      doubleArray4[2] = 686.0918389692021;
      doubleArray4[3] = 686.0918389692021;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 686.0918389692021;
      doubleArray5[1] = 241.1434263;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 241.1434263;
      doubleArray5[4] = 362.81835575;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = (-1.0);
      doubleArray5[7] = (-1.0);
      doubleArray5[8] = 686.0918389692021;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 686.0918389692021;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (-1.0);
      doubleArray6[4] = 686.0918389692021;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = (-1.0);
      doubleArray6[7] = 241.1434263;
      doubleArray6[8] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = (-1.0);
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 241.1434263;
      doubleArray7[3] = 686.0918389692021;
      doubleArray0[6] = doubleArray7;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      // Undeclared exception!
      try { 
        Matrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 233;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(233, 233);
      double double0 = (-1895.3240004544177);
      // Undeclared exception!
      columnMajorSparseMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 4458;
      Matrix matrix0 = Matrix.diagonal(4458, (-283.0));
      // Undeclared exception!
      try { 
        matrix0.swapRows(4458, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4459
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(10);
      Matrix matrix0 = Matrix.random(10, 10, mockRandom0);
      String string0 = matrix0.toString();
      assertEquals("0.000 0.100 0.200 0.300 0.400 0.500 0.600 0.700 0.800 0.900\n0.000 0.100 0.200 0.300 0.400 0.500 0.600 0.700 0.800 0.900\n0.000 0.100 0.200 0.300 0.400 0.500 0.600 0.700 0.800 0.900\n0.000 0.100 0.200 0.300 0.400 0.500 0.600 0.700 0.800 0.900\n0.000 0.100 0.200 0.300 0.400 0.500 0.600 0.700 0.800 0.900\n0.000 0.100 0.200 0.300 0.400 0.500 0.600 0.700 0.800 0.900\n0.000 0.100 0.200 0.300 0.400 0.500 0.600 0.700 0.800 0.900\n0.000 0.100 0.200 0.300 0.400 0.500 0.600 0.700 0.800 0.900\n0.000 0.100 0.200 0.300 0.400 0.500 0.600 0.700 0.800 0.900\n0.000 0.100 0.200 0.300 0.400 0.500 0.600 0.700 0.800 0.900\n", string0);
      
      matrix0.determinant();
      Matrix matrix1 = matrix0.removeFirstColumn();
      assertEquals(9, matrix1.columns());
      
      mockRandom0.nextLong();
      Matrix matrix2 = matrix0.insert(matrix1);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      matrix1.withInverter(linearAlgebra_InverterFactory0);
      double double0 = matrix2.sum();
      assertEquals(54.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 1;
      int int1 = (-95);
      // Undeclared exception!
      try { 
        Matrix.constant(1, (-95), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[][] doubleArray0 = new double[0][2];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      int int0 = 17;
      int int1 = (-1597);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert(matrix0, 17, 781, (-1597), 781);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1597x781
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 2498;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(2498, 0.0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.LU;
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      int int1 = (-4934);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, 1, 1, 1, (-4934));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 1x-4934
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 469;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(469);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.eachInColumn(469, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 1452;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1452, 1452);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.copyOfShape(1452, 1452);
      String string0 = "qiST{@L{gh7G";
      // Undeclared exception!
      try { 
        Matrix.fromCSV("qiST{@L{gh7G");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      int int1 = 250;
      Matrix matrix0 = Matrix.diagonal(250, 0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.add(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 250x250.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }
}
