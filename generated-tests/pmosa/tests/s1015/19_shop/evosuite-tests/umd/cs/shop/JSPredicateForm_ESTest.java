/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 08:00:53 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.StreamTokenizer;
import java.util.ListIterator;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      assertTrue(jSPredicateForm0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object object0 = new Object();
      Predicate<JSTerm> predicate0 = Predicate.isEqual(object0);
      jSPredicateForm0.removeIf(predicate0);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSPredicateForm> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<JSPredicateForm> predicate2 = predicate1.negate();
      Predicate<JSPredicateForm> predicate3 = predicate2.and(predicate1);
      Predicate<JSPredicateForm> predicate4 = predicate3.or(predicate2);
      predicate0.and(predicate4);
      int int0 = 4734;
      jSPredicateForm0.print();
      // Undeclared exception!
      try { 
        jSPredicateForm0.set(4734, predicate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 4734
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm("");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "";
      jSTerm0.insertElementAt("", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.add((Object) listIterator0);
      jSPredicateForm0.trimToSize();
      jSTerm0.clear();
      jSPredicateForm0.toStr();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0);
      jSPredicateForm0.removeAll(jSSubstitution0);
      jSSubstitution1.removeAll(jSSubstitution0);
      jSSubstitution1.add((Object) jSTerm0);
      jSPredicateForm0.toStr();
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution2 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution1);
      jSSubstitution2.containsAll(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(KT)f");
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(4, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(KT)f");
      assertEquals("[KT]", jSPredicateForm0.toString());
      
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      boolean boolean0 = jSPredicateForm0.equals(jSPredicateForm1);
      assertTrue(boolean0);
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(KT)f");
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      charArray0[1] = '4';
      charArray0[2] = 'I';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      lineNumberReader0.read();
      charArrayReader0.skip(0L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(lineNumberReader0);
      streamTokenizer0.lowerCaseMode(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(#'+U~;yAiMq5EL9d");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      jSSubstitution0.add((Object) listIterator0);
      jSTerm0.trimToSize();
      jSTerm0.toStr();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm0);
      jSTerm0.removeAll(jSSubstitution0);
      jSSubstitution1.removeAll(jSSubstitution0);
      jSTerm0.toStr();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm0);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution1);
      jSSubstitution2.containsAll(jSTerm0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSPredicateForm0, jSSubstitution1);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.applySubstitutionPF(jSSubstitution2);
      jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.clonePF();
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution3.removeElement(jSSubstitution2);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      assertNotSame(jSPredicateForm0, jSPredicateForm4);
      assertNotSame(jSPredicateForm0, jSPredicateForm3);
      assertFalse(jSSubstitution2.fail());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.insertElementAt("", 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.add((Object) listIterator0);
      jSPredicateForm0.trimToSize();
      jSTerm0.clear();
      assertEquals(10, jSTerm0.capacity());
      
      jSPredicateForm0.toStr();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0);
      jSPredicateForm0.removeAll(jSSubstitution0);
      jSSubstitution1.removeAll(jSSubstitution0);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(2, stringBuffer0.length());
      
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution2 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution2);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution2);
      jSPredicateForm2.print();
      boolean boolean1 = jSPredicateForm0.equals(jSPredicateForm2);
      assertFalse(boolean1 == boolean0);
      
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSPredicateForm2.applySubstitutionPF(jSSubstitution3);
      jSPredicateForm2.print();
      assertTrue(jSSubstitution2.fail());
      assertNotSame(jSSubstitution1, jSSubstitution2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(A'+U~;yAiMq5EL9Dd");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(A'+U~;yAiMq5EL9Dd");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(!#'+U~;yAiMqtEL9d");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.insertElementAt("WcT>*}NC(@HW&Bw-", 0);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(KT)f");
      assertEquals("[KT]", jSPredicateForm0.toString());
  }
}
