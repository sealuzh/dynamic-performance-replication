/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:22:05 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.Locale;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.searchOpcode(")r[eD9lq+N[G8A4");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(")r[eD9lq+N[G8A4", ")r[eD9lq+N[G8A4", "dg{l%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )r[eD9lq+N[G8A4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.searchOpcode("dreturn");
      Utility.compactClassName("dreturn");
      // Undeclared exception!
      try { 
        Utility.signatureToString("dreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dreturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("{null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {null}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("System");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('h');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = ", npairs = ";
      try { 
        Utility.typeOfMethodSignature(", npairs = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , npairs = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = Utility.compactClassName("~|u0,t;:]^s|k?\"DQ>");
      assertEquals("~|u0,t;:]^s|k?\"DQ>", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Utility.compactClassName("yTE?%thWIi", "yTE?%thWIi", true);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      try { 
        Utility.methodSignatureReturnType("<clinit>", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<clinit>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = Utility.clearBit(1043, 0);
      assertEquals(1042, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = Utility.clearBit(159, 159);
      assertEquals(159, int0);
      
      String string0 = Utility.accessToString(159);
      assertEquals("public private protected static final transient", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.methodSignatureReturnType("Z45|^L(8Sh", true);
      assertEquals("boolean", string0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      String string1 = Utility.classOrInterface(59);
      assertEquals("class", string1);
      
      boolean boolean0 = Utility.isSet(59, 59);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("jsr");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-61), (int) (byte) (-61));
      assertEquals("0:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Utility.classOrInterface(196);
      assertEquals("class", string0);
      
      byte byte0 = ElementValue.ARRAY;
      int int0 = Utility.clearBit(196, 65535);
      assertEquals(196, int0);
      
      String string1 = Utility.getSignature("class");
      assertEquals("Lclass;", string1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("2P-=)Z|Rv9W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2P-=)Z|Rv9W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("R=8&%CQ/f`</9iH\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R=8&%CQ/f`</9iH\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("I", true);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      // Undeclared exception!
      try { 
        Utility.signatureToString("t%HV!iqfzT2<%R", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `t%HV!iqfzT2<%R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.isJavaIdentifierPart(';');
      Utility.replace("short", "short", "i2b");
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(')');
      assertFalse(boolean0);
      
      int int0 = Utility.clearBit(148, 148);
      assertEquals(148, int0);
      
      byte[] byteArray0 = Utility.decode(" = ", false);
      assertArrayEquals(new byte[] {(byte)32, (byte)61, (byte)32}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = Utility.format((-2878), (-2878), false, 'l');
      assertEquals("-2878", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)81;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$AQ$3fQ", string1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte byte0 = Constants.ITEM_NewObject;
      String string0 = "`ek\"T2`BPu~i#V*a";
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Utility.classOrInterface(196);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[2];
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = Utility.format(63, (-1939), false, '\\');
      assertEquals("63", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)0;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$3f$A", string1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-126);
      String string1 = Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.compactClassName("$82", false);
      assertEquals("$82", string2);
      
      String string3 = Utility.methodTypeToSignature("fsub", (String[]) null);
      assertEquals("()Lfsub;", string3);
      
      String string4 = Utility.convertString("$82");
      assertTrue(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.classOrInterface(464);
      try { 
        Utility.methodSignatureArgumentTypes("putfield", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.getSignature("!o@ []-WD_M");
      String string1 = Utility.replace("[L!o@;", "!o@ []-WD_M", "[L!o@;");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("X%f!On[!r-_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[!r-_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2330, (-616), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), 180);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-86);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-101), (int) (byte) (-86));
      assertEquals("0:    iflt\t\t#-22016\n", string0);
      
      String string1 = Utility.convertString("getstatic");
      assertEquals("getstatic", string1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.printArray((Object[]) null);
      try { 
        Utility.methodSignatureReturnType("$VALUES");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$VALUES'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      short short0 = Constants.INVOKEINTERFACE_QUICK;
      Utility.convertString("y*tIhX$g/`Xs]#5S");
      Utility.convertString("y*tIhX$g/`Xs]#5S");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "y*tIhX$g/`Xs]#5S");
      Utility.printArray(printStream0, (Object[]) null);
      assertSame(mockPrintStream0, printStream0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "!";
      String string0 = Utility.methodTypeToSignature("!", stringArray0);
      assertEquals("(L!;)L!;", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)48, 41);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Expected class `");
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("Expected class `", stringArray0);
      boolean boolean0 = true;
      Utility.printArray((Object[]) stringArray0, true, true);
      Utility.compactClassName("()LExpected;");
      Utility.convertString("()LExpected;");
      try { 
        Utility.methodSignatureReturnType(" not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` not found.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.searchOpcode("short");
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-81);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("getstatic", "getstatic", "getstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)48;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, 2840);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.codeToString(byteSequence1, constantPool0);
      try { 
        Utility.typeOfMethodSignature("baload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: baload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)48;
      byteArray0[0] = (byte) (-125);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-75);
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      
      boolean boolean0 = Utility.isSet((byte)121, (-1487));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)70;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 70, 69);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-67));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 185);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.compactClassName(";");
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[19];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t<", "<illegal type>", "<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)31;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 173, 69, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-49);
      byte byte0 = (byte) (-59);
      byteArray0[2] = (byte) (-49);
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte) (-3);
      Constant[] constantArray0 = new Constant[6];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1543), (-2210));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)31);
      constantArray0[3] = (Constant) constantDouble0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(451, (byte)111);
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-49);
      byteArray1[1] = (byte)111;
      byteArray1[2] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)111, (int) (byte) (-49));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = Utility.compactClassName("ul*iM4B7Pv8z");
      assertEquals("ul*iM4B7Pv8z", string0);
      
      String string1 = Utility.getSignature("L5Z&5Xi6pa1:K]Bz7,");
      assertEquals("LL5Z&5Xi6pa1:K]Bz7,;", string1);
      
      String string2 = Utility.classOrInterface(1571);
      assertEquals("interface", string2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      try { 
        Utility.methodSignatureReturnType("HodzanN-0LTQR", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HodzanN-0LTQR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")r[eD9lq+N[G8A4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )r[eD9lq+N[G8A4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("Yk:IgXUe20+\u0004");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yk:IgXUe20+\u0004
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)14;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("2d 9c 67 0e", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", high = ");
      String string0 = Constants.CONSTRUCTOR_NAME;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) ", high = ";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-57);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = Utility.isJavaIdentifierPart('0');
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface((byte) (-57));
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gd");
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-12);
      byteArray0[3] = (byte) (-63);
      try { 
        Utility.decode("S,UZe.$+-", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("$80$A$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utility.classOrInterface(196);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "\"r>bOJ$rmKU";
      try { 
        Utility.decode("\"r>bOJ$rmKU", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfMethodSignature("(.4yd#>d8] 6c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (.4yd#>d8] 6c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.convertString("Y3Hw}+");
      try { 
        Utility.methodSignatureArgumentTypes("Y3Hw}+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y3Hw}+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-67);
      byteArray1[1] = (byte) (-67);
      byteArray1[2] = (byte) (-67);
      byteArray1[4] = (byte) (-67);
      byteArray1[5] = (byte)86;
      int int0 = Utility.setBit(185, 188);
      assertEquals(268435641, int0);
      
      String string0 = Utility.methodSignatureReturnType("F2", false);
      assertEquals("float", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-61);
      String string0 = Constants.ILLEGAL_TYPE;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-2301), 151);
      assertEquals("0:    monitorexit\n1:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      MockFile mockFile0 = new MockFile("impdep1", "Illegal type: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.toURI();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-63), (int) (byte) (-92), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-654), 678, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = Utility.convertString("^Uf\"%fg]vY*}T |pC\"q0");
      assertNotNull(string0);
      assertEquals("^Uf\\\"%fg]vY*}T |pC\\\"q0", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = Utility.convertString(">'");
      assertNotNull(string0);
      assertEquals(">\\'", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-66);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-66), 65);
      assertEquals((-66), constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(65, constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      int int0 = 4521;
      int int1 = 92;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4521, 92, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "P[*B&.wNd";
      String string1 = Utility.convertString("P[*B&.wNd");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("P[*B&.wNd", string1);
      
      int int0 = Utility.setBit(4146, 4146);
      assertEquals(266290, int0);
      
      try { 
        Utility.methodSignatureReturnType("P[*B&.wNd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P[*B&.wNd'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "&>";
      try { 
        Utility.typeOfSignature("&>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)70, (byte) (-125)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)70, (byte) (-125)}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)70, (byte) (-125)}, byteArray0);
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence3.getIndex());
      assertArrayEquals(new byte[] {(byte)70, (byte) (-125)}, byteArray0);
      assertNotNull(byteSequence3);
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertNotSame(byteSequence1, byteSequence2);
      assertNotSame(byteSequence1, byteSequence3);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)70, (byte) (-125)}, byteArray0);
      assertNotNull(string0);
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertFalse(byteSequence1.equals((Object)byteSequence3));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals("fstore_3", string0);
      
      String string1 = "} dpWIlP9@!z9";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("} dpWIlP9@!z9", "} dpWIlP9@!z9", "} dpWIlP9@!z9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: } dpWIlP9@!z9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.getSignature("d/Tn<");
      assertNotNull(string0);
      assertEquals("Ld/Tn<;", string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ld/Tn<;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Ld/Tn<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, true);
      assertNull(string0);
      
      boolean boolean0 = Utility.isSet(47, (-1486));
      assertFalse(boolean0);
      
      String string1 = Utility.compactClassName("ul*iM4B7Pv8z");
      assertNotNull(string1);
      assertEquals("ul*iM4B7Pv8z", string1);
      
      String string2 = Utility.getSignature("L5Z&5Xi6pa1:K]Bz7,");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("LL5Z&5Xi6pa1:K]Bz7,;", string2);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("L5Z&5Xi6pa1:K]Bz7,", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L5Z&5Xi6pa1:K]Bz7,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-95);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string0 = Utility.methodSignatureReturnType("LJ;V", false);
      assertNotNull(string0);
      assertEquals("J", string0);
      
      String string1 = Utility.compactClassName("LJ;V", "Invalid signature: ", false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("LJ;V", string1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Utility.classOrInterface(196);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte byte0 = ElementValue.ARRAY;
      assertEquals((byte)91, byte0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)91, (byte)91}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)91, (byte)91}, byteArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("dup_x2", string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 196, (int) (byte)91, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte byte0 = Constants.CONSTANT_String;
      assertEquals((byte)8, byte0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)80, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)80, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)80, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals("lastore", string0);
      
      MockFile mockFile0 = new MockFile("V$wG");
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("V$wG", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("V$wG", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertNotNull(mockFile0);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('+');
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = Utility.compactClassName("V");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("V", string1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-104);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(dataOutputStream0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal opcode>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, false, false);
      assertNull(string0);
      
      String string1 = Utility.format(56, 56, false, '_');
      assertNotNull(string1);
      assertEquals("______________________________________________________56", string1);
      
      short short0 = Utility.searchOpcode("______________________________________________________56");
      assertEquals((short) (-1), short0);
      
      String string2 = Utility.getSignature("int");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("I", string2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)122, (byte)122, (byte)0, (byte)70, (byte)70, (byte) (-72), (byte)122, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.available();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)122, (byte)122, (byte)0, (byte)70, (byte)70, (byte) (-72), (byte)122, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, int0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)122, (byte)122, (byte)0, (byte)70, (byte)70, (byte) (-72), (byte)122, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("ishr", string0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        constantPool0.constantToString((int) (byte)122, (byte)70);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-72), (byte)48, (byte)122, (byte)70, (byte)70}, byteArray0);
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte) (-99);
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-99)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-99)}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-99)}, byteArray0);
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 194, (int) (byte) (-99), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      short short0 = Utility.searchOpcode("=,e0,z");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.compactClassName("=,e0,z", true);
      assertNotNull(string0);
      assertEquals("=,e0,z", string0);
      
      String string1 = Utility.accessToString((int) (short) (-1), true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("public private protected static final volatile transient native abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_CLASSDESC;
      assertEquals((byte)114, byte0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)114;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 109, (int) (byte)114);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-67));
      assertEquals((-67.0), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      String string0 = Utility.methodSignatureReturnType("V", true);
      assertNotNull(string0);
      assertEquals("void", string0);
      
      int int0 = Utility.setBit((byte) (-67), (byte) (-67));
      assertEquals((-67), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "", "ifnonnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)0;
      byteArray0[6] = (byte)21;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 128, (-1499), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)45;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-23), (int) (byte)24, false);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)24, (byte)45}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    dload\t\t%45\n", string0);
      
      int int0 = Pattern.CASE_INSENSITIVE;
      assertEquals(2, int0);
      
      int int1 = Pattern.CANON_EQ;
      assertFalse(int1 == int0);
      assertEquals(128, int1);
      
      try { 
        Utility.methodSignatureArgumentTypes("wide");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wide
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(175);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      charArrayWriter0.close();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.close();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.write("ifle");
      assertEquals("ifle", charArrayWriter0.toString());
      assertEquals(4, charArrayWriter0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      assertEquals("ifle", charArrayWriter0.toString());
      assertEquals(4, charArrayWriter0.size());
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.println(false);
      assertEquals(10, charArrayWriter0.size());
      assertEquals("iflefalse\n", charArrayWriter0.toString());
      
      byte[] byteArray0 = Utility.decode("+", false);
      assertArrayEquals(new byte[] {(byte)43}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ifle");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 175, 175, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("T)y~iR0jzK+/", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T)y~iR0jzK+/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("AS8stem");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AS8stem
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte)51;
      byteArray0[0] = (byte)51;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-98);
      byteArray0[6] = (byte)51;
      byteArray0[8] = (byte)24;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "0@>";
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string1 = Utility.toHexString(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(string1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      byte[] byteArray2 = Utility.decode("0@>", false);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)48, (byte)64, (byte)62}, byteArray2);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, constantPool0, (int) (byte)24, (-2869));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = Utility.convertString("=bp~lV&j");
      assertNotNull(string0);
      assertEquals("=bp~lV&j", string0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      assertNotNull(filterOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "=b\\p~lV&j";
      objectArray0[1] = (Object) filterOutputStream0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("i2f", string0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('f');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = Utility.fillup("FX", 36, true, '2');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("FX2222222222222222222222222222222222", string1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte byte0 = Constants.ITEM_NewObject;
      assertEquals((byte)8, byte0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(")xKW!");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals(")xKW!", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[2] = (byte)8;
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte)0, (byte)8, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("08 00 08 00", string0);
      
      String string1 = Utility.compactClassName("08 00 08 00");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("08 00 08 00", string1);
      
      try { 
        Utility.typeOfSignature("08 00 08 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 08 00 08 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.getSignature(" arg");
      assertNotNull(string0);
      assertEquals("Larg;", string0);
      
      boolean boolean0 = Utility.isSet((byte)11, 183);
      assertFalse(boolean0);
      
      DataInput dataInput0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(type=");
      assertFalse(boolean0);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("(type=");
      assertEquals("(type=", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-64);
      byte byte0 = (byte)125;
      byteArray0[3] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-117), 199, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    f2i
         // 1:    dup2_x1
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      MockFile mockFile0 = new MockFile("6Lr3&se", "putstatic");
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("putstatic", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/6Lr3&se", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/6Lr3&se/putstatic", mockFile0.toString());
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-117);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[Z`r5tJi<y}DrN", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [Z`r5tJi<y}DrN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = ";\"pnDNlUk|";
      try { 
        Utility.typeOfSignature(";\"pnDNlUk|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;\"pnDNlUk|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-31);
      byteArray0[7] = (byte) (-21);
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)77, (byte) (-59), (byte) (-106), (byte)4, (byte) (-85), (byte) (-31), (byte)0, (byte) (-21)}, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-95);
      byteArray1[1] = (byte) (-106);
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte) (-59);
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-106), (byte)4, (byte) (-59)}, byteArray1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean3);
      
      byte[] byteArray2 = new byte[3];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)52;
      byteArray2[2] = (byte)56;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, constantPool0, (int) (byte)56, (int) (byte)52, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "interface");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = 58;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1528), 1400);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-1528), constantNameAndType0.getNameIndex());
      assertEquals(1400, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2256), 58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      Constant[] constantArray0 = new Constant[13];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(13, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(13, constantPool0.getLength());
      assertNotNull(string0);
      assertEquals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte)93;
      String string1 = Utility.getSignature("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L1)null;", string1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "null";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (int) (byte)80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      byte[] byteArray0 = new byte[19];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((-3590.05));
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-3590.05), constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-102), (byte) (-102));
      assertEquals((-102), constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-102), constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      assertEquals((-102), constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-102), constantFieldref0.getNameAndTypeIndex());
      assertEquals((-102), constantFieldref1.getClassIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertEquals((-102), constantFieldref1.getNameAndTypeIndex());
      assertNotNull(constantFieldref1);
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = Utility.methodSignatureReturnType("CQO");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("char", string1);
      
      ClassPath classPath0 = new ClassPath("\t<");
      assertNotNull(classPath0);
      
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      assertNotNull(classPathRepository0);
      
      JavaClass javaClass0 = classPathRepository0.findClass("double");
      assertNull(javaClass0);
      
      try { 
        Utility.typeOfSignature("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("Md@S@fgVCy{%Qjpa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Md@S@fgVCy{%Qjpa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-654), 678, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      String string1 = "AS8stem";
      try { 
        Utility.typeOfSignature("1S-{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1S-{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "interface";
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "interface");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.printArray((Object[]) null, false);
      assertNull(string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-78);
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-78);
      byteArray1[1] = (byte) (-78);
      byteArray1[2] = (byte)96;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 172, (int) (byte) (-78));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 45664. Constant pool size is: 7
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = Utility.classOrInterface(196);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[11];
      byteArray0[6] = (byte)122;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("UF;[h<%`161I-df", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UF;[h<%`161I-df'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = Utility.convertString("\t<");
      assertNotNull(string0);
      assertEquals("\t<", string0);
      
      byte[] byteArray0 = new byte[19];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3507, 20, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-3088), 111);
      assertTrue(boolean0);
      
      String string0 = Utility.convertString("(");
      assertNotNull(string0);
      assertEquals("(", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "(";
      stringArray0[1] = "f2i";
      stringArray0[2] = "CONSTANT_Long";
      stringArray0[3] = "#KHvg";
      String string1 = "int";
      stringArray0[4] = "int";
      stringArray0[5] = "void";
      stringArray0[6] = "(";
      stringArray0[7] = "(";
      stringArray0[8] = "(";
      try { 
        Utility.methodTypeToSignature("f2i", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-126);
      byteArray0[4] = (byte)86;
      byte[] byteArray1 = Utility.decode("7", false);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)55}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-3010), 194);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(194, constantNameAndType0.getSignatureIndex());
      assertEquals((-3010), constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(194, constantNameAndType0.getSignatureIndex());
      assertEquals((-3010), constantNameAndType0.getNameIndex());
      assertEquals(194, constantNameAndType1.getSignatureIndex());
      assertEquals((-3010), constantNameAndType1.getNameIndex());
      assertEquals((byte)12, constantNameAndType1.getTag());
      assertNotNull(constantNameAndType1);
      assertTrue(constantNameAndType1.equals((Object)constantNameAndType0));
      
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-126), 194, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("E]eJnK<88;Y", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E]eJnK<88;Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[Qk>eLjS=SJ8D");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Utility");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)48);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)93, (int) (byte)39, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = byteSequence0.markSupported();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("$86$A$A$A", string0);
      
      ClassPath classPath0 = new ClassPath("fconst_1");
      assertNotNull(classPath0);
      
      try { 
        Utility.typeOfSignature("$86$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $86$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = Utility.getSignature("!B`,,9]G=}]v,9");
      assertNotNull(string0);
      assertEquals("L!B`,,9]G=}]v,9;", string0);
      
      boolean boolean0 = Utility.isSet((-2354), 162);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "interface");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-78);
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)96, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47026. Constant pool size is: 7
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-28);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-28), (byte)0, (byte)104, (byte) (-28), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      boolean boolean2 = byteSequence0.markSupported();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-28), (byte)0, (byte)104, (byte) (-28), (byte)0}, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string1 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal opcode>", string1);
      
      float float0 = byteSequence0.readFloat();
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-28), (byte)0, (byte)104, (byte) (-28), (byte)0}, byteArray0);
      assertEquals((-9.474966E21F), float0, 0.01F);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 36, (int) (byte) (-28), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getfield");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ConstantDouble constantDouble0 = new ConstantDouble(2481.1182469656);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(2481.1182469656, constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      ConstantPool constantPool0 = null;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantDouble0.accept(emptyVisitor0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(2481.1182469656, constantDouble0.getBytes(), 0.01);
      
      Object object0 = constantDouble0.getConstantValue((ConstantPool) null);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(2481.1182469656, constantDouble0.getBytes(), 0.01);
      assertNotNull(object0);
      assertEquals(2481.1182469656, object0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-122);
      int int0 = (-48);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-122), (-48));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte byte0 = (byte) (-82);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)32;
      byteArray0[0] = (byte) (-82);
      byteArray0[4] = (byte) (-90);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)32, (int) (byte)12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)118;
      byteArray0[4] = (byte) (-42);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte) (-27);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-627), (int) (byte) (-68), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -68
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-78);
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[2] = (byte) (-74);
      byteArray1[3] = (byte)25;
      byteArray1[4] = (byte)14;
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-78)}, byteArray0);
      assertNotNull(byteSequence0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-74), (byte)25, (byte)14, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteSequence1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string0 = Utility.accessToString(2526, true);
      assertNotNull(string0);
      assertEquals("private protected static final volatile transient native strictfp", string0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      String string1 = Pattern.quote("J");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\QJ\\E", string1);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-78)}, byteArray0);
      assertNotNull(byteSequence2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      
      String string2 = Utility.encode(byteArray0, false);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-78)}, byteArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals("$af$b2", string2);
      
      ClassPath classPath0 = new ClassPath("private protected static final volatile transient native strictfp");
      assertNotNull(classPath0);
      
      ConstantPool constantPool3 = constantPool1.copy();
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(7, constantPool3.getLength());
      assertEquals(7, constantPool1.getLength());
      assertNotNull(constantPool3);
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string3 = Utility.codeToString(byteSequence0, constantPool3, false);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteSequence0, byteSequence2);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(7, constantPool3.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(7, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-78)}, byteArray0);
      assertNotNull(string3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertFalse(constantPool1.equals((Object)constantPool3));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals("dreturn", string3);
      
      try { 
        Utility.decode("$af$b2", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "impdep1");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-114);
      byteArray0[3] = (byte) (-88);
      byteArray0[2] = (byte) (-75);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 249, (-2037), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0, (byte)0, (byte) (-111)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0, (byte)0, (byte) (-111)}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0, (byte)0, (byte) (-111)}, byteArray0);
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3802, (int) (byte) (-111));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('@');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte)8;
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-85);
      byteArray1[1] = (byte)8;
      byteArray1[2] = (byte) (-60);
      byteArray1[3] = (byte)8;
      byteArray1[4] = (byte)2;
      byteArray1[5] = (byte) (-60);
      byteArray1[6] = (byte)8;
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)2, (byte)119, (byte) (-40), (byte) (-99), (byte) (-60), (byte)8}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)8, (byte) (-60), (byte)8, (byte)2, (byte) (-60), (byte)8}, byteArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-128);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 180, 4033);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(3, byteSequence1.getIndex());
      assertNotNull(string0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals("jsr\t\t#0", string0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository((ClassLoader) null);
      assertNotNull(classLoaderRepository0);
      
      ClassPath classPath0 = classLoaderRepository0.getClassPath();
      assertNull(classPath0);
      
      double double0 = byteSequence1.readDouble();
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(11, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0.0, double0, 0.01);
      
      ClassPathRepository classPathRepository0 = new ClassPathRepository((ClassPath) null);
      assertNotNull(classPathRepository0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("int", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `int'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2431), 170);
      assertEquals(170, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-2431), constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-76));
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-76.0), constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)77;
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)97, (byte)51, (byte)77}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-53), (int) (byte)77);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)97, (byte)51, (byte)77}, byteArray0);
      assertNotNull(string0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals("0:    <illegal opcode>\n1:    ladd\n2:    baload\n3:    astore_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "null";
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6, 841);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-78);
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)99;
      byteArray1[2] = (byte) (-74);
      byteArray1[3] = (byte)25;
      byteArray1[4] = (byte)14;
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 63, (int) (byte)14, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 6414. Constant pool size is: 7
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("wie", false);
      assertArrayEquals(new byte[] {(byte)119, (byte)105, (byte)101}, byteArray0);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      int int0 = 123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 123, 24, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("monitorexit");
      assertEquals("monitorexit", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("i[JE`4d4-b~^SRFbM-u");
      assertEquals("i[JE`4d4-b~^SRFbM-u", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertNotNull(constantUtf8_1);
      assertFalse(constantUtf8_1.equals((Object)constantUtf8_0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-86);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-101), (int) (byte) (-86));
      assertArrayEquals(new byte[] {(byte) (-101), (byte) (-86), (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    iflt\t\t#-22016\n", string0);
      
      String[] stringArray0 = new String[5];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = true;
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-101);
      byteArray1[1] = (byte) (-101);
      byteArray1[2] = (byte) (-101);
      byteArray1[3] = (byte) (-101);
      byteArray1[4] = (byte) (-101);
      byteArray1[5] = (byte) (-86);
      byteArray1[6] = (byte)102;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)102, (int) (byte) (-86), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)108;
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((-1887.8589782));
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1887.8589782), constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.copy();
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1887.8589782), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals((-1887.8589782), constantDouble1.getBytes(), 0.01);
      assertNotNull(constantDouble1);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3537, (int) (byte)79, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "monitorexit");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray1 = Utility.decode("monitorexit", false);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      String string0 = constantPool1.toString();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals("", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{null}", string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 2280, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = Utility.accessToString((-1157), true);
      assertNotNull(string0);
      assertEquals("public private static final volatile native strictfp synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)51;
      boolean boolean0 = false;
      byte[] byteArray1 = Utility.decode("public private static final volatile native strictfp synthetic annotation enum", false);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 158, (int) (byte) (-125));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = Utility.classOrInterface(196);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[3] = (byte)70;
      byteArray0[5] = (byte) (-68);
      byte[] byteArray1 = Utility.decode("jsr_w", false);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)106, (byte)115, (byte)114, (byte)95, (byte)119}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)70, (int) (byte)70, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "XltV";
      stringArray0[1] = "XltV";
      stringArray0[2] = "interface";
      stringArray0[3] = ")r[eD9lq+N[G8A4";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("XltV", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[eD9lq+N[G8A4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = Utility.convertString("\t<");
      assertNotNull(string0);
      assertEquals("\t<", string0);
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[0] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-102)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-102)}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.convertString("\t<");
      assertNotNull(string0);
      assertEquals("\t<", string0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = "breakpoint";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\t<";
      String string2 = Utility.methodTypeToSignature("breakpoint", stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("(L<;)Lbreakpoint;", string2);
      
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-123);
      byteArray0[3] = (byte) (-123);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 332, (int) (byte) (-123));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals("{null, null, null, null, null, null, null}", string0);
      
      byte[] byteArray0 = Utility.decode("C!", false);
      assertArrayEquals(new byte[] {(byte)67, (byte)33}, byteArray0);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3101, 123, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)29;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string0 = "X_?ywgjmkAc";
      // Undeclared exception!
      try { 
        Utility.signatureToString("X_?ywgjmkAc", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X_?ywgjmkAc'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "null";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      assertFalse(boolean0);
      
      byte byte0 = (byte)80;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)81;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)80, (byte)80, (byte)80, (byte)81}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byteArray1[0] = (byte)81;
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)81, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      byteArray1[1] = (byte)81;
      byteArray1[2] = (byte)80;
      byteArray1[3] = (byte)81;
      byteArray1[4] = (byte)81;
      boolean boolean4 = false;
      String string1 = Utility.encode(byteArray1, false);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)81, (byte)81, (byte)80, (byte)81, (byte)81}, byteArray1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("QQPQQ", string1);
      
      boolean boolean5 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("QQPQQ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QQPQQ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = Utility.decode("gqJqv,s%  .=n]crHW", false);
      assertNotNull(byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.readUnsignedShort();
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(26481, int0);
      
      boolean boolean0 = byteSequence0.markSupported();
      assertEquals(2, byteSequence0.getIndex());
      assertTrue(boolean0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(3, byteSequence0.getIndex());
      assertNotNull(string0);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-80);
      byteArray0[0] = (byte) (-80);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte byte1 = Constants.CONSTANT_String;
      assertFalse(byte1 == byte0);
      assertEquals((byte)8, byte1);
      
      String string0 = Utility.classOrInterface((byte)8);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-80), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-80), (byte)0}, byteArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("areturn", string1);
      
      int int0 = Pattern.LITERAL;
      assertEquals(16, int0);
      
      char char0 = File.separatorChar;
      assertEquals('/', char0);
      
      try { 
        byteSequence0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      short short0 = Utility.searchOpcode("\"$L-nDO8h1{E");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.getSignature("\"$L-nDO8h1{E");
      assertNotNull(string0);
      assertEquals("L\"$L-nDO8h1{E;", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-108);
      String string1 = Utility.codeToString(byteArray1, constantPool0, (-2760), 90, false);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-108)}, byteArray1);
      assertNotNull(string1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    lcmp\n", string1);
      
      int int0 = Utility.clearBit((byte) (-108), (byte) (-108));
      assertEquals((-1048684), int0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("S", "$Dqfx)eRp,5", "$Dqfx)eRp,5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-73), (byte)91, (byte) (-41), (byte) (-21)}, byteArray0);
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(209, (byte) (-73));
      assertEquals((-73), constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(209, constantMethodref0.getClassIndex());
      assertNotNull(constantMethodref0);
      
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 46939. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Only element values of type array can be built with this ctor - type specified: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Only element values of type array can be built with this ctor - type specified: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-58), (byte)71, (byte)69}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 353, (int) (byte)71, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = "GS|\\!gbi7}";
      // Undeclared exception!
      try { 
        Utility.signatureToString("GS|!gbi7}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GS|!gbi7}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = Utility.classOrInterface(196);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)52, (byte)42}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)42, 66, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)52, (byte)63, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 158, (int) (byte)63, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(139, 16);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(139, constantNameAndType0.getNameIndex());
      assertEquals(16, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      assertEquals(1.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-82);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, (-2245));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.SuffixFileFilter");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-83);
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-125), (byte) (-125), (byte) (-83)}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-53), (int) (byte) (-83));
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-125), (byte) (-125), (byte) (-83)}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    lxor\n1:    lxor\n2:    lxor\n3:    lreturn\n", string0);
      
      boolean boolean4 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("g`hOug?+ ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `g`hOug?+ '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "interface");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-126);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)82, (int) (byte) (-126));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte byte0 = Constants.T_UNKNOWN;
      assertEquals((byte)15, byte0);
      
      Constant[] constantArray0 = new Constant[4];
      byte[] byteArray0 = new byte[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = Utility.printArray((Object[]) constantArray0, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("null, null, null, null", string1);
      
      try { 
        Utility.typeOfSignature("Geid\"0BW9\"erL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Geid\"0BW9\"erL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-49);
      byteArray0[6] = (byte) (-49);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte) (-17);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1543), (-2210));
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-1543), constantNameAndType0.getNameIndex());
      assertEquals((-2210), constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 216, (int) (byte) (-27), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = true;
      String string0 = Utility.format(79, 805, true, '?');
      assertNotNull(string0);
      assertEqualsstring0);
      
      String string1 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal opcode>", string1);
      
      try { 
        Utility.typeOfSignature("79???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-126);
      byteArray0[4] = (byte)86;
      byteArray0[6] = (byte) (-57);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)86, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-95);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte byte0 = Constants.CONSTANT_String;
      assertEquals((byte)8, byte0);
      
      String string0 = Utility.classOrInterface((byte) (-95));
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string1);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("if_icmplt\t\t#0", string1);
      
      MockFile mockFile0 = new MockFile("sI?w");
      assertEquals("sI?w", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals("sI?w", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertNotNull(mockFile0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('<');
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "monitorexit");
      assertFalse(boolean0);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("monitorexit");
      assertEquals("monitorexit", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      byteArray0[3] = (byte) (-18);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)25;
      byte byte0 = (byte)14;
      byteArray0[4] = (byte)14;
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      
      int int0 = 63;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(7, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 63, (int) (byte)14, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "'";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("'");
      assertEquals("'", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      byte byte0 = (byte)37;
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("'");
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("'", constantUtf8_1.getBytes());
      assertNotNull(constantUtf8_1);
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(5, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)99;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 3620, (int) (byte)37, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      assertFalse(boolean0);
      
      byte byte0 = (byte) (-18);
      byte byte1 = (byte) (-94);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-94), (byte)37, (byte)14, (byte)14}, byteArray0);
      assertNotNull(string0);
      assertEquals("$a2$r$O$O", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1034, (int) (byte)37, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-122);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 152, (-394), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-95);
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)65;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("impdep2");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("impdep2", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string0 = constantPool1.constantToString(constantArray0[1]);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertNotNull(string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals("impdep2", string0);
      
      constantPool1.setConstantPool(constantArray0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-95), (int) (byte) (-95));
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(5, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-95), (byte)65, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals("0:    if_icmplt\t\t#16640\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string1);
      
      String string2 = Utility.methodSignatureReturnType("Si<2gq?oG+Xv_MT-i");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("short", string2);
      
      try { 
        Utility.methodSignatureReturnType("instanceof", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `instanceof'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-57)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)80;
      byteArray0[5] = (byte)41;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)80, (byte)41, (byte)54, (byte)54, (byte)80, (byte)41, (byte)0}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)80);
      assertArrayEquals(new byte[] {(byte)80, (byte)41, (byte)54, (byte)54, (byte)80, (byte)41, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    lastore\n1:    dload_3\n2:    istore\t\t%54\n4:    lastore\n5:    dload_3\n6:    nop\n", string0);
      
      String string1 = Utility.compactClassName("0:    lastore\n1:    dload_3\n2:    istore\t\t%54\n4:    lastore\n5:    dload_3\n6:    nop\n", "double", true);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("0:    lastore\n1:    dload_3\n2:    istore\t\t%54\n4:    lastore\n5:    dload_3\n6:    nop\n", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)80, (byte)41, (byte)54, (byte)54, (byte)80, (byte)41, (byte)0}, byteArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("50 29 36 36 50 29 00", string2);
      
      try { 
        Utility.decode("null", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(3361, (byte)29);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(3361, constantNameAndType0.getNameIndex());
      assertEquals(29, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 249, (int) (byte)14, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "WC.Y%*b;2U";
      // Undeclared exception!
      try { 
        Utility.signatureToString("WC.Y%*b;2U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WC.Y%*b;2U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals("ixor", string0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      
      long long0 = byteSequence0.readLong();
      assertNotSame(byteSequence0, byteSequence2);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(9, byteSequence0.getIndex());
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(0L, long0);
      
      String string1 = Utility.fillup("$Aa)JhSVgB8z+", (byte) (-86), true, '\\');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$Aa)JhSVgB8z+", string1);
      
      try { 
        Utility.typeOfSignature("|e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("monitorexit");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("monitorexit", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("i[JE`4d4-b~^SRFbM-u");
      assertEquals("i[JE`4d4-b~^SRFbM-u", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertNotNull(constantUtf8_1);
      assertFalse(constantUtf8_1.equals((Object)constantUtf8_0));
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      constantPool0.setConstantPool(constantArray0);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertFalse(constantPool0.equals((Object)constantPool1));
      
      ConstantDouble constantDouble0 = new ConstantDouble((byte)108);
      assertEquals(108.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      String string0 = constantDouble0.toString();
      assertEquals(108.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(string0);
      assertEquals("CONSTANT_Double[6](bytes = 108.0)", string0);
      
      Constant[] constantArray1 = new Constant[0];
      assertFalse(constantArray1.equals((Object)constantArray0));
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.copy();
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals(108.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals(108.0, constantDouble1.getBytes(), 0.01);
      assertNotNull(constantDouble1);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)108;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)90, (int) (byte)108, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$RBq2lG");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      String string0 = Utility.signatureToString("J", false);
      assertNotNull(string0);
      assertEquals("long", string0);
      
      try { 
        Utility.typeOfSignature("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-84), (byte)123, (byte)123, (byte)123, (byte) (-4), (byte)123, (byte)16, (byte)123}, byteArray0);
      assertNotNull(byteSequence0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte)123, (byte)123, (byte)123, (byte) (-4), (byte)123, (byte)16, (byte)123}, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-523), 42);
      assertArrayEquals(new byte[] {(byte) (-84), (byte)123, (byte)123, (byte)123, (byte) (-4), (byte)123, (byte)16, (byte)123}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    ireturn\n1:    lshr\n2:    lshr\n3:    lshr\n4:    <illegal opcode>\n5:    lshr\n6:    bipush\t\t123\n", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      charArrayWriter0.close();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)16}, byteArray0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1709, (-1751));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)17;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)17, (byte)17, (byte)17}, byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[7] = (byte) (-114);
      byteArray1[3] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)17, (byte)17, (byte)17}, byteArray0);
      assertNotNull(byteSequence0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)17, (byte)17, (byte)17}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(3, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)17, (byte)17, (byte)17}, byteArray0);
      assertNotNull(string0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals("sipush\t\t17", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("goto_w", "sipush\t\t17", "sipush\t\t17");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: goto_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)77, (byte)77, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)77, (byte)77, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte byte0 = byteSequence0.readByte();
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)77, (byte)77, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals((byte)77, byte0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)77, (byte)77, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence3.getIndex());
      assertArrayEquals(new byte[] {(byte)77, (byte)77, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence3);
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertNotSame(byteSequence1, byteSequence2);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(byteSequence1, byteSequence3);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)77, (byte)77, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteSequence1.equals((Object)byteSequence3));
      assertEquals("astore_2", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t<", "nQl", "\t<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = (-4459);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      String string0 = "UmD3K_a%LLZG(HsQ";
      try { 
        Utility.typeOfSignature("UmD3K_a%LLZG(HsQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UmD3K_a%LLZG(HsQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmpne");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-97)}, byteArray0);
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.skipBytes(875);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-97)}, byteArray0);
      assertEquals(2, int0);
      
      boolean boolean3 = byteSequence0.markSupported();
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-97)}, byteArray0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 59, 2189, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-55);
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-57);
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)20, (byte) (-55), (byte)0, (byte) (-45), (byte) (-97), (byte) (-57)}, byteArray0);
      assertNotNull(string0);
      assertEquals("$U$c9$A$d3$9f$c7", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte) (-57);
      String string1 = Utility.encode(byteArray1, false);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)127, (byte) (-57)}, byteArray1);
      assertNotNull(string1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("$7f$c7", string1);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-97), (byte) (-55));
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-97), constantFieldref0.getClassIndex());
      assertEquals((-55), constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$7f$c7");
      assertFalse(boolean0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)20, (int) (byte)127, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = objectArray0[1];
      String string0 = Utility.methodSignatureReturnType("Z45|^L(8Sh", true);
      assertNotNull(string0);
      assertEquals("boolean", string0);
      
      String string1 = Utility.compactClassName("Z45|^L(8Sh", ".l< .W\"(;q9N8DyY", false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Z45|^L(8Sh", string1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)48);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      String string0 = "x(==zUT";
      byte[] byteArray0 = Utility.decode("x(==zUT", false);
      assertArrayEquals(new byte[] {(byte)120, (byte)40, (byte)61, (byte)61, (byte)122, (byte)85, (byte)84}, byteArray0);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, 1928);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "interfac|e");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "interfac|e";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)125;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)84, 40, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-27);
      byteArray0[5] = (byte) (-27);
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (int) (byte) (-27), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = Utility.classOrInterface((-4189));
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = objectArray0[1];
      objectArray0[4] = (Object) null;
      objectArray0[5] = objectArray0[1];
      String string1 = Utility.methodSignatureReturnType("Z45|^L(8Sh", true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("boolean", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)83, (byte)95, (byte) (-113), (byte)87}, byteArray0);
      assertNotNull(byteSequence0);
      
      byteSequence0.close();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)83, (byte)95, (byte) (-113), (byte)87}, byteArray0);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)83, (byte)95, (byte) (-113), (byte)87}, byteArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("aastore", string2);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)108);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(108.0, constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantDouble0.accept(emptyVisitor0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(108.0, constantDouble0.getBytes(), 0.01);
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.copy();
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(108.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals(108.0, constantDouble1.getBytes(), 0.01);
      assertNotNull(constantDouble1);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)108, (int) (byte)92, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = "? super ";
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-59), 100);
      assertEquals((-59), constantNameAndType0.getNameIndex());
      assertEquals(100, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      constantNameAndType0.setNameIndex((byte) (-71));
      assertEquals(100, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-71), constantNameAndType0.getNameIndex());
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-3040), 1379);
      assertEquals((-3040), constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(1379, constantMethodHandle0.getReferenceIndex());
      assertNotNull(constantMethodHandle0);
      
      String string0 = "5_|!>CABw5j-_`bsSg";
      try { 
        Utility.typeOfSignature("5_|!>CABw5j-_`bsSg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5_|!>CABw5j-_`bsSg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "Z";
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-60);
      byteArray0[0] = (byte) (-60);
      byte byte1 = (byte)92;
      byteArray0[1] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-60), (byte)92}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string1 = Utility.accessToString((-570), false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("private protected volatile transient native abstract strictfp synthetic annotation enum", string1);
      
      ConstantPool constantPool0 = null;
      int int0 = (-1102141241);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)92, (-1102141241));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte byte0 = (byte)89;
      Constant[] constantArray0 = new Constant[13];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(13, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(13, constantPool0.getLength());
      assertNotNull(string0);
      assertEquals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)89, (byte)101, (byte)89, (byte)91, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      double double0 = byteSequence0.readDouble();
      assertEquals(8, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)89, (byte)101, (byte)89, (byte)91, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4.410285466525408E122, double0, 0.01);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)89, (byte)101, (byte)89, (byte)91, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      int int0 = byteSequence1.read();
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)89, (byte)101, (byte)89, (byte)91, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(89, int0);
      
      String string1 = Utility.codeToString(byteSequence1, constantPool0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(13, constantPool0.getLength());
      assertEquals(2, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)89, (byte)101, (byte)89, (byte)91, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("lsub", string1);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(13, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 2585, (int) (byte)93, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "interfac|e");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "interfac|e";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-53);
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      assertEquals("{null, interfac|e, null, null}", string0);
      
      try { 
        Utility.typeOfSignature("8^.|K>f#@KEQ!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8^.|K>f#@KEQ!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-49);
      byte[] byteArray1 = Utility.decode("ERe4XnK<88;#", false);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("ERe4XnK<88;#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ERe4XnK<88;#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int int0 = (-156);
      byte byte0 = Constants.T_BYTE;
      assertEquals((byte)8, byte0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = Utility.isSet(74, 74);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      byte[] byteArray0 = Utility.decode("ERe4XnK<88;#", false);
      assertNotNull(byteArray0);
      
      String string0 = Utility.accessToString((-1934), true);
      assertNotNull(string0);
      assertEquals("private final volatile strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.compactClassName("java.lang.", "", true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang.", string1);
      
      byte[] byteArray1 = Utility.decode("ERe4XnK<88;#", false);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wG:V`r2,Dt&");
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)24;
      byteArray0[0] = (byte)45;
      int int0 = 245;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 254, 245);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "monitorexit");
      assertFalse(boolean0);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("monitorexit");
      assertEquals("monitorexit", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[3] = (byte) (-18);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)14;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte byte0 = Utility.typeOfSignature("C");
      assertEquals((byte)5, byte0);
      
      String string0 = Utility.replace("monitorexit", "C", "C");
      assertNotNull(string0);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Utility";
      String string1 = "ifnonnull";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ifnonnull");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Utility");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)48);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[2] = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)93, (int) (byte)16, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte byte0 = (byte) (-125);
      try { 
        Utility.typeOfSignature("=[hfQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =[hfQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) fileSystemHandling0;
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = object0;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte[] byteArray0 = Utility.decode("@|jw\"D|", false);
      assertArrayEquals(new byte[] {(byte)64, (byte)124, (byte)106, (byte)119, (byte)34, (byte)68, (byte)124}, byteArray0);
      assertNotNull(byteArray0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 9, 9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)124;
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-733), 90);
      assertEquals((-733), constantNameAndType0.getNameIndex());
      assertEquals(90, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      assertEquals((-733), constantNameAndType0.getNameIndex());
      assertEquals(90, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((byte)12, constantNameAndType1.getTag());
      assertEquals(90, constantNameAndType1.getSignatureIndex());
      assertEquals((-733), constantNameAndType1.getNameIndex());
      assertNotNull(constantNameAndType1);
      assertTrue(constantNameAndType1.equals((Object)constantNameAndType0));
      
      String string0 = constantNameAndType0.toString();
      assertNotSame(constantNameAndType0, constantNameAndType1);
      assertEquals((-733), constantNameAndType0.getNameIndex());
      assertEquals(90, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(string0);
      assertTrue(constantNameAndType0.equals((Object)constantNameAndType1));
      assertEquals("CONSTANT_NameAndType[12](name_index = -733, signature_index = 90)", string0);
      
      Constant[] constantArray0 = new Constant[8];
      constantArray0[7] = (Constant) constantNameAndType1;
      constantArray0[1] = (Constant) constantNameAndType1;
      constantArray0[2] = (Constant) constantNameAndType0;
      constantArray0[3] = (Constant) constantNameAndType0;
      int int0 = 88;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 16, 16, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string0 = Utility.format(773, 166, true, '\'');
      assertNotNull(string0);
      assertEquals("773'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''", string0);
      
      try { 
        Utility.typeOfSignature("Q$&gwN}!abO`*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q$&gwN}!abO`*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte byte0 = Constants.CONSTANT_String;
      assertEquals((byte)8, byte0);
      
      String string0 = Utility.classOrInterface((byte)85);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string1 = Utility.codeToString(byteSequence1, constantPool0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("castore", string1);
      
      byteSequence0.readFully(byteArray0);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(8, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      
      MockFile mockFile0 = new MockFile("nul");
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("nul", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertEquals("nul", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNotNull(mockFile0);
      
      try { 
        Utility.typeOfSignature("nul");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nul
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)120;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-654), 678, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)120, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    nop\n2:    ishl\n3:    nop\n4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = Utility.decode("", false);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      String string0 = Utility.format(190, 224, false, 'a');
      assertNotNull(string0);
      assertEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa190", string0);
      
      try { 
        Utility.typeOfSignature(", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("*J+(JzWHk8tSz @");
      assertEquals((byte)11, byte0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)11, (byte)11);
      assertEquals(11, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(11, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      byte[] byteArray0 = Utility.decode("*J+(JzWHk8tSz @", false);
      assertNotNull(byteArray0);
      
      int int0 = Utility.setBit(2153, 1024);
      assertEquals(2153, int0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*J+(JzWHk8tSz @");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2153, (-1526));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-95);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.format(31, 493, true, '?');
      assertNotNull(string0);
      assertEquals("31???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????", string0);
      
      String string1 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal opcode>", string1);
      
      try { 
        Utility.typeOfSignature("31???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 31???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = Utility.classOrInterface(196);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray1 = Utility.decode("&T1Jd;-", false);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)38, (byte)84, (byte)49, (byte)74, (byte)100, (byte)59, (byte)45}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string1 = Utility.format(2650, 196, false, 'x');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx2650", string1);
      
      try { 
        Utility.typeOfSignature("92");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 92
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      ConstantDouble constantDouble0 = new ConstantDouble(4177.34529);
      assertEquals(4177.34529, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      String string0 = Utility.signatureToString("B>%d@Xv{");
      assertNotNull(string0);
      assertEquals("byte", string0);
      
      String string1 = Utility.printArray((Object[]) null, false, false);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-55)}, byteArray0);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-55)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 143, (int) (byte) (-55), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(167);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      String string0 = "jBUX3{T";
      byte[] byteArray0 = Utility.decode("jBUX3{T", false);
      assertArrayEquals(new byte[] {(byte)106, (byte)66, (byte)85, (byte)88, (byte)51, (byte)123, (byte)84}, byteArray0);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)48, 167, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      File file0 = MockFile.createTempFile("NG&M,Eo/LdLzg", "T)y~iR0jzK+/");
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/NG&M,Eo/LdLzg0T)y~iR0jzK+", file0.toString());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("LdLzg0T)y~iR0jzK+", file0.getName());
      assertEquals("/tmp/NG&M,Eo", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-81);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/NG&M,Eo/LdLzg0T)y~iR0jzK+");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-81), (int) (byte) (-81), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dreturn
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Kgk7*h", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Kgk7*h'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string0 = Utility.fillup("ORF", (byte)0, true, '\\');
      assertNotNull(string0);
      assertEquals("ORF", string0);
      
      try { 
        Utility.typeOfSignature("ORF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ORF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      charArrayWriter0.close();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(mockPrintWriter0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)27}, byteArray0);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)27, 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmpne");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-97)}, byteArray0);
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.read(byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-97)}, byteArray0);
      assertEquals(2, int0);
      
      int int1 = byteSequence0.skipBytes(875);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-97)}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean3 = byteSequence0.markSupported();
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-97)}, byteArray0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      int int2 = Utility.clearBit(2, 1438);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2, int2);
      
      boolean boolean4 = Utility.isSet((-2319), 255);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      
      String string0 = Utility.compactClassName("if_icmpne", "if_icmpne", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Utility.format((byte) (-125), 3438, true, 's');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.typeOfSignature(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -125ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte byte0 = (byte) (-95);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte byte1 = Constants.CONSTANT_String;
      assertFalse(byte1 == byte0);
      assertEquals((byte)8, byte1);
      
      String string0 = Utility.classOrInterface((byte)8);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      int int0 = Pattern.LITERAL;
      assertEquals(16, int0);
      
      char char0 = File.separatorChar;
      assertEquals('/', char0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      MockFile mockFile0 = new MockFile("Bvp!_x(L*\"SncXf+t3b");
      assertEquals("Bvp!_x(L*\"SncXf+t3b", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Bvp!_x(L*\"SncXf+t3b", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertNotNull(mockFile0);
      
      byte byte2 = Utility.typeOfSignature("Bvp!_x(L*\"SncXf+t3b");
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertEquals((byte)8, byte2);
      
      try { 
        Utility.typeOfMethodSignature("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[3] = (byte) (-88);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-88), 1002);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(1002, constantNameAndType0.getSignatureIndex());
      assertEquals((-88), constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      byte byte0 = Utility.typeOfSignature("LzJyO{O`T6V{4h`0y4K;V");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.methodTypeToSignature("instanceof", (String[]) null);
      assertNotNull(string0);
      assertEquals("()Linstanceof;", string0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      
      String string1 = Utility.getSignature("j<QD!$\"@TL");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Lj<QD!$\"@TL;", string1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "w~e";
      byte[] byteArray0 = Utility.decode("w~e", false);
      assertArrayEquals(new byte[] {(byte)119, (byte)126, (byte)101}, byteArray0);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-3040), (-3040), false);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)119, (byte)126, (byte)101}, byteArray0);
      assertNotNull(string1);
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    dneg\n1:    iand\n2:    lsub\n", string1);
      
      boolean boolean0 = false;
      boolean boolean1 = true;
      String string2 = Utility.format('\'', '\'', true, '\'');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("39'''''''''''''''''''''''''''''''''''''", string2);
      
      String string3 = "Q$&gwN}!abO`*";
      try { 
        Utility.typeOfSignature("ifnonnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnonnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "monitorexit");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray1 = Utility.decode("f$ l>AH~?z0M=EbG", false);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      String string0 = constantPool1.toString();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals("", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{null}", string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 2280, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "*J+(JzWHk8tSz @";
      byte byte0 = Utility.typeOfSignature("*J+(JzWHk8tSz @");
      assertEquals((byte)11, byte0);
      
      int int0 = 60;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(60, (byte)11);
      assertEquals(11, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(60, constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-76));
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-76.0), constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)71, 349);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString(164, true);
      assertNotNull(string0);
      assertEquals("protected transient", string0);
      
      try { 
        Utility.decode("$l$8b$I$A$", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "interfac|e");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ConstantDouble constantDouble0 = new ConstantDouble(2481.1182469656);
      assertEquals(2481.1182469656, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2210), (-2210));
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-2210), constantNameAndType0.getSignatureIndex());
      assertEquals((-2210), constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "interfac|e");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      ClassPath classPath0 = new ClassPath("BAwHMU~U)\"&1+'Cg");
      assertNotNull(classPath0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      ClassPath classPath1 = classLoaderRepository0.getClassPath();
      assertNull(classPath1);
      
      ClassPathRepository classPathRepository0 = new ClassPathRepository((ClassPath) null);
      assertNotNull(classPathRepository0);
      
      String string0 = Utility.accessToString(57);
      assertNotNull(string0);
      assertEquals("public static final synchronized", string0);
      
      JavaClass javaClass0 = classPathRepository0.findClass("@z+>o}KG0n/,AxIz_w");
      assertNull(javaClass0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      JavaClass javaClass1 = syntheticRepository0.findClass("org.apache.bcel.classfile.Attribute");
      assertNull(javaClass1);
      
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      assertNotNull(descendingVisitor0);
      
      DescendingVisitor descendingVisitor1 = new DescendingVisitor((JavaClass) null, descendingVisitor0);
      assertNotNull(descendingVisitor1);
      assertFalse(descendingVisitor1.equals((Object)descendingVisitor0));
      
      try { 
        Utility.typeOfSignature("HCQ&z}qwv}ES,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HCQ&z}qwv}ES,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray1 = Utility.decode("gqJqv,s%  .=n]crHW", false);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 20, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/gd/gd");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte byte0 = (byte)68;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = Utility.decode("gd", false);
      assertArrayEquals(new byte[] {(byte)103, (byte)100}, byteArray0);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertFalse(constantPool0.equals((Object)constantPool1));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2280, 2280, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-81);
      byte byte0 = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte byte1 = (byte)99;
      byteArray1[0] = (byte)99;
      String string0 = Utility.format((byte)99, 1064, false, '4');
      assertNotNull(string0);
      
      String string1 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal opcode>", string1);
      
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444499
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)78;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[5] = (byte)77;
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)18, (byte)97, (byte)97, (byte) (-13), (byte)78, (byte)77}, byteArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.getSignature("<illegal opcode>");
      assertNotNull(string0);
      assertEquals("L<illegal;", string0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)107;
      byteArray1[1] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)77, (int) (byte)78, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "monitorexit");
      assertFalse(boolean0);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("monitorexit");
      assertEquals("monitorexit", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)38;
      MockFile mockFile0 = new MockFile("monitorexit", "oSsJ7q:Ww");
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/monitorexit/oSsJ7q:Ww", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/monitorexit", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("oSsJ7q:Ww", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertNotNull(mockFile0);
      
      boolean boolean1 = mockFile0.setLastModified(0L);
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/monitorexit/oSsJ7q:Ww", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/monitorexit", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("oSsJ7q:Ww", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/monitorexit/oSsJ7q:Ww", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/monitorexit", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("oSsJ7q:Ww", mockFile0.getName());
      assertNotNull(mockPrintStream0);
      
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)38, (-952), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-76);
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte)111;
      byteArray0[8] = (byte) (-28);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)97, (byte)97, (byte)14, (byte) (-76), (byte)0, (byte) (-49), (byte)111, (byte) (-28)}, byteArray0);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("\"X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[2] = (byte) (-81);
      byteArray1[3] = (byte)25;
      byteArray1[2] = (byte)50;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(726, 1981);
      assertEquals(1981, constantNameAndType0.getSignatureIndex());
      assertEquals(726, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      assertEquals(1981, constantNameAndType0.getSignatureIndex());
      assertEquals(726, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(1981, constantNameAndType1.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType1.getTag());
      assertEquals(726, constantNameAndType1.getNameIndex());
      assertNotNull(constantNameAndType1);
      assertTrue(constantNameAndType1.equals((Object)constantNameAndType0));
      
      String string0 = constantNameAndType1.toString();
      assertNotSame(constantNameAndType0, constantNameAndType1);
      assertNotSame(constantNameAndType1, constantNameAndType0);
      assertEquals(1981, constantNameAndType0.getSignatureIndex());
      assertEquals(726, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(1981, constantNameAndType1.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType1.getTag());
      assertEquals(726, constantNameAndType1.getNameIndex());
      assertNotNull(string0);
      assertTrue(constantNameAndType0.equals((Object)constantNameAndType1));
      assertTrue(constantNameAndType1.equals((Object)constantNameAndType0));
      assertEquals("CONSTANT_NameAndType[12](name_index = 726, signature_index = 1981)", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)50, (byte)25, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteSequence0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)50, (byte)25, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(constantPool0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = false;
      String string1 = Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-81), (int) (byte) (-81), false);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)50, (byte)25, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(string1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    nop\n1:    nop\n2:    aaload\n3:    aload\t\t%0\n5:    nop\n6:    nop\n", string1);
      
      String string2 = " 9d)t@rE^G";
      String string3 = Utility.compactClassName(" 9d)t@rE^G");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals(" 9d)t@rE^G", string3);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1120, 2048);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      int int0 = Utility.setBit(5, 5);
      assertEquals(37, int0);
      
      String string0 = " ot fou,.";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-104), (byte)125, (byte) (-29), (byte)34}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-104), (byte)125, (byte) (-29), (byte)34}, byteArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("dcmpg", string1);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-76));
      assertEquals((-76.0), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-109);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte) (-109);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), 349);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      assertNotNull(fileSystemHandling2);
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling1));
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling0));
      
      String string0 = Utility.format(2, 31, true, 'h');
      assertNotNull(string0);
      assertEquals("2hhhhhhhhhhhhhhhhhhhhhhhhhhhhhh", string0);
      
      String string1 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal opcode>", string1);
      
      try { 
        Utility.typeOfSignature("2hhhhhhhhhhhhhhhhhhhhhhhhhhhhhh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2hhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1381, 1462);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(1462, constantNameAndType0.getSignatureIndex());
      assertEquals(1381, constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "atU:Xv\"M");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ClassPath classPath0 = new ClassPath("ysbmX");
      assertNotNull(classPath0);
      
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      assertNotNull(classPathRepository0);
      
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isFinal());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      
      javaClass0.isEnum(false);
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isFinal());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      
      JavaClass javaClass1 = classPathRepository0.findClass(", low = ");
      assertNull(javaClass1);
      
      byte byte0 = Utility.typeOfSignature("*J+(JzWHk$8t-SzP @");
      assertEquals((byte)11, byte0);
      
      try { 
        Utility.typeOfSignature("PMGClass(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PMGClass(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = Utility.classOrInterface((-4189));
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = objectArray0[1];
      String string1 = Utility.methodSignatureReturnType("Z45|^L(8Sh", true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("boolean", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-119);
      MockFile mockFile0 = new MockFile((File) null, "Z45|^L(8Sh");
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("Z45|^L(8Sh", mockFile0.toString());
      assertEquals("Z45|^L(8Sh", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertNotNull(mockFile0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      ClassPath classPath0 = classLoaderRepository0.getClassPath();
      assertNull(classPath0);
      
      ClassPath classPath1 = new ClassPath((ClassPath) null, "boolean");
      assertNotNull(classPath1);
      
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath1);
      assertNotNull(classPathRepository0);
      
      JavaClass javaClass0 = classPathRepository0.findClass("Mg'ZM");
      assertNull(javaClass0);
      
      byte byte0 = Utility.typeOfSignature("Z45|^L(8Sh");
      assertEquals((byte)4, byte0);
      
      try { 
        Utility.typeOfSignature("w]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: w]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      try { 
        Utility.typeOfSignature("RuntimeVisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeVisibleParameterAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte byte0 = (byte)35;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[1] = (byte)35;
      int int0 = 173;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)35, (-2217));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) fileSystemHandling0;
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[3] = object0;
      byte[] byteArray0 = Utility.decode("l;Lw#<-{YRi", false);
      assertNotNull(byteArray0);
      
      int int0 = Utility.setBit(169, 2153);
      assertEquals(681, int0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l;Lw#<-{YRi");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 197, 681);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1981, 1981);
      assertEquals(1981, constantNameAndType0.getNameIndex());
      assertEquals(1981, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      assertEquals(1981, constantNameAndType0.getNameIndex());
      assertEquals(1981, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(1981, constantNameAndType1.getNameIndex());
      assertEquals((byte)12, constantNameAndType1.getTag());
      assertEquals(1981, constantNameAndType1.getSignatureIndex());
      assertNotNull(constantNameAndType1);
      assertTrue(constantNameAndType1.equals((Object)constantNameAndType0));
      
      String string0 = constantNameAndType0.toString();
      assertNotSame(constantNameAndType0, constantNameAndType1);
      assertEquals(1981, constantNameAndType0.getNameIndex());
      assertEquals(1981, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(string0);
      assertTrue(constantNameAndType0.equals((Object)constantNameAndType1));
      assertEquals("CONSTANT_NameAndType[12](name_index = 1981, signature_index = 1981)", string0);
      
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType((-2437), 86);
      assertEquals(86, constantNameAndType2.getSignatureIndex());
      assertEquals((-2437), constantNameAndType2.getNameIndex());
      assertEquals((byte)12, constantNameAndType2.getTag());
      assertNotNull(constantNameAndType2);
      assertFalse(constantNameAndType2.equals((Object)constantNameAndType1));
      assertFalse(constantNameAndType2.equals((Object)constantNameAndType0));
      
      constantArray0[1] = (Constant) constantNameAndType2;
      constantArray0[2] = (Constant) constantNameAndType0;
      constantArray0[3] = (Constant) constantNameAndType0;
      String string1 = constantNameAndType2.toString();
      assertNotSame(constantNameAndType2, constantNameAndType1);
      assertNotSame(constantNameAndType2, constantNameAndType0);
      assertEquals(86, constantNameAndType2.getSignatureIndex());
      assertEquals((-2437), constantNameAndType2.getNameIndex());
      assertEquals((byte)12, constantNameAndType2.getTag());
      assertNotNull(string1);
      assertFalse(constantNameAndType2.equals((Object)constantNameAndType1));
      assertFalse(constantNameAndType2.equals((Object)constantNameAndType0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("CONSTANT_NameAndType[12](name_index = -2437, signature_index = 86)", string1);
      
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertEquals(5, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      constantPool2.setConstantPool(constantArray0);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertEquals(5, constantPool2.getLength());
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      String string2 = constantPool2.toString();
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertEquals(5, constantPool2.getLength());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals("1)CONSTANT_NameAndType[12](name_index = -2437, signature_index = 86)\n2)CONSTANT_NameAndType[12](name_index = 1981, signature_index = 1981)\n3)CONSTANT_NameAndType[12](name_index = 1981, signature_index = 1981)\n4)null\n", string2);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool2.accept(emptyVisitor0);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertEquals(5, constantPool2.getLength());
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)76, 4916);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-98);
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-98), (byte) (-98)}, byteArray0);
      assertNotNull(string0);
      assertEquals("$9e$9e$9e", string0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("M.ONi~xa", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M.ONi~xa'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository((ClassLoader) null);
      assertNotNull(classLoaderRepository0);
      
      ClassPath classPath0 = classLoaderRepository0.getClassPath();
      assertNull(classPath0);
      
      ClassPathRepository classPathRepository0 = new ClassPathRepository((ClassPath) null);
      assertNotNull(classPathRepository0);
      
      String string0 = "(";
      ClassPathRepository classPathRepository1 = new ClassPathRepository((ClassPath) null);
      assertNotNull(classPathRepository1);
      assertFalse(classPathRepository1.equals((Object)classPathRepository0));
      
      JavaClass javaClass0 = classPathRepository1.findClass(">;");
      assertNotSame(classPathRepository1, classPathRepository0);
      assertNull(javaClass0);
      assertFalse(classPathRepository1.equals((Object)classPathRepository0));
      
      byte byte0 = Utility.typeOfSignature("T)Y");
      assertEquals((byte)14, byte0);
      
      try { 
        Utility.typeOfSignature(">;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "invokedynamic";
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-73)}, byteArray0);
      assertNotNull(byteSequence0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteSequence1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-73)}, byteArray0);
      assertNotNull(byteSequence2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 115, (-591), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1208, 1208);
      assertEquals(1208, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(1208, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(\"E~i1=\u0004");
      assertFalse(boolean0);
      
      ClassPath classPath0 = new ClassPath("%-&j,_");
      assertNotNull(classPath0);
      
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      assertNotNull(classPathRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(33, javaClass0.getModifiers());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isProtected());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isStatic());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      
      javaClass0.isEnum(true);
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isInterface());
      assertEquals(16417, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(16417, javaClass0.getModifiers());
      assertFalse(javaClass0.isProtected());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isEnum());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isStatic());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      
      ClassPathRepository classPathRepository1 = new ClassPathRepository(classPath0);
      assertNotNull(classPathRepository1);
      assertFalse(classPathRepository1.equals((Object)classPathRepository0));
      
      JavaClass javaClass1 = classPathRepository1.findClass("&u1#faM");
      assertNotSame(classPathRepository1, classPathRepository0);
      assertNull(javaClass1);
      assertFalse(classPathRepository1.equals((Object)classPathRepository0));
      
      String string0 = "*J+(JzWHk$8t-SzP @";
      try { 
        Utility.typeOfSignature("%-&j,_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %-&j,_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantDouble constantDouble0 = new ConstantDouble((byte)16);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(16.0, constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-33), (byte)40, (byte) (-112), (byte) (-112), (byte) (-112)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-33), (byte)40, (byte) (-112), (byte) (-112), (byte) (-112)}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-33), (byte)40, (byte) (-112), (byte) (-112), (byte) (-112)}, byteArray0);
      assertNotNull(string0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals("d2f", string0);
      
      MockFile mockFile0 = new MockFile("d2f");
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("d2f", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("d2f", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertNotNull(mockFile0);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('E');
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("gqJqv,s%  .=nJ]crHW", false);
      assertNotNull(byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      boolean boolean0 = byteSequence0.markSupported();
      assertEquals(0, byteSequence0.getIndex());
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-113);
      String string0 = Utility.codeToString(byteArray1, constantPool0, (-3275), 235, true);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray1);
      assertNotNull(string0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("0:    d2l\n", string0);
      
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)77;
      String string1 = Utility.codeToString(byteArray2, constantPool0, (int) (byte) (-113), 40);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)77}, byteArray2);
      assertNotNull(string1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    astore_2\n", string1);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iznerfa\"e");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 83, 91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byte byte0 = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-122);
      ConstantPool constantPool0 = null;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-122), (int) (byte) (-81));
      assertArrayEquals(new byte[] {(byte)99, (byte) (-81), (byte)73, (byte) (-122)}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    dadd\n1:    dreturn\n2:    dstore_2\n3:    i2f\n", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{}", string1);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    dadd\n1:    dreturn\n2:    dstore_2\n3:    i2f\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    dadd
         // 1:    dreturn
         // 2:    dstore_2
         // 3:    i2f
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ine&Kvra\"e");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)78;
      boolean boolean3 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)78, (byte)78, (byte)18, (byte)78, (byte)78, (byte)74, (byte)78}, byteArray0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 39, (int) (byte)78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-654), 678, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n", string0);
      
      String string1 = Utility.signatureToString("DLE,!HT_;-ZxdN~");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("double", string1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("static", "static", "static");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: static
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = Utility.classOrInterface(196);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string1 = Utility.compactClassName("class", "class", true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      ConstantDouble constantDouble0 = new ConstantDouble(70);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(70.0, constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(70.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals(70.0, constantDouble1.getBytes(), 0.01);
      assertNotNull(constantDouble1);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      
      try { 
        Utility.typeOfSignature("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool0 = null;
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 66, 1206, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)22}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)22}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      double double0 = byteSequence1.readDouble();
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(8, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)22}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(1.1E-322, double0, 0.01);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3243, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[0] = (byte)5;
      byteArray0[3] = (byte)5;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/$l$8b$I$A$A$A$A$A$A$A");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "Yk:IgXUe20+\u0004");
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("6?uOyle|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6?uOyle|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      File file0 = MockFile.createTempFile("NG&M,Eo/LdLzg", "T)y~D8iR0jzK+/");
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("LdLzg0T)y~D8iR0jzK+", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp/NG&M,Eo", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/NG&M,Eo/LdLzg0T)y~D8iR0jzK+", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/NG&M,Eo/LdLzg0T)y~iR0jzK+");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('u');
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string0 = Utility.getSignature("?y,:)BTMV6x3@'(wO");
      assertNotNull(string0);
      assertEquals("L?y,:)BTMV6x3@'(wO;", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      try { 
        Utility.methodSignatureReturnType("NG&M,Eo/LdLzg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NG&M,Eo/LdLzg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.SC_SERIALIZABLE;
      assertEquals((byte)2, byte0);
      
      String string0 = Utility.getSignature(">=");
      assertNotNull(string0);
      assertEquals("L>=;", string0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((-402));
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-402.0), constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      short short0 = Constants.ISTORE_3;
      assertEquals((short)62, short0);
      
      try { 
        Utility.typeOfSignature("K/yKGpqf.7]Oj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K/yKGpqf.7]Oj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = "monitorexit";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "monitorexit");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)41;
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)79;
      String string1 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)34, (byte)25, (byte) (-117), (byte)27, (byte) (-85), (byte)79}, byteArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("29 22 19 8b 1b ab 4f", string1);
      
      String string2 = Utility.compactClassName("29 22 19 8b 1b ab 4f");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("29 22 19 8b 1b ab 4f", string2);
      
      try { 
        Utility.typeOfSignature("/}]\"k-Wa:hz@Y9JF+{B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /}]\"k-Wa:hz@Y9JF+{B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = Utility.getSignature("d`xXea&");
      assertNotNull(string0);
      assertEquals("Ld`xXea&;", string0);
      
      byte byte0 = Utility.typeOfSignature("Deprecated attribute with length > 0");
      assertEquals((byte)7, byte0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      String string1 = Utility.compactClassName("M.ONi~xa", true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("M.ONi~xa", string1);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-93);
      byteArray0[0] = (byte) (-93);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte byte1 = Constants.CONSTANT_String;
      assertFalse(byte1 == byte0);
      assertEquals((byte)8, byte1);
      
      String string0 = Utility.classOrInterface((byte)8);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-93)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-93)}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte) (-93)}, byteArray0);
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      
      try { 
        Utility.codeToString(byteSequence2, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[0] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertNotNull(string0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals("f2l", string0);
      
      char char0 = 'f';
      // Undeclared exception!
      try { 
        byteSequence1.readFully(byteArray0, 158, 82);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      String string0 = Utility.getSignature("d`xXea&");
      assertNotNull(string0);
      assertEquals("Ld`xXea&;", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte byte0 = Utility.typeOfSignature("Invalid type: ");
      assertEquals((byte)10, byte0);
      
      short short0 = Utility.searchOpcode("double");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte byte0 = (byte)51;
      byte byte1 = (byte)14;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-109), (byte) (-76));
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-76), constantNameAndType0.getSignatureIndex());
      assertEquals((-109), constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-76));
      assertEquals((-76.0), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      long long0 = byteSequence0.readLong();
      assertEquals(8, byteSequence0.getIndex());
      assertEquals(3674937295934324736L, long0);
      
      boolean boolean0 = true;
      String string0 = Utility.fillup("ORF", (byte)51, true, '\\');
      assertNotNull(string0);
      assertEquals("ORF\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", string0);
      
      String string1 = "#]da&[0vH#z[U8J[H!3";
      try { 
        Utility.typeOfSignature("#]da&[0vH#z[U8J[H!3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #]da&[0vH#z[U8J[H!3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)17;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)17;
      byte byte0 = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)17, (byte)17, (byte)17}, byteArray0);
      assertNotNull(byteSequence0);
      
      byte[] byteArray1 = new byte[17];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray0[0] = (byte) (-87);
      byteArray1[1] = (byte)17;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)17, (int) (byte)17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      double double0 = byteSequence1.readDouble();
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(8, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0.0, double0, 0.01);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence3.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence3);
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      
      int int0 = byteSequence0.skipBytes((byte) (-121));
      assertNotSame(byteSequence0, byteSequence3);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteSequence0, byteSequence2);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence3));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertEquals(0, int0);
      
      int int1 = Utility.setBit((byte) (-121), (byte)0);
      assertFalse(int1 == int0);
      assertEquals((-121), int1);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(constantPool0);
      assertFalse(byteSequence0.equals((Object)byteSequence3));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte) (-121);
      int int2 = byteSequence0.readUnsignedShort();
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence0, byteSequence3);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteSequence0, byteSequence2);
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence0.equals((Object)byteSequence3));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      byteArray1[2] = (byte) (-53);
      String string0 = Utility.codeToString(byteArray1, constantPool0, (-663), 2301, false);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence0, byteSequence3);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteSequence0, byteSequence2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-121), (byte) (-53), (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(string0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence0.equals((Object)byteSequence3));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("0:    nop\n1:    i2d\n2:    <illegal opcode>\n3:    nop\n4:    nop\n5:    nop\n", string0);
      
      String string1 = Utility.replace("0:    nop\n1:    i2d\n2:    <illegal opcode>\n3:    nop\n4:    nop\n5:    nop\n", "impdep2", (String) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("0:    nop\n1:    i2d\n2:    <illegal opcode>\n3:    nop\n4:    nop\n5:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)47;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[0] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)47}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)47}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      int int0 = 225;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 63, 75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = "(";
      try { 
        Utility.methodSignatureArgumentTypes("(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 2191;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-76), 2191);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(2191, constantNameAndType0.getSignatureIndex());
      assertEquals((-76), constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-103);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-76), 62);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-76), (byte) (-103)}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    ifeq\t\t#-19303\n", string0);
      
      try { 
        Utility.typeOfSignature("checkcast");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: checkcast
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("M[KhNJK\u0003_k6?@<", false);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      constantPool1.setConstantPool((Constant[]) null);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-403), (-403), false);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(string0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals("0:    astore_2\n1:    dup_x2\n2:    astore_0\n3:    imul\n4:    astore_3\n5:    dstore_3\n6:    astore_0\n7:    iconst_0\n8:    swap\n9:    dmul\n10:   istore\t\t%63\n12:   lstore_1\n13:   istore_1\n", string0);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      int int0 = byteSequence0.read();
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteSequence0.getIndex());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(77, int0);
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(26702, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(23371, constantInterfaceMethodref0.getClassIndex());
      assertNotNull(constantInterfaceMethodref0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      constantInterfaceMethodref0.setNameAndTypeIndex(77);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(77, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(23371, constantInterfaceMethodref0.getClassIndex());
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertEquals(7, byteSequence0.getIndex());
      assertEquals(19019, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      ConstantPool constantPool3 = null;
      try {
        constantPool3 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 107
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)17;
      byteArray0[4] = (byte)17;
      byteArray0[2] = (byte)17;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[4] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)17, (byte)17, (byte)0, (byte)17}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)17, (byte)17, (byte)0, (byte)17}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = byteSequence0.markSupported();
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)17, (byte)17, (byte)0, (byte)17}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      try { 
        Utility.typeOfSignature("NfAx!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NfAx!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      byteArray0[0] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(3, byteSequence0.getIndex());
      assertNotNull(string0);
      assertEquals("ifge\t\t#0", string0);
      
      byteSequence0.mark((byte) (-100));
      assertEquals(3, byteSequence0.getIndex());
      
      char char0 = byteSequence0.readChar();
      assertEquals(5, byteSequence0.getIndex());
      assertEquals('\u0000', char0);
      
      int int0 = 87;
      // Undeclared exception!
      try { 
        byteSequence0.readFully(byteArray0, 158, 87);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-101);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-101), 243, true);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    iflt\t\t#0\n3:    nop\n", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      String string2 = Utility.accessToString(0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int0 = Utility.clearBit(143, (byte) (-101));
      assertEquals(143, int0);
      
      String string3 = Utility.getSignature("0:    iflt\t\t#0\n3:    nop\n");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("L0:;", string3);
      
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$l$8b$I$A$A$A$A$A$A$A");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string4 = Utility.compactClassName("L0:;", true);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("L0:;", string4);
      
      try { 
        Utility.typeOfSignature("+WR&prd87OE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WR&prd87OE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertEquals((-1.0), constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertNotNull(constantDouble1);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantDouble1.accept(emptyVisitor0);
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertEquals((-1.0), constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      
      String string0 = constantDouble1.toString();
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertEquals((-1.0), constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertNotNull(string0);
      assertEquals("CONSTANT_Double[6](bytes = -1.0)", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)69;
      byte byte0 = (byte)36;
      byteArray0[4] = (byte)36;
      byte byte1 = (byte)92;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte) (-65);
      byteArray0[8] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-105), (byte)68, (byte)32, (byte)69, (byte)36, (byte)92, (byte)87, (byte) (-65), (byte)10}, byteArray0);
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.readInt();
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-105), (byte)68, (byte)32, (byte)69, (byte)36, (byte)92, (byte)87, (byte) (-65), (byte)10}, byteArray0);
      assertEquals((-1757142971), int0);
      
      ConstantPool constantPool0 = null;
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(5, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-105), (byte)68, (byte)32, (byte)69, (byte)36, (byte)92, (byte)87, (byte) (-65), (byte)10}, byteArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("fload_2", string1);
      
      try { 
        Utility.methodSignatureReturnType("4A_z(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `4A_z('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
