/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 12:10:58 GMT 2019
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.RenderableComponent;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "I9a5+G/L", "I9a5+G/L", "I9a5+G/L");
      Checkbox checkbox0 = new Checkbox(dateInput0, "@00.#^PN~>", "@00.#^PN~>");
      Table table0 = new Table(checkbox0, "@00.#^PN~>");
      Component component0 = table0.tr();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.nbsp();
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "java.lang.String@0000000010", "java.lang.String@0000000010");
      Checkbox checkbox0 = new Checkbox(textInput0, "java.lang.String@0000000010", "java.lang.String@0000000010");
      checkbox0.getParent();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StandaloneComponent standaloneComponent0 = errorPage0.getPage();
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Form form0 = new Form(".l~weWQ2 s8)P=wJ=v");
      form0._getXhtmlAttributes();
      assertEquals(".l~weWQ2 s8)P=wJ=v", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "7F{7VQC:U", "8");
      TextArea textArea0 = new TextArea(hidden0, "shortValue", "N`fh `/0t2^ps");
      textArea0._getActions();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, (String) null, "bR,'U");
      ActionExpression actionExpression0 = hidden0._getAction();
      assertNull(actionExpression0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.map("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.q((Object) null);
      Component component1 = component0.img("java.lang.StringBuilder@0000000004", "del");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "org.mvel.conversion.FloatCH$5");
      TableBlock tableBlock0 = table0.colgroup();
      ActionExpression actionExpression0 = new ActionExpression("MT(R0%U~|)");
      actionExpression0.submissible(true);
      tableBlock0.form("MT(R0%U~|)", actionExpression0);
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Form form0 = new Form("trace");
      // Undeclared exception!
      try { 
        form0.find("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.abbr((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0._getTopLevelComponent(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Form form0 = new Form("BHO]m`!d{M9ER<G:10");
      // Undeclared exception!
      try { 
        form0.wBlock("BHO]m`!d{M9ER<G:10");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.var();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000013");
      // Undeclared exception!
      try { 
        form0.tt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Form form0 = new Form(" in class ");
      // Undeclared exception!
      try { 
        form0.sup();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Form form0 = new Form("PuyxLnj0jYfV4zQ");
      // Undeclared exception!
      try { 
        form0.strong((Object) "PuyxLnj0jYfV4zQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("%|@[qt");
      // Undeclared exception!
      try { 
        xmlEntityRef0.span();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Form form0 = new Form("`h4'-p}.");
      // Undeclared exception!
      try { 
        form0.samp((Object) "`h4'-p}.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Form form0 = new Form("!0>Dl_? z8r=m9(Ro");
      Checkbox checkbox0 = new Checkbox(form0, "8%N.$", "!0>Dl_? z8r=m9(Ro");
      // Undeclared exception!
      try { 
        checkbox0.samp();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Form form0 = new Form(".l~weWQ2 s8)P=wJ=v");
      Checkbox checkbox0 = new Checkbox(form0, ".l~weWQ2 s8)P=wJ=v", ".l~weWQ2 s8)P=wJ=v");
      // Undeclared exception!
      try { 
        checkbox0.meta();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("q");
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        xmlEntityRef0.message("Z2@3V?_g$MZ}?o[Qq", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Form form0 = new Form("o~_.w1`@");
      // Undeclared exception!
      try { 
        form0.ins((Object) "o~_.w1`@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "4i;'w16}>ax}q);", "4i;'w16}>ax}q);");
      // Undeclared exception!
      try { 
        textInput0.imageSubmit("4i;'w16}>ax}q);", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, ".>`l qCI?", ".0`o5kUfbD/?l7?C-t\"");
      // Undeclared exception!
      try { 
        submit0.i((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, " for ", "java.lang.StringBuilder@0000000004");
      // Undeclared exception!
      try { 
        checkbox0.i();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Form form0 = new Form("k_?");
      // Undeclared exception!
      try { 
        form0.hr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Form form0 = new Form("JL@z~'Z6<y_=");
      // Undeclared exception!
      try { 
        form0.h6();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.h4();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("failed to subEval expression");
      ActionExpression actionExpression0 = new ActionExpression("?@@wHD'");
      // Undeclared exception!
      try { 
        xmlEntityRef0.form("9-$RL=65Y", actionExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, ":]/4k_ #|X;t<Ljf3", ":]/4k_ #|X;t<Ljf3");
      NumberInput numberInput0 = new NumberInput(checkbox0, "java.lang.String@0000000007", ":]/4k_ #|X;t<Ljf3");
      // Undeclared exception!
      try { 
        checkbox0.dfn((Object) numberInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Form form0 = new Form("N~wZ\u0005k?hX]R");
      TextInput textInput0 = new TextInput(form0, "N~wZ\u0005k?hX]R", "N~wZ\u0005k?hX]R");
      // Undeclared exception!
      try { 
        textInput0.del((Object) "N~wZ\u0005k?hX]R");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Form form0 = new Form("pa{i-");
      // Undeclared exception!
      try { 
        form0.dd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000013");
      // Undeclared exception!
      try { 
        form0.dateFormat("~\">x$`k]{_@CU#P%vS", form0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize SimpleDateFormat with pattern '~\">x$`k]{_@CU#P%vS'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Form form0 = new Form("i");
      // Undeclared exception!
      try { 
        form0.code();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000013");
      // Undeclared exception!
      try { 
        xmlEntityRef0.cite();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Form form0 = new Form("h1");
      // Undeclared exception!
      try { 
        form0.blockquote();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "content-type");
      TableBlock tableBlock0 = table0.thead();
      Any any0 = tableBlock0.col();
      // Undeclared exception!
      try { 
        any0.b();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.a();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      tableBlock0._wrapComponentId("Could not evaluate expression ");
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("]RzLYJr+GB^t");
      Short short0 = new Short((short)509);
      boolean boolean0 = xmlEntityRef0.equals(short0);
      assertFalse(boolean0);
      assertEquals("]RzLYJr+GB^t", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.li();
      ActionExpression actionExpression0 = new ActionExpression("}sXG%*FFl%ERD&");
      Form form0 = new Form(component0, "}sXG%*FFl%ERD&", actionExpression0);
      Checkbox checkbox0 = new Checkbox(errorPage0, "java.lang.String@0000000007", "}sXG%*FFl%ERD&");
      form0.addFormElement(checkbox0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("k,UnWW,|0q;z");
      Select select0 = new Select(errorPage0, "No top level component found.", "k,UnWW,|0q;z", "No top level component found.", dynamicSelectModel1, false);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "failed to subEval expression");
      TableBlock tableBlock0 = table0.colgroup();
      tableBlock0._getChildren();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, ".u|(s@Iv@=", ".u|(s@Iv@=", ".u|(s@Iv@=");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(dateInput0, ".u|(s@Iv@=", ".u|(s@Iv@=", stringSelectModel0, (ElExpression) null);
      Checkbox checkbox0 = new Checkbox(checkboxGroup0, ".u|(s@Iv@=", (String) null);
      String[] stringArray0 = new String[2];
      Component component0 = checkbox0.attributes(stringArray0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "[JN2.>'dRS.&m", "[JN2.>'dRS.&m");
      Submit submit0 = new Submit(checkbox0, "[JN2.>'dRS.&m", "[JN2.>'dRS.&m");
      submit0.afterAdd();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._setGeneratedId(false);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("P$");
      xmlEntityRef0._isGeneratedId();
      assertEquals("P$", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "java.lang.String@0000000017", "java.lang.String@0000000017");
      fileInput0._setComponentId("'.");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "java.lang.String@0000000010", "java.lang.String@0000000010");
      Checkbox checkbox0 = new Checkbox(textInput0, "java.lang.String@0000000010", "java.lang.String@0000000010");
      checkbox0.label("java.lang.String@0000000010");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression((String) null);
      RadioGroup radioGroup0 = new RadioGroup(errorPage0, "", "o}cl\"wJaFlWE.5", (ISelectModel) null, elExpression0);
      errorPage0._applyFormat(radioGroup0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.remove((Component) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000007");
      // Undeclared exception!
      try { 
        xmlEntityRef0.end();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not end compoennt, already at root.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "F2Z%ERj:LA", "COMMENT");
      Component component0 = checkbox0.end();
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("g'f.27Z");
      List<Component> list0 = errorPage0.findAll(elExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "", "");
      Block block0 = new Block(textInput0);
      // Undeclared exception!
      try { 
        block0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id 'null'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "org.mvel.conversion.FloatCH$10", "4|6jt");
      // Undeclared exception!
      try { 
        textInput0.up(117);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.up((-2721));
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, ".", ".");
      ActionExpression actionExpression0 = new ActionExpression("label");
      Form form0 = new Form(checkbox0, ".", actionExpression0);
      Component component0 = form0.dd();
      assertEquals("Block_1", component0.getComponentId());
      
      Component component1 = form0.strike();
      Component component2 = component1.wrapSelf();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(component2.equals((Object)component0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Y<_{CeV'i");
      TableBlock tableBlock0 = table0.colgroup();
      Object object0 = new Object();
      Component component0 = tableBlock0.strike(object0);
      component0.actionBinding("Y<_{CeV'i");
      component0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("P+n3oge");
      RadioGroup radioGroup0 = new RadioGroup(errorPage0, "", "", stringSelectModel0, elExpression0);
      errorPage0.strike((Object) radioGroup0);
      assertTrue(radioGroup0._isGeneratedId());
      
      errorPage0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Form form0 = new Form("`h4'-p}.");
      form0.addInternalRenderHint("`h4'-p}.");
      Component component0 = form0.addInternalRenderHint((String) null);
      assertEquals("`h4'-p}.", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "Could not encode string '", "Could not encode string '");
      errorPage0.tt();
      // Undeclared exception!
      try { 
        fileInput0.wrapSelf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add a form element. No surrounding form found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.getComponents();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0._getTopLevelComponent(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Form form0 = new Form((String) null);
      Form form1 = form0._getVisibleForm(true);
      assertEquals("wheel_components_Form", form1.getComponentId());
      assertNotNull(form1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Form form0 = new Form("&U#8[L.m&");
      Checkbox checkbox0 = new Checkbox(form0, "2(WNAFXsJs0[36", "2(WNAFXsJs0[36");
      Form form1 = checkbox0._getVisibleForm(true);
      assertNotNull(form1);
      assertEquals("&U#8[L.m&", form1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "#aX=m", "if");
      Hidden hidden0 = new Hidden(textArea0, "sup", "#aX=m");
      Form form0 = hidden0._getVisibleForm(false);
      assertNull(form0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = (Block)errorPage0.dl();
      assertEquals("Block_1", block0.getComponentId());
      
      block0.id("input");
      assertFalse(block0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Y<_{CeV'i");
      Component component0 = errorPage0.h6();
      assertTrue(component0._isGeneratedId());
      
      table0.id("Y<_{CeV'i");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("samp");
      Form form0 = new Form(errorPage0, "java.lang.String@0000000013", actionExpression0);
      // Undeclared exception!
      try { 
        form0.id("param");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "HVtJ+%Pbi\"7qI", "java.lang.String@0000000012");
      // Undeclared exception!
      try { 
        textArea0.id("7=rEb>xB;yK");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Form form0 = new Form("in");
      String[] stringArray0 = new String[8];
      Component component0 = form0.attributes(stringArray0);
      assertEquals("in", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, (String) null, "iframe");
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        checkbox0.attributes(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[0];
      Component component0 = errorPage0.attributes(stringArray0);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "N$EOc)U-$G>)W", ".fM|6ooCp4o^");
      Hidden hidden1 = (Hidden)hidden0.attributes((String[]) null);
      assertTrue(hidden1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Form form0 = new Form((String) null);
      form0.renderHint((CharSequence) null);
      Component component0 = form0.clasS((CharSequence) null);
      assertEquals("wheel_components_Form", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000013");
      form0.addInternalRenderHint("java.lang.String@0000000013");
      Form form1 = form0.renderHint("~\">x$`k]{_@CU#P%vS");
      assertFalse(form1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, ".", ".");
      ActionExpression actionExpression0 = new ActionExpression("label");
      Form form0 = new Form(checkbox0, ".", actionExpression0);
      Component component0 = form0.dd();
      component0.code();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Component component0 = errorPage0.sub((Object) tableBlock0);
      Component component1 = component0.em((Object) tableBlock0);
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Form form0 = new Form("p");
      // Undeclared exception!
      try { 
        form0.h1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "body", "body");
      StringBuilder stringBuilder0 = new StringBuilder(846);
      Select select0 = new Select(textInput0, "body", "body", (ISelectModel) null, stringBuilder0);
      Block block0 = new Block(select0, "body");
      Submit submit0 = new Submit(block0, "body", "body");
      // Undeclared exception!
      try { 
        submit0.cite((Object) errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, ".", ".");
      ActionExpression actionExpression0 = new ActionExpression("label");
      Form form0 = new Form(checkbox0, ".", actionExpression0);
      Component component0 = form0.dd();
      component0.del((Object) checkbox0);
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Form form0 = new Form((String) null);
      Submit submit0 = new Submit(form0, "Z<g[-vA3Ts", "c:;B-<a.},(uB[@");
      // Undeclared exception!
      try { 
        form0.h5((Object) submit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dl();
      component0.dfn();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dl();
      component0.noscript();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "#eu3Js&*^27J!C\"", "9w");
      TableBlock tableBlock0 = new TableBlock(numberInput0);
      Hidden hidden0 = new Hidden(tableBlock0, "v'pi2EaC#`[Cq", (String) null);
      // Undeclared exception!
      try { 
        hidden0.q();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Component component0 = tableBlock0.span();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Form form0 = new Form("kdb");
      // Undeclared exception!
      try { 
        form0.pre((Object) "kdb");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      // Undeclared exception!
      try { 
        tableBlock0.td();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Td component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, ",XGRG=+-LA", ",XGRG=+-LA");
      Checkbox checkbox0 = new Checkbox(fileInput0, "${u'", "sup");
      // Undeclared exception!
      try { 
        checkbox0.addFirst(fileInput0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      // Undeclared exception!
      try { 
        tableBlock0.select("8_zHRY:4ei@cRsz!S", dynamicSelectModel0, "8_zHRY:4ei@cRsz!S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "org.mvel.conversion.FloatCH$5");
      TableBlock tableBlock0 = table0.colgroup();
      ActionExpression actionExpression0 = new ActionExpression("MT(R0%U~|)");
      Component component0 = tableBlock0.form("MT(R0%U~|)", actionExpression0);
      List<RenderableComponent> list0 = component0._getRenderableChildren();
      assertTrue(tableBlock0._isGeneratedId());
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "content-type");
      TableBlock tableBlock0 = table0.thead();
      Component component0 = table0.p((Object) tableBlock0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Form form0 = new Form(",G%zm3");
      Calendar calendar0 = form0.date();
      // Undeclared exception!
      try { 
        form0.a((Object) calendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Select select0 = new Select(errorPage0, "=iU(7}z72", "=iU(7}z72", "=iU(7}z72", (ISelectModel) null, false);
      Image image0 = new Image(select0, "=iU(7}z72", "=iU(7}z72");
      Checkbox checkbox0 = new Checkbox(image0, "=iU(7}z72", "java.lang.String@0000000007");
      TableBlock tableBlock0 = new TableBlock(checkbox0, "krI1)Z'vcNG4");
      ElExpression elExpression0 = new ElExpression("asset/file/");
      RadioGroup radioGroup0 = new RadioGroup(select0, "java.lang.String@0000000007", "krI1)Z'vcNG4", (ISelectModel) null, elExpression0);
      Component component0 = tableBlock0.label((Object) radioGroup0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "7F{7VQC:U", "8");
      // Undeclared exception!
      try { 
        hidden0.caption();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("vQ^)js");
      // Undeclared exception!
      try { 
        xmlEntityRef0.param("vQ^)js", "vQ^)js");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000013");
      // Undeclared exception!
      try { 
        xmlEntityRef0.reset("java.lang.String@0000000013");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      Table table0 = (Table)tableRow0.table();
      TableBlock tableBlock0 = table0.colgroup();
      Block block0 = (Block)tableBlock0.ol();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", block0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dl();
      component0.big((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringBuilder stringBuilder0 = new StringBuilder("<([^<]+)>");
      Component component0 = errorPage0.wBlock(stringBuilder0);
      Component component1 = errorPage0.q((Object) null);
      component0.eval(component1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Form form0 = new Form("Ra#Jdm;,}r)H:WhW");
      Checkbox checkbox0 = new Checkbox(form0, "Ra#Jdm;,}r)H:WhW", "pa]6^ ");
      Submit submit0 = new Submit(checkbox0, "pa]6^ ", "Ra#Jdm;,}r)H:WhW");
      // Undeclared exception!
      try { 
        submit0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Form form0 = new Form(".l~weWQ2 s8)P=wJ=v");
      Checkbox checkbox0 = new Checkbox(form0, ".l~weWQ2 s8)P=wJ=v", ".l~weWQ2 s8)P=wJ=v");
      checkbox0._setParent(form0);
      assertEquals(".l~weWQ2 s8)P=wJ=v", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "XU/LM}wx.7Clrz],", "XU/LM}wx.7Clrz],");
      Checkbox checkbox0 = new Checkbox(fileInput0, "u", "java.lang.StringBuilder@0000000004");
      NumberInput numberInput0 = new NumberInput(checkbox0, "could not resolve entity named '", "u#nZb.H}C2}~?;bCZH3");
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        numberInput0.address((Object) long0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, ".", ".");
      checkbox0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.style();
      // Undeclared exception!
      try { 
        component0.remove((Component) errorPage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "I9a5+G/L", "I9a5+G/L", "I9a5+G/L");
      Checkbox checkbox0 = new Checkbox(dateInput0, "@00.#^PN~>", "@00.#^PN~>");
      Table table0 = new Table(checkbox0, "@00.#^PN~>");
      // Undeclared exception!
      try { 
        dateInput0.u((Object) table0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "_", "_");
      // Undeclared exception!
      try { 
        textInput0.br();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.textInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "Checkbox", "Checkbox");
      // Undeclared exception!
      try { 
        submit0.th();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Th component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Form form0 = new Form("'6)rN|c.3");
      form0.action("'6)rN|c.3");
      assertEquals("'6)rN|c.3", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "", "VceL_s5W#yRk");
      // Undeclared exception!
      try { 
        hidden0.rawText((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Form form0 = new Form("tuNZ'5uWqx>V. $");
      ElExpression elExpression0 = new ElExpression("y9:yYN1mN*bYu~2$~");
      // Undeclared exception!
      try { 
        form0.radioGroup(":U:#Uo1bkb='RZ|", (ISelectModel) null, elExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "u", "u");
      // Undeclared exception!
      try { 
        checkbox0.sub();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Form form0 = new Form("cA07XY'Zoas");
      // Undeclared exception!
      try { 
        form0.submit("cA07XY'Zoas");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Form form0 = new Form("java.lang.StringBuilder@0000000004");
      // Undeclared exception!
      try { 
        form0.link();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h6();
      Component component1 = component0.cite();
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Form form0 = new Form("`;+%J=^U?%>E7");
      Checkbox checkbox0 = new Checkbox(form0, "dir", "reset");
      // Undeclared exception!
      try { 
        checkbox0.big();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateInput dateInput0 = new DateInput((Component) null, "mVa", "wheel.util.ComponentStore", "wheel.util.ComponentStore");
      // Undeclared exception!
      try { 
        dateInput0.iframe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "`<lJo", "`<lJo");
      Checkbox checkbox0 = new Checkbox(textArea0, "when namespaces processing is disabled attribute namespace must be null", "R{)C%i.");
      // Undeclared exception!
      try { 
        checkbox0.isInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Form form0 = new Form("gBGgl");
      // Undeclared exception!
      try { 
        form0.h1((Object) "gBGgl");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      Component component0 = tableRow0.table();
      Component component1 = component0.noframes();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", component0.getComponentId());
      assertEquals("Block_2", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.i();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "failed to subEval expression");
      Component component0 = table0.dd((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("float");
      NumberInput numberInput0 = null;
      try {
        numberInput0 = new NumberInput(errorPage0, "", "", elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize DecimalFormat with pattern 'float'.
         //
         verifyException("wheel.components.NumberInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.buildComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.u();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.hr();
      // Undeclared exception!
      try { 
        component0.end("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression 'null'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Form form0 = new Form("'6)rN|c.3");
      // Undeclared exception!
      try { 
        form0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sup();
      ActionExpression actionExpression0 = new ActionExpression("parser must be on START_TAG to read next text");
      Form form0 = new Form(component0, "-F'kHH6NtPn", actionExpression0);
      form0.hidden("XpP");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        xmlEntityRef0.small((Object) errorPage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("R`");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("]RzLYJr+GB^t");
      // Undeclared exception!
      try { 
        xmlEntityRef0.htmlText("]RzLYJr+GB^t");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.li((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("P$");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h5();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(errorPage0, "", "}xx*]pt&{GQs", stringSelectModel0, elExpression0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Select select0 = new Select(checkboxGroup0, "", "}xx*]pt&{GQs", stringBuilder0, stringSelectModel0, true);
      Component component0 = select0.bdo(stringBuilder0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, errorPage0);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        text0.h3((Object) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Form form0 = new Form("Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .");
      DateInput dateInput0 = new DateInput(form0, "hr", "Fm/_^5mN@l,SrE", "Fm/_^5mN@l,SrE");
      // Undeclared exception!
      try { 
        form0.code((Object) dateInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Form form0 = new Form("9EI6gulLA");
      // Undeclared exception!
      try { 
        form0.dt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Form form0 = new Form("array or collections index out of bounds (property: ");
      // Undeclared exception!
      try { 
        form0.numberInput("java.lang.StringBuilder@0000000004", (CharSequence) "java.lang.StringBuilder@0000000004");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Form form0 = new Form("kZa <%>~-J");
      Locale locale0 = new Locale("<&,+zMI`ez", "eG=1^ w % PZ['", "kZa <%>~-J");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      // Undeclared exception!
      try { 
        form0.text(mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Short short0 = new Short((short)15);
      Component component0 = errorPage0.h4((Object) short0);
      // Undeclared exception!
      try { 
        component0.textarea((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, ")QV");
      ActionExpression actionExpression0 = new ActionExpression(")QV");
      Form form0 = new Form(block0, ")QV", actionExpression0);
      Component component0 = form0.abbr();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Rs`NpM");
      TableBlock tableBlock0 = table0.colgroup();
      Component component0 = tableBlock0.span((Object) table0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Y<_{CeV'i");
      TableBlock tableBlock0 = table0.colgroup();
      Component component0 = tableBlock0.b();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.q((Object) null);
      ActionExpression actionExpression0 = new ActionExpression("java.lang.StringBuilder@0000000004");
      Form form0 = new Form(component0, "java.lang.StringBuilder@0000000004", actionExpression0);
      Component component1 = form0.b((Object) actionExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "map", "map");
      // Undeclared exception!
      try { 
        textArea0.buttonInput("map");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "");
      Component component0 = tableBlock0.entity("0:fs`E!y;-");
      // Undeclared exception!
      try { 
        component0.acronym();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(errorPage0, (String) null, "", stringSelectModel0, elExpression0);
      TableRow tableRow0 = new TableRow(checkboxGroup0);
      NumberInput numberInput0 = new NumberInput(tableRow0, "", (String) null, (CharSequence) null);
      Image image0 = new Image(numberInput0, (CharSequence) null, "");
      // Undeclared exception!
      try { 
        image0.passwordInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.encode("2r6Yt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000013");
      // Undeclared exception!
      try { 
        form0.var((Object) "java.lang.String@0000000013");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("cpb+_");
      // Undeclared exception!
      try { 
        xmlEntityRef0.pre();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Form form0 = new Form("Y5@,[.@4rNo");
      // Undeclared exception!
      try { 
        form0.ins();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "");
      tableBlock0.object();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "content-type");
      TableBlock tableBlock0 = table0.thead();
      // Undeclared exception!
      try { 
        tableBlock0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Form form0 = new Form("0V{/0,Hwft");
      // Undeclared exception!
      try { 
        form0.tt((Object) "0V{/0,Hwft");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, ";)0u[&", ";)0u[&");
      // Undeclared exception!
      try { 
        textArea0.radio((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dl();
      Component component1 = component0.ul();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_2", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Form form0 = new Form("A");
      // Undeclared exception!
      try { 
        form0.abbr((Object) "A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dl();
      Component component1 = component0.div();
      assertEquals("Block_2", component1.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Form form0 = new Form(" `Y");
      // Undeclared exception!
      try { 
        form0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Form form0 = new Form("?yXNmrVX&a5Mn;e");
      // Undeclared exception!
      try { 
        form0.em();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, ".", ".");
      ActionExpression actionExpression0 = new ActionExpression("label");
      Form form0 = new Form(checkbox0, ".", actionExpression0);
      Component component0 = form0.dd();
      Component component1 = component0.nbsp();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Form form0 = new Form("trace");
      String string0 = form0.getComponentName();
      assertEquals("Form", string0);
      assertEquals("trace", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Colgroup component can be added only to a Table.");
      // Undeclared exception!
      try { 
        xmlEntityRef0.fieldset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("|");
      // Undeclared exception!
      try { 
        xmlEntityRef0.base("|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "+%0[z|l&^=W~{[w", "d[}0l");
      Component component0 = errorPage0.ins((Object) numberInput0);
      Component component1 = component0.a();
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.del();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Form form0 = new Form("");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      // Undeclared exception!
      try { 
        form0.s((Object) stringBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.address();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "jAr8|v`-dnb1", "jAr8|v`-dnb1");
      ActionExpression actionExpression0 = new ActionExpression("4=AtjPQhlRUV");
      Form form0 = new Form(textArea0, "jAr8|v`-dnb1", actionExpression0);
      form0.imageSubmit("code", "onsubmit");
      Table table0 = new Table(textArea0, "u");
      TableBlock tableBlock0 = table0.colgroup();
      assertTrue(tableBlock0._isGeneratedId());
      
      tableBlock0.id("4=AtjPQhlRUV");
      assertFalse(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, (String) null, "bR,'U");
      // Undeclared exception!
      try { 
        hidden0.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tr component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      Table table0 = (Table)tableRow0.table();
      TableBlock tableBlock0 = table0.colgroup();
      Form form0 = (Form)tableBlock0.form("=W@!y.;%nntlD");
      // Undeclared exception!
      try { 
        form0.find("V')CfQ`|kcC&@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id V')CfQ`|kcC&@ on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "del", "del");
      Component component0 = errorPage0.legend((Object) hidden0);
      assertTrue(component0._isGeneratedId());
      
      Component component1 = errorPage0.remove((Component) null);
      assertEquals("wheel_ErrorPage", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "java.lang.String@0000000010", "java.lang.String@0000000010");
      Checkbox checkbox0 = new Checkbox(textInput0, "java.lang.String@0000000010", "java.lang.String@0000000010");
      Double double0 = new Double(1.0);
      // Undeclared exception!
      try { 
        checkbox0.samp((Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.meta();
      // Undeclared exception!
      try { 
        component0.img("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "+%0[z|l&^=W~{[w", "d[}0l");
      // Undeclared exception!
      try { 
        numberInput0.numberInput("incomplete statement");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Form form0 = new Form("cLzI\"pFUV");
      Hidden hidden0 = new Hidden(form0, "cLzI\"pFUV", "H-qX+$}qx3");
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      ElExpression elExpression0 = new ElExpression("java.lang.String@0000000007");
      // Undeclared exception!
      try { 
        hidden0.checkboxGroup("-", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("base");
      // Undeclared exception!
      try { 
        errorPage0.fileInput("base", elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.fileInput("G8z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "java.lang.StringBuilder@0000000004", "abbr");
      Map<String, String> map0 = textInput0.getAttributes();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      // Undeclared exception!
      try { 
        checkbox0.button();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Form form0 = new Form(">=*K[5P");
      // Undeclared exception!
      try { 
        form0.checkbox(">=*K[5P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Form form0 = new Form("&U#8[L.m&");
      Checkbox checkbox0 = new Checkbox(form0, "2(WNAFXsJs0[36", "2(WNAFXsJs0[36");
      // Undeclared exception!
      try { 
        checkbox0.tbody();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tbody component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.blockquote();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.strong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, ".|k@6j@", ".|k@6j@");
      // Undeclared exception!
      try { 
        radio0.placeholder(".|k@6j@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "java.lang.String@0000000013", "java.lang.String@0000000013");
      FormElement formElement0 = checkbox0.fieldBinding("java.lang.String@0000000013");
      assertSame(formElement0, checkbox0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.p();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("'");
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        xmlEntityRef0.area(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("W<n2L?tN+5`}Ax\"|$#");
      TextArea textArea0 = new TextArea(xmlEntityRef0, "W<n2L?tN+5`}Ax\"|$#", "h)s&9p$_c");
      // Undeclared exception!
      try { 
        textArea0.acronym((Object) xmlEntityRef0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "java.lang.String@0000000011");
      Table table0 = new Table(tableBlock0, "java.lang.String@0000000011");
      TableRow tableRow0 = table0.tr();
      Component component0 = tableRow0.h3();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.s();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "updateTargetId", "updateTargetId");
      // Undeclared exception!
      try { 
        checkbox0.requestFocus();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Form form0 = new Form("A1Xj&T|");
      // Undeclared exception!
      try { 
        form0.dateInput("BA7T,(f.7E", "VLs3yj8kN~yFF7s_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.var();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "", "Tfoot component can be added only to a Table.");
      Component component0 = errorPage0.sup((Object) submit0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Form form0 = new Form("Fi");
      // Undeclared exception!
      try { 
        form0.small();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Yd+/G<%j#.lI0#r{");
      // Undeclared exception!
      try { 
        xmlEntityRef0.frame("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Form form0 = new Form("=^k,1U");
      // Undeclared exception!
      try { 
        form0.kbd((Object) form0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Y<_{CeV'i");
      TableBlock tableBlock0 = table0.colgroup();
      Component component0 = tableBlock0.samp();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000013");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(form0, "hfZ5V@^6T)NFEL]TDpy", "S!Qo", stringSelectModel0, "S!Qo");
      // Undeclared exception!
      try { 
        select0.label();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.map("XdW\"ObrI\"|iN|#s$ym");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.dfn((Object) null);
      // Undeclared exception!
      try { 
        errorPage0.remove("java.lang.String@0000000007");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Component with id java.lang.String@0000000007 does not exist.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, (String) null, "iframe");
      Checkbox checkbox1 = (Checkbox)checkbox0.actionBinding("can't parse int value");
      assertEquals("input", checkbox1.defaultTagName());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.tfoot();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tfoot component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "java.lang.String@0000000013", "java.lang.String@0000000013");
      Short short0 = new Short((short)39);
      // Undeclared exception!
      try { 
        checkbox0.h6((Object) short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h4();
      Text text0 = new Text(errorPage0, component0);
      Component component1 = component0.h2((Object) text0);
      Calendar calendar0 = component1.date();
      Component component2 = errorPage0.strong((Object) calendar0);
      assertTrue(component2._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dl();
      Component component1 = component0.clasS("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.multiSelect("body {background: #d7cc80; font: 75%/1.419em Arial, Helvetica, Geneva, sans-serif; min-width: 630px;} \nh1, h2, h3, h4, h5 {color: #666666} \nh1 {padding-bottom: 20px;} \nh5 {padding-left: 30px; line-height: 8px;} \n.main {background-color: #eeeeee; margin: 6px; padding-top: 10px;} \n.head {background-color: #eeeeee; margin: 5px; padding-left: 15px; } \n.trace {background-color: #eeeeee; border: medium; margin: 10px; padding: 4px; padding-left: 15px;}", (ISelectModel) null, "body {background: #d7cc80; font: 75%/1.419em Arial, Helvetica, Geneva, sans-serif; min-width: 630px;} \nh1, h2, h3, h4, h5 {color: #666666} \nh1 {padding-bottom: 20px;} \nh5 {padding-left: 30px; line-height: 8px;} \n.main {background-color: #eeeeee; margin: 6px; padding-top: 10px;} \n.head {background-color: #eeeeee; margin: 5px; padding-left: 15px; } \n.trace {background-color: #eeeeee; border: medium; margin: 10px; padding: 4px; padding-left: 15px;}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        hidden0.legend();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      Component component0 = tableRow0.table();
      component0.kbd();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, ")QV");
      ActionExpression actionExpression0 = new ActionExpression(")QV");
      Form form0 = new Form(block0, ")QV", actionExpression0);
      ElExpression elExpression0 = new ElExpression("=a<a*!zD HgP;Bg");
      RadioGroup radioGroup0 = new RadioGroup(form0, ")QV", ";SA01%", (ISelectModel) null, elExpression0);
      TextInput textInput0 = new TextInput(radioGroup0, "java.lang.String@0000000017", "=a<a*!zD HgP;Bg");
      Table table0 = new Table(textInput0, "=\";)yf,C-f");
      TableBlock tableBlock0 = table0.tfoot();
      Any any0 = tableBlock0.col();
      any0.toString();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", any0.getComponentId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      List<RenderableComponent> list0 = errorPage0._getRenderableChildren();
      assertNotNull(list0);
      
      Component component0 = errorPage0.dt((Object) list0);
      Component component1 = component0.acronym();
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, ".", ".");
      ActionExpression actionExpression0 = new ActionExpression("label");
      Form form0 = new Form(checkbox0, ".", actionExpression0);
      Component component0 = form0.dd();
      component0.i((Object) checkbox0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
      assertEquals(".", form0.getComponentId());
  }
}
