/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 20:42:36 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Map<Map<Object, Object>, Object>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Map<Object, Object>, Object>, String, String>();
      HashMap<Map<Object, Object>, Object> hashMap0 = new HashMap<Map<Object, Object>, Object>();
      doubleKeyMap0.put((Map<Map<Object, Object>, Object>) hashMap0, "us.codecraft.webmagic.utils.MultiKeyMapBase", "[]=(f.DnL+geA");
      Map<String, String> map0 = doubleKeyMap0.remove((Map<Map<Object, Object>, Object>) hashMap0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      Integer integer0 = doubleKeyMap0.remove("", (String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Map<Integer, Map<Object, Integer>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Integer>(map0, class0);
      Integer integer0 = new Integer((-3520));
      Object object0 = new Object();
      Integer integer1 = doubleKeyMap1.remove(integer0, object0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>();
      Integer integer0 = doubleKeyMap0.remove((Object) null, "us.codecraft.webmagic.utils.MultiKeyMapBase");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1732);
      Object object0 = new Object();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(class0);
      Object object1 = doubleKeyMap0.remove(object0, integer0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      Map<String, Object> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>();
      Object object0 = new Object();
      Map<Integer, Integer> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put((Integer) null, (Object) null, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Integer integer0 = new Integer(1732);
      Object object0 = doubleKeyMap0.remove(integer0, (Object) integer0);
      Object object1 = doubleKeyMap0.put((Integer) null, (Object) null, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>();
      HashMap<Object, Map<Object, Map<String, Object>>> hashMap0 = new HashMap<Object, Map<Object, Map<String, Object>>>();
      DoubleKeyMap<Object, Object, Map<String, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<String, Object>>(hashMap0);
      DoubleKeyMap<Object, HashMap<String, Object>, String> doubleKeyMap2 = new DoubleKeyMap<Object, HashMap<String, Object>, String>();
      Map<String, Object> map0 = doubleKeyMap2.newMap();
      Map<String, Object> map1 = doubleKeyMap1.put((Object) doubleKeyMap2, (Object) doubleKeyMap0, map0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<String, String>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, String>, String>();
      String string0 = doubleKeyMap0.get((Object) null, (HashMap<String, String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Integer>();
      Map<Object, HashMap<HashMap<Integer, Integer>, Object>> map0 = doubleKeyMap1.newMap();
      Integer integer0 = doubleKeyMap2.get((Object) map0, (Object) doubleKeyMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(hashMap0);
      Map<String, Object> map0 = doubleKeyMap0.get((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DoubleKeyMap<HashMap<String, String>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, Object, Integer>();
      Map<Object, Map<HashMap<String, Object>, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, HashMap<String, Object>, String> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, Object>, String>(map0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) map0, hashMap0, (String) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Map<Object, Object>, Map<String, Map<Object, Map<Object, Object>>>> hashMap0 = new HashMap<Map<Object, Object>, Map<String, Map<Object, Map<Object, Object>>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, Object>, String, Map<Object, Map<Object, Object>>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, String, Map<Object, Map<Object, Object>>>(hashMap0, class0);
      HashMap<Object, Map<Object, Object>> hashMap1 = new HashMap<Object, Map<Object, Object>>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Map<Object, Object>) null, "O*h[}](V", (Map<Object, Map<Object, Object>>) hashMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Integer, Integer>, Object, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Integer>, Object, String>((Map<HashMap<Integer, Integer>, Map<Object, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<String, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, Object>, String>();
      Integer integer0 = new Integer(0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      doubleKeyMap0.put((Object) integer0, hashMap0, "nn|l9");
      hashMap0.put("V29)UM^az~- G<Z{B", "F2,;");
      String string0 = doubleKeyMap0.remove((Object) integer0, hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<String, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, Object>, String>();
      Integer integer0 = new Integer(0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      doubleKeyMap0.put((Object) integer0, hashMap0, "");
      String string0 = doubleKeyMap0.put((Object) integer0, hashMap0, "nn|l9");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<String, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, Object>, String>();
      DoubleKeyMap<Object, HashMap<String, String>, String> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, String>, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      doubleKeyMap1.put((Object) doubleKeyMap0, hashMap0, "O@bP;SB#|s{g])[cAEt");
      String string0 = doubleKeyMap1.get((Object) doubleKeyMap0, hashMap0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<String, Object>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Integer, Object>(class0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("2 R^gcvJr]GNO3!po&y", doubleKeyMap0);
      Object object0 = hashMap0.put("2 R^gcvJr]GNO3!po&y", (Object) null);
      HashMap<Object, Map<Map<Object, Object>, HashMap<Map<Object, Object>, String>>> hashMap1 = new HashMap<Object, Map<Map<Object, Object>, HashMap<Map<Object, Object>, String>>>();
      DoubleKeyMap<Object, Map<Object, Object>, HashMap<Map<Object, Object>, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Object, Object>, HashMap<Map<Object, Object>, String>>(hashMap1);
      Map<Map<Object, Object>, HashMap<Map<Object, Object>, String>> map0 = doubleKeyMap1.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<String, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, Object>, String>();
      Integer integer0 = new Integer(0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      doubleKeyMap0.put((Object) integer0, hashMap0, "nn|l9");
      String string0 = doubleKeyMap0.remove((Object) integer0, hashMap0);
      assertEquals("nn|l9", string0);
  }
}
