/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 15:46:24 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)82;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte) (-58);
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)83);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantString constantString0 = new ConstantString((byte)83);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantLong constantLong0 = new ConstantLong((byte)122);
      constantArray0[2] = (Constant) constantLong0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[3] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 533, 1171, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte)106;
      byteArray0[8] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)67);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[1] = (Constant) constantClass0;
      ConstantFloat constantFloat2 = new ConstantFloat((byte)67);
      constantArray0[2] = (Constant) constantFloat2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("i2l", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("5%,q1$n<Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5%,q1$n<Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger(201);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantLong constantLong0 = new ConstantLong((-1208L));
      constantArray0[2] = (Constant) constantLong0;
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[3] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ixor", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)40;
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)13;
      Constant[] constantArray0 = new Constant[5];
      ConstantString constantString0 = new ConstantString(191);
      constantArray0[0] = (Constant) constantString0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)13);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantString constantString1 = new ConstantString(938);
      constantArray0[2] = (Constant) constantString1;
      String string0 = "|-,]0pn>_aUz?%c";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("|-,]0pn>_aUz?%c");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat0 = new ConstantFloat(938);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[4] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)40, (-1617970699));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 42342. Constant pool size is: 5
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.getSignature("N)u-");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = true;
      Utility.format(71, 242, true, 'E');
      Utility.replace("\"$f0i5kmj", "[]?E!|^$}ojo4Ve", "org.apache.bcel.util.ByteSequence$ByteArrayStream");
      boolean boolean1 = false;
      Utility.accessToString(246, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "org.apache.bcel.util.ByteSequence$ByteArrayStream";
      Utility.printArray(objectArray0, true);
      Utility.getSignature("[]?E!|^$}ojo4Ve");
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utility.compactClassName("<illegal opcode>", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal opcode>");
      Utility.clearBit(904, 904);
      Utility.methodTypeToSignature(", npairs = ", (String[]) null);
      Utility.isSet(904, 40);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-125);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.methodTypeToSignature("xgUEg_WL_b;C?/4G", (String[]) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 40, (int) (byte) (-125));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString((-2518), true);
      Utility.getSignature("private static abstract synthetic annotation enum");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)34;
      boolean boolean1 = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-44), (-298), false);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "LRi/$<wU;A.q.]]g{N";
      try { 
        Utility.methodSignatureReturnType("LRi/$<wU;A.q.]]g{N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LRi/$<wU;A.q.]]g{N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-94);
      byteArray0[1] = (byte) (-67);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)3;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)3, (int) (byte)99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "invokespecial";
      stringArray0[1] = "invokespecial";
      stringArray0[2] = "bastore";
      Utility.methodTypeToSignature("invokespecial", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 78, (-4715), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.decode("?$eieX#C ~5", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ei\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)127;
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-114);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)127, 1825, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte) (-4);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 167);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    nop\n3:    dload\t\t%132\n5:    iconst_5\n6:    isub\n7:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = Utility.compactClassName("breakpoint", true);
      assertEquals("breakpoint", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-47);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1), 8);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    lcmp\n3:    ladd\n4:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\t\t<");
      Utility.isSet(5, 5);
      try { 
        Utility.typeOfSignature("*<.IDNx%?2`jQ]q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <.IDNx%?2`jQ]q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.accessToString((-554), false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)80;
      Utility.toHexString(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)76, (int) (byte) (-78), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString(244);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lor", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-96);
      byteArray0[0] = (byte) (-96);
      int int0 = (-2257);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2257), (-2257));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.clearBit((-3078), 201);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-61);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ireturn");
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)3;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)3, (int) (byte)99);
      String string1 = Utility.compactClassName("5:    l2d\n6:    iconst_0\n", "5:    l2d\n6:    iconst_0\n", false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", code_length = ");
      byte byte0 = (byte) (-58);
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-2);
      Utility.toHexString(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-2));
      constantArray0[0] = (Constant) constantFloat0;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantFloat0.accept(emptyVisitor0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)13, (int) (byte) (-2));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.isJavaIdentifierPart('E');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte)22;
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((-1771));
      constantArray0[0] = (Constant) constantString0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)1, (byte) (-13));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2362, 60, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      byte[] byteArray0 = Utility.decode("V", false);
      assertArrayEquals(new byte[] {(byte)86}, byteArray0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.decode("&R=1\"lMK87Z}c_l&4n", false);
      short short0 = Utility.searchOpcode("V");
      assertEquals((short) (-1), short0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "V";
      objectArray0[1] = (Object) "&R=1\"lMK87Z}c_l&4n";
      objectArray0[2] = (Object) "V";
      objectArray0[3] = (Object) "&R=1\"lMK87Z}c_l&4n";
      Utility.printArray(objectArray0, true, true);
      Utility.printArray(objectArray0, false);
      String string0 = Utility.accessToString((int) (short) (-1), true);
      assertEquals("public private protected static final volatile transient native abstract strictfp synthetic annotation enum", string0);
      
      boolean boolean0 = Utility.isSet((-411), (short) (-1));
      assertTrue(boolean0);
      
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{V, &R=1\"lMK87Z}c_l&4n, V, &R=1\"lMK87Z}c_l&4n}", string1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString(158, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)71, (int) (byte)70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      String string0 = "4xp6";
      try { 
        Utility.typeOfSignature("4xp6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4xp6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)0;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte) (-110), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "@ox^]pB [DxU/";
      try { 
        Utility.typeOfSignature("@ox^]pB [DxU/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @ox^]pB [DxU/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("astore_0", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("goto_w", false);
      Utility.accessToString(162);
      String string0 = "class";
      Utility.convertString("class");
      try { 
        Utility.typeOfSignature("P8[&w\"k5L@#o:v3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P8[&w\"k5L@#o:v3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = Utility.compactClassName("", "?3;0%~Ch_2S)", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.compactClassName("\r", "$2G", true);
      Utility.format((-1322), (-987), true, '/');
      // Undeclared exception!
      try { 
        Utility.decode("$2G", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2G\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-22);
      byteArray0[2] = (byte)107;
      byte byte0 = (byte)51;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)80;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)51, (int) (byte)107, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WXM[vLaTIsg@A1sz!a");
      Utility.compactClassName(">\t");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-124);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-124), (int) (byte) (-124), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.isJavaIdentifierPart('F');
      Utility.format((-17), 47, false, 'F');
      Utility.format(47, (-17), true, '/');
      Utility.searchOpcode("47");
      Utility.fillup("[z]*&uEspxAj{T%", 86, false, '/');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte) (-62);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(487);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3010, 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.compactClassName("boolean", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "J0L/4)-[KZ>h[a#`0}";
      // Undeclared exception!
      try { 
        Utility.getSignature("J0L/4)-[KZ>h[a#`0}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[KZ>h[a#`0}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "80Od";
      stringArray0[1] = "80Od";
      stringArray0[2] = "80Od";
      stringArray0[3] = "80Od";
      stringArray0[4] = "80Od";
      stringArray0[5] = "80Od";
      stringArray0[6] = "80Od";
      stringArray0[7] = "80Od";
      String string0 = Utility.methodTypeToSignature("80Od", stringArray0);
      assertEquals("(L80Od;L80Od;L80Od;L80Od;L80Od;L80Od;L80Od;L80Od;)L80Od;", string0);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(L80Od;L80Od;L80Od;L80Od;L80Od;L80Od;L80Od;L80Od;)L80Od;", false);
      assertEquals(8, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString(190, true);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) "private protected static final transient";
      objectArray0[3] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) fileSystemHandling0;
      objectArray0[5] = (Object) fileSystemHandling0;
      Utility.printArray(objectArray0, true);
      Utility.compactClassName("private protected static final transient");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-60);
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("private protected static final transient");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-93));
      constantArray0[1] = (Constant) constantDouble0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-107), 190);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantString constantString0 = new ConstantString((byte) (-60));
      constantArray0[3] = (Constant) constantString0;
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[4] = (Constant) constantDouble1;
      Constant constant0 = constantArray0[3].copy();
      constantArray0[5] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 176, 2048, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1699. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.fillup("Nh `", 42, true, '@');
      Utility.getSignature("short");
      Utility.signatureToString("F-txT).h N");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)76;
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("q7/");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("3>(q0t");
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)69);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(341, (byte)37);
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 48, (int) (byte)123, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)99;
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)37;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)51, (int) (byte) (-22), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.clearBit((-559), (-559));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-4393), 466, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = Utility.fillup("monitorexit", 60, false, '=');
      assertEquals("=================================================monitorexit", string0);
      
      Utility.fillup("monitorexit", 60, true, '=');
      String string1 = Utility.getSignature("=================================================monitorexit");
      assertEquals("L=================================================monitorexit;", string1);
      
      Utility.format((-1175), 2087, true, 'a');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte) (-46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("=================================================monitorexit");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1033, 338);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("ifle\t\t#6264", string2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)62;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-15), 195);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "0:    fconst_0\n1:    f2l\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    istore_3\n";
      objectArray0[1] = (Object) "0:    fconst_0\n1:    f2l\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    istore_3\n";
      objectArray0[2] = (Object) "0:    fconst_0\n1:    f2l\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    istore_3\n";
      objectArray0[3] = (Object) (byte)62;
      objectArray0[4] = (Object) (byte)62;
      objectArray0[5] = (Object) (byte)62;
      objectArray0[6] = (Object) "0:    fconst_0\n1:    f2l\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    istore_3\n";
      Object object0 = new Object();
      objectArray0[7] = object0;
      Utility.printArray(objectArray0, false, false);
      Utility.equals(byteArray0, byteArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("0:    fconst_0\n1:    f2l\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    istore_3\n, 0:    fconst_0\n1:    f2l\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    istore_3\n, 0:    fconst_0\n1:    f2l\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    istore_3\n, 62, 62, 62, 0:    fconst_0\n1:    f2l\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    istore_3\n, java.lang.Object@73ec1a3c", "0:    fconst_0\n1:    f2l\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    istore_3\n, 0:    fconst_0\n1:    f2l\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    istore_3\n, 0:    fconst_0\n1:    f2l\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    istore_3\n, 62, 62, 62, 0:    fconst_0\n1:    f2l\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    istore_3\n, java.lang.Object@73ec1a3c");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 0:    fconst_0
         // 1:    f2l
         // 2:    <illegal opcode>
         // 3:    <illegal opcode>
         // 4:    istore_3
         // , 0:    fconst_0
         // 1:    f2l
         // 2:    <illegal opcode>
         // 3:    <illegal opcode>
         // 4:    istore_3
         // , 0:    fconst_0
         // 1:    f2l
         // 2:    <illegal opcode>
         // 3:    <illegal opcode>
         // 4:    istore_3
         // , 62, 62, 62, 0:    fconst_0
         // 1:    f2l
         // 2:    <illegal opcode>
         // 3:    <illegal opcode>
         // 4:    istore_3
         // , java.lang.Object@73ec1a3c
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "7.pJitO5_Ky<c6uh\"u(";
      try { 
        Utility.typeOfSignature("7.pJitO5_Ky<c6uh\"u(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7.pJitO5_Ky<c6uh\"u(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)91;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)43, (-127468019));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-127468019), 91, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 85. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-116);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 122, 2275, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)87;
      byte byte0 = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), (int) (byte) (-105), true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "0:    pop\n1:    dcmpl\n";
      stringArray0[1] = "0:    pop\n1:    dcmpl\n";
      stringArray0[2] = "0:    pop\n1:    dcmpl\n";
      stringArray0[3] = "0:    pop\n1:    dcmpl\n";
      stringArray0[4] = "0:    pop\n1:    dcmpl\n";
      Utility.methodTypeToSignature("0:    pop\n1:    dcmpl\n", stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.replace(":syG?rJYHkcF", "'-", "'-");
      String string0 = Utility.getSignature(":syG?rJYHkcF");
      assertEquals("L:syG?rJYHkcF;", string0);
      
      Utility.accessToString(85);
      byte[] byteArray0 = Utility.decode("L:syG?rJYHkcF;", false);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(85);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1618354986), (-1618354986), true);
      assertEquals("0:    astore_1\n1:    astore\t\t%115\n3:    lshl\n4:    dstore_0\n5:    lstore_0\n6:    frem\n7:    dstore_3\n8:    dup\n9:    dstore_1\n10:   dmul\n11:   dadd\n12:   fstore_3\n13:   istore_0\n", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      boolean boolean0 = Utility.isJavaIdentifierPart('T');
      assertTrue(boolean0);
      
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      String string3 = Utility.accessToString((-1618354986));
      assertEquals("private protected final volatile transient abstract strictfp synthetic enum", string3);
      
      int int0 = Utility.clearBit((-2214), (-2214));
      assertEquals((-67111078), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)71;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~=qEWU&l&x|kd>Xs");
      byteArray0[1] = (byte) (-66);
      byte byte0 = (byte)78;
      byteArray0[2] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dstore_0", "dstore_0", "ifnonnull", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dstore_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = true;
      Utility.format((-2551), (-831), true, '>');
      String string0 = "wide";
      Utility.replace("-2551", "wide", "wide");
      Utility.clearBit(4712, (-2551));
      String string1 = "Hl&pS IW(Hm!%<?E|8";
      try { 
        Utility.typeOfSignature("Hl&pS IW(Hm!%<?E|8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Hl&pS IW(Hm!%<?E|8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.convertString("Prw#|]+Fhk%");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("Prw#|]+Fhk%", "lpzz+Wf-(f5!l~<6", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 238, 139, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-24);
      byte byte0 = (byte)100;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-59);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 42, (int) (byte) (-24));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "R'O_j\\lSLX&";
      try { 
        Utility.typeOfSignature("R'O_jlSLX&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R'O_jlSLX&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-40);
      byteArray0[8] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)33, (-1466));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)24;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 804, (int) (byte)32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.compactClassName("{+.4`LNe%S)");
      Utility.isSet((-889275714), 240);
      Utility.typeOfSignature("D");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isSet((-1769), 193);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lneg", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)14;
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-100));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantInteger constantInteger0 = new ConstantInteger(90);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)13, 55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)96;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)96, (byte)96);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)96, (int) (byte)96);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)17;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-97), (int) (byte) (-97), false);
      assertEquals("0:    aload\t\t%30\n2:    if_icmpeq\t\t#-7405\n", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("java.lang.Object@1fb60b2c, java.lang.Object@7eaaff8b, java.lang.Object@7219cc8d, java.lang.Object@73c838eb, java.lang.Object@5c88b2d5, java.lang.Object@75f75868", true);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (-4790));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte) (-112);
      byteArray0[7] = (byte) (-118);
      byteArray0[8] = (byte)42;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("jZ{1");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 18, (-1839), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 7188. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("E&6n-@R`tX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E&6n-@R`tX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = ":('%APbq\"X *dyI\"\"Q";
      try { 
        Utility.typeOfSignature(":('%APbq\"X *dyI\"\"Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :('%APbq\"X *dyI\"\"Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0);
      Utility.isJavaIdentifierPart('n');
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-95);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-3988));
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 90, (int) (byte) (-62), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)87;
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((-1705.79700764));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantLong constantLong0 = new ConstantLong((byte) (-110));
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-1599), 254);
      assertEquals("0:    <illegal opcode>\n1:    monitorenter\n2:    i2c\n3:    pop\n", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0, false);
      assertEquals("CONSTANT_Double[6](bytes = -1705.79700764), CONSTANT_Long[5](bytes = -110)", string1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)3;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)3, (int) (byte)99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-51);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<illegal opcode>";
      stringArray0[1] = "<illegal opcode>";
      Utility.methodTypeToSignature("i#o", stringArray0);
      String string0 = "MPzC?M";
      try { 
        Utility.typeOfSignature("MPzC?M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MPzC?M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokespecial");
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)65;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 79, 77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utility.clearBit(82, 82);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)51;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 9, (int) (byte) (-95));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "boolean");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "boolean";
      objectArray0[2] = (Object) null;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-61);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.decode("org.apache.bcel.classfile.ConstantUtf8$1", false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureArgumentTypes("{null, boolean, null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {null, boolean, null}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.replace("return", "VO", "lload");
      assertEquals("return", string0);
      
      byte[] byteArray1 = Utility.decode("VO", false);
      assertArrayEquals(new byte[] {(byte)86, (byte)79}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("if_icmpge");
      PrintStream printStream0 = mockPrintStream0.append('#');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) printStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) printStream0;
      objectArray0[6] = (Object) printStream0;
      objectArray0[7] = (Object) mockPrintStream0;
      Utility.printArray(printStream0, objectArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "if_icmpge";
      stringArray0[1] = "if_icmpge";
      stringArray0[2] = "if_icmpge";
      stringArray0[3] = "if_icmpge";
      Utility.methodTypeToSignature("if_icmpge", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte)106;
      byteArray0[8] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte) (-123);
      byte byte0 = (byte) (-90);
      byteArray0[7] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.readChar();
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-19);
      byte byte0 = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte) (-53);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 42, (-2516), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.setBit((-371), (-371));
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("PG;Wx2[-e<R", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PG;Wx2[-e<R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iload_2", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byte byte0 = (byte)126;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)65;
      byte byte1 = (byte)38;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)54;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[7] = (byte)85;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, 102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-128);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 80, 73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "?{lSa}>)FC 4c\\0";
      try { 
        Utility.typeOfSignature("?{lSa}>)FC 4c\u0000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?{lSa}>)FC 4c\u0000
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.typeOfSignature("Zm");
      Utility.replace("Zm", "if_icmplt", "Y4");
      byte byte0 = Utility.typeOfSignature("Zm");
      assertEquals((byte)4, byte0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}q6u!W'");
      int int0 = Utility.clearBit((-1083), (-1083));
      assertEquals((-1083), int0);
      
      boolean boolean0 = Utility.isSet((-1604), (-2401));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.replace("Zm", "}q6u!W'", "new");
      assertEquals("Zm", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)69;
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)73);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantClass constantClass0 = new ConstantClass((-162));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[1] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)11, 1174);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "K+IkZ0O4f!";
      try { 
        Utility.typeOfSignature("K+IkZ0O4f!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K+IkZ0O4f!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utility.compactClassName("goto_w", "goto_w", false);
      Utility.setBit(20000, 20000);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1072. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)61;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = "new";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("new");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `new'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.classOrInterface(938);
      Utility.setBit(2815, 62);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-27);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload_1", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 18, 1073744639);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-78);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a1B8aGJu6x");
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)79;
      byteArray0[8] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JYM!lT[g<s72`~e]3");
      String string0 = Utility.getSignature("zqf{LPl=;F>sR#B");
      assertEquals("Lzqf{LPl=;F>sR#B;", string0);
      
      Utility.printArray((Object[]) null, false);
      String string1 = Utility.fillup("JYM!lT[g<s72`~e]3", (byte) (-78), true, 'f');
      assertEquals("JYM!lT[g<s72`~e]3", string1);
      
      byte byte0 = Utility.typeOfSignature("JYM!lT[g<s72`~e]3");
      assertEquals((byte)11, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('f');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)48;
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)89;
      byteArray1[1] = (byte)89;
      byteArray1[2] = (byte)96;
      Utility.equals(byteArray0, byteArray1);
      try { 
        Utility.typeOfMethodSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.clearBit((-1574), 1249);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-101);
      byte byte0 = (byte)87;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte)87;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)102, (int) (byte)102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{java.lang.Object@184241c8}");
      byteArray0[0] = (byte)68;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.convertString("{java.lang.Object@184241c8}");
      String string2 = Utility.compactClassName("\t(wide)", "{java.lang.Object@184241c8}", false);
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Utility.printArray(objectArray0, true, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string3 = Utility.codeToString(byteArray0, constantPool0, (-1060), (-1060));
      assertEquals("0:    fstore_1\n", string3);
      
      String string4 = Utility.toHexString(byteArray0);
      assertEquals("44", string4);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Utility.decode("/$", false);
      String string0 = Utility.fillup("a^yghH5Fv", 3474, false, '}');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte) (-8);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4, (int) (byte)8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 51562. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Utility.classOrInterface((-1150));
      Utility.isJavaIdentifierPart('=');
      Utility.isJavaIdentifierPart('=');
      Utility.compactClassName("synchronized", false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.clearBit((-1150), 89);
      String string0 = "ret";
      Utility.getSignature("ret");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Lret;";
      objectArray0[1] = (Object) "ret";
      objectArray0[2] = (Object) "ret";
      objectArray0[3] = (Object) "Lret;";
      objectArray0[4] = (Object) "synchronized";
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.typeOfSignature("T");
      Utility.classOrInterface((byte)14);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      Utility.toHexString(byteArray0);
      Utility.classOrInterface((byte)14);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "0e 0e";
      stringArray0[1] = "org.apache.commons.io.filefilter.WildcardFileFilter";
      stringArray0[2] = "T";
      stringArray0[3] = "0e 0e";
      stringArray0[4] = "T";
      stringArray0[5] = "private";
      stringArray0[6] = "[q!8}4,L1ee|R*";
      stringArray0[7] = "class";
      stringArray0[8] = "T";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("T", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [q!8}4,L1ee|R*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = ">";
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.accessToString((-554), false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)80;
      Utility.toHexString(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)76, (int) (byte) (-81), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)29;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), 77);
      try { 
        Utility.methodSignatureArgumentTypes("-:0!PtU@{;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -:0!PtU@{;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "46,{$8CC@_N]o";
      try { 
        Utility.decode("46,{$8CC@_N]o", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-102);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1395), 91, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aload_0
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.isJavaIdentifierPart('3');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-61);
      Utility.encode(byteArray0, true);
      String string0 = ", ";
      try { 
        Utility.typeOfSignature(", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.classOrInterface(2);
      Utility.isJavaIdentifierPart('h');
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&,t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &,t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "XP+~";
      // Undeclared exception!
      try { 
        Utility.signatureToString("XP+~", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XP+~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "6n\"MtP+CMd";
      try { 
        Utility.typeOfSignature("6n\"MtP+CMd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6n\"MtP+CMd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)125;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[3] = (byte)40;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "interface";
      Utility.convertString("interface");
      ConstantPool constantPool0 = null;
      int int0 = (-539);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 922, (-539));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "=1l[%[MnX";
      try { 
        Utility.typeOfSignature("=1l[%[MnX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =1l[%[MnX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "(string_index = ";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("(string_index = ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `string_index = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2*Ju]@P, D#D4:4?>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2*Ju]@P, D#D4:4?>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = Utility.replace("areturn", "areturn", "me[l06LKUDDi*xl{");
      assertEquals("me[l06LKUDDi*xl{", string0);
      
      byte byte0 = Utility.typeOfSignature("Invalid signature: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "%B<=F#&X";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%B<=F#&X");
      try { 
        Utility.typeOfSignature("%B<=F#&X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %B<=F#&X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "H?*-U&3";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("H?*-U&3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H?*-U&3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)64;
      byteArray0[7] = (byte)64;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)96, (byte) (-64));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-1514), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)39;
      byte byte0 = (byte)108;
      byteArray0[2] = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)108, 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(']');
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("LKw/zU%.J|'AR1{s");
      assertEquals((byte)14, byte0);
      
      int int0 = Utility.clearBit(139, 854);
      assertEquals(139, int0);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "LKw/zU%.J|'AR1{s";
      objectArray0[2] = (Object) "LKw/zU%.J|'AR1{s";
      objectArray0[3] = (Object) "LKw/zU%.J|'AR1{s";
      objectArray0[4] = (Object) "LKw/zU%.J|'AR1{s";
      Utility.printArray(objectArray0);
      String string0 = Utility.convertString("LKw/zU%.J|'AR1{s");
      assertEquals("LKw/zU%.J|\\'AR1{s", string0);
      
      String string1 = Utility.accessToString(32, false);
      assertEquals("synchronized", string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "synchronized";
      stringArray0[1] = "LKw/zU%.J|'AR1{s";
      stringArray0[2] = "{java.lang.Object@4d8bae10, LKw/zU%.J|'AR1{s, LKw/zU%.J|'AR1{s, LKw/zU%.J|'AR1{s, LKw/zU%.J|'AR1{s}";
      stringArray0[3] = "LKw/zU%.J|'AR1{s";
      stringArray0[4] = "!hrx=hXzp*i";
      Utility.methodTypeToSignature("{java.lang.Object@4d8bae10, LKw/zU%.J|'AR1{s, LKw/zU%.J|'AR1{s, LKw/zU%.J|'AR1{s, LKw/zU%.J|'AR1{s}", stringArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)14;
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-598), 86, false);
      assertEquals("0:    dconst_0\n1:    dconst_0\n2:    daload\n3:    dconst_0\n", string2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "<P9?";
      try { 
        Utility.typeOfSignature("<P9?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <P9?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        Utility.typeOfSignature("G>L#P4]*35Q&O[f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G>L#P4]*35Q&O[f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)29;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), 77);
      try { 
        Utility.methodSignatureArgumentTypes("-:0!PtU@{;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -:0!PtU@{;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "int");
      Utility.accessToString(2778, true);
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("Xp [.t^=\"bRIU]Ny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xp [.t^=\"bRIU]Ny
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-40);
      byteArray0[8] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)33, (-1466));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)74;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-5), (byte)74);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)16, (int) (byte) (-18));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte) (-120);
      byteArray0[8] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(57, (byte) (-120));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2325), (byte)102);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(67);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(66, (byte)77);
      constantArray0[4] = (Constant) constantMethodHandle2;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)75);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[5] = (Constant) constantDouble1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("f.bG|:(D5");
      constantArray0[6] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 42714. Constant pool size is: 7
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W?z6DBQhU'R_NB5tvUe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W?z6DBQhU'R_NB5tvUe
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-18);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-18), (int) (byte)56);
      assertEquals("0:    fstore\t\t%18\n2:    bastore\n3:    <illegal opcode>\n", string0);
      
      Utility.getSignature("+0t");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)56;
      objectArray0[1] = (Object) (byte) (-18);
      objectArray0[2] = (Object) "L+0t;";
      objectArray0[3] = (Object) "+0t";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) (byte) (-18);
      objectArray0[6] = (Object) "0:    fstore\t\t%18\n2:    bastore\n3:    <illegal opcode>\n";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{56, -18, L+0t;, +0t, null, -18, 0:    fstore\t\t%18\n2:    bastore\n3:    <illegal opcode>\n}", string1);
      
      String string2 = Utility.methodSignatureReturnType("L+0t;", false);
      assertEquals("+0t", string2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0:    fstore\t\t%18\n2:    bastore\n3:    <illegal opcode>\n";
      stringArray0[1] = "+0t";
      stringArray0[2] = "VYU-cKz&&8'Xy";
      String string3 = Utility.methodTypeToSignature("0:    fstore\t\t%18\n2:    bastore\n3:    <illegal opcode>\n", stringArray0);
      assertEquals("(L0:;L+0t;LVYU-cKz&&8'Xy;)L0:;", string3);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "(";
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("org.apache.commons.io.filefilter.WildcardFileFilter", false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "org.apache.commons.io.filefilter.WildcardFileFilter";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      Utility.printArray(objectArray0, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-3396), (-3396), false);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read(byteArray0);
      // Undeclared exception!
      try { 
        byteSequence0.readFully(byteArray0, 91, 91);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-53);
      byte byte0 = (byte)103;
      byteArray0[5] = (byte)103;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)95, (-939), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      short short0 = Utility.searchOpcode("u|_");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)89;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$de$7d$a8$e6Y", string0);
      
      String string1 = Utility.classOrInterface((byte)89);
      assertEquals("class", string1);
      
      String string2 = Utility.accessToString((int) (byte) (-34));
      assertEquals("private protected static final volatile transient native interface abstract strictfp synthetic annotation enum", string2);
      
      String string3 = Utility.compactClassName("ireturn");
      assertEquals("ireturn", string3);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(186, (byte) (-34));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string4 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("jsr\t\t#-6565", string4);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("putfield", stringArray0);
      String string0 = "[GD`[C3&u|bNA$";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[GD`[C3&u|bNA$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GD`[C3&u|bNA$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)37;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)51, (int) (byte)107, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)37;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)51, (int) (byte)86, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)4;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = (byte) (-12);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-89);
      byte byte1 = (byte)36;
      byteArray0[6] = (byte)36;
      byte byte2 = (byte)40;
      byteArray0[7] = (byte)40;
      byteArray0[8] = (byte) (-66);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 59, (int) (byte)36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte) (-106);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 69, (-1267));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Utility.compactClassName("w!o3f{\"mh@OVtS8)", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)72;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)103;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 14, 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)25, 16, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 79;
      Utility.isSet(79, 4661);
      String string0 = "f;0.T_uIUTZ:x";
      Utility.compactClassName("f;0.T_uIUTZ:x", true);
      String string1 = Utility.fillup("f;0.T_uIUTZ:x", 1210, false, 'Y');
      try { 
        Utility.typeOfSignature(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signaturef;0.T_uIUTZ:x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.typeOfSignature("C");
      Utility.searchOpcode("C");
      String string0 = ", low = ";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(", low = ", "C");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // C
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "Z8J&Oxm5yPji]Q";
      Utility.methodSignatureReturnType("Z8J&Oxm5yPji]Q");
      String string1 = "e-__-!ruW}!";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("e-__-!ruW}!", "e-__-!ruW}!", "e-__-!ruW}!", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: e-__-!ruW}!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 1206;
      boolean boolean0 = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format(1206, 91, true, 'S');
      try { 
        Utility.typeOfSignature("1206SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1206SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "C>]0b";
      Utility.methodSignatureReturnType("C>]0b", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-109);
      Utility.toHexString(byteArray0);
      Utility.convertString("5c 61 fb 0d 5c 93");
      String string1 = "-CB'h>Mu";
      Utility.convertString("-CB'h>Mu");
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("8G'nxp(PJp?{<,", (String) null, "impdep1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8G'nxp(PJp?{<,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 91;
      int int1 = 413;
      Utility.clearBit(91, 413);
      String string0 = "7;\\e$)e ";
      boolean boolean0 = true;
      try { 
        Utility.decode("7;e$)e ", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lload");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("EXQz]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EXQz]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('{');
      assertFalse(boolean0);
      
      Utility.fillup("cJ)", 4366, false, 'x');
      String string0 = Utility.methodSignatureReturnType("JvQJ9[_/DZq", false);
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)63;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = (byte) (-12);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-89);
      byte byte1 = (byte)36;
      byteArray0[6] = (byte)36;
      byte byte2 = (byte)40;
      byteArray0[7] = (byte)40;
      byteArray0[8] = (byte) (-66);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 59, (int) (byte)36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "i2b";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i2b");
      Utility.setBit(91, 91);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-111);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("O", "O", false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-69);
      byteArray1[1] = (byte)106;
      byteArray1[2] = (byte)72;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-69), (int) (byte)72);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "boolean");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "boolean";
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "boolean";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)77;
      Constant[] constantArray0 = new Constant[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(92, 92);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("v-V)xpU<|GV@");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)77);
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[4] = (Constant) constantString0;
      ConstantLong constantLong0 = new ConstantLong((byte)77);
      constantArray0[5] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 4793, (int) (byte) (-91));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Utility.replace("int", "int", "#UZ&.4*A3L");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-70);
      byteArray0[0] = (byte) (-70);
      byte byte1 = (byte)62;
      byteArray0[1] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("#UZ&/4*A3LG/", true);
      try { 
        Utility.typeOfSignature("#UZ&.4*A3LG.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #UZ&.4*A3LG.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Integer integer0 = new Integer((byte) (-60));
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("wide\t(wide)", string0);
      
      String string1 = Utility.fillup("wide\t(wide)", (byte) (-65), false, '');
      String string2 = Utility.compactClassName("wide\t(wide)", "wide\t(wide)", false);
      assertTrue(string2.equals((Object)string1));
      
      String string3 = Utility.convertString("athrow");
      assertEquals("athrow", string3);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Utility.typeOfSignature("[Gro1= J};CX_");
      try { 
        Utility.methodSignatureArgumentTypes("&(}}O3Mk19D", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &(}}O3Mk19D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String[] stringArray0 = new String[4];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte) (-80);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[0] = "char";
      stringArray0[1] = "char";
      stringArray0[2] = "char";
      stringArray0[3] = "char";
      Utility.methodTypeToSignature("char", stringArray0);
      Utility.getSignature("char");
      Utility.classOrInterface(1383);
      Utility.printArray((Object[]) stringArray0);
      Utility.classOrInterface(122);
      Utility.clearBit(122, 122);
      // Undeclared exception!
      try { 
        Utility.signatureToString("{char, char, char, char}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{char, char, char, char}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Utility.compactClassName("bz;j?JP@f$*i^UnG7l", "bz;j?JP@f$*i^UnG7l", true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "bz;j?JP@f$*i^UnG7l";
      objectArray0[1] = (Object) "bz;j?JP@f$*i^UnG7l";
      objectArray0[2] = (Object) "bz;j?JP@f$*i^UnG7l";
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-38);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 64, (int) (byte)29, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)102;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-67), (-67), true);
      assertEquals("0:    i2b\n1:    <illegal opcode>\n2:    lstore_1\n3:    fsub\n", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("91 da 40 66", string1);
      
      String string2 = Utility.compactClassName("i0");
      assertEquals("i0", string2);
      
      String string3 = Utility.replace("91 da 40 66", "]J`Va=rb+J@^JYf<", "\"\"NgIGPqlr|D");
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte) (-16);
      String string0 = Utility.toHexString(byteArray0);
      String string1 = Utility.accessToString((int) (byte)63, true);
      assertEquals("public private protected static final", string1);
      
      String string2 = Utility.compactClassName("3a 62 a2 82 98 3f bd f0", "3a 62 a2 82 98 3f bd f0", false);
      assertTrue(string2.equals((Object)string0));
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-126);
      byteArray1[1] = (byte)98;
      byteArray1[2] = (byte) (-16);
      byteArray1[3] = (byte)98;
      byteArray1[4] = (byte)98;
      byteArray1[5] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[6];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-16));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantInteger constantInteger1 = new ConstantInteger(byteSequence0);
      constantArray0[2] = (Constant) constantInteger1;
      ConstantFloat constantFloat1 = new ConstantFloat((byte) (-16));
      constantArray0[3] = (Constant) constantFloat1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)98, 5);
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("LD");
      constantArray0[5] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string3 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("fadd", string3);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Utility.accessToString(2556);
      String string0 = Utility.accessToString(2556);
      Utility.accessToString(2556);
      String string1 = Utility.replace("IE'Q8>+q<7O2xZX", "protected static final synchronized volatile transient native strictfp", "b#g^Co {");
      assertEquals("IE'Q8>+q<7O2xZX", string1);
      
      String string2 = Utility.compactClassName("protected static final synchronized volatile transient native strictfp", false);
      assertTrue(string2.equals((Object)string0));
      
      byte[] byteArray0 = Utility.decode("protected static final synchronized volatile transient native strictfp", false);
      short short0 = Utility.searchOpcode("protected static final synchronized volatile transient native strictfp");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(70, byteArray0.length);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("irem", string3);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("ifnonnull\t\t#19382", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Au@<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Au@<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = new Integer((byte) (-68));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "zca8!A;(fnR,";
      stringArray0[1] = "void";
      stringArray0[2] = "zca8!A;(fnR,";
      stringArray0[3] = "zca8!A;(fnR,";
      stringArray0[4] = "zca8!A;(fnR,";
      stringArray0[5] = "";
      stringArray0[6] = "zca8!A;(fnR,";
      try { 
        Utility.methodTypeToSignature("zca8!A;(fnR,", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "O2}/jk5Kc= 5";
      try { 
        Utility.typeOfSignature("O2}/jk5Kc= 5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O2}/jk5Kc= 5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.fillup("94C=", 1481, false, 'g');
      try { 
        Utility.typeOfSignature("94C=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 94C=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Utility.setBit(89, 89);
      String string0 = ".SG";
      try { 
        Utility.typeOfSignature(".SG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .SG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)64;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)96, (byte) (-64));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1514), (int) (byte)11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1134. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)99, (-1735), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)44;
      Constant[] constantArray0 = new Constant[3];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)44;
      byteArray1[1] = (byte)69;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)44;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)44;
      byteArray1[7] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-3));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)44, (int) (byte)44, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte) (-3);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 610, (int) (byte)79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)90;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)92, true);
      Utility.isSet((byte) (-48), (byte)0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)98;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iadd", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unreachable default case reached!");
      Utility.compactClassName("breakpoint");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-96);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureReturnType("Unreachable default case reached!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Vv", true);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "/;";
      try { 
        Utility.typeOfSignature("/;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = true;
      char char0 = 'B';
      Utility.fillup("Illegal type: ", 33, true, 'B');
      Utility.signatureToString("Illegal type: ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      Utility.toHexString(byteArray0);
      Utility.convertString("24");
      Utility.compactClassName("Illegal type: BBBBBBBBBBBBBBBBBBB");
      Utility.fillup("getstatic", 2023, true, 'B');
      Utility.compactClassName("Vv");
      Utility.setBit(2023, 2023);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 46, 33, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Utility.searchOpcode("3)c's-c2< c,");
      try { 
        Utility.methodSignatureReturnType("Mh:;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mh:;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfSignature("BvcfA\"9=g&>RhPX;");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BvcfA\"9=g&>RhPX;");
      Utility.accessToString(82, false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("private final volatile", "BvcfA\"9=g&>RhPX;");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // BvcfA\"9=g&>RhPX;
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "L";
      Utility.compactClassName("L");
      try { 
        Utility.methodSignatureReturnType("L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = Utility.isSet(1155, 1155);
      assertFalse(boolean0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("I@Z%2");
      mockPrintStream0.println();
      mockPrintStream0.write(52);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      String string0 = Utility.convertString("I@Z%2");
      assertEquals("I@Z%2", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-52);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2632), 1155);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(62, 1561);
      constantArray0[1] = (Constant) constantMethodHandle2;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("Sensitive");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fload_1", string1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Utility.typeOfSignature("SIsd*~1{AZ|+");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1392), 141);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "T2B";
      // Undeclared exception!
      try { 
        Utility.signatureToString("T2B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T2B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)90;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)74, true);
      assertEquals("0:    dstore_3\n1:    iconst_1\n2:    castore\n3:    dstore_3\n4:    nop\n5:    <illegal opcode>\n6:    dup_x1\n", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Utility.setBit((-1511), (-3127));
      Utility.getSignature("\"xp? 0RM(n\"@!r");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)91, (-686));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(378, 8);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("dup2");
      byteSequence0.readUnsignedByte();
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.classOrInterface((byte)63);
      try { 
        byteSequence0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Wlu]mmq_dECIV,Gg", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wlu]mmq_dECIV,Gg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)11, 1329, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("getstatic", "getstatic", "getstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("i2b", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "QC/evig;h";
      // Undeclared exception!
      try { 
        Utility.signatureToString("QC/evig;h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QC/evig;h'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)79;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$ddE$AO", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("dd 45 00 4f", string1);
      
      Constant[] constantArray0 = new Constant[5];
      ConstantClass constantClass0 = new ConstantClass(52);
      constantArray0[0] = (Constant) constantClass0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[1] = (Constant) constantClass1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("$ddE$AO");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2630, (byte)0);
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[4] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, 73, false);
      assertEquals("0:    <illegal opcode>\n1:    fstore_2\n2:    nop\n3:    iastore\n", string2);
      
      int int0 = Utility.setBit(119, 5);
      assertEquals(119, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = "+l:u|,LA^ne+*C%FWO8";
      try { 
        Utility.typeOfSignature("+l:u|,LA^ne+*C%FWO8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: l:u|,LA^ne+*C%FWO8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-18);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1003, (int) (byte)56);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(93, 1008);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0, true);
      Utility.isJavaIdentifierPart('!');
      Utility.compactClassName("lstore_1", "{java.lang.Object@f2e10d8, java.lang.Object@710e4651, java.lang.Object@10801287}", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)108, (int) (byte) (-10));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = Utility.isSet((-1769), 193);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-41);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-41), (-1160));
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Utility.clearBit(197, 197);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, true, true);
      Utility.isJavaIdentifierPart('_');
      Utility.printArray(objectArray0);
      try { 
        Utility.methodSignatureArgumentTypes("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.getSignature("d2i");
      Utility.typeOfSignature("Ld2i;");
      try { 
        Utility.methodSignatureReturnType("d2i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `d2i'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)126;
      byte byte0 = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)20;
      byte byte1 = (byte) (-79);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      byteSequence0.close();
      ConstantPool constantPool0 = null;
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.toHexString(byteArray0);
      String string0 = "The list of names must not be null";
      String string1 = "IX2wox#x";
      boolean boolean0 = false;
      int int0 = 42;
      LocalVariable[] localVariableArray0 = new LocalVariable[8];
      int int1 = (-1421);
      LocalVariable localVariable0 = new LocalVariable(2990, 42, (byte) (-79), (-1421), (byte)20, (ConstantPool) null);
      localVariableArray0[0] = localVariable0;
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getLocalVariableTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Utility.searchOpcode("ireturn");
      Object[] objectArray0 = new Object[3];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte) (-18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "ireturn";
      Utility.printArray(objectArray0);
      Utility.format(1291, 1291, false, '`');
      // Undeclared exception!
      try { 
        Utility.signatureToString("ddiv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ddiv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Utility.methodSignatureReturnType("Byte code error: ", true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "byte";
      objectArray0[1] = (Object) "Byte code error: ";
      objectArray0[2] = (Object) "Byte code error: ";
      objectArray0[3] = (Object) "Byte code error: ";
      Utility.printArray(objectArray0, false, false);
      Utility.compactClassName(".lA7I=))2c");
      String string0 = "v!m";
      Utility.replace("v!m", ".lA7I=))2c", "Unknown constant type ");
      Utility.clearBit((-2108), (-2108));
      try { 
        Utility.typeOfMethodSignature("]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.typeOfSignature("F");
      Utility.compactClassName("ajh2=/1Ai|OAh");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("@$rVPhb(");
      Utility.compactClassName("@$rVPhb(", "@$rVPhb(", false);
      char char0 = '%';
      Utility.fillup("@$rVPhb(", (-1420), true, '%');
      Utility.classOrInterface((-1420));
      Utility.isSet((-1420), 84);
      Utility.accessToString(84, true);
      try { 
        Utility.decode("@$rVPhb(", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Utility.convertString("RG2Om)4xI@X\"I0vY");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-34);
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)7);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 66, 3, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 46855. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte) (-58);
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)83);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantString constantString0 = new ConstantString((byte)83);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantLong constantLong0 = new ConstantLong((byte)122);
      constantArray0[2] = (Constant) constantLong0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[3] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 533, 1171, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "\t\t%";
      stringArray0[0] = "\t\t%";
      stringArray0[1] = "java.lang.The";
      Utility.methodTypeToSignature("java.lang.The", stringArray0);
      try { 
        Utility.typeOfMethodSignature(".4Z3m;YOAT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .4Z3m;YOAT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.convertString("Dont call getValueFloat() on a non FLOAT ElementValue");
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String[] stringArray0 = new String[1];
      String string0 = "iconst_3";
      stringArray0[0] = "iconst_3";
      Utility.methodTypeToSignature(",]-Ie_ ", stringArray0);
      Utility.accessToString((-1426), false);
      Utility.fillup("annotation", (-1426), false, 'v');
      try { 
        Utility.typeOfSignature("(Liconst_3;)L,]-Ie_;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (Liconst_3;)L,]-Ie_;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J");
      String string0 = Utility.methodSignatureReturnType("Dw.W$-}.^08A(aM");
      assertEquals("double", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('b');
      assertTrue(boolean0);
      
      String string1 = Utility.getSignature("J");
      assertEquals("LJ;", string1);
      
      byte[] byteArray0 = Utility.decode("#o~X", false);
      assertArrayEquals(new byte[] {(byte)35, (byte)111, (byte)126, (byte)88}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-60);
      byteArray0[0] = (byte) (-60);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-6);
      Utility.toHexString(byteArray0);
      String string0 = "YP%@\\P'(#x~Z";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("YP%@P'(#x~Z", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YP%@P'(#x~Z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = 367;
      Utility.accessToString(367);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "N=";
      // Undeclared exception!
      try { 
        Utility.signatureToString("N=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Utility.replace("dreturn", "dreturn", "dreturn");
      Utility.methodTypeToSignature("dreturn", (String[]) null);
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("((>P}", "yE7", "((>P}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `(>P}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = Utility.accessToString(142);
      assertEquals("private protected static transient", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "private protected static transient";
      objectArray0[1] = (Object) "private protected static transient";
      objectArray0[2] = (Object) "private protected static transient";
      objectArray0[3] = (Object) "private protected static transient";
      objectArray0[4] = (Object) "private protected static transient";
      objectArray0[5] = (Object) "private protected static transient";
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals("private protected static transient, private protected static transient, private protected static transient, private protected static transient, private protected static transient, private protected static transient", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iastore", string2);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "\"uRk";
      try { 
        Utility.typeOfSignature("\"uRk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"uRk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int int0 = 6;
      Utility.classOrInterface(6);
      boolean boolean0 = false;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_\"]KLcWCbybr~.~(x");
      Utility.format((-211), 6, false, 'l');
      String string0 = "8q";
      try { 
        Utility.typeOfSignature("8q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DdF85pX|^");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.getSignature("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-916), 753);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)3;
      byte[] byteArray1 = new byte[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray1[0] = (byte) (-62);
      byteArray1[1] = (byte)3;
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.format(74, (-1193), true, 'L');
      assertEquals("74", string0);
      
      String string1 = Utility.encode(byteArray1, false);
      assertEquals("$c2$D", string1);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Utility.compactClassName("int", "int", true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "int";
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "int";
      objectArray0[4] = (Object) "int";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "int";
      objectArray0[7] = (Object) "int";
      objectArray0[8] = (Object) "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "<Unknown>", "U'): -oi-V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Utility.compactClassName("athrow", true);
      Utility.compactClassName("org.apache.bcel.classfile.Utility", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)40;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("K'L' w%}{xo9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K'L' w%}{xo9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      String string0 = "I";
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("I", false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.signatureToString("I");
      Utility.getSignature("I");
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ">i2<t<D<lCky[q";
      stringArray0[1] = ">i2<t<D<lCky[q";
      stringArray0[2] = ">i2<t<D<lCky[q";
      stringArray0[3] = ">i2<t<D<lCky[q";
      stringArray0[4] = ">i2<t<D<lCky[q";
      stringArray0[5] = ">i2<t<D<lCky[q";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(">i2<t<D<lCky[q", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.convertString("mt&r8/hD#BJxQGbD");
      Utility.compactClassName("(gXd2egt)QA:y6#", true);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.clearBit(32767, 9);
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)116;
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte) (-47);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.encode(byteArray0, false);
      Utility.classOrInterface((byte)48);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean boolean0 = false;
      Utility.signatureToString("S8_", false);
      Utility.getSignature("S8_");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("new", "final", "/Jl`5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: new
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)38;
      byteArray0[0] = (byte)38;
      byte byte1 = (byte)25;
      byteArray0[1] = (byte)25;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)62;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)38, 4052);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "0Q79\"WWjrkjv?FaWNG";
      try { 
        Utility.typeOfSignature("0Q79\"WWjrkjv?FaWNG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0Q79\"WWjrkjv?FaWNG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)125;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "monitorexit");
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(constantMethodHandle1);
      constantArray0[1] = (Constant) constantMethodHandle2;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(84, (byte)8);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance((ClassPath) null);
      syntheticRepository0.findClass("monitorexit");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantMethodHandle0.accept(descendingVisitor0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[3] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aaload", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0, true);
      assertNotNull(string1);
      assertEquals("{CONSTANT_MethodHandle[15](reference_kind = 175, reference_index = 47229), CONSTANT_MethodHandle[15](reference_kind = 175, reference_index = 47229), CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = 84, name_and_type_index = 8), CONSTANT_Class[7](name_index = 40527)}", string1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = Utility.convertString("=FB!k8S^0>");
      assertEquals("=FB!k8S^0>", string0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\\=FB!k8S^0>");
      int int0 = Utility.setBit(749, 749);
      assertEquals(8941, int0);
      
      String string1 = Utility.fillup("\\=FB!k8S^0>", (-2824), true, '-');
      String string2 = Utility.replace("\\=FB!k8S^0>", "aaload", "8");
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.format((-1146), (-1146), false, 'd');
      try { 
        Utility.typeOfSignature("-1146");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -1146
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int int0 = (-2101);
      Utility.classOrInterface((-2101));
      Utility.accessToString(2124, true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("interface", "interface");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // interface
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.compactClassName("");
      int int0 = 686;
      Utility.accessToString(686, true);
      Utility.clearBit(686, 686);
      Utility.clearBit(221, 221);
      Utility.getSignature("8q");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "private protected static transient";
      Utility.methodTypeToSignature(", ", stringArray0);
      MockFile mockFile0 = new MockFile("", "private protected static transient");
      MockFile mockFile1 = new MockFile(mockFile0, "RuntimeVisibleParameterAnnotations");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile1, ", ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // , 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      String string0 = "*8Xn7T!'qO(";
      Utility.getSignature("*8Xn7T!'qO(");
      Utility.convertString("*8Xn7T!'qO(");
      Utility.setBit(2226, 16);
      Utility.format(2226, (-2984), false, '0');
      String string1 = "?sLu2Q|1\\ ";
      try { 
        Utility.methodSignatureArgumentTypes("?sLu2Q|1 ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?sLu2Q|1 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      boolean boolean0 = Utility.isSet(72, 72);
      Utility.compactClassName("", "", false);
      boolean boolean1 = Utility.isSet(184, 40);
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
      
      String string1 = Utility.format(184, 90, true, 'o');
      assertEquals("184ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", string1);
      
      Utility.convertString("");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0, false, true);
      String string2 = Utility.accessToString(75);
      assertEquals("public private static volatile", string2);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('o');
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = Utility.printArray(objectArray0, true);
      assertEquals("{, }", string3);
      assertNotNull(string3);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-115);
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte)43;
      byteArray1[3] = (byte) (-9);
      byteArray1[4] = (byte) (-128);
      byteArray1[5] = (byte)12;
      String string4 = Utility.codeToString(byteArray1, (ConstantPool) null, (-1089), 150, false);
      assertEquals("0:    f2d\n1:    lshl\n2:    aload_1\n3:    <illegal opcode>\n4:    ior\n5:    fconst_1\n", string4);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.replace("SourceFile", "SourceFile", "SourceFile");
      String string0 = "O(pqM";
      String string1 = "\t\t#";
      String string2 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      int int0 = (-3396);
      int int1 = 61;
      Attribute[] attributeArray0 = null;
      String string3 = "UF|j8$7 \"h";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("SourceFile", "UF|j8$7 \"h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"UF|j8$7 \"h\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "nx&;H:W?dcLe";
      Utility.convertString("nx&;H:W?dcLe");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "nx&;H:W?dcLe";
      objectArray0[1] = (Object) "nx&;H:W?dcLe";
      objectArray0[2] = (Object) "nx&;H:W?dcLe";
      objectArray0[3] = (Object) "nx&;H:W?dcLe";
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "impdep1");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.setBit(50, (-128));
      Utility.accessToString(50, false);
      String string0 = "jsr_w";
      Utility.fillup("jsr_w", (-1566), false, '^');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "jsr_w";
      objectArray0[1] = (Object) "jsr_w";
      objectArray0[2] = (Object) "jsr_w";
      objectArray0[3] = (Object) "private final synchronized";
      Utility.printArray(objectArray0);
      Utility.classOrInterface(51);
      try { 
        Utility.typeOfSignature("jsr_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jsr_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = Utility.compactClassName("org.apache.bcel.Const", "java.lang.", false);
      assertEquals("org.apache.bcel.Const", string0);
      
      try { 
        Utility.typeOfSignature("org.apache.bcel.Const");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.Const
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "b(0d0IfgF@<v";
      try { 
        Utility.decode("b(0d0IfgF@<v", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "org.apache.bcel.classfile.Utility$1";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Utility$1");
      boolean boolean0 = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.getSignature("The size must be non-negative");
      Utility.isSet(250, 32);
      Utility.compactClassName("LThe;");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "LThe;";
      objectArray0[1] = (Object) "LThe;";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Utility.printArray(objectArray0, false);
      Utility.methodSignatureReturnType("LThe;, LThe;, java.lang.Object@6834bdfb", true);
      Utility.signatureToString("LThe;", false);
      int int0 = 8;
      Utility.isSet(250, 8);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)58;
      byteArray0[0] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      MockFile mockFile0 = new MockFile("The size must be non-negative");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "LThe;, LThe;, java.lang.Object@6834bdfb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"LThe;, LThe;, java.lang.Object@6834bdfb\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.setBit(3234, 3234);
      Utility.isJavaIdentifierPart(':');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-46);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "char");
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-6);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfMethodSignature("i|e{I;^9y<;r=3_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i|e{I;^9y<;r=3_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = Utility.format(3433, 1104, false, '!');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("java.lang.Mf1%5%a@", "", "java.lang.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Mf1%5%a@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)69;
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("$Q$8eE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $Q$8eE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Utility.accessToString(2646);
      Utility.searchOpcode("private protected final volatile interface strictfp");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)83;
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte) (-33), false);
      String string0 = null;
      String string1 = "V1mN+olxg";
      File file0 = MockFile.createTempFile("private protected final volatile interface strictfp", "V1mN+olxg");
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, (String) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString(")7x;I0V?9bD;wJ7!4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `)7x;I0V?9bD;wJ7!4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes(81);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.compactClassName("Mf1%5%a@", true);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)22;
      byteArray0[0] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Utility.convertString("O");
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte) (-76);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)48;
      byte byte2 = (byte) (-20);
      byteArray0[6] = (byte) (-20);
      byte byte3 = (byte) (-44);
      byteArray0[7] = (byte) (-44);
      byte byte4 = (byte)76;
      byteArray0[8] = (byte)76;
      Utility.toHexString(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      int int0 = (-808);
      Utility.clearBit((-808), (-306));
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = "RtSwHZeF]>C\"O&`";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("RtSwHZeF]>C\"O&`", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RtSwHZeF]>C\"O&`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString(8, true);
      Utility.compactClassName("static");
      String string0 = "dload_3";
      Utility.replace("dload_3", "static", "dload_3");
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.commons.io.filefilter.EmptyFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.commons.io.filefilter.EmptyFileFilter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)104;
      byte byte0 = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte) (-88);
      String string0 = "I8y";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("Smo|(uvo1k5", "I8y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"I8y\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)111;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B;9K>");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)6;
      byte byte0 = (byte)77;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte)102;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("istore", false);
      String string0 = Utility.convertString("istore");
      assertEquals("istore", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-149), (-149));
      assertEquals("0:    lmul\n1:    drem\n2:    ineg\n3:    ddiv\n4:    frem\n5:    lsub\n", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertArrayEquals(new byte[] {(byte)105, (byte)115, (byte)116, (byte)111, (byte)114, (byte)101}, byteArray0);
      assertEquals("lmul", string2);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("'", "vZ@cK:N]qR#}3%=Z", "[", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = Utility.accessToString(1264);
      assertEquals("final synchronized volatile transient abstract", string0);
      
      int int0 = Utility.clearBit(1264, (-1074));
      assertEquals(1264, int0);
      
      boolean boolean0 = Utility.isSet((-1074), 1264);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "final synchronized volatile transient abstract";
      objectArray0[1] = (Object) null;
      Utility.printArray(objectArray0);
      String string1 = Utility.signatureToString("F\"hvpui,>zJ");
      assertEquals("float", string1);
      
      String string2 = Utility.accessToString(234, true);
      assertEquals("private static volatile transient", string2);
      
      String string3 = Utility.printArray(objectArray0);
      assertEquals("{final synchronized volatile transient abstract, null}", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "F\"hvpui,>zJ";
      stringArray0[1] = "{final synchronized volatile transient abstract, null}";
      stringArray0[2] = "F\"hvpui,>zJ";
      stringArray0[3] = "final synchronized volatile transient abstract";
      stringArray0[4] = "{final synchronized volatile transient abstract, null}";
      stringArray0[5] = "private static volatile transient";
      String string4 = Utility.methodTypeToSignature("u&u3;", stringArray0);
      assertEquals("(LF\"hvpui,>zJ;L{final;LF\"hvpui,>zJ;Lfinal;L{final;Lprivate;)Lu&u3;;", string4);
      
      boolean boolean1 = Utility.isSet(3464, 155);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("p|]>]]U2*bGs@cq%");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "p|]>]]U2*bGs@cq%";
      objectArray0[1] = (Object) "p|]>]]U2*bGs@cq%";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) "p|]>]]U2*bGs@cq%";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(7, objectArray0.length);
  }
}
