/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:09:32 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BorderLayout;
import java.io.FileDescriptor;
import java.io.IOException;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Locale;
import java.util.TreeSet;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.plaf.nimbus.NimbusStyle;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.evaluation.NumericPrediction;
import weka.classifiers.evaluation.output.prediction.HTML;
import weka.classifiers.evaluation.output.prediction.Null;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.M5P;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.Cobweb;
import weka.clusterers.SimpleKMeans;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.converters.ArffLoader;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.tokenizers.WordTokenizer;
import weka.estimators.UnivariateKernelEstimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce(1361.862669, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1361
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      CostMatrix costMatrix0 = new CostMatrix(62);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Evaluation.handleCostOption("h", 94);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      LogitBoost logitBoost0 = new LogitBoost();
      String string0 = logitBoost0.getRevision();
      logitBoost0.getOptions();
      cVParameterSelection0.setClassifier(logitBoost0);
      logitBoost0.getCapabilities();
      String string1 = Evaluation.makeOptionString(cVParameterSelection0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("setMinBucketSize");
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.equals(textDirectoryLoader0);
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.getHeader();
      double double1 = evaluation0.kappa();
      assertEquals(1.0, double1, 0.01);
      
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.m_SumSqrClass = (-208.983);
      evaluation0.precision(185);
      evaluation0.pctUnclassified();
      evaluation0.avgCost();
      evaluation0.numFalseNegatives(185);
      evaluation0.unweightedMicroFmeasure();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.KBMeanInformation();
      evaluation0.avgCost();
      evaluation0.errorRate();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("setMinBucketSize");
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.equals(evaluation0);
      evaluation0.weightedFMeasure();
      evaluation0.getHeader();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j0R!Kd");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.precision(10001);
      evaluation0.weightedRecall();
      evaluation0.getHeader();
      evaluation0.truePositiveRate(10001);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      SparseInstance sparseInstance0 = new SparseInstance(10001);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      instances0.enumerateInstances();
      double double0 = KStarConstants.FLOOR;
      evaluation0.sizeOfPredictedRegions();
      evaluation0.weightedPrecision();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      evaluation0.SFEntropyGain();
      String string0 = XML.DTD_SEPARATOR;
      evaluation0.SFMeanEntropyGain();
      MockRandom mockRandom0 = new MockRandom();
      instances0.enumerateInstances();
      instances0.spliterator();
      double double1 = Evaluation.MIN_SF_PROB;
      evaluation0.kappa();
      RandomTree randomTree0 = new RandomTree();
      MockRandom mockRandom1 = new MockRandom();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.fMeasure(2);
      evaluation0.rootMeanPriorSquaredError();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance(1547.85474321, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      int int0 = (-557);
      Evaluation.handleCostOption((String) null, (-557));
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArffLoader arffLoader0 = new ArffLoader();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation.makeOptionString(decisionStump0, true);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DenseInstance denseInstance0 = new DenseInstance(1004);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = NimbusStyle.SMALL_SCALE;
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NF#Zt-NY");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("DTP!<-8FY]kDk%<|");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.KBRelativeInformation();
      Random.setNextRandom((-2));
      evaluation0.makeDistribution(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.KBInformation();
      evaluation0.addNumericTrainClass(Double.NaN, (-2.0));
      evaluation0.equals(evaluation0);
      evaluation0.weightedRecall();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.priorEntropy();
      evaluation0.addNumericTrainClass((-2280.975463), 0.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.listIterator();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.kappa();
      evaluation0.m_Unclassified = (double) (-1);
      evaluation0.useNoPriors();
      evaluation0.totalCost();
      evaluation0.m_SumClassPredicted = 1933.8;
      Logistic logistic0 = new Logistic();
      testInstances0.setHandler(logistic0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.getDiscardPredictions();
      evaluation0.matthewsCorrelationCoefficient((-1));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[6];
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      Random.setNextRandom(65);
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.crossValidateModel("@relation", instances0, 2527, testInstances0.DEFAULT_WORDS, (java.util.Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @relation
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      evaluation0.weightedAreaUnderPRC();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.KBMeanInformation();
      evaluation0.weightedPrecision();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.trueNegativeRate((-2));
      evaluation1.setPriors(instances0);
      evaluation0.errorRate();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_DiscardPredictions = false;
      double double0 = evaluation0.m_SumSchemeEntropy;
      evaluation0.weightedAreaUnderPRC();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.setPriors(instances0);
      evaluation0.errorRate();
      evaluation0.toMatrixString((String) null);
      evaluation0.falsePositiveRate(1705);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(true);
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.priorEntropy();
      textDirectoryLoader0.getDataSet();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      double double1 = evaluation0.m_SumSchemeEntropy;
      evaluation0.incorrect();
      evaluation0.pctCorrect();
      evaluation0.toClassDetailsString();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(false);
      evaluation0.rootMeanPriorSquaredError();
      // Undeclared exception!
      try { 
        evaluation0.precision((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ArffLoader arffLoader0 = new ArffLoader();
      IBk iBk0 = new IBk((-813));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-813);
      iBk0.pruneToK(instances0, doubleArray0, 101);
      arffLoader0.getNextInstance((Instances) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      J48 j48_0 = new J48();
      try { 
        Evaluation.wekaStaticWrapper(j48_0, ".arff.gz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[1];
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.numTruePositives((-3215));
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 580.1099721738926);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Cobweb cobweb0 = new Cobweb();
      Capabilities capabilities0 = new Capabilities(cobweb0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      instances0.delete();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      double double0 = KStarConstants.FLOOR1;
      J48 j48_0 = new J48();
      try { 
        Evaluation.wekaStaticWrapper(j48_0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "weka.classifiers.rules.JRip");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      double double0 = evaluation0.m_SumPredicted;
      evaluation0.areaUnderROC(100000);
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      evaluation0.SFPriorEntropy();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      int int0 = (-386);
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-386));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      Random.setNextRandom(65);
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.relativeAbsoluteError();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      DenseInstance denseInstance0 = new DenseInstance(2);
      ArffLoader arffLoader0 = new ArffLoader();
      costSensitiveClassifier0.getCostMatrix();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      AbstractClassifier.runClassifier(costSensitiveClassifier0, testInstances0.DEFAULT_WORDS);
      HTML hTML0 = new HTML();
      SparseInstance sparseInstance0 = new SparseInstance(487);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(1);
      evaluation0.getRevision();
      evaluation0.setPriors(instances0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArffLoader arffLoader0 = new ArffLoader();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      DecisionStump decisionStump0 = new DecisionStump();
      KDTree kDTree0 = new KDTree(instances0);
      instances0.parallelStream();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      evaluation0.SFEntropyGain();
      String string0 = XML.DTD_SEPARATOR;
      evaluation0.SFMeanEntropyGain();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.m_SumSchemeEntropy;
      evaluation0.weightedAreaUnderPRC();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.KBRelativeInformation();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.toClassDetailsString();
      evaluation0.coverageOfTestCasesByPredictedRegions();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Unclassified = (-31.709248579365);
      evaluation0.KBInformation();
      evaluation0.equals(evaluation0);
      evaluation0.weightedRecall();
      double[] doubleArray0 = new double[4];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(7);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      M5P[] m5PArray0 = new M5P[1];
      M5P m5P0 = new M5P();
      m5PArray0[0] = m5P0;
      instances0.toArray(m5PArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate(4);
      evaluation0.toCumulativeMarginDistributionString();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 4;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.KBMeanInformation();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.getClassPriors();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      textDirectoryLoader0.getRevision();
      instances0.enumerateInstances();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      try { 
        Evaluation.evaluateModel((Classifier) randomCommittee0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.RandomCommittee:
         // 
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -num-slots <num>
         // \tNumber of execution slots.
         // \t(default 1 - i.e. no parallelism)
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.RandomTree)
         // 
         // Options specific to classifier weka.classifiers.trees.RandomTree:
         // 
         // -K <number of attributes>
         // \tNumber of attributes to randomly investigate
         // \t(<0 = int(log_2(#attributes)+1)).
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf.
         // -S <num>
         // \tSeed for random number generator.
         // \t(default 1)
         // -depth <num>
         // \tThe maximum depth of the tree, 0 for unlimited.
         // \t(default 0)
         // -N <num>
         // \tNumber of folds for backfitting (default 0, no backfitting).
         // -U
         // \tAllow unclassified instances.
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Random.setNextRandom(70);
      TestInstances testInstances1 = new TestInstances();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances1 = new Instances(instances0, (-1));
      instances1.spliterator();
      double double0 = Evaluation.MIN_SF_PROB;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.globalInfo();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) 70;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(70, doubleArray0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, binarySparseInstance0, 70);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.pctUnclassified();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances1 = new Instances(instances0);
      instances0.numDistinctValues(0);
      evaluation0.weightedRecall();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      Object[] objectArray0 = new Object[20];
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleLogistic0.enumerateMeasures();
      objectArray0[2] = (Object) evaluation0;
      objectArray0[4] = (Object) evaluation0;
      evaluation0.evaluateModel((Classifier) simpleLogistic0, instances0, objectArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      double double0 = KStarConstants.EPSILON;
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4#jw");
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate("0A'Y; .{oeJA]f{;u\"");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.sizeOfPredictedRegions();
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      evaluation0.rootRelativeSquaredError();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      double double0 = KStarConstants.EPSILON;
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      evaluation0.weightedAreaUnderPRC();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      testInstances0.getWords();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.unweightedMacroFmeasure();
      try { 
        Evaluation.handleCostOption(";|^GiGL}Sh~Ri/-", (-2));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.KBInformation();
      NumericPrediction numericPrediction0 = new NumericPrediction(2289.127, (-31.709248579365));
      evaluation0.equals(numericPrediction0);
      evaluation0.weightedRecall();
      evaluation0.errorRate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(125);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NF#Zt-NY");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      double double1 = KStarConstants.EPSILON;
      evaluation0.precision(10001);
      TestInstances testInstances0 = new TestInstances();
      instances0.deleteWithMissingClass();
      Instances instances1 = testInstances0.generate("29NoF%+X");
      instances0.listIterator();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.relativeAbsoluteError();
      evaluation0.SFPriorEntropy();
      instances0.listIterator();
      evaluation1.unweightedMicroFmeasure();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(1860, false, false);
      simpleLogistic0.enumerateMeasures();
      try { 
        evaluation1.evaluateModel((Classifier) simpleLogistic0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient(8);
      int int0 = (-2507);
      textDirectoryLoader0.setRetrieval((-2507));
      JRip jRip0 = new JRip();
      try { 
        evaluation0.evaluateModelOnce((Classifier) jRip0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setDecay");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumNominalValues(480);
      evaluation0.toSummaryString("   *\n", false);
      evaluation0.toMatrixString("costMatrixTipText");
      evaluation0.SFSchemeEntropy();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utils.log2 = 0.02500000037252903;
      MatlabLoader matlabLoader0 = new MatlabLoader();
      KDTree kDTree0 = new KDTree(instances0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      evaluation0.num2ShortID((-2), charArray0, 562);
      evaluation0.SFMeanEntropyGain();
      evaluation0.KBRelativeInformation();
      evaluation0.matthewsCorrelationCoefficient(867);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      ZeroR zeroR0 = new ZeroR();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) zeroR0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double double0 = NimbusStyle.LARGE_SCALE;
      evaluation0.equals(evaluation0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".bsi");
      evaluation0.precision(1493);
      evaluation0.weightedMatthewsCorrelation();
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = '~';
      charArray0[2] = 'f';
      evaluation0.num2ShortID(14, charArray0, 22);
      M5Rules m5Rules0 = new M5Rules();
      Evaluation.getGlobalInfo(m5Rules0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      HashSet<MultilayerPerceptron> hashSet0 = new HashSet<MultilayerPerceptron>();
      instances0.removeAll(hashSet0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSchemeEntropy;
      evaluation0.setDiscardPredictions(false);
      evaluation0.weightedAreaUnderPRC();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.setPriors(instances0);
      evaluation0.errorRate();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      evaluation0.unclassified();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[1];
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.numTruePositives((-3215));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-61);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      RandomTree randomTree0 = new RandomTree();
      evaluation0.equals((Object) null);
      evaluation0.falsePositiveRate((-1994981129));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.KBMeanInformation();
      evaluation0.areaUnderPRC(12);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      TestInstances testInstances1 = new TestInstances();
      Random.setNextRandom(17);
      MockRandom mockRandom0 = new MockRandom();
      KDTree kDTree0 = new KDTree(instances0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      testInstances1.setSeed(108);
      kDTree0.setMinBoxRelWidth(1929.972729);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.addNumericTrainClass(1, (-1));
      costSensitiveClassifier0.getRevision();
      double double0 = NimbusStyle.SMALL_SCALE;
      evaluation0.weightedPrecision();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("vAb;*-=O?=wj");
      MockFile mockFile1 = new MockFile(" ", " ");
      mockFile1.toURL();
      evaluation1.unclassified();
      evaluation0.weightedFalsePositiveRate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          TestInstances testInstances0 = new TestInstances();
          Instances instances0 = testInstances0.generate();
          Evaluation evaluation0 = new Evaluation(instances0);
          FileSystemHandling.shouldAllThrowIOExceptions();
          evaluation0.toClassDetailsString();
          evaluation0.coverageOfTestCasesByPredictedRegions();
          MatlabLoader matlabLoader0 = new MatlabLoader();
          try { 
            matlabLoader0.getNextInstance(instances0);
            fail("Expecting exception: IOException");
          
          } catch(IOException e) {
             //
             // MatlabLoader can't read data sets incrementally.
             //
             verifyException("weka.core.converters.MatlabLoader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      Random.setNextRandom(74);
      TestInstances testInstances1 = new TestInstances();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances2.generate();
      capabilities0.toString();
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      capabilities0.disableAllClasses();
      evaluation0.errorRate();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.KBMeanInformation();
      evaluation0.weightedPrecision();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HTML hTML0 = new HTML();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utils.log2 = 0.02500000037252903;
      MatlabLoader matlabLoader0 = new MatlabLoader();
      KDTree kDTree0 = new KDTree(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.equals(instances0);
      evaluation0.weightedFMeasure();
      evaluation0.areaUnderROC((-2));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "setCostMatrix";
      stringArray0[1] = "#7tECw_H~0u8Wy<~c";
      stringArray0[2] = "p;Bu}$umuT5W)!i";
      stringArray0[3] = "A symbolic attribute cannot be regular";
      stringArray0[4] = "3YSrQ2o<J1q^8";
      stringArray0[5] = "Y][";
      stringArray0[6] = "setSubSpaceSize";
      stringArray0[7] = "?";
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      KDTree kDTree0 = new KDTree(instances0);
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double double0 = evaluation0.m_SumAbsErr;
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-1995438214), true, false);
      simpleLogistic0.enumerateMeasures();
      Object[] objectArray0 = new Object[1];
      evaluation0.weightedTrueNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.errorRate();
      evaluation0.correct();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.deleteWithMissingClass();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = UnivariateKernelEstimator.CONST;
      evaluation0.toSummaryString(true);
      double double1 = KStarConstants.ROOT_FINDER_ACCURACY;
      double double2 = KStarConstants.FLOOR;
      textDirectoryLoader0.getStructure();
      evaluation0.sizeOfPredictedRegions();
      double double3 = evaluation0.m_WithClass;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.m_MissingClass = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(17);
      evaluation0.setDiscardPredictions(true);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(0.01);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      AbstractClassifier.runClassifier(costSensitiveClassifier0, testInstances0.DEFAULT_WORDS);
      evaluation0.SFEntropyGain();
      double double0 = KStarConstants.LOG2;
      evaluation0.rootRelativeSquaredError();
      costSensitiveClassifier0.setDebug(true);
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.weightedTrueNegativeRate();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      HTML hTML0 = new HTML();
      testInstances0.getRevision();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      try { 
        evaluation0.evaluateModel((Classifier) serializedClassifier0, instances0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      textDirectoryLoader0.getRevision();
      instances0.spliterator();
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.kappa();
      RandomTree randomTree0 = new RandomTree();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      try { 
        evaluation0.crossValidateModel((Classifier) randomTree0, instances0, 18, (java.util.Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives((-3215));
      RandomTree randomTree0 = new RandomTree();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.equals(evaluation0);
      evaluation1.numInstances();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Unclassified = (-10.0);
      evaluation0.numTruePositives((-3215));
      evaluation0.m_ClassIsNominal = false;
      RandomTree randomTree0 = new RandomTree();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.equals(evaluation0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      evaluation0.toSummaryString(false);
      double double0 = evaluation0.m_MaxTarget;
      evaluation0.priorEntropy();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      TestInstances testInstances0 = new TestInstances();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.toSummaryString(true);
      textDirectoryLoader0.getRevision();
      Instances instances1 = new Instances(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedPrecision();
      evaluation0.kappa();
      evaluation0.SFMeanPriorEntropy();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.relativeAbsoluteError();
      evaluation0.toCumulativeMarginDistributionString();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Locale.getISOLanguages();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(false);
      double double0 = evaluation0.m_MaxTarget;
      double double1 = KStarConstants.FLOOR;
      TestInstances testInstances0 = new TestInstances();
      DenseInstance denseInstance0 = new DenseInstance(474);
      instances0.add((Instance) denseInstance0);
      textDirectoryLoader0.getStructure();
      evaluation0.sizeOfPredictedRegions();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.SFMeanPriorEntropy();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DenseInstance denseInstance1 = new DenseInstance(10001);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(false);
      evaluation0.priorEntropy();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      evaluation0.sizeOfPredictedRegions();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (-2027.86523);
      int[] intArray0 = new int[5];
      intArray0[0] = (-2);
      intArray0[1] = (-2);
      intArray0[2] = 1007;
      intArray0[3] = (-1);
      intArray0[4] = (-2);
      SparseInstance sparseInstance0 = new SparseInstance((-2027.86523), doubleArray0, intArray0, (-2));
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MissingClass = 59.0;
      evaluation0.toSummaryString(false);
      double double0 = evaluation0.m_MaxTarget;
      evaluation0.priorEntropy();
      evaluation0.sizeOfPredictedRegions();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.m_MinTarget;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "trainingTimeTipText");
      evaluation1.addNumericTrainClass(257.1883501, 59.0);
      double double2 = NimbusStyle.SMALL_SCALE;
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      Random.setNextRandom(65);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.toMatrixString();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) 65;
      doubleArray0[3] = (double) 2527;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2975.5));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation.handleCostOption("", 101);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Locale.getISOLanguages();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      double double1 = KStarConstants.FLOOR;
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.getStructure();
      evaluation0.sizeOfPredictedRegions();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.SFMeanPriorEntropy();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DenseInstance denseInstance0 = new DenseInstance(17);
      evaluation1.useNoPriors();
      Random.setNextRandom((-1995438214));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation1.SFMeanEntropyGain();
      KDTree kDTree0 = new KDTree(instances0);
      evaluation1.toMatrixString();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.meanAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      KDTree kDTree0 = new KDTree(instances0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setSeed(0);
      evaluation0.addNumericTrainClass(2, 1);
      String string0 = NimbusStyle.SMALL_KEY;
      double double0 = NimbusStyle.SMALL_SCALE;
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      evaluation0.addNumericTrainClass(1.5, 257.1883501);
      double double1 = NimbusStyle.SMALL_SCALE;
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-2538.62));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2538
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      Instances instances1 = testInstances0.generate();
      Random.setNextRandom(17);
      MockRandom mockRandom0 = new MockRandom();
      KDTree kDTree0 = new KDTree(instances1);
      evaluation0.m_Unclassified = (double) 17;
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      testInstances0.setSeed(116);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      testInstances0.setRelation(".bsi");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      testInstances0.setNumDate(1);
      evaluation0.pctCorrect();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.weightedFalseNegativeRate();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArffLoader arffLoader0 = new ArffLoader();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      DecisionStump decisionStump0 = new DecisionStump();
      KDTree kDTree0 = new KDTree(instances0);
      double double0 = KStarConstants.FLOOR;
      Instances instances1 = textDirectoryLoader0.getStructure();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      double double1 = NimbusStyle.SMALL_SCALE;
      BayesNet bayesNet0 = new BayesNet();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances1);
      double double2 = Evaluation.MIN_SF_PROB;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "                     ");
      double double3 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.SFEntropyGain();
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      evaluation0.pctUnclassified();
      evaluation0.numFalsePositives((-996));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 322.863027;
      doubleArray0[1] = 4.9E-324;
      doubleArray0[2] = 1.0E-5;
      doubleArray0[3] = (double) 0;
      evaluation0.updateMargins(doubleArray0, 1, (-1.0));
      LWL lWL0 = new LWL();
      try { 
        evaluation0.evaluateModel((Classifier) decisionStump0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utils.log2 = (double) (-2);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      KDTree kDTree0 = new KDTree(instances0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      String string0 = XML.DTD_OPTIONAL;
      testInstances0.setSeed(138);
      evaluation0.addNumericTrainClass(1, (-1));
      double double0 = NimbusStyle.SMALL_SCALE;
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      double double1 = evaluation1.m_TotalSizeOfRegions;
      evaluation0.SFEntropyGain();
      boolean boolean0 = evaluation1.m_CoverageStatisticsAvailable;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[3] = (double) (-1);
      double double2 = evaluation1.m_ClassPriorsSum;
      evaluation0.updateMargins(doubleArray0, 2, 322.863027);
      double double3 = KStarConstants.EPSILON;
      evaluation0.errorRate();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      TestInstances testInstances1 = new TestInstances();
      Random.setNextRandom(17);
      MockRandom mockRandom0 = new MockRandom();
      KDTree kDTree0 = new KDTree(instances0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      testInstances1.setSeed(108);
      kDTree0.setMinBoxRelWidth(1929.972729);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.addNumericTrainClass(1, (-1));
      AbstractClassifier.runClassifier(costSensitiveClassifier0, testInstances1.DEFAULT_WORDS);
      costSensitiveClassifier0.getRevision();
      double double0 = NimbusStyle.SMALL_SCALE;
      evaluation0.weightedPrecision();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFEntropyGain();
      evaluation0.weightedPrecision();
      evaluation0.SFEntropyGain();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 108;
      doubleArray0[3] = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 2, 322.863027);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27000
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArffLoader arffLoader0 = new ArffLoader();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      KDTree kDTree0 = new KDTree(instances0);
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double double0 = evaluation0.m_SumAbsErr;
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-1995438214), true, true);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setDeleteEmptyBins(true);
      evaluation0.toMatrixString(".bsi");
      DenseInstance denseInstance0 = new DenseInstance(110);
      try { 
        evaluation0.updateStatsForPredictor(110, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      ArffLoader arffLoader0 = new ArffLoader();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      DecisionStump decisionStump0 = new DecisionStump();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-25);
      byteArray0[3] = (byte) (-41);
      byteArray0[5] = (byte) (-21);
      KDTree kDTree0 = new KDTree(instances0);
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double double0 = evaluation0.m_SumAbsErr;
      Object[] objectArray0 = new Object[1];
      double[] doubleArray0 = evaluation0.evaluateModel((Classifier) decisionStump0, instances0, objectArray0);
      evaluation0.addNumericTrainClass((byte) (-41), (byte) (-25));
      double double1 = evaluation0.m_SumPriorEntropy;
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      evaluation0.setDiscardPredictions(true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      textDirectoryLoader0.globalInfo();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, binarySparseInstance0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("setMinBucketSize");
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NumericPrediction numericPrediction0 = new NumericPrediction(1543.8141707, 1543.8141707);
      instances0.remove((Object) null);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.relativeAbsoluteError();
      HTML hTML0 = new HTML();
      SparseInstance sparseInstance0 = new SparseInstance(4);
      // Undeclared exception!
      try { 
        TextDirectoryLoader.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.converters.TextDirectoryLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      TestInstances testInstances1 = new TestInstances();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances2.generate();
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.SFMeanPriorEntropy();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      ArffLoader arffLoader0 = new ArffLoader();
      Null null0 = new Null();
      null0.getHeader();
      SparseInstance sparseInstance0 = new SparseInstance(1);
      evaluation1.correlationCoefficient();
      evaluation2.pctCorrect();
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, ")RMAQfj'T)'Vqgn");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Random.setNextRandom(74);
      TestInstances testInstances1 = new TestInstances();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances2.generate();
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.SFMeanPriorEntropy();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(74, true, true);
      simpleLogistic0.enumerateMeasures();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HTML hTML0 = new HTML();
      hTML0.getHeader();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      Evaluation evaluation3 = null;
      try {
        evaluation3 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.listIterator();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominalValues((-510));
      evaluation0.m_SumSchemeEntropy = (double) (-2);
      instances0.getRandomNumberGenerator(0L);
      double double0 = UnivariateKernelEstimator.CONST;
      evaluation0.useNoPriors();
      evaluation0.totalCost();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.getDiscardPredictions();
      evaluation0.KBMeanInformation();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Locale.getISOLanguages();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      double double1 = KStarConstants.FLOOR;
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.getStructure();
      evaluation0.sizeOfPredictedRegions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@data");
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.SFMeanPriorEntropy();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DenseInstance denseInstance0 = new DenseInstance(17);
      evaluation1.useNoPriors();
      Random.setNextRandom((-1995438214));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation1.SFMeanEntropyGain();
      evaluation1.meanPriorAbsoluteError();
      SparseInstance sparseInstance0 = new SparseInstance(1);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ArffLoader arffLoader0 = new ArffLoader();
      Null null0 = new Null();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      evaluation1.correlationCoefficient();
      Integer integer0 = new Integer((-2));
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".bsi";
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "@relation");
      evaluation1.makeDistribution(2);
      evaluation1.numFalsePositives((-1));
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(197);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation1.crossValidateModel((Classifier) gaussianProcesses0, instances0, (-2462), (java.util.Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ArffLoader arffLoader0 = new ArffLoader();
      Null null0 = new Null();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      evaluation1.correlationCoefficient();
      Integer integer0 = new Integer((-2));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<NaiveBayesMultinomial> treeSet0 = new TreeSet<NaiveBayesMultinomial>(comparator0);
      instances0.removeAll(treeSet0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".bsi";
      gaussianProcesses0.setOptions(stringArray0);
      evaluation0.toSummaryString(false);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "@relation");
      double[] doubleArray0 = evaluation1.makeDistribution(2);
      evaluation1.numFalsePositives((-1));
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(197);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      TestInstances testInstances2 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      evaluation1.sizeOfPredictedRegions();
      evaluation0.toSummaryString("qT?xhX8ixG>", false);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.errorRate();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      try { 
        evaluation1.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ArffLoader arffLoader0 = new ArffLoader();
      Null null0 = new Null();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      Integer integer0 = new Integer((-2));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<NaiveBayesMultinomial> treeSet0 = new TreeSet<NaiveBayesMultinomial>(comparator0);
      instances0.removeAll(treeSet0);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      simpleLogistic0.enumerateMeasures();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HTML hTML0 = new HTML();
      StringBuffer stringBuffer0 = new StringBuffer(13);
      hTML0.setBuffer(stringBuffer0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      hTML0.getHeader();
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArffLoader arffLoader0 = new ArffLoader();
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation.makeOptionString(decisionStump0, true);
      KDTree kDTree0 = new KDTree();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      evaluation0.toCumulativeMarginDistributionString();
      double double0 = evaluation0.m_MaxTarget;
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.toSummaryString();
      evaluation0.weightedRecall();
      evaluation0.errorRate();
      MockRandom mockRandom1 = new MockRandom();
      evaluation0.toSummaryString();
      double double1 = evaluation0.m_MinTarget;
      Instances instances1 = evaluation0.getHeader();
      evaluation0.kappa();
      evaluation0.KBInformation();
      MockRandom mockRandom2 = new MockRandom();
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      System.setCurrentTimeMillis(71L);
      try { 
        evaluation0.crossValidateModel((Classifier) decisionStump0, instances1, 2, (java.util.Random) mockRandom0, (Object[]) doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.listOptions();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Random.setNextRandom(74);
      instances0.toArray();
      MockRandom mockRandom0 = new MockRandom();
      KDTree kDTree0 = new KDTree(instances0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      testInstances0.setNumRelational(0);
      testInstances0.setSeed((-1));
      double double0 = KStarConstants.EPSILON;
      testInstances0.setNumDate((-1));
      testInstances0.setNumInstancesRelational(Integer.MAX_VALUE);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = DefaultEditorKit.writableAction;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")Lko");
      double[] doubleArray0 = new double[16];
      doubleArray0[3] = (double) (-1);
      evaluation0.useNoPriors();
      evaluation0.SFPriorEntropy();
      evaluation0.useNoPriors();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.KBRelativeInformation();
  }
}
