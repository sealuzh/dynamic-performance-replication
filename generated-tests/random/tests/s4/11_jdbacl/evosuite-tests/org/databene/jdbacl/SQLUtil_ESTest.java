/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 12:17:39 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.SlaveDatabase;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.value.Value;
import org.h2.value.ValueArray;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputText;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize(" AND ");
      String[] stringArray0 = new String[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " AND ", false, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into^/&u+ak}zim3dxjw[+f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String[] stringArray1 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray1, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("isnullab", stringArray0, "isnullab", "isnullab", stringArray0);
      assertEquals("isnullab as isnullab on ", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ";[\try", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ;[\try ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, (String) null, stringArray0, "#JAqi_gxW(4w@`#^", ". types = ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.isDDL(stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("yRml,PC);@_V5 B&tF", (String[]) null, "\u0001 \u0169", "()", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "&unknownLength=";
      String string1 = SQLUtil.join(";[\try63u", ";[\try63u", stringArray0, ":MSQ]dUrxj@;1c@", "&unknownLength=", stringArray0);
      assertEquals(";[\try63u join :MSQ]dUrxj@;1c@ as &unknownLength= on ;[\try63u.null = &unknownLength=.null and ;[\try63u.null = &unknownLength=.null", string1);
      
      String string2 = SQLUtil.leftJoin(stringArray0[0], stringArray0, stringArray0[1], string0, stringArray0);
      assertEquals("left join null as &unknownLength= on null.null = &unknownLength=.null and null.null = &unknownLength=.null", string2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("drop tablealter session");
      Boolean boolean1 = SQLUtil.mutatesStructure("drop materialized viewalter session");
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.isProcedureCall("E g(TP-UoBp>M\"WUqT");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "FOREIGN KEY (Swa;E:, alter materialized view), drop materialized view, Swa;E:, E g(TP-UoBp>M\"WUqT, drop materialized view) REFERENCES drop materialized view(Swa;E:, alter materialized view), drop materialized view, Swa;E:, E g(TP-UoBp>M\"WUqT, drop materialized view)");
      assertEquals("FOREIGN KEY (Swa;E:, alter materialized view), drop materialized view, Swa;E:, E g(TP-UoBp>M\"WUqT, drop materialized view) REFERENCES drop materialized view(Swa;E:, alter materialized view), drop materialized view, Swa;E:, E g(TP-UoBp>M\"WUqT, drop materialized view)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "updateBlob(int, InputStream)";
      SQLUtil.isDML("updateBlob(int, InputStream)");
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertEquals("updateBlob(int, InputStream)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = ";[\\try63u:a`{J";
      SQLUtil.isDML(";[\try63u:a`{J");
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("D8 ! ] + 0T", false, "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("create table");
      SQLUtil.isDDL("create table");
      double double0 = (-165.417535083);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("delete1qn.sv.fzgf}upy(ljt");
      String[] stringArray0 = new String[9];
      stringArray0[8] = "delete1qn.sv.fzgf}upy(ljt";
      SQLUtil.renderColumnNames(stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Value[] valueArray0 = new Value[0];
      ValueArray valueArray1 = ValueArray.get(valueArray0);
      Reader reader0 = valueArray1.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.nval = (double) 20;
      SQLUtil.renderNumber(streamTokenizer0);
      String string0 = "ALTER TABLE ";
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("delete1qn.sv.fzgf}upy(ljt");
      String[] stringArray0 = new String[9];
      SQLUtil.mutatesDataOrStructure(")");
      SQLUtil.renderColumnListWithTableName("delete1qn.sv.fzgf}upy(ljt", stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Value[] valueArray0 = new Value[0];
      ValueArray valueArray1 = ValueArray.get(valueArray0);
      Reader reader0 = valueArray1.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.nval = (-122.08248831);
      SQLUtil.renderNumber(streamTokenizer0);
      String string0 = "ALTER TABLE ";
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "bn'g%VfhQG/lgIyB/F";
      SQLUtil.normalize("bn'g%VfhQG/lgIyB/F", false);
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      assertFalse(slaveDatabase0.isActive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = SQLUtil.normalize("-removePassword", false);
      assertEquals("- removePassword", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "--";
      SQLUtil.normalize("--", false);
      NameSpec nameSpec0 = NameSpec.NEVER;
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = SQLUtil.normalize("iM6^dsp/\"YPQ1", true);
      assertEquals("iM6 ^ dsp / \"YPQ1\"", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.normalize("(h9", true);
      String string0 = "jS|=3:|(+d4n";
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.normalize("x.JvDSp[ezu*GUT)PUl", true);
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "LWfD,vt.4x!$8";
      SQLUtil.normalize("LWfD,vt.4x!$8", true);
      NameSpec nameSpec0 = NameSpec.NEVER;
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = SQLUtil.removeComments("create unique index<@a,[ducw6hmq*qp");
      assertEquals("create unique index<@a,[ducw6hmq*qp", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("DAYNAME");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop tablealter session", dBSchema0);
      String[] stringArray0 = new String[9];
      stringArray0[8] = "DAYNAME";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      dBUniqueConstraint0.addColumnName("create tablealter session");
      String string0 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertNotNull(string0);
      assertEquals("unique constraint constraint", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("drop materialized viewalter session");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "update";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (-362757837), "update");
      defaultDBColumn0.equals((Object) null);
      SQLUtil.typeAndName(defaultDBColumn0);
      int int0 = 1641;
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLUtil.mutatesStructure(" REFERENCES ");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("insert", (String) null, "create table<@a,[ducw6hmq*qp");
      SQLUtil.typeAndName(dBSequence0);
      PipedWriter pipedWriter0 = new PipedWriter();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("drop materialized view", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized view", dBSchema0);
      String[] stringArray0 = new String[6];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Swa;E:", false, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "FOREIGN KEY (Swa;E:, alter materialized view), drop materialized view, Swa;E:, E g(TP-UoBp>M\"WUqT, drop materialized view) REFERENCES drop materialized view(Swa;E:, alter materialized view), drop materialized view, Swa;E:, E g(TP-UoBp>M\"WUqT, drop materialized view)");
      assertEquals("FOREIGN KEY (Swa;E:, alter materialized view), drop materialized view, Swa;E:, E g(TP-UoBp>M\"WUqT, drop materialized view) REFERENCES drop materialized view(Swa;E:, alter materialized view), drop materialized view, Swa;E:, E g(TP-UoBp>M\"WUqT, drop materialized view)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter indexprimary key", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      System.setCurrentTimeMillis(1L);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "?=f;7f'(%Y[z+3";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "qaC92f,CsNXZZV);'g{", true, stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT qaC92f,CsNXZZV);'g{ ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "update";
      String[] stringArray0 = new String[2];
      SQLUtil.join((String) null, "!)4>:I-", stringArray0, "--", "!)4>:I-", stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      char char0 = '\"';
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "?=f;7f'(%Y[z+3";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "qaC92f,CsNXZZV);'g{", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("FOREIGN KEY ");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("o:( ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("o:( ");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("o:( ", true, defaultDBTable0, "update");
      SQLUtil.ownerDotComponent(dBCheckConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(linkedList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("p", "s1nIa8Q%c`F", versionNumber0);
      String string0 = SQLUtil.ownerDotComponent(defaultDatabase0);
      assertEquals("p", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = stringBuilder0.append((long) 0);
      SQLUtil.addOptionalCondition((String) null, stringBuilder1);
      String string0 = "#``4g8>;@MW)07a^";
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("delete", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ",g\"taO8TBuQ,z");
      SQLUtil.addRequiredCondition(",g\"taO8TBuQ,z |- NULL", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(8);
      SQLUtil.addRequiredCondition("create materialized view_g;8o~", stringBuilder0);
      String string0 = "ALTER TABLE ";
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("drop materialized view", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized view", dBSchema0);
      String[] stringArray0 = new String[6];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , ) REFERENCES drop materialized view(, , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLUtil.mutatesStructure(")q_WKH9 join select into as SELECT * FROM  on )q_WKH9.SELECT * FROM  = SELECT * FROM .SELECT * FROM  and )q_WKH9.)q_WKH9 = SELECT * FROM .)q_WKH9");
      SQLUtil.mutatesDataOrStructure("select into");
      String string0 = "o]F,`33TrK*";
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("executeah");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("delete1qn.sv.fzgf}upy(ljt");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 14);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "select into)";
      SQLUtil.mutatesDataOrStructure("select into)");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter session");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "updateNull";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-149), "z;");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("updateNull", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("exec");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'exec' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create tableo:( .o:(", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(55, "create tableo:( .o:(");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create tableo:( .o:(", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("create tableo:( .o:( CREATE TABLEO:( .O:((1) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(186, "CLOB");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", (DBTable) null, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("CLOB CLOB NULL", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("forget(", (DBTable) null, (byte) (-15), "alter materialized view");
      defaultDBColumn0.setNotNullConstraint((DBNotNullConstraint) null);
      defaultDBColumn0.setDefaultValue("alter materialized view");
      defaultDBColumn0.setName("alter materialized view");
      SQLUtil.renderColumn(defaultDBColumn0);
      String[] stringArray0 = null;
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("begin param");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("_IA7lm2]", defaultDBTable0, 90125, ".db1");
      linkedList0.add((DBColumn) defaultDBColumn0);
      linkedList0.offerFirst(defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("_IA7lm2], _IA7lm2]", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(39, " DEFAULT ");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("call+%_swfu,[=f[", defaultDBTable0, dBDataType0, integer0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(" DEFAULT ", defaultDBTable0, dBDataType0, integer0, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DBColumn dBColumn0 = defaultDBTable0.getColumn("call+%_swfu,[=f[");
      dBColumnArray0[2] = dBColumn0;
      DBColumn dBColumn1 = defaultDBTable0.getColumn("call+%_swfu,[=f[");
      dBColumnArray0[3] = dBColumn1;
      DBColumn dBColumn2 = defaultDBTable0.getColumn("call+%_swfu,[=f[");
      dBColumnArray0[4] = dBColumn2;
      Integer integer1 = RawTransaction.COMMIT;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("call+%_swfu,[=f[,  DEFAULT , call+%_swfu,[=f[, call+%_swfu,[=f[, call+%_swfu,[=f[, call+%_swfu,[=f[", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("+h!nCBQ3H3gLE2S", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      RowOutputText rowOutputText0 = new RowOutputText("truncat", "truncatecharlength", "truncatecharlength", false, "H<pI");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputText0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "FOREIGN KEY ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("create materialized view");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "?=f;7f'(%Y[z+3";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "qaC92f,CsNXZZV);'g{", true, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("create materialized view");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND ?=f;7f'(%Y[z+3 = '?=f;7f'(%Y[z+3'", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("updateBlob(int, InputStream)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      VersionNumber.valueOf("left");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("left", (DBTable) null, (-2458), "(oy(myx)@m4v0z)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"oy(myx\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("J1x12>*#R(");
      String string0 = "alter tableo:( .o:(";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("J1x12>*#R(", defaultDBTable0, (-7), "alter tableo:( .o:(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: alter tableo:( .o:(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("getNCharacterStream(String)", (DBSchema) null);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, defaultDBTable0, "SELECT * FROM ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK SELECT * FROM ", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter indexprimary key", dBSchema0);
      System.setCurrentTimeMillis(1L);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter indexprimary key", defaultDBTable0, 22, "alter indexprimary key");
      dBSchema0.getTables();
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("ALTER INDEXPRIMARY KEY", string0);
      
      boolean boolean0 = SQLUtil.isDDL("call");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("call");
      String[] stringArray0 = new String[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call", (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop indexexecuteah", false, stringArray0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop indexexecuteah", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Character character0 = new Character('G');
      Character.lowSurrogate(2094);
      SQLUtil.substituteMarkers("nc}!>.:l-p8)^", "java.lang.Object", character0);
      String string0 = null;
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fUGoQ#h?.v+K3zklU";
      SQLUtil.leftJoin("fUGoQ#h?.v+K3zklU", stringArray0, "hqmnvbc w;x^", "with UUID ", stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("+h!nCBQ3H3gLE2S", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      RowOutputText rowOutputText0 = new RowOutputText("truncat", "truncatecharlength", "truncatecharlength", false, "H<pI");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputText0);
      PrintWriter printWriter0 = mockPrintWriter0.format("O6r*@MWA+`<HVal(]Y", (Object[]) stringArray0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create table58bta");
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM create table58bta WHERE null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      FileUtil fileUtil0 = FileUtil.getDefaultInstance();
      OutputStream outputStream0 = fileUtil0.openOutputStreamElement("execorg.apache.derby.impl.sql.execute.normalizeresultset");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("call");
      String[] stringArray0 = new String[5];
      SQLUtil.innerJoin("drop indexexecuteah", stringArray0, "drop indexexecuteah", "", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call", (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop indexexecuteah", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("drop indexexecuteah", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "drop indexexecuteah", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }
}
