/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:28:57 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.FileNotFoundException;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('p');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 0, 5, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOUtils.decodeBase64("UTF-8");
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = IOUtils.decodeBase64("", 999999999, (int) (byte)0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("6>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IOUtils.isIdent('3');
      IOUtils.loadPropertiesFromFile();
      // Undeclared exception!
      try { 
        IOUtils.getChars(2147483647L, (int) '3', (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.getChars((-4939L), 99, iOUtils0.replaceChars);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 98
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("enTodeUTF8 errTr");
      char[] charArray0 = new char[3];
      IOUtils.isIdent('j');
      char[] charArray1 = new char[2];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray1, (-2487), 3, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2487
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("rC");
      assertTrue(boolean0);
      
      int int0 = IOUtils.stringSize((-512L));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[9];
      boolean boolean0 = IOUtils.isValidJsonpQueryParam(".b_x!E/#'b");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.stringSize(922);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = IOUtils.stringSize(541);
      assertEquals(3, int0);
      
      boolean boolean0 = IOUtils.firstIdentifier('`');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = '`';
      charArray0[5] = '`';
      IOUtils.getChars((byte)3, 3, charArray0);
      assertArrayEquals(new char[] {'`', '`', '3', '`', '`', '`'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOUtils.decodeBase64("HNo");
      // Undeclared exception!
      try { 
        IOUtils.getChars(68, 68, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.getChars((-1231), 114, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[11];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[2] = '7';
      IOUtils.getChars(255, 5, charArray0);
      boolean boolean0 = IOUtils.firstIdentifier('2');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.encodeUTF8(iOUtils0.CA, (-1074), (-2282), iOUtils0.specicalFlags_singleQuotes);
      IOUtils.getChars((-4956L), 90, iOUtils0.replaceChars);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.close((Closeable) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      char[] charArray0 = new char[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, (byte)0, 128, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[0];
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, (-1864), 0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("V)}/'L");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-4)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils.getStringProperty("V^hCU$NzhyjV");
      boolean boolean0 = IOUtils.firstIdentifier('}');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#O*aKpO>0sSZV)wYb0#");
      String string0 = IOUtils.readAll(stringReader0);
      assertEquals("#O*aKpO>0sSZV)wYb0#", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[3];
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = IOUtils.decodeBase64("fastjson.compatibleWithJavaBean");
      int int0 = IOUtils.decodeUTF8(byteArray0, 56, (-1788), charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#O*aKpe>0sSZV)wUb0#");
      byte[] byteArray0 = IOUtils.decodeBase64("#O*aKpe>0sSZV)wUb0#");
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("!)<'E");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.replaceChars, 2, 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65449
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IOUtils.firstIdentifier('\u0095');
      IOUtils.isIdent('\u0095');
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.decodeUTF8(iOUtils0.specicalFlags_singleQuotes, 5, 28, iOUtils0.ASCII_CHARS);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, iOUtils0.specicalFlags_doubleQuotes);
      PipedReader pipedReader0 = new PipedReader(27);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("fastjson.compatibleWithJavaBean");
      CharBuffer charBuffer0 = uTF8Decoder0.decode(byteBuffer0);
      iOUtils0.UTF8.encode(charBuffer0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.replaceChars, 0, 63);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65449
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[9];
      IOUtils.loadPropertiesFromFile();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 55, (-472));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -418
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      String string0 = "OfI";
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("OfI", 2, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = '<';
      // Undeclared exception!
      try { 
        IOUtils.getChars(2126221433, 13, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-54);
      char[] charArray0 = new char[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 0, 5, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-60);
      char[] charArray0 = new char[5];
      IOUtils.decodeUTF8(byteArray0, 0, 5, charArray0);
      IOUtils.stringSize((long) 5);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.decodeBase64("");
      // Undeclared exception!
      try { 
        IOUtils.getStringProperty("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      IOUtils.decodeUTF8(iOUtils0.specicalFlags_singleQuotes, (-1689), (-3244), iOUtils0.CA);
      IOUtils.isIdent('j');
      IOUtils.getChars((-1912), 44, iOUtils0.replaceChars);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.replaceChars, 2, 63);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65449
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOUtils iOUtils0 = new IOUtils();
      MockFileWriter mockFileWriter0 = new MockFileWriter("$:12TH={=D]aZ-Sx");
      IOUtils.close(mockFileWriter0);
      IOUtils.getChars((long) 42, 42, iOUtils0.ASCII_CHARS);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Charset charset0 = IOUtils.UTF8;
      int int0 = IOUtils.stringSize(5L);
      assertEquals(1, int0);
      
      IOUtils.decodeBase64("OJY?<>X]jBWBR-VH=]");
      byte[] byteArray0 = IOUtils.decodeBase64("OJY?<>X]jBWBR-VH=]", 1, 1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      IOUtils.stringSize(2147483647L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 10, 10);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = uTF8Decoder0.decode(byteBuffer0);
      IOUtils.decode(uTF8Decoder0, byteBuffer0, charBuffer0);
      assertEquals(0, charBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IOUtils.isIdent('\u00D9');
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      char[] charArray0 = new char[5];
      charArray0[1] = '\u00D9';
      charArray0[2] = '\u00D9';
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 2, 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'L';
      charArray0[1] = 'h';
      charArray0[2] = 'p';
      // Undeclared exception!
      try { 
        IOUtils.getChars(100000000000L, (-2208), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2209
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      IOUtils.stringSize((-2061L));
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(".~t5tr{3L", 1, 3485);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IOUtils.firstIdentifier('^');
      IOUtils.isValidJsonpQueryParam("");
      IOUtils.decodeBase64("O|", 1, 1);
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("/2$FonYP|lHz#,4");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IOUtils.decodeBase64("-Dl'j26R*={{");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-Dl'j26R*={{", "-Dl'j26R*={{");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -Dl'j26R*={{
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = IOUtils.UTF8;
      String string0 = "#s4Oc<:`t2#";
      ByteBuffer byteBuffer0 = charset0.encode("#s4Oc<:`t2#");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        IOUtils.decode(uTF8Decoder0, byteBuffer1, charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CoderResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.replaceChars, 2, 71);
      IOUtils.decodeUTF8(byteArray0, 2, 1129, iOUtils0.CA);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("enTodeUTF8 errTr");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[3];
      IOUtils.decodeUTF8(byteArray0, 3, 85, charArray0);
      IOUtils.isIdent('j');
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 117, 117, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 117
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.decodeBase64("fastjson.compatibleWithJavaBean");
      IOUtils.decodeUTF8(byteArray0, 10, 2, iOUtils0.replaceChars);
      PipedWriter pipedWriter0 = new PipedWriter();
      String string0 = IOUtils.getStringProperty("fastjson.compatibleWithJavaBean");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = IOUtils.UTF8;
      Charset.defaultCharset();
      charset0.encode("h");
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[2] = '\u0000';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[4] = '=';
      charArray0[5] = '6';
      charArray0[6] = '/';
      charArray0[7] = '\u0000';
      charArray0[8] = '\u0000';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = IOUtils.UTF8;
      Charset.defaultCharset();
      charset0.encode("h");
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '=';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[5] = 'F';
      charArray0[6] = '/';
      charArray0[7] = '6';
      charArray0[8] = '6';
      IOUtils.decodeBase64(charArray0, 2, 2);
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Charset charset0 = IOUtils.UTF8;
      charset0.encode("Rh");
      int int0 = 2;
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[4] = '=';
      charArray0[0] = 'F';
      charArray0[6] = '/';
      charArray0[7] = '=';
      charArray0[8] = '=';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 2, 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IOUtils.isIdent('\u00D9');
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      char[] charArray0 = new char[5];
      charArray0[3] = '\u00D9';
      charArray0[4] = '\u00D9';
      int int0 = 13;
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 0, 13, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IOUtils.isIdent('\u00BA');
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = IOUtils.specicalFlags_singleQuotes;
      char[] charArray0 = new char[7];
      charArray0[1] = '\u00BA';
      charArray0[2] = '\u00BA';
      charArray0[3] = '\u00BA';
      charArray0[4] = '\u00BA';
      charArray0[5] = '\u00BA';
      charArray0[6] = '\u00BA';
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 0, 21, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IOUtils.firstIdentifier('\u0095');
      IOUtils.isIdent('\u0095');
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.decodeUTF8(iOUtils0.specicalFlags_singleQuotes, 5, 28, iOUtils0.ASCII_CHARS);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(iOUtils0.DIGITS, 5, 1466, iOUtils0.specicalFlags_doubleQuotes);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("enTodeUTF8 errTr");
      int int0 = 3;
      char[] charArray0 = new char[2];
      IOUtils.decodeUTF8(byteArray0, 3, 3, charArray0);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getStringProperty("fastjson.compatibleWithFieldName");
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 33, 33, iOUtils0.specicalFlags_singleQuotes);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.decodeBase64("fastjson.compatibleWithJavaBean");
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("fastjson.compatibleWithFieldName");
      IOUtils.loadPropertiesFromFile();
      iOUtils0.UTF8.decode(byteBuffer0);
      IOUtils.decodeUTF8(byteArray0, 19, 19, iOUtils0.replaceChars);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedReader pipedReader0 = new PipedReader(104);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IOUtils.getStringProperty("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      IOUtils.decodeBase64(iOUtils0.replaceChars, 2, 80);
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-64);
      char[] charArray0 = new char[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.decodeUTF8(byteArray0, 0, 5, charArray0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, (byte) (-64), 35, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -64
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.decodeBase64("fastjson.compatibleWithJavaBean");
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("fastjson.compatibleWithFieldName");
      byteBuffer0.putLong((-898L));
      byteBuffer0.put((byte) (-97));
      byteBuffer0.clear();
      IOUtils.loadPropertiesFromFile();
      iOUtils0.UTF8.decode(byteBuffer0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      IOUtils.decodeBase64(iOUtils0.CA, 1, 1);
      IOUtils.decodeUTF8(byteArray0, 19, 1, iOUtils0.DIGITS);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      IOUtils.isValidJsonpQueryParam("B&=>");
      IOUtils.decodeBase64("");
      IOUtils.isIdent('R');
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[25];
      charArray0[9] = '\u0101';
      charArray0[4] = '\u0101';
      charArray0[8] = '\u0000';
      int int0 = 3;
      IOUtils iOUtils0 = new IOUtils();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedOutputStream0.connect(pipedInputStream0);
      IOUtils.decodeBase64("fastjson.properties");
      IOUtils.isIdent('\u0101');
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, (byte) (-60));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
