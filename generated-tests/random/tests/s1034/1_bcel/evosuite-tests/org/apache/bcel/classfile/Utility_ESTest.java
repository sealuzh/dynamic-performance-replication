/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 15:31:47 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.ObjectInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StreamCorruptedException;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte) (-65);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-65), 9);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)42);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-675), (int) (byte) (-55));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ladd
         // 1:    i2d
         // 2:    astore_1
         // 3:    nop
         // 4:    aload_0
         // 5:    athrow
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)20;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-3004), (int) (byte)61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dup
         // 1:    dconst_0
         // 2:    istore_2
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "75mo";
      Utility.fillup("75mo", 1024, false, '/');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 97, 1024);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)23;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)23, (int) (byte) (-111));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.compactClassName("impdep1");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-17);
      String string0 = Utility.encode(byteArray0, false);
      String string1 = Utility.compactClassName("impdep1", " (", false);
      assertEquals("impdep1", string1);
      
      String string2 = Utility.convertString("$bbP$ef");
      assertTrue(string2.equals((Object)string0));
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)80;
      byteArray1[1] = (byte) (-69);
      byteArray1[2] = (byte) (-17);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte) (-69);
      objectArray0[1] = (Object) "$bbP$ef";
      objectArray0[2] = (Object) "$bbP$ef";
      objectArray0[3] = (Object) "impdep1";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "$bbP$ef";
      objectArray0[6] = (Object) "impdep1";
      Utility.printArray(objectArray0, false);
      int int0 = Utility.setBit((byte) (-69), 65535);
      assertEquals((-69), int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)104;
      byte byte0 = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)22;
      byte byte1 = (byte)106;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-28);
      byte byte2 = (byte)36;
      byteArray0[5] = (byte)36;
      byte byte3 = (byte)112;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte) (-106);
      byteArray0[8] = (byte) (-61);
      ConstantPool constantPool0 = null;
      int int0 = 157;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 186, 157, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-2175), 75);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.copy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 75, 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = Utility.compactClassName("invokevirtual", "`|jV<znwK.N`4W?", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-96), 199);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-36);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.printArray(objectArray0, true);
      Utility.encode(byteArray0, false);
      Utility.compactClassName("$b3$dc", false);
      Utility.printArray(objectArray0, false, false);
      Utility.setBit(1, 88);
      Utility.compactClassName("$b3$dc", "aDW&", true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-81);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1263, 473, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("", "{B._=@+r!Gn/<xS", "{B._=@+r!Gn/<xS");
      Utility.fillup("n'TZk,dW~", 31, true, 'K');
      Utility.classOrInterface(31);
      Utility.format(106, 31, true, 'v');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)51;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.findClass("");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantPool0.accept(descendingVisitor0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 7, (int) (byte)64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 44337. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-101);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)101;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteSequence0.read();
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "23$yq%^>iDXWj:/;J1|";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("23$yq%^>iDXWj:/;J1|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 23$yq%^>iDXWj:/;J1|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-119);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "byte");
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte) (-45);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("NewObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NewObject
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((byte)82);
      constantArray0[1] = (Constant) constantString0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      Utility.codeToString(byteSequence0, constantPool1);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "dastore";
      stringArray0[2] = "dastore";
      stringArray0[4] = "dastore";
      stringArray0[5] = "dcmpl";
      stringArray0[6] = "dcmpl";
      stringArray0[7] = "dastore";
      stringArray0[8] = "dcmpl";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("dcmpl", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)73;
      Utility.encode(byteArray0, true);
      Constant[] constantArray0 = new Constant[6];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-128));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("$l$8b$I$A$A$A$A$A$A$A");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(18, (-1128));
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantInteger constantInteger0 = new ConstantInteger((-19));
      constantArray0[4] = (Constant) constantInteger0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2551, 60);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[5] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)46, 36, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte) (-35);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ldiv", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte) (-11);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)68, 89, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-44);
      byteArray0[7] = (byte) (-112);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-83), 70);
      assertEquals("0:    iconst_m1\n1:    fstore_1\n2:    fconst_0\n3:    astore_1\n4:    nop\n5:    lreturn\n6:    <illegal opcode>\n7:    d2f\n", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.typeOfSignature("TI4iLB:U0Pl>)fd");
      String string0 = "org.apache.bcel.classfile.LineNumberTable";
      Utility.compactClassName("org.apache.bcel.classfile.LineNumberTable", false);
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.bcel.classfile.LineNumberTable", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.LineNumberTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "zZ&\"#xb%BU,v{I!dD");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "zZ&\"#xb%BU,v{I!dD";
      Utility.printArray(objectArray0, false, true);
      Utility.convertString("zZ&\"#xb%BU,v{I!dD");
      Utility.compactClassName("\"zZ&\"#xb%BU,v{I!dD\"", "\"zZ&\"#xb%BU,v{I!dD\"", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, (-542), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "#5%";
      try { 
        Utility.typeOfSignature("#5%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #5%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-106), 76);
      assertEquals("0:    aload_1\n1:    istore_1\n2:    ishr\n3:    fcmpg\n4:    lstore\t\t%0\n", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFully(byteArray0);
      byteSequence0.skip((byte)77);
      byteSequence0.reset();
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("invokeinterface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokeinterface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifgt\t\t#12094", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-80);
      byte byte0 = (byte)95;
      byteArray0[1] = (byte)95;
      byte byte1 = (byte) (-43);
      byteArray0[2] = (byte) (-43);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-43), (-3032), true);
      Utility.printArray((Object[]) null, false);
      ConstantLong constantLong0 = new ConstantLong((byte) (-43));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantPool0.constantToString((Constant) constantLong1);
      Utility.replace(">", "athrow", "athrow");
      Utility.accessToString((int) (byte)95, true);
      // Undeclared exception!
      try { 
        Utility.compactClassName("swap", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.format(6, 6, true, '');
      Utility.classOrInterface(6);
      try { 
        Utility.typeOfSignature("Q_wG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q_wG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.convertString("Pzp[N fSJFyTJGA+bd");
      try { 
        Utility.typeOfSignature("Pzp[N fSJFyTJGA+bd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Pzp[N fSJFyTJGA+bd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)75;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = Utility.decode("java.lang.Character", false);
      Utility.codeToString(byteArray1, (ConstantPool) null, (-22), (-22));
      Utility.codeToString(byteArray1, (ConstantPool) null, (-22), (-22));
      Utility.toHexString(byteArray1);
      Utility.searchOpcode("invokedynamic");
      Utility.compactClassName("0:    fmul\n1:    ladd\n2:    fneg\n3:    ladd\n4:    iaload\n5:    idiv\n6:    ladd\n7:    fdiv\n8:    dsub\n9:    iaload\n10:   fstore_0\n11:   imul\n12:   ladd\n13:   frem\n14:   ladd\n15:   dadd\n16:   ineg\n17:   lsub\n18:   frem\n");
      try { 
        Utility.typeOfMethodSignature("invokedynamic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokedynamic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("sA/i+ED}xz$dKoA.%N ", stringArray0);
      Utility.compactClassName("()LsA/i+ED}xz$dKoA/%N;", "_>F7_0s7", false);
      Utility.methodSignatureToString("()LsA.i+ED}xz$dKoA.%N;", "<init>", "sA/i+ED}xz$dKoA.%N ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      try { 
        Constant.readConstant(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -14
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.replace("IM)Mlt<Q^ji%NR", "IM)Mlt<Q^ji%NR", "IM)Mlt<Q^ji%NR");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)108;
      byteArray0[8] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, (int) (byte)31, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.compactClassName("lconst_0", "_<apodqv", true);
      Utility.isJavaIdentifierPart(',');
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)102);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)8, 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "=vF^H/|g392T<";
      try { 
        Utility.typeOfSignature("=vF^H/|g392T<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =vF^H/|g392T<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.decode(">$b1/lxWvo{J`_8bc", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">$b1/lxWvo{J`_8bc");
      try { 
        Utility.methodSignatureReturnType("\t", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lxor", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "newarray");
      byteArray0[0] = (byte) (-92);
      ConstantPool constantPool0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-92), 189, true);
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("0:    if_icmple\t\t#0\n3:    nop\n");
      try { 
        Utility.decode("invokeinterface", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)37, 88, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet((-1423), 62);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      Utility.accessToString(89, false);
      try { 
        Utility.typeOfSignature("3B^zQx8~\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3B^zQx8~\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = ";";
      stringArray0[1] = "VLUA)&>uRZJdC5X_";
      stringArray0[2] = ";";
      stringArray0[3] = "IV2dBTfSQ>BEvd-";
      stringArray0[4] = ";";
      stringArray0[5] = ";";
      stringArray0[6] = ";[3#<^23B`X2=}O]YR";
      stringArray0[7] = ";";
      stringArray0[8] = "? extends ";
      String string0 = Utility.methodTypeToSignature(";", stringArray0);
      assertEquals("(L;;LVLUA)&>uRZJdC5X_;L;;LIV2dBTfSQ>BEvd-;L;;L;;[L;;L;;L?;)L;;", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.isJavaIdentifierPart('b');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("i2b", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-79), (int) (byte) (-79), false);
      assertEquals("0:    return\n", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = Utility.fillup("[]", 48, true, 'E');
      Utility.typeOfSignature("[]");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "[]";
      objectArray0[2] = (Object) "[]";
      objectArray0[3] = (Object) "[]";
      objectArray0[4] = (Object) "[]";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature(".?AviGCQ*Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .?AviGCQ*Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-28);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(116);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 994, (int) (byte)110, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 51293. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte)121;
      byteArray0[8] = (byte)42;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("l2i");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      constantPool0.dump(dataOutputStream0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)10, (int) (byte)67);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "8&Om&?teB)dORQ";
      try { 
        Utility.typeOfSignature("8&Om&?teB)dORQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8&Om&?teB)dORQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "Clone Not Supported";
      Utility.signatureToString("Clone Not Supported");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.close();
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byteSequence0.reset();
      try { 
        Utility.typeOfMethodSignature("Clone Not Supported");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Clone Not Supported
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.setBit(129, 129);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 47, (int) (byte)78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)110;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte) (-15);
      int int0 = 247;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 213, 247, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utility.searchOpcode("");
      try { 
        Utility.typeOfSignature("9SM!p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9SM!p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-66);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-55), (int) (byte) (-93));
      try { 
        Utility.methodSignatureArgumentTypes("<(j{]:~'hC;?X5Z$!:", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <(j{]:~'hC;?X5Z$!:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('u');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-108);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 47, (int) (byte) (-26), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "Wi;xLNqkHA";
      try { 
        Utility.typeOfSignature("Wi;xLNqkHA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Wi;xLNqkHA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.compactClassName("invokevirtual");
      Utility.compactClassName("=_<UxN~]1'$", true);
      Utility.replace("!6Gwg?", "invokevirtual", "annotation");
      Utility.compactClassName("!6Gwg?");
      Utility.accessToString((-4430), true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)15;
      Utility.toHexString(byteArray0);
      Utility.fillup("c", 3961, false, '3');
      Utility.isJavaIdentifierPart('3');
      Utility.replace("W`;ZYm:Cd", "!6Gwg?", "");
      Utility.isSet(70, 3961);
      Utility.decode("=_<UxN~]1'$", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "annotation";
      stringArray0[1] = "void";
      stringArray0[2] = "!6Gwg?";
      stringArray0[3] = "7c e3 5d 0f";
      stringArray0[4] = "W`;ZYm:Cd";
      stringArray0[5] = "7c e3 5d 0f";
      stringArray0[6] = "void";
      stringArray0[7] = "!6Gwg?";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)37, 88, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("areturn", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = 47;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 47, 47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = Utility.setBit(59, 59);
      assertEquals(134217787, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1612558149), (byte)90);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      constantInvokeDynamic1.clone();
      constantInvokeDynamic1.clone();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("i2c", string0);
      
      int int1 = Utility.clearBit((-1612558149), (-1612558149));
      assertEquals((-1746775877), int1);
      
      String string1 = Utility.format((-2845), 7, false, 'y');
      assertEquals("yy-2845", string1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "/?avigcq*y1b8^";
      try { 
        Utility.typeOfSignature("/?avigcq*y1b8^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /?avigcq*y1b8^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte) (-47);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 655, 103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.signatureToString("J?S- upOunx}YA", false);
      Utility.format(2231, 190, false, 'J');
      try { 
        Utility.methodSignatureArgumentTypes(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-81);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      Utility.codeToString(byteArray0, constantPool0, (-555), 48, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      try { 
        byteSequence0.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.isJavaIdentifierPart('[');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)90;
      byteArray0[8] = (byte) (-45);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)117, 2147483645, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte) (-11);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)68, 89, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantDouble constantDouble0 = new ConstantDouble(1130.71324098);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble1;
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)96, (int) (byte)96);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.convertString("Eq!@pxqO B./-j0");
      try { 
        Utility.typeOfSignature("Eq!@pxqO B./-j0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Eq!@pxqO B./-j0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = Utility.clearBit(238, 4);
      assertEquals(238, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)4;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("org.apache.commons.io.filefilter.SizeFileFilter");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)49);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("areturn", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte) (-90);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), (int) (byte) (-90), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    wide\t(wide)
         // 1:    <illegal opcode>
         // 2:    ifnonnull\t\t#19929
         // 5:    iload_3
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("java.lang.Object@69d39dd2, java.lang.Object@4203cf7");
      Utility.accessToString(169, false);
      try { 
        Utility.typeOfMethodSignature("vho@+QQ^!pgGBrs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: vho@+QQ^!pgGBrs
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)32;
      byte byte0 = (byte)20;
      byteArray0[7] = (byte)20;
      byteArray0[8] = (byte)3;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 106, 92, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.isJavaIdentifierPart('g');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)82;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3, 3, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utility.accessToString(1229);
      String string0 = "Double";
      Utility.typeOfSignature("Double");
      char char0 = '0';
      Utility.isJavaIdentifierPart('0');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte)7;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, (int) (byte)7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)38;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 74, (-4319), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utility.compactClassName("Z*<VI!1_", true);
      boolean boolean0 = false;
      Utility.signatureToString("Z*<VI!1_", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.getSignature("-]4\"(SRCfJwKmL#?0");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "L-]4\"(SRCfJwKmL#?0;";
      objectArray0[1] = (Object) "-]4\"(SRCfJwKmL#?0";
      objectArray0[2] = (Object) "-]4\"(SRCfJwKmL#?0";
      objectArray0[3] = (Object) "-]4\"(SRCfJwKmL#?0";
      objectArray0[4] = (Object) "L-]4\"(SRCfJwKmL#?0;";
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.printArray(objectArray0, true, false);
      String string0 = "Y-F+[Q6V?/R(6ln Yu";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y-F+[Q6V?/R(6ln Yu", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y-F+[Q6V?/R(6ln Yu'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      Utility.fillup("java.lang.Object@779561d4, java.lang.Object@315a13cf", 34, false, 'Z');
      Utility.accessToString(34, false);
      String string0 = "ireturn";
      Utility.replace(")5{#oI_wkkv'nc[", "ireturn", "org.apache.bcel.classfile.Utility$JavaWriter");
      try { 
        Utility.typeOfSignature("7J O1H3$Oy.eP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7J O1H3$Oy.eP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte)107;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2576), 55, true);
      assertEquals("0:    <illegal opcode>\n1:    lconst_0\n2:    iconst_5\n3:    dup\n4:    dstore_1\n5:    if_icmplt\t\t#14448\n", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)64);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantMethodType1.setDescriptorIndex((-1));
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-2245), (-312));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-13);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte)87;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("+;V<,*1dS<AD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;V<,*1dS<AD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-81);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1263, 473, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.accessToString((-1249), true);
      Utility.compactClassName("public private protected static final native strictfp synthetic annotation enum", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1249), 84, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    goto_w\t\t#4868849
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "~d-t";
      String string1 = "HhhT7~4R\"pa";
      Utility.replace("~d-t", "Mj", "HhhT7~4R\"pa");
      try { 
        Utility.typeOfSignature("HhhT7~4R\"pa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HhhT7~4R\"pa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "newarray");
      byteArray0[0] = (byte) (-92);
      ConstantPool constantPool0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-92), 189, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)4;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6, (-173), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)5;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1677), 95, true);
      assertEquals("0:    <illegal opcode>\n1:    lconst_1\n2:    fstore\t\t%65\n4:    caload\n5:    iconst_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte) (-64);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 175, (int) (byte)57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "/LTtZ$%(2W-";
      boolean boolean0 = true;
      try { 
        Utility.decode("/LTtZ$%(2W-", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte) (-47);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 655, 103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.typeOfSignature("ZbRr8}\u0003dxjU [=%");
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ZbRr8}\u0003dxjU [=%", "ZbRr8}\u0003dxjU [=%", (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utility.typeOfSignature("S'uP@PW%Uz?am");
      String string0 = Utility.signatureToString("S'uP@PW%Uz?am", true);
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Utility.searchOpcode("if_icmpgt");
      try { 
        Utility.typeOfSignature("M{N)kJ]:8zx[?y2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M{N)kJ]:8zx[?y2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "G";
      try { 
        Utility.typeOfSignature("G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false, false);
      String string0 = Utility.convertString("nop");
      assertEquals("nop", string0);
      
      String string1 = Utility.getSignature("athrow");
      assertEquals("Lathrow;", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("d2i", string2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "0&-6";
      Utility.compactClassName("0&-6", true);
      Utility.searchOpcode("G5] z2sA?=fx");
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)42;
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)94;
      Utility.encode(byteArray0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.convertString("@");
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("0&-6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0&-6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)71;
      byteArray0[3] = (byte) (-110);
      byteArray0[0] = (byte) (-85);
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte) (-34);
      byteArray0[8] = (byte) (-73);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-714), 65, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.clearBit(3051, 3051);
      Utility.compactClassName("[S6LkY45A%D\"W", "[S6LkY45A%D\"W", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)70;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2254), 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantDouble constantDouble0 = new ConstantDouble(1130.71324098);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dsub", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "putstatic");
      Utility.setBit(263, 1909);
      Utility.compactClassName("^(J}");
      Utility.convertString("null");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-40);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1909, 253, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-113);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)30, 95, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.format((-1911159752), 39, false, '1');
      Utility.typeOfSignature("V");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      Utility.encode(byteArray0, false);
      Utility.methodSignatureReturnType("V", true);
      Constant[] constantArray0 = new Constant[7];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(39, 706);
      constantArray0[0] = (Constant) constantMethodref0;
      DataInput dataInput0 = null;
      ConstantFieldref constantFieldref0 = null;
      try {
        constantFieldref0 = new ConstantFieldref((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantCP", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = null;
      Utility.methodTypeToSignature(", high = ", (String[]) null);
      Utility.methodSignatureArgumentTypes("()L,;");
      try { 
        Utility.typeOfMethodSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)68;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)68, 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)79;
      byteArray0[8] = (byte)126;
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1216), (-2891));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantString constantString0 = new ConstantString((byte) (-81));
      constantArray0[1] = (Constant) constantString0;
      ConstantString constantString1 = new ConstantString((byte)45);
      constantArray0[2] = (Constant) constantString1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("protected");
      constantArray0[3] = (Constant) constantUtf8_0;
      constantUtf8_0.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 5664, 835);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47183. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-126);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)18;
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(1875.0785F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantClass constantClass0 = new ConstantClass(2009);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[1] = (Constant) constantClass1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("D}0}ViM{Ue&9{w");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1191, (int) (byte)18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-97);
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, false);
      String string0 = "Gv+w";
      try { 
        Utility.methodSignatureReturnType("Gv+w", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gv+w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.setBit(89, 4);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte)61;
      byteArray0[8] = (byte)125;
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(472);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)123, 89);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 250, (int) (byte)123, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte) (-34);
      byteArray0[8] = (byte) (-73);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-714), 67, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 20428. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("%_QWto%BLTrEHZ^~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %_QWto%BLTrEHZ^~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)49;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)18, (int) (byte) (-82), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 6. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("(, ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (, 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i2c");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.signatureToString("System");
      Utility.fillup("short", 166, false, '~');
      try { 
        Utility.typeOfMethodSignature("lshr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lshr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)18;
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(1875.0785F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantClass constantClass0 = new ConstantClass(2009);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[1] = (Constant) constantClass1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("D}0}ViM{Ue&9{w");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1191, (int) (byte)18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Utility.accessToString((-1244), true);
      Utility.compactClassName("protected native strictfp synthetic annotation enum", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1244), 84, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    nop
         // 2:    fstore_1
         // 3:    dstore_3
         // 4:    <illegal opcode>
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)44, (int) (byte)44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-491), (byte)64);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantClass constantClass0 = new ConstantClass((-1595));
      constantArray0[1] = (Constant) constantClass0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-491), 110);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)64, (-491));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "R[_\"I\\[Xq7A#mvcj";
      // Undeclared exception!
      try { 
        Utility.signatureToString("R[_\"I[Xq7A#mvcj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R[_\"I[Xq7A#mvcj'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte) (-47);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 655, 103);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte) (-125);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-84), (int) (byte) (-66));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 44126. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-67);
      Utility.equals(byteArray0, byteArray0);
      Utility.setBit((byte)0, (byte)125);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2093), 28, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Utility.clearBit(59, 46);
      Utility.searchOpcode(".class");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ".class";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) ".class";
      objectArray0[3] = (Object) ".class";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ".class";
      objectArray0[6] = (Object) ".class";
      objectArray0[7] = (Object) ".class";
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)73;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)86, 72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      boolean boolean0 = false;
      Utility.compactClassName("U6J", false);
      try { 
        Utility.typeOfSignature("U6J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U6J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.clearBit((byte)111, (byte)111);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 1486;
      Utility.accessToString(1486);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)111, 1494, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-119);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)30, 95, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[0] = (byte) (-63);
      byteArray0[4] = (byte)39;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.accessToString(3464);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-70);
      byteArray0[1] = (byte)52;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Am_u0+");
      boolean boolean0 = true;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = Utility.convertString("athrow");
      assertEquals("athrow", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)90;
      byteArray0[8] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup2_x2", string1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "QGz%g*'";
      // Undeclared exception!
      try { 
        Utility.signatureToString("QGz%g*'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QGz%g*''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Utility.format(2894, (-2434), false, 'a');
      Utility.compactClassName("class");
      Utility.setBit(2894, 164);
      Utility.accessToString((-2434));
      Utility.isJavaIdentifierPart('_');
      Utility.isJavaIdentifierPart('_');
      Utility.decode("class", false);
      Utility.getSignature("R&LL");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) "R&LL";
      objectArray0[2] = (Object) "2894";
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) "private protected static final synchronized volatile interface abstract synthetic annotation enum";
      objectArray0[5] = (Object) "R&LL";
      objectArray0[6] = (Object) "2894";
      objectArray0[7] = (Object) "private protected static final synchronized volatile interface abstract synthetic annotation enum";
      Utility.printArray(objectArray0, true);
      Utility.format(168, 164, false, 'a');
      try { 
        Utility.typeOfSignature("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.searchOpcode("");
      try { 
        Utility.typeOfSignature(", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.typeOfSignature("C");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.format(170, (byte)5, true, ')');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "170))";
      Utility.methodTypeToSignature("C", stringArray0);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("170))");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `170))'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Utility.compactClassName("2<m;R^Se/<C}6nW#V.", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), 250, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)68;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)68, 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.replace("Byte code error: ", "Byte code error: ", "org.apache.bcel.classfile.Field");
      Utility.setBit(170, 10);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte)36;
      byteArray0[8] = (byte)38;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 37, 99);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = true;
      Utility.compactClassName("Invalid signature: ", "Code(max_stack = ", true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Invalid signature: ";
      objectArray0[1] = (Object) "Invalid signature: ";
      objectArray0[2] = (Object) fileSystemHandling0;
      objectArray0[3] = (Object) "Invalid signature: ";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[4] = (Object) "Invalid signature: ";
      objectArray0[5] = (Object) fileSystemHandling0;
      boolean boolean1 = true;
      Utility.printArray(objectArray0, true, true);
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-71);
      byte byte0 = (byte)18;
      byteArray0[1] = (byte)18;
      byte byte1 = (byte)101;
      byteArray0[2] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "scfeKnl+");
      boolean boolean0 = Utility.isSet(242, 242);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = Utility.clearBit(242, (-390));
      assertEquals(242, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-109);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1568), (-2527));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-109), (-390), false);
      assertEquals("0:    lconst_0\n1:    if_acmpne\t\t#25358\n4:    dadd\n5:    aload_3\n6:    i2s\n", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = ">5i:";
      try { 
        Utility.typeOfSignature(">5i:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >5i:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.replace("2>5#", "tZt=E6pSW", "2>5#");
      Utility.replace("<X`z*<`; ]Fp3", "2>5#", "U");
      // Undeclared exception!
      try { 
        Utility.signatureToString("U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Utility.replace("Invalid signature: ", "Invalid signature: ", "#wP$G,0.8)WBx");
      Utility.compactClassName("boolean", false);
      Utility.typeOfSignature("B6)+CZG Cut80M>:");
      try { 
        Utility.typeOfSignature("wide");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wide
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.setBit(784, 784);
      Utility.compactClassName("areturn", "areturn", false);
      Utility.compactClassName("j6^P%s", "j6^P%s", false);
      Utility.compactClassName("IZ", "areturn", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byte byte0 = (byte)124;
      byteArray0[1] = (byte)124;
      byte byte1 = (byte)76;
      byteArray0[2] = (byte)76;
      byte byte2 = (byte) (-87);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)124, (int) (byte)124, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.accessToString(3464);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)52;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A`5u0+");
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)52, true);
      String string0 = Utility.printArray((Object[]) null, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode(" (", false);
      Utility.compactClassName("java.lang.", "java.lang.", false);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string0 = "null";
      Utility.replace("java.lang.", "null", "&~Mp|zz+?5]?c");
      Utility.toHexString(byteArray0);
      Utility.typeOfSignature("Illegal type: ");
      Utility.clearBit((byte)10, (byte)10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFully(byteArray0);
      byteSequence0.reset();
      byteSequence0.readChar();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Utility.searchOpcode("(anonymous)");
      try { 
        Utility.methodSignatureArgumentTypes("(anonymous)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `anonymous)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = ")!]5#%<sZ";
      try { 
        Utility.typeOfSignature(")!]5#%<sZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )!]5#%<sZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-77);
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)124;
      byte byte1 = (byte) (-57);
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-29);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Warning: Padding byte != 0 in ");
      String string0 = "RKHxaaNM";
      try { 
        Utility.typeOfSignature("RKHxaaNM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RKHxaaNM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantDouble constantDouble0 = new ConstantDouble(1130.71324098);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("fneg", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.util.MemorySensitiveClassPathRepository");
      byte[] byteArray0 = Utility.decode("int", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 179, 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "\"";
      String string1 = "x\\3|M% EJ^^S~ ";
      Utility.replace("\"", "x\u0003|M% EJ^^S~ ", "x\u0003|M% EJ^^S~ ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), (int) (byte) (-66));
      String string2 = "? extends ";
      try { 
        Utility.decode("? extends ", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 239;
      Utility.isSet(239, 239);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-86);
      byteArray0[0] = (byte) (-86);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-86), 2021);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Utility.classOrInterface(1209);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)33;
      byte byte0 = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-109);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)17, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "OBgqN_#~2nP1H$_";
      try { 
        Utility.typeOfSignature("OBgqN_#~2nP1H$_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OBgqN_#~2nP1H$_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)20;
      byteArray0[8] = (byte)3;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 106, 92, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.accessToString(90);
      Utility.convertString("private static final volatile");
      Utility.classOrInterface((-784));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)65, (int) (byte)65, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "!K'cL~Az.kH5";
      try { 
        Utility.typeOfSignature("!K'cL~Az.kH5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K'cL~Az.kH5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = ">[5'T|";
      Utility.convertString(">[5'T|");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(">[5'T|", ">[5'T|", "wI~(9J6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >[5'T|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte) (-38);
      byteArray0[8] = (byte) (-116);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2236), 78, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MockFile mockFile0 = new MockFile("A-Ea", "ZVgf8]S1JC4&K6jD2");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "ZVgf8]S1JC4&K6jD2");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "ZVgf8]S1JC4&K6jD2";
      objectArray0[1] = (Object) "ZVgf8]S1JC4&K6jD2";
      objectArray0[2] = (Object) "ZVgf8]S1JC4&K6jD2";
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) "ZVgf8]S1JC4&K6jD2";
      Utility.printArray(printWriter0, objectArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ZVgf8]S1JC4&K6jD2";
      Utility.methodTypeToSignature("ZVgf8]S1JC4&K6jD2", stringArray0);
      Utility.convertString("newarray");
      try { 
        Utility.typeOfSignature("K8!!O4k*iB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K8!!O4k*iB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "6aPS{IrOnos";
      try { 
        Utility.typeOfSignature("6aPS{IrOnos");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6aPS{IrOnos
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "\"O5";
      Utility.searchOpcode("\"O5");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-120);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2931, (-1934), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "]";
      boolean boolean0 = false;
      Utility.fillup("]", 82, false, 'A');
      try { 
        Utility.typeOfSignature("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Utility.accessToString(197, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-10);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\t(wide)");
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-80);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 163, (int) (byte) (-77));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((byte)82);
      constantArray0[1] = (Constant) constantString0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      Utility.codeToString(byteSequence0, constantPool1);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "lload_2";
      stringArray0[2] = "lload_2";
      stringArray0[4] = "lload_2";
      stringArray0[5] = "l2d";
      stringArray0[6] = "l2d";
      stringArray0[7] = "lload_2";
      stringArray0[8] = "l2d";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("l2d", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-117);
      Utility.encode(byteArray0, false);
      Utility.printArray((Object[]) null);
      try { 
        Utility.typeOfSignature("+\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String string1 = "putstatic";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "putstatic", "putstatic", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "LWsV{=uw/rri:?/;V";
      Utility.typeOfSignature("LWsV{=uw/rri:?/;V");
      String string1 = "7m=$@uU9TC";
      byte[] byteArray0 = Utility.decode("7m=$@uU9TC", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 103, 2942, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "Xt*?n,_hn+6Hc}\\0 +";
      try { 
        Utility.methodSignatureReturnType("Xt*?n,_hn+6Hc}\u0000 +");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xt*?n,_hn+6Hc}\u0000 +'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-76);
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(627);
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)84, (byte)45);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantClass0.accept(descendingVisitor0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 114, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Utility.compactClassName("I\"G", true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "I\"G";
      objectArray0[1] = (Object) "I\"G";
      objectArray0[2] = (Object) "I\"G";
      objectArray0[3] = (Object) "I\"G";
      objectArray0[4] = (Object) "I\"G";
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte) (-34);
      byteArray0[7] = (byte)79;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1464), (int) (byte) (-34));
      Utility.convertString("invokevirtual");
      try { 
        Utility.methodSignatureReturnType("impdep1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `impdep1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = ":J'&,=K*s2x/+}bv";
      try { 
        Utility.typeOfSignature(":J'&,=K*s2x/+}bv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :J'&,=K*s2x/+}bv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1666);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)107, (byte)34);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[]");
      String string0 = "TP90FV/])H=}}g%W$";
      try { 
        Utility.methodSignatureReturnType("TP90FV/])H=}}g%W$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H=}}g%W$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Utility.typeOfSignature("JE#aJe)9u[H#0(To\u0003");
      String string0 = "long";
      try { 
        Utility.methodSignatureReturnType("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `long'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "WsV{=uw/rri:?/";
      stringArray0[1] = "+Ft9|L.|fI lXvE 5Bs";
      stringArray0[2] = "+Ft9|L.|fI lXvE 5Bs";
      stringArray0[3] = "+Ft9|L.|fI lXvE 5Bs";
      stringArray0[4] = "+Ft9|L.|fI lXvE 5Bs";
      stringArray0[5] = "+Ft9|L.|fI lXvE 5Bs";
      stringArray0[6] = "+Ft9|L.|fI lXvE 5Bs";
      stringArray0[7] = "+Ft9|L.|fI lXvE 5Bs";
      Utility.methodTypeToSignature("+Ft9|L.|fI lXvE 5Bs", stringArray0);
      try { 
        Utility.methodSignatureReturnType("Ll_a", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Ll_a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("B?", true);
      try { 
        Utility.typeOfMethodSignature("byte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = new String[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "[]";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&J|tWNm*/O");
      stringArray0[1] = "[]";
      stringArray0[2] = "[]";
      stringArray0[3] = "[]";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[]", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&F]o-C-%eLd<{ygy\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &F]o-C-%eLd<{ygy\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-95);
      Utility.toHexString(byteArray0);
      String string0 = "K{ixNkb";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("K{ixNkb", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K{ixNkb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.signatureToString("Invalid constant pool reference: ");
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "int";
      stringArray0[2] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byte byte0 = (byte)79;
      byteArray0[1] = (byte)79;
      Utility.encode(byteArray0, false);
      Utility.replace("lstore_2", "Jc\f3.u`.'dG", "$oO");
      byte[] byteArray1 = Utility.decode("lstore_2", false);
      Utility.encode(byteArray1, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)34, (byte)79);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2285, (byte)34);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("NCQ=;I1Dm;.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NCQ=;I1Dm;.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "H&$/5VclITSh6[8[";
      stringArray0[1] = "H&$/5VclITSh6[8[";
      stringArray0[2] = "H&$/5VclITSh6[8[";
      stringArray0[3] = "H&$/5VclITSh6[8[";
      stringArray0[4] = "H&$/5VclITSh6[8[";
      stringArray0[5] = "boolean";
      stringArray0[6] = "null";
      stringArray0[7] = "H&$/5VclITSh6[8[";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("H&$/5VclITSh6[8[", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[8[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.decode("Hd?M2-J)Uib^($3ZyE", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3Z\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((byte)82);
      constantArray0[0] = (Constant) constantString0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("lload_2", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "fadd";
      stringArray0[1] = "lload_2";
      stringArray0[2] = "lload_2";
      stringArray0[3] = "lload_2";
      stringArray0[4] = "lload_2";
      stringArray0[5] = "fadd";
      stringArray0[6] = "fadd";
      stringArray0[7] = "lload_2";
      stringArray0[8] = "fadd";
      String string1 = Utility.methodTypeToSignature("fadd", stringArray0);
      assertEquals("(Lfadd;Llload_2;Llload_2;Llload_2;Llload_2;Lfadd;Lfadd;Llload_2;Lfadd;)Lfadd;", string1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iand");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "new");
      Utility.decode("iand", false);
      Utility.fillup("Dont call getValueLong() on a non LONG ElementValue", 1189, false, '&');
      try { 
        Utility.methodSignatureReturnType("OBO4O8a", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OBO4O8a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.equals(byteArray0, byteArray0);
      String string0 = "Illegal type: ";
      Utility.clearBit((byte) (-27), 71);
      Utility.equals(byteArray0, byteArray0);
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString(968, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)96;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 96
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = 110;
      Utility.clearBit(110, 1);
      boolean boolean0 = false;
      Utility.format(110, (-1925), false, '=');
      String string0 = "\\\\";
      Utility.searchOpcode("\\");
      String string1 = "'%";
      try { 
        Utility.typeOfSignature("'%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-87);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1952), (-1197), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    imul
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("StackMap(", stringArray0);
      Utility.typeOfMethodSignature("()LStackMap(;");
      String string0 = "double";
      Utility.searchOpcode("double");
      try { 
        Utility.methodSignatureReturnType("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `double'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.classOrInterface(16);
      Utility.convertString("2^:M0kgVqM[y1Fi");
      // Undeclared exception!
      try { 
        Utility.getSignature("2^:M0kgVqM[y1Fi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[y1Fi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger(162);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantInteger constantInteger2 = new ConstantInteger(constantInteger1);
      constantArray0[2] = (Constant) constantInteger2;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-126), (byte)60);
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "PGl#5g]o1J{=v}/!Y";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("PGl#5g]o1J{=v}/!Y", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PGl#5g]o1J{=v}/!Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Utility.format((-10384350), (-10384350), false, 'Q');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "-10384350";
      objectArray0[1] = (Object) "-10384350";
      objectArray0[2] = (Object) "-10384350";
      objectArray0[3] = (Object) "-10384350";
      objectArray0[4] = (Object) "-10384350";
      objectArray0[5] = (Object) "-10384350";
      Utility.printArray(objectArray0, true, false);
      Utility.compactClassName("{-10384350, -10384350, -10384350, -10384350, -10384350, -10384350}");
      String string0 = ",#yHE`Y=#{,x\\uEJW8W";
      Utility.searchOpcode(string0);
      Utility.convertString(string0);
      try { 
        Utility.typeOfSignature("-10384350");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -10384350
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.isSet(98, 98);
      Utility.getSignature("0R1}");
      Utility.setBit(98, 98);
      Utility.printArray((Object[]) null, true);
      Utility.typeOfSignature("L0R1};");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.printArray((Object[]) null, true, false);
      Utility.isJavaIdentifierPart('C');
      Utility.compactClassName("multianewarray");
      Utility.printArray((Object[]) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("multianewarray", "qxuJj", "if_icmplt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: multianewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = "breakpoint";
      Utility.searchOpcode("breakpoint");
      Utility.searchOpcode("breakpoint");
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("breakpoint", (String) null, "breakpoint", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: breakpoint
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString(1457, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 76
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Utility.getSignature("impdep1");
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Utility.isJavaIdentifierPart('M');
      Utility.replace("kPQvhOJt", "kPQvhOJt", "kPQvhOJt");
      Utility.accessToString(3690, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte)96;
      byteArray0[8] = (byte) (-1);
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(2220);
      constantArray0[0] = (Constant) constantClass0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1139, (byte) (-20));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 11, 1139, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.clearBit(86, 86);
      int int0 = (-1758);
      Utility.clearBit((-1758), (-3812));
      Utility.decode("M$|,%j~otK4R#_", false);
      Utility.getSignature(">\t");
      Utility.accessToString(1527, false);
      Utility.accessToString((-1758));
      int int1 = (-2883);
      Utility.accessToString((-2883), false);
      String string0 = "fstore";
      try { 
        Utility.methodSignatureReturnType("fstore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fstore'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.decode("U6$O6XY1u:Nr&<. z", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Utility.signatureToString("V");
      String string0 = "I";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("I", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = "U";
      byte[] byteArray0 = Utility.decode("U", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 45, 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.equals(byteArray0, byteArray0);
      Utility.replace("Illegal type: ", "fdiv", "fdiv");
      Utility.clearBit(150, 71);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)47;
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)57;
      objectArray0[1] = (Object) (byte)57;
      objectArray0[2] = (Object) (byte)124;
      objectArray0[4] = (Object) (byte) (-71);
      Utility.printArray(objectArray0, true, true);
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("nCFS}(w", "S!Gxm;-YGxUR3x&d{", "float", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nCFS}(w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)82;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.fillup("putstatic", (-1845), false, 'w');
      Utility.setBit(231, (-1845));
      Utility.isJavaIdentifierPart('w');
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `putstatic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.signatureToString("Dont call getValueChar() on a non CHAR ElementValue", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-37);
      byte byte0 = (byte)120;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte) (-29);
      byteArray0[8] = (byte) (-19);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = null;
      try {
        constantInvokeDynamic0 = new ConstantInvokeDynamic((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantInvokeDynamic", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)99;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-474), 89, true);
      assertEquals("0:    nop\n1:    dadd\n", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.accessToString(671);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/?avigcq*y1b8^";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.methodTypeToSignature("3oDgI=~C$7b", stringArray0);
      Utility.format(1221, 255, true, 'z');
      Utility.compactClassName("(L/?avigcq*y1b8^;)L3oDgI=~C$7b;");
      Utility.printArray((Object[]) stringArray0, false);
      LocalVariableTable localVariableTable0 = null;
      Utility.methodSignatureToString("(L/?avigcq*y1b8^;)L3oDgI=~C$7b;", "uox@ID6<", "uox@ID6<", false, (LocalVariableTable) null);
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 255, true, '4');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("L6A-eg9SVI`F");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      mockPrintStream0.println();
      objectArray0[1] = (Object) "L6A-eg9SVI`F";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintStream0;
      Object object1 = new Object();
      Object[] objectArray1 = new Object[3];
      Object object2 = new Object();
      objectArray1[0] = object2;
      mockPrintStream0.println('w');
      objectArray1[1] = (Object) "L6A-eg9SVI`F";
      objectArray1[2] = object1;
      PrintStream printStream0 = mockPrintStream0.printf("L6A-eg9SVI`F", objectArray1);
      objectArray0[4] = object1;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "L6A-eg9SVI`F";
      Utility.methodTypeToSignature("L6A-eg9SVI`F", stringArray0);
      Object[] objectArray2 = new Object[6];
      objectArray2[0] = (Object) mockPrintStream0;
      objectArray2[1] = (Object) mockPrintStream0;
      objectArray2[2] = (Object) "(LL6A-eg9SVI`F;)LL6A-eg9SVI`F;";
      objectArray2[3] = (Object) "L6A-eg9SVI`F";
      objectArray2[4] = object2;
      objectArray2[5] = (Object) printStream0;
      Utility.printArray(objectArray2, false, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("f<Sm4?}Vi#9l]{p", "f<Sm4?}Vi#9l]{p", "]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f<Sm4?}Vi#9l]{p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = Utility.compactClassName("", false);
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string1);
      assertEquals("{\"\", \"\"}", string1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      Utility.accessToString(75, true);
      try { 
        Utility.methodSignatureReturnType(".?AviGCQ*Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `.?AviGCQ*Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = Utility.compactClassName("impdep1");
      assertEquals("impdep1", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('1');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)47;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)57;
      objectArray0[1] = (Object) (byte)57;
      objectArray0[2] = (Object) (byte)124;
      objectArray0[3] = (Object) (byte)34;
      objectArray0[4] = (Object) (byte) (-71);
      Utility.printArray(objectArray0, true, true);
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"57\", \"57\", \"124\", \"34\", \"-71\"}", string1);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = 173;
      Utility.format(173, (-1388), true, '\"');
      try { 
        Utility.methodSignatureReturnType("[+e", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+e'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-71));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)85, (byte)107);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("castore", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.compactClassName("", true);
      Utility.signatureToString("C7$2Dlm%i");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Types");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Types
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Utility.decode("<illegal opcode>", false);
      Utility.classOrInterface(212);
      Utility.classOrInterface(618);
      try { 
        Utility.methodSignatureArgumentTypes("_5eSS", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _5eSS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-39);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.methodTypeToSignature("\"R\"67ozfk2y73}YPk", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.getSignature("\tdefault = ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)114;
      Utility.encode(byteArray0, true);
      Constant[] constantArray0 = new Constant[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = null;
      try {
        constantInteger0 = new ConstantInteger(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-116);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.isSet(174, 96);
      String string0 = Utility.accessToString(250);
      Utility.getSignature("private static final synchronized volatile transient");
      Utility.fillup("private static final synchronized volatile transient", 244, false, 'R');
      Utility.toHexString(byteArray0);
      Utility.isJavaIdentifierPart('R');
      Utility.compactClassName("private static final synchronized volatile transient", "java.lang.", true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "private static final synchronized volatile transient";
      objectArray0[1] = (Object) "private static final synchronized volatile transient";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (byte) (-116);
      objectArray0[4] = (Object) (byte) (-77);
      objectArray0[5] = (Object) "private static final synchronized volatile transient";
      Object object1 = new Object();
      objectArray0[6] = object1;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.isJavaIdentifierPart('v');
      String string0 = "Lt%Kw<aVS;V";
      Utility.compactClassName("Lt%Kw<aVS;V", "HMg8'@(u1hae<I", true);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)85;
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-100);
      byte byte1 = (byte) (-65);
      byteArray0[3] = (byte) (-65);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 55C09CBF
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = "M";
      try { 
        Utility.methodSignatureReturnType("M", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "M,ko\"j&{.6";
      Utility.convertString("M,ko\"j&{.6");
      Utility.convertString("M,ko\"j&{.6");
      Utility.isSet(49, 49);
      String string1 = "xH=;3";
      Utility.fillup("xH=;3", 49, false, '2');
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      String string1 = "f`I!:k.e";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f`I!:k.e");
      Utility.classOrInterface(58);
      try { 
        Utility.typeOfSignature("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-95);
      String string0 = Utility.encode(byteArray0, true);
      String string1 = Utility.replace("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.format((byte)66, (byte)66, true, 'u');
      assertEquals("66uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", string2);
      
      boolean boolean0 = Utility.isSet((byte) (-36), 98);
      assertTrue(boolean0);
      
      boolean boolean1 = Utility.isSet((-1130), 98);
      assertTrue(boolean1);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte) (-36);
      byteArray1[2] = (byte)66;
      boolean boolean2 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "byte");
      objectArray0[8] = object8;
      Utility.printArray(objectArray0);
      Utility.convertString("{java.lang.Object@5a57cf97, java.lang.Object@32653a71, java.lang.Object@620e574b, java.lang.Object@249c4763, java.lang.Object@40d31f10, java.lang.Object@5b7e13c9, java.lang.Object@4bdaa3e2, java.lang.Object@dbb52a5, java.lang.Object@5548f79d}");
      Utility.classOrInterface(1026);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)33;
      byte byte0 = (byte)1;
      byteArray0[1] = (byte)1;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("{java.lang.Object@5a57cf97, java.lang.Object@32653a71, java.lang.Object@620e574b, java.lang.Object@249c4763, java.lang.Object@40d31f10, java.lang.Object@5b7e13c9, java.lang.Object@4bdaa3e2, java.lang.Object@dbb52a5, java.lang.Object@5548f79d}", "7^''6/<\"c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"7^''6/<\"c\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.isSet(185, 185);
      String string0 = "Lt%Kw<aVS;V";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Lt%Kw<aVS;V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lt%Kw<aVS;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)39;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int int0 = 4;
      Utility.clearBit(4, 4);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "double";
      stringArray0[1] = "double";
      stringArray0[2] = "double";
      stringArray0[3] = "double";
      stringArray0[4] = "double";
      stringArray0[5] = "double";
      String string0 = Utility.methodTypeToSignature("double", stringArray0);
      assertEquals("(DDDDDD)D", string0);
      
      String string1 = Utility.printArray((Object[]) stringArray0, false);
      assertEquals("double, double, double, double, double, double", string1);
      
      String string2 = Utility.compactClassName("double", true);
      assertEquals("double", string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-1);
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("b9 a1 04 71 d4 42 ff", string3);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureReturnType("E|X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E|X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "\n";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)91;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = (-2982);
      Utility.fillup("\n", (-2982), true, '_');
      Utility.convertString("\n");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("_8k", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `_8k'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.convertString("");
      Utility.replace("char", "long", "long");
      File file0 = MockFile.createTempFile("long", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "char";
      objectArray0[1] = (Object) "long";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "int", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      Utility.classOrInterface(118);
      String string0 = "double";
      String string1 = ";";
      String string2 = ".8J_!Xs@a`l&=5fj2";
      boolean boolean0 = true;
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getLocalVariableTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)41;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$C$x$A$c5$D$v", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5p9)vl:$N)b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5p9)vl:$N)b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Utility.getSignature("");
      try { 
        Utility.methodSignatureArgumentTypes("L;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = Utility.fillup("?>...", (-2927), false, '~');
      assertEquals("?>...", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('~');
      assertFalse(boolean0);
      
      String string1 = Utility.compactClassName("|`?a (qE'", "|`?a (qE'", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.isSet((-1984), (-1984));
      String string0 = "Invalid type: ";
      try { 
        Utility.typeOfMethodSignature("Invalid type: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid type: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "qf>^ZHz";
      stringArray0[1] = "qf>^ZHz";
      stringArray0[2] = "t%Kw<aVS";
      stringArray0[3] = "qf>^ZHz";
      stringArray0[4] = "qf>^ZHz";
      stringArray0[5] = "qf>^ZHz";
      stringArray0[6] = "qf>^ZHz";
      stringArray0[7] = "qf>^ZHz";
      Utility.methodTypeToSignature("qf>^ZHz", stringArray0);
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("qf>^ZHz", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "F?dc4";
      Utility.signatureToString("F?dc4");
      boolean boolean0 = true;
      Utility.fillup("float", 54, true, '3');
      String string1 = "606y=ly.";
      try { 
        Utility.decode("606y=ly.", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)73;
      byte byte0 = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      byte byte1 = (byte) (-108);
      byteArray0[4] = (byte) (-108);
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      constantArray0[0] = (Constant) constantUtf8_0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-108), (byte) (-28));
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "newarray";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "q&dd!S0!mJb", "newarray", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "java.lang.org.apache.bcel.classfile.Attribute";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.org.apache.bcel.classfile.Attribute");
      String string1 = "%!K9}yW(C4";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("%!K9}yW(C4", "java.lang.org.apache.bcel.classfile.Attribute");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // java.lang.org.apache.bcel.classfile.Attribute
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      int int0 = (-786);
      Utility.accessToString((-786));
      try { 
        Utility.decode("ysLv acUfJ8$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = "OEZM";
      Utility.compactClassName("OEZM");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("OEZM", "OEZM", "OEZM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OEZM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("1O^v^hn,Y'BzxpM2x2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `1O^v^hn,Y'BzxpM2x2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Utility.searchOpcode("3");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-65);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-65);
      Utility.equals(byteArray0, byteArray1);
      int int0 = 2885;
      Utility.clearBit((byte)38, 2885);
      Utility.toHexString(byteArray1);
      Utility.encode(byteArray0, false);
      Utility.encode(byteArray0, false);
      Utility.setBit((byte) (-65), 88);
      Utility.getSignature("$E$s$bf");
      try { 
        Utility.typeOfSignature("$E$s$bf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $E$s$bf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = "LWsV{=uw/rri:?/;V";
      Utility.typeOfSignature("LWsV{=uw/rri:?/;V");
      byte[] byteArray0 = Utility.decode("LWsV{=uw/rri:?/;V", false);
      int int0 = 103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 103, 2942, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
