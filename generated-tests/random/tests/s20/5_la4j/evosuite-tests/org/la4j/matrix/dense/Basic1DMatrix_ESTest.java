/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 04:17:47 GMT 2019
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic1DMatrix_ESTest extends Basic1DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      double double0 = (-1244.9064);
      doubleArray2[2] = (-1244.9064);
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = (-1.0);
      doubleArray0[1] = doubleArray2;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      basic1DMatrix0.foldRows(vectorAccumulator0);
      basic1DMatrix0.divide((-1.0));
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 7;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(7, 7, 7);
      Random.setNextRandom(10);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.unit(7, 10);
      basic1DMatrix1.toBinary();
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix1, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 0, doubleArray0);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 1000, (-1499.7535));
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(sparseMatrix0, denseMatrix0);
      Matrix matrix1 = Matrix.zero(29, 939);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, matrix1, denseMatrix0, sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(43);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(43);
      basic1DMatrix0.swapColumns(43, 43);
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = basic1DMatrix0.columnMajorIterator();
      basic1DMatrix0.toMatrixMarket();
      basic1DMatrix0.toColumnVector();
      basic1DMatrix0.setAll(724.1623030552);
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextInt();
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.randomSymmetric(43, mockRandom0);
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.fromBinary(byteArray0);
      basic1DMatrix2.subtract((Matrix) basic1DMatrix1);
      basic1DMatrix2.equals((Object) columnMajorMatrixIterator0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        basic1DMatrix1.swapRows(260, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11180
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(9, mockRandom0);
      assertEquals(9, basic1DMatrix0.rows());
      
      double double0 = basic1DMatrix0.get(8, 8);
      assertEquals(0.4, double0, 0.01);
      
      Matrix matrix0 = basic1DMatrix0.copyOfShape(8, 1);
      assertEquals(1, matrix0.columns());
      
      basic1DMatrix0.swapRows(8, 1);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.constant(8, 3, 0.0);
      assertEquals(3, basic1DMatrix1.columns());
      assertEquals(8, basic1DMatrix1.rows());
      
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.diagonal(8, 304.4905776928);
      assertEquals(8, basic1DMatrix2.columns());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(74, 74);
      DenseMatrix.fromCSV("");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-920.11792);
      doubleArray0[1] = (double) 37;
      doubleArray0[2] = (double) 74;
      doubleArray0[3] = (double) 74;
      doubleArray0[4] = (double) 46;
      doubleArray0[5] = (double) 37;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.from1DArray(46, 37, doubleArray0);
      assertEquals(37, basic1DMatrix1.columns());
      assertEquals(46, basic1DMatrix1.rows());
      
      basic1DMatrix0.swapRows(74, 74);
      Matrix matrix0 = basic1DMatrix0.copyOfShape(3091, 74);
      assertEquals(74, matrix0.columns());
      assertEquals(74, basic1DMatrix0.columns());
      assertEquals(3091, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1550L);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(1, 1, mockRandom0);
      assertEquals(1, basic1DMatrix0.rows());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      assertEquals(2, basic1DMatrix1.columns());
      assertEquals(2, basic1DMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(37, 37);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = (double) 37;
      Matrix.from1DArray(286, 286, doubleArray0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows(37, 251);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1369
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(37, 37, 37);
      basic1DMatrix0.product();
      basic1DMatrix0.setAll((-3029.810367030833));
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapColumns(0, 37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1369
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)71;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 67;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 250;
      doubleArray0[1] = (double) 250;
      doubleArray0[2] = (double) 67;
      doubleArray0[3] = (double) 67;
      doubleArray0[4] = (double) 67;
      doubleArray0[5] = (double) 250;
      doubleArray0[6] = (double) 250;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(250, 67, doubleArray0);
      basic1DMatrix0.setAll(250.0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.copyOfShape(67, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 851;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      Matrix matrix0 = Matrix.from1DArray(851, 0, doubleArray0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(sparseMatrix0, sparseMatrix0, matrix0, sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3352;
      doubleArray0[1] = (double) 3352;
      doubleArray0[2] = (double) 3352;
      doubleArray0[3] = (double) 3352;
      doubleArray0[4] = (double) 3352;
      doubleArray0[5] = 3581.03980317;
      doubleArray0[6] = (double) 3352;
      doubleArray0[7] = (double) 3352;
      doubleArray0[8] = (double) 3352;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(3352, 3352, doubleArray0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.toArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.swapColumns(6, 2984);
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("");
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
      basic1DMatrix0.add((double) 2);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1392);
      Random.setNextRandom(2);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, sparseMatrix0, denseMatrix0, basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(299, 299);
      // Undeclared exception!
      basic1DMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Matrix matrix0 = basic1DMatrix0.rotate();
      int int0 = 353;
      matrix0.eachInColumn(353, (VectorProcedure) null);
      matrix0.multiplyByItsTranspose();
      double double0 = 0.0;
      basic1DMatrix0.equals(matrix0, 0.0);
      basic1DMatrix0.toBinary();
      basic1DMatrix0.toArray();
      Basic1DMatrix.fromCSV("");
      basic1DMatrix0.toArray();
      basic1DMatrix0.toBinary();
      String string0 = "JTF~?WLXSlsoLjl";
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromCSV("JTF~?WLXSlsoLjl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2361.220526431217);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 153.0811701;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 60.526724;
      doubleArray1[5] = 277.1128189641;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 129.85;
      doubleArray2[1] = (-1287.735577637743);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 60.526724;
      doubleArray2[4] = 277.1128189641;
      doubleArray2[5] = 60.526724;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 60.526724;
      doubleArray0[1] = doubleArray2;
      Basic1DMatrix.from2DArray(doubleArray0);
      int int0 = 6;
      // Undeclared exception!
      try { 
        Basic1DMatrix.unit((-58), 6);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 264;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(285, 264);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 264;
      doubleArray0[1] = (double) 264;
      basic1DMatrix0.copy();
      doubleArray0[2] = (double) 285;
      doubleArray0[3] = (double) 285;
      doubleArray0[4] = (double) 264;
      doubleArray0[5] = (double) 264;
      Vector vector0 = Vector.fromArray(doubleArray0);
      int int1 = 245;
      Vector.zero(245);
      // Undeclared exception!
      try { 
        basic1DMatrix0.insertColumn(264, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..263
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 9;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (-1899.5282380778888);
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) (-416);
      doubleArray0[4] = (double) (-416);
      doubleArray0[5] = 2447.363;
      // Undeclared exception!
      try { 
        Basic1DMatrix.from1DArray((-416), 9, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -416x9
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 6;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(6, 6);
      basic1DMatrix0.swapRows(6, 6);
      // Undeclared exception!
      try { 
        basic1DMatrix0.get(6, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("");
      Basic1DMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
      Basic1DMatrix.constant(1392, 2, 1392);
      Random.setNextRandom(2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(9, (-194.95428));
      int int0 = 779;
      int int1 = 1136;
      // Undeclared exception!
      try { 
        basic1DMatrix0.set(1136, 9, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1136' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-17);
      byteArray0[0] = (byte) (-17);
      byte byte1 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byte byte2 = (byte) (-45);
      byteArray0[2] = (byte) (-45);
      byte byte3 = (byte)5;
      byteArray0[3] = (byte)5;
      byte byte4 = (byte) (-99);
      byteArray0[4] = (byte) (-99);
      byte byte5 = (byte)112;
      byteArray0[5] = (byte)112;
      byte byte6 = (byte)112;
      byteArray0[6] = (byte)112;
      byte byte7 = (byte)43;
      byteArray0[7] = (byte)43;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "=}vU";
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket("=}vU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 8;
      // Undeclared exception!
      try { 
        Basic1DMatrix.random(8, 142, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.product();
      MatrixFactory<Basic1DMatrix> matrixFactory0 = (MatrixFactory<Basic1DMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        basic1DMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = (-1);
      Random.setNextRandom((-1));
      String string0 = null;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextDouble();
      mockRandom0.nextBoolean();
      // Undeclared exception!
      try { 
        Basic1DMatrix.random((-17), (-17), mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -17x-17
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      mockRandom0.longs();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(0, 0, mockRandom0);
      assertEquals(0, basic1DMatrix0.columns());
      
      Vector vector0 = basic1DMatrix0.getRow(0);
      assertEquals(0, vector0.length());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 8;
      int int1 = 2050;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(8, 2050, (-1255.7258701896));
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      // Undeclared exception!
      basic1DMatrix0.toRowMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        basic1DMatrix0.equals((Matrix) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 55;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(55, 55, (-4802.234988972186));
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '56' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 1920;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(2, 1920, 1920);
      basic1DMatrix0.copyOfShape(1920, 2);
      MockRandom mockRandom0 = new MockRandom(2);
      // Undeclared exception!
      Basic1DMatrix.randomSymmetric(705, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-29);
      MockRandom mockRandom0 = new MockRandom((-29));
      // Undeclared exception!
      try { 
        Basic1DMatrix.randomSymmetric((-29), mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -29x-29
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 375;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(375);
      int int1 = 2250;
      // Undeclared exception!
      try { 
        basic1DMatrix0.minInColumn(2250);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2250' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-1310.445252618271);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1.0;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        Basic1DMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 199;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(199, 199);
      int int1 = 9;
      basic1DMatrix0.sliceBottomRight(199, 9);
      basic1DMatrix0.swapColumns(9, 9);
      basic1DMatrix0.swapRows(199, 199);
      int int2 = (-1059);
      // Undeclared exception!
      basic1DMatrix0.max();
  }
}
