/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 00:43:54 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.time.DateTimeException;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '_';
      charArray0[0] = '_';
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.eofPos = 0;
      jSONScanner0.isBlankInput();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jSONScanner0.setLocale(locale0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "t?N$Z_$+ [4/;Kz";
      int int0 = 2;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("t?N$Z_$+ [4/;Kz", 2);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("create asm deserializer error, ", 115);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isEnabled(115);
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      jSONReaderScanner0.integerValue();
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      jSONReaderScanner0.scanBoolean('C');
      charArray0[3] = '1';
      charArray0[4] = 'p';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@&8y0\"o\" O;0;");
      char[] charArray0 = new char[9];
      charArray0[0] = 'D';
      charArray0[1] = 'j';
      charArray0[2] = 'D';
      charArray0[3] = 'D';
      jSONScanner0.scanInt('1');
      charArray0[4] = 'D';
      charArray0[5] = 'D';
      charArray0[6] = 'D';
      charArray0[7] = 'D';
      charArray0[8] = 'D';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanDecimal('D');
      jSONScanner0.intValue();
      jSONScanner0.scanIdent();
      jSONScanner0.bytesValue();
      jSONScanner0.intValue();
      jSONScanner0.scanType("@&8y0\"o\" O;0;");
      jSONScanner0.scanFieldString(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13, (-2));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 422, 422);
      jSONReaderScanner0.nextToken(422);
      jSONReaderScanner0.matchStat();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1718), (-1718));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7X6?");
      jSONReaderScanner0.stringDefaultValue = "v(";
      jSONReaderScanner0.stringDefaultValue = "7X6?";
      int int0 = 41;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.subString(41, 41);
      jSONReaderScanner0.scanDate('\'');
      jSONReaderScanner0.scanFloat('0');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ';';
      charArray0[1] = 'r';
      charArray0[2] = 'm';
      charArray0[3] = '7';
      charArray0[4] = '*';
      charArray0[5] = 'R';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 42);
      jSONReaderScanner0.nextToken(7);
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = 'H';
      charArray0[2] = '\"';
      char char0 = 'r';
      charArray0[3] = 'r';
      charArray0[4] = '$';
      charArray0[5] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.nextTokenWithColon(16);
      jSONReaderScanner0.scanLong('>');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 129;
      int int1 = 15;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 129, 15);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uQJ_5u0:OooQxtr}");
      jSONReaderScanner0.scanNumber();
      SymbolTable symbolTable0 = new SymbolTable(34);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'z');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("undefined");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 93);
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.charAt(1485);
      CharBuffer charBuffer0 = CharBuffer.allocate(40);
      stringReader0.read(charBuffer0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "[*hZ@d";
      JSONScanner jSONScanner0 = new JSONScanner("[*hZ@d", (-2833));
      jSONScanner0.scanNumber();
      jSONScanner0.skipComment();
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = '#';
      charArray0[2] = ')';
      charArray0[3] = 'O';
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ';';
      charArray0[1] = '[';
      charArray0[2] = '^';
      charArray0[3] = ';';
      char char0 = '$';
      charArray0[4] = '$';
      int int0 = 15;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39, 15);
      jSONReaderScanner0.scanInt('[');
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.isEnabled(15);
      jSONReaderScanner0.isEOF();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5");
      char char0 = '_';
      jSONScanner0.scanInt('_');
      jSONScanner0.scanUUID('_');
      jSONScanner0.scanType("S;`nX");
      char[] charArray0 = new char[6];
      jSONScanner0.bp = 5;
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONScanner");
      char[] charArray0 = new char[7];
      charArray0[0] = 'q';
      charArray0[1] = 'E';
      charArray0[2] = '+';
      SymbolTable symbolTable0 = null;
      jSONScanner0.scanSymbol((SymbolTable) null);
      charArray0[3] = 'o';
      jSONScanner0.scanNumber();
      charArray0[4] = '7';
      jSONScanner0.pos = 10;
      charArray0[5] = ')';
      charArray0[6] = 'v';
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.info();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 251);
      jSONReaderScanner0.nextToken(10);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("g6?zTryr", 310);
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = '+';
      charArray0[2] = 'x';
      charArray0[3] = 'l';
      charArray0[4] = 'L';
      charArray0[5] = '$';
      charArray0[6] = 'L';
      charArray0[7] = '/';
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.next();
      jSONReaderScanner0.intValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      char[] charArray1 = new char[1];
      charArray1[0] = '6';
      jSONReaderScanner0.scanFieldFloat(charArray1);
      assertEquals(310, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2] LjE.vs");
      jSONScanner0.isBlankInput();
      int int0 = 77;
      jSONScanner0.intValue();
      jSONScanner0.scanDecimal('s');
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      charArray0[1] = 's';
      char char0 = '+';
      SymbolTable symbolTable0 = new SymbolTable(41);
      int int1 = (-1325);
      symbolTable0.addSymbol("2] LjE.vs", 0, 0, 111);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 92, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = 'U';
      charArray0[2] = ';';
      charArray0[3] = 'Z';
      charArray0[4] = '&';
      charArray0[5] = 'b';
      charArray0[6] = '8';
      int int0 = 40;
      int int1 = 108;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 40, 108);
      jSONReaderScanner0.scanLong('\\');
      jSONReaderScanner0.scanDecimal('i');
      jSONReaderScanner0.scanFloat('l');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-180));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - -, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{!}\"+|X", 3330);
      char[] charArray0 = new char[8];
      jSONScanner0.nextToken((-1209));
      charArray0[0] = '|';
      charArray0[1] = '3';
      charArray0[2] = 'P';
      jSONScanner0.features = 3330;
      charArray0[3] = 'L';
      jSONScanner0.stringDefaultValue = "{!}\"+|X";
      charArray0[4] = '=';
      charArray0[5] = 'd';
      charArray0[6] = '*';
      jSONScanner0.scanFieldFloat(charArray0);
      charArray0[7] = 'L';
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.resetStringPosition();
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals('!', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("bgol", 60);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = ';';
      charArray0[2] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 104);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanDecimal('a');
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 108;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*qF0o", 108);
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.setTimeZone(timeZone0);
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanDouble('m');
      JSONScanner jSONScanner0 = new JSONScanner("6Z?F$\"0");
      int int1 = 118;
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      charset0.aliases();
      CharBuffer charBuffer0 = CharBuffer.allocate(108);
      charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        Charset.forName("6Z?F$\"0");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 6Z?F$\"0
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"2\"~k]rD=");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 123);
      stringReader0.read();
      jSONReaderScanner0.scanBoolean(']');
      JSONScanner jSONScanner0 = new JSONScanner("=7=`Orp6", (-1));
      char[] charArray0 = new char[3];
      jSONReaderScanner0.scanInt(']');
      charArray0[0] = ']';
      stringReader0.ready();
      jSONReaderScanner0.scanFieldDate(charArray0);
      charArray0[1] = ']';
      jSONReaderScanner0.nextToken();
      charArray0[2] = ']';
      jSONScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fX6c<Kip\"{R*E!>wnF", 117);
      char char0 = '\'';
      jSONScanner0.scanBoolean('\'');
      jSONScanner0.ch = 'S';
      jSONScanner0.bytesValue();
      jSONScanner0.scanDecimal('S');
      jSONScanner0.info();
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(802, charArray0, 48, 48);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 'm';
      charArray0[2] = '}';
      charArray0[3] = 'q';
      charArray0[4] = '';
      charArray0[5] = 'h';
      charArray0[6] = 'd';
      charArray0[7] = 'c';
      int int0 = 1416;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1416, 3847);
      jSONReaderScanner0.np = 1416;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = 'B';
      charArray0[0] = 'B';
      char char1 = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'L';
      charArray0[3] = '-';
      char char2 = '0';
      charArray0[4] = '0';
      charArray0[5] = 'X';
      int int0 = 32;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 32);
      jSONReaderScanner0.putChar('B');
      char char3 = 'X';
      jSONReaderScanner0.scanLong('X');
      char[] charArray1 = new char[3];
      charArray1[0] = '-';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.pos = 92;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("QylS1", 3337);
      char[] charArray0 = new char[5];
      char char0 = 'v';
      charArray0[0] = 'v';
      charArray0[1] = '%';
      charArray0[2] = 'X';
      charArray0[3] = 'O';
      charArray0[4] = ',';
      jSONReaderScanner0.scanFieldDate(charArray0);
      char[] charArray1 = new char[3];
      charArray1[0] = 'k';
      charArray1[1] = 'n';
      charArray1[2] = 'R';
      jSONReaderScanner0.scanFieldBoolean(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('W');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match W - Q, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = 'A';
      charArray0[2] = '\"';
      charArray0[3] = 'G';
      charArray0[4] = '+';
      char char0 = '^';
      charArray0[5] = '^';
      int int0 = 3154;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3154);
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, '+');
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = 'H';
      charArray0[2] = '\"';
      char char0 = 'r';
      charArray0[3] = 'r';
      charArray0[4] = '$';
      charArray0[5] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.nextTokenWithColon(16);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ", (-1100));
      jSONScanner0.scanBoolean('M');
      jSONScanner0.scanLong('M');
      jSONScanner0.matchStat();
      jSONScanner0.scanDecimal('M');
      char[] charArray0 = new char[9];
      charArray0[0] = 'M';
      charArray0[1] = '\"';
      charArray0[2] = 'N';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'N';
      charArray0[6] = 'N';
      charArray0[7] = 'M';
      charArray0[8] = 'N';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanDouble('N');
      jSONScanner0.stringVal();
      jSONScanner0.scanISO8601DateIfMatch(false);
      char[] charArray1 = new char[3];
      charArray1[0] = 'N';
      charArray1[1] = 'M';
      charArray1[2] = 'N';
      jSONScanner0.scanFieldBigInteger(charArray1);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanDouble('N');
      assertEquals((-1), jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = 'x';
      charArray0[2] = '/';
      charArray0[3] = 'E';
      charArray0[4] = 'd';
      charArray0[5] = 'P';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3332);
      boolean boolean0 = jSONReaderScanner0.isEnabled(3332, 891);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'g';
      charArray0[1] = 'O';
      charArray0[2] = 'F';
      charArray0[3] = '&';
      charArray0[4] = 's';
      charArray0[5] = '`';
      charArray0[6] = '%';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 84, 84);
      char char0 = 'W';
      jSONReaderScanner0.scanDouble('W');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.pos = 2898;
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.close();
      int int0 = 301;
      jSONReaderScanner0.isEnabled(301);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDate('s');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" - ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.read();
      int int0 = 2025;
      SymbolTable symbolTable0 = new SymbolTable(2025);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = 'b';
      charArray0[2] = 'K';
      charArray0[3] = 'e';
      charArray0[4] = 'M';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('#');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9m?J_MQ]:sM%\"|i");
      jSONScanner0.tokenName();
      jSONScanner0.nextToken((-2279));
      jSONScanner0.floatValue();
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      char char0 = 'J';
      charArray0[1] = 'J';
      char char1 = ' ';
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2640));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")}", 1289);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 45, (-3849));
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      char[] charArray1 = new char[4];
      charArray1[0] = 'P';
      charArray1[1] = '%';
      charArray1[2] = 's';
      charArray1[3] = '\"';
      jSONReaderScanner0.scanFieldFloatArray2(charArray1);
      jSONReaderScanner0.charAt(359);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 45);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error, expect ");
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate((-1), 4332, 0, 3067, 0, 66);
      timeZone0.inDaylightTime(mockDate0);
      jSONScanner0.setTimeZone(timeZone0);
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.stringVal();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      charArray0[1] = 'n';
      charArray0[2] = '<';
      charArray0[3] = 'U';
      charArray0[4] = '/';
      charArray0[5] = 'C';
      charArray0[6] = '=';
      charArray0[7] = 'N';
      charArray0[8] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 120, 559);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString('N');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")");
      Class<Object> class0 = Object.class;
      char[] charArray0 = new char[5];
      jSONScanner0.stringDefaultValue = "expect ':' at ";
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      charArray0[3] = 'W';
      charArray0[4] = 'W';
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.scanFloat('W');
      SymbolTable symbolTable0 = new SymbolTable(91);
      jSONScanner0.scanEnum(class0, symbolTable0, '@');
      jSONScanner0.scanIdent();
      Class<Object> class1 = Object.class;
      jSONScanner0.newCollectionByType(class1);
      jSONScanner0.scanNumber();
      jSONScanner0.matchStat = 602;
      jSONScanner0.scanEnum(class0, symbolTable0, 'o');
      assertEquals(2, jSONScanner0.token());
      
      jSONScanner0.scanDecimal('W');
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "z<*";
      int int0 = 31;
      JSONScanner jSONScanner0 = new JSONScanner("z<*", 31);
      int int1 = 866;
      SymbolTable symbolTable0 = new SymbolTable(32);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.integerValue();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(866, 31, (char[]) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ");
      jSONScanner0.isEOF();
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(1354);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000");
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = '@';
      charArray0[2] = 'k';
      charArray0[3] = ';';
      charArray0[4] = 'f';
      charArray0[5] = '[';
      charArray0[6] = 's';
      charArray0[7] = 'i';
      charArray0[8] = 'Q';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      char[] charArray1 = new char[3];
      charArray1[0] = 'f';
      jSONReaderScanner0.scanFieldBoolean(charArray1);
      charArray1[1] = 'I';
      jSONReaderScanner0.nextToken();
      charArray1[2] = '3';
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      jSONReaderScanner0.scanFieldStringArray(charArray1, class0);
      assertTrue(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("\u0000");
      jSONScanner0.scanFieldDate(charArray1);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2");
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = '{';
      charArray0[2] = '!';
      jSONScanner0.nextToken();
      charArray0[3] = 'B';
      charArray0[4] = 'g';
      charArray0[5] = 'c';
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanString('7');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/@%Uv- Y3Q", 160);
      SymbolTable symbolTable0 = new SymbolTable(160);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.google.common.collect.LinkedListMultimap");
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = ';';
      charArray0[2] = 'Y';
      charArray0[3] = '|';
      charArray0[4] = 'Q';
      charArray0[5] = ' ';
      charArray0[6] = 'w';
      SymbolTable symbolTable0 = new SymbolTable(20);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 58, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'q';
      charArray0[1] = '-';
      charArray0[2] = 'F';
      charArray0[3] = '?';
      charArray0[4] = 's';
      charArray0[5] = 'W';
      charArray0[6] = 'F';
      charArray0[7] = '5';
      charArray0[8] = '~';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1763);
      jSONReaderScanner0.scanDate('|');
      jSONReaderScanner0.scanNumber();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.lookup(linkedList0, (Collection<Locale>) null);
      jSONReaderScanner0.setLocale((Locale) null);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2)DD }=");
      jSONReaderScanner0.scanLong('j');
      jSONReaderScanner0.skipWhitespace();
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      jSONReaderScanner0.ch = 'j';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 3106, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("wmcw6");
      jSONReaderScanner0.getCalendar();
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'H';
      charArray0[2] = 'I';
      charArray0[3] = 'G';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 26);
      assertEquals(0, jSONScanner0.matchStat);
      
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      SymbolTable symbolTable0 = new SymbolTable(922);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'G');
      jSONReaderScanner0.scanInt('I');
      jSONScanner0.resetStringPosition();
      jSONScanner0.putChar('H');
      assertEquals(26, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 114);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("'bKnlM*P.4*q10`)&8");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "'bKnlM*P.4*q10`)&8");
      linkedList0.removeIf(predicate0);
      jSONReaderScanner0.scanFieldString(charArray0);
      linkedList0.offerLast("java.time.");
      linkedList0.pollFirst();
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanStringArray(linkedList0, '<');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$-2SD?` *!muf", (-1840));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.info();
      jSONReaderScanner0.ch = 'e';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-1840), 2668);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '<';
      charArray0[1] = 'u';
      charArray0[2] = 'k';
      charArray0[3] = 'E';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 97);
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".hT_N");
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      charArray0[1] = 'x';
      jSONScanner0.nextToken(26);
      charArray0[2] = '\'';
      charArray0[3] = '1';
      charArray0[4] = '.';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals(25, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("sijQMj", 12);
      jSONReaderScanner0.next();
      JSONScanner jSONScanner0 = new JSONScanner("Nrh!~~P]8", (-1385));
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      jSONReaderScanner0.indexOf('i', 1451);
      charArray0[1] = 'i';
      Locale locale0 = Locale.US;
      Locale.getISOCountries();
      jSONReaderScanner0.setLocale(locale0);
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      jSONReaderScanner0.sp = 12;
      charArray0[5] = 'i';
      char[] charArray1 = new char[6];
      charArray1[0] = 'I';
      charArray1[1] = 'i';
      charArray1[2] = 'I';
      charArray1[3] = 'I';
      charArray1[4] = 'i';
      charArray1[5] = 'I';
      jSONScanner0.scanFieldDouble(charArray1);
      charArray0[6] = 'I';
      jSONScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      jSONReaderScanner0.scanIdent();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = '_';
      charArray0[2] = ',';
      charArray0[3] = 'a';
      charArray0[4] = 'N';
      jSONScanner0.scanFieldFloatArray(charArray0);
      int int0 = jSONScanner0.token();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[23];
      charArray0[0] = 'W';
      charArray0[1] = 'm';
      charArray0[2] = 'C';
      charArray0[4] = '';
      charArray0[4] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3635);
      jSONReaderScanner0.ch = '6';
      jSONReaderScanner0.nextIdent();
      Feature feature0 = Feature.InternFieldNames;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "unclosed.str.lit";
      objectArray0[1] = (Object) "unclosed.str.lit";
      objectArray0[2] = (Object) jSONScanner0;
      objectArray0[3] = (Object) "TreeSet";
      objectArray0[4] = (Object) jSONScanner0;
      objectArray0[5] = (Object) jSONScanner0;
      objectArray0[6] = (Object) "TreeSet";
      jSONScanner0.lexError("unclosed.str.lit", objectArray0);
      jSONScanner0.scanNumber();
      jSONScanner0.scanIdent();
      jSONScanner0.getTimeZone();
      assertEquals(22, jSONScanner0.token());
      
      jSONScanner0.lexError("aqme'm5I7X_", objectArray0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = '';
      charArray0[2] = 'd';
      charArray0[3] = 'i';
      charArray0[4] = ';';
      charArray0[5] = ':';
      charArray0[6] = '[';
      charArray0[7] = 'h';
      charArray0[8] = '/';
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal");
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = 'X';
      charArray0[2] = 'a';
      charArray0[3] = '=';
      charArray0[4] = 'F';
      charArray0[5] = 'Y';
      charArray0[6] = 's';
      charArray0[7] = '1';
      charArray0[8] = 'r';
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.bytesValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "n}N<jQ8YFV";
      JSONScanner jSONScanner0 = new JSONScanner("n}N<jQ8YFV");
      Feature feature0 = Feature.CustomMapDeserializer;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "new";
      int int0 = 68;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 68);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        ZoneOffset.of("new");
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid ID for ZoneOffset, non numeric characters found: new
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("LdgVN");
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = 'O';
      charArray0[2] = 'p';
      char char0 = 'a';
      charArray0[3] = 'a';
      charArray0[4] = '[';
      jSONScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char char0 = 'v';
      char char1 = '2';
      JSONScanner.checkDate('v', 'v', '2', 'f', 'v', '2', 1083, 1083);
      JSONScanner jSONScanner0 = new JSONScanner("e?J1");
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = '2';
      charArray0[2] = 'v';
      charArray0[3] = '2';
      charArray0[4] = 'v';
      jSONScanner0.scanFieldStringArray(charArray0, 1083, (SymbolTable) null);
      jSONScanner0.scanNumber();
      char[] charArray1 = new char[8];
      charArray1[0] = 'f';
      charArray1[1] = 'v';
      charArray1[2] = 'v';
      jSONScanner0.scanFieldDecimal(charArray1);
      charArray1[3] = 'f';
      jSONScanner0.scanFieldFloatArray2(charArray1);
      charArray1[4] = 'f';
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = ']';
      charArray0[2] = '[';
      charArray0[3] = '}';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 45, 85);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-647));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("qBg,)mL.G^/", (-1814));
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONScanner0.config(feature0, true);
      jSONScanner0.skipWhitespace();
      int int0 = 4187;
      jSONScanner0.matchStat = 4187;
      jSONScanner0.scanDouble('#');
      jSONScanner0.info();
      jSONScanner0.next();
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.scanBoolean('#');
      jSONScanner0.getFeatures();
      jSONScanner0.scanBoolean('!');
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((String) null, (-1814));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'K';
      charArray0[4] = 'M';
      charArray0[5] = 'J';
      charArray0[6] = '}';
      charArray0[7] = 'B';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1, 1);
      jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = 'B';
      charArray0[2] = 'a';
      charArray0[3] = '1';
      jSONScanner0.scanDecimal('=');
      charArray0[4] = 'u';
      charArray0[5] = 'P';
      charArray0[6] = 'F';
      jSONScanner0.matchField2(charArray0);
      JSONScanner.checkDate('%', 'a', 'L', 'q', '%', '%', (-2), (-25));
      jSONScanner0.scanDecimal(':');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = 'G';
      charArray0[0] = 'G';
      char char1 = 'O';
      charArray0[1] = 'O';
      charArray0[2] = ']';
      charArray0[3] = 'v';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2407);
      String string0 = "/+#f7u![+3,6[]I&";
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.Period", 57344);
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = 'l';
      charArray0[2] = 'Y';
      jSONReaderScanner0.scanFieldInt(charArray0);
      charArray0[3] = '>';
      char char0 = '*';
      charArray0[4] = '*';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.next();
      jSONReaderScanner0.stringDefaultValue();
      Locale locale0 = Locale.UK;
      locale0.getScript();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale locale1 = Locale.ROOT;
      locale0.getDisplayVariant(locale1);
      // Undeclared exception!
      try { 
        Locale.filter((List<Locale.LanguageRange>) null, (Collection<Locale>) null, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("I");
      int int0 = jSONScanner0.getFeatures();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str.lit", 70);
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = 'y';
      charArray0[2] = 'P';
      charArray0[3] = 'Q';
      charArray0[4] = 'T';
      charArray0[5] = 'Y';
      charArray0[6] = '=';
      charArray0[7] = ' ';
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.matchStat = 70;
      int int0 = jSONScanner0.scanType("KJ{#r9i");
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = 'f';
      charArray0[0] = 'f';
      char char1 = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = '\'';
      int int0 = 120;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 120);
      jSONReaderScanner0.scanNumber();
      char char0 = 'x';
      jSONReaderScanner0.longValue();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("b1wD9jQ.qfeup_o<q'", 66);
      char[] charArray0 = new char[2];
      jSONScanner0.putChar('d');
      assertEquals(0, jSONScanner0.matchStat);
      
      charArray0[0] = 'd';
      jSONScanner0.scanLong('d');
      jSONScanner0.pos = 66;
      charArray0[1] = '!';
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.skipWhitespace();
      jSONScanner0.tokenName();
      jSONScanner0.stringVal();
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(66, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan true error");
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = 'b';
      charArray0[2] = 'X';
      charArray0[3] = '^';
      charArray0[4] = '[';
      charArray0[5] = 'd';
      charArray0[6] = '_';
      jSONScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = 'U';
      charArray0[2] = ';';
      charArray0[3] = 'Z';
      charArray0[4] = '&';
      charArray0[5] = 'b';
      charArray0[6] = '8';
      int int0 = 40;
      int int1 = 108;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 40, 108);
      jSONReaderScanner0.scanDecimal('i');
      jSONReaderScanner0.scanFloat('l');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-180));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - -, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";ZjQnZde5+Oyl?<");
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = '.';
      jSONReaderScanner0.scanFieldString(charArray0);
      int int0 = (-1351);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-1351), 1077);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("BLVMnS");
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.add("BLVMnS");
      hashSet0.add((String) null);
      char char0 = 'N';
      jSONScanner0.scanStringArray(hashSet0, 'N');
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined", 32);
      jSONScanner0.scanISO8601DateIfMatch(true);
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      JSONLexerBase.readString(charArray0, 0);
      jSONScanner0.nextToken();
      char[] charArray1 = null;
      int int0 = 1167;
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((char[]) null, 0, 1167);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1196);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.matchStat = 58;
      Feature feature0 = Feature.CustomMapDeserializer;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.info();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "WmCW6";
      int int0 = 58;
      JSONScanner jSONScanner0 = new JSONScanner("WmCW6", 58);
      SymbolTable symbolTable0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 513;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 513);
      jSONReaderScanner0.nextIdent();
      int int1 = (-2798);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1916));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan false error");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDate(';');
      jSONScanner0.sp = (-1025);
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      jSONScanner0.getCalendar();
      boolean boolean0 = jSONScanner0.scanBoolean('3');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "undefined";
      int int0 = 90;
      JSONScanner jSONScanner0 = new JSONScanner("undefined", 90);
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      jSONScanner0.bytesValue();
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('`');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match ` - \u001A, info : pos 9, json : undefined
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]s38|ym'Djr_c`", 65);
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = ',';
      jSONScanner0.scanString(',');
      charArray0[2] = 'k';
      charArray0[3] = 'i';
      charArray0[4] = 'G';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, '-');
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4v>p&B%`al", 4);
      jSONReaderScanner0.stringVal();
      assertEquals(4, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("bbX(yU(z_]}bS'%?(");
      jSONScanner0.stringVal();
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = '#';
      charArray0[2] = 'F';
      charArray0[3] = 'K';
      jSONScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. b
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("<6K&L#T8e@5ykkG[", 1053);
      jSONReaderScanner0.getLocale();
      jSONReaderScanner0.nextToken(6);
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = 'd';
      charArray0[2] = '4';
      charArray0[3] = '{';
      charArray0[4] = 'y';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 65536);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Cr2", 68);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - C, info : pos 0, json : Cr2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("waDRi5\"v");
      jSONReaderScanner0.getTimeZone();
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "not support : ";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support : ");
      jSONReaderScanner0.putChar('x');
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("y");
      jSONReaderScanner0.scanUUID('\"');
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      charArray0[0] = 'G';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.close();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("UKD@G4/S.3Y5p");
      char char0 = 'e';
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = '>';
      charArray0[2] = '_';
      charArray0[3] = 'D';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 289);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "EOF error";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EOF error");
      jSONReaderScanner0.stringDefaultValue = "EOF error";
      jSONReaderScanner0.pos = 47;
      jSONReaderScanner0.scanInt('@');
      jSONReaderScanner0.scanBoolean('@');
      char[] charArray0 = null;
      jSONReaderScanner0.scanBoolean(')');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = 'L';
      charArray0[2] = 'd';
      charArray0[3] = '=';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 5041);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1218));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("invalid comment", (-500));
      jSONScanner0.isRef();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("java.time.Period");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = '7';
      charArray0[2] = 'W';
      charArray0[3] = '{';
      charArray0[4] = 'X';
      charArray0[5] = '5';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 1342);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g");
      jSONScanner0.isBlankInput();
      int int0 = (-5811);
      char[] charArray0 = new char[1];
      char char0 = 'X';
      charArray0[0] = 'X';
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo((-5811), (-5811), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal getter", 26376);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONScanner0.config(feature0, true);
      SymbolTable symbolTable0 = new SymbolTable(26376);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '\'');
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('d', '6', '6', 'D', '|', '1');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = 'X';
      charArray0[0] = 'X';
      charArray0[1] = '=';
      charArray0[2] = 'e';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2555);
      jSONReaderScanner0.isBlankInput();
      int int0 = 31;
      int int1 = (-255457264);
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONReaderScanner0.scanStringArray(set0, '=');
      jSONReaderScanner0.setToken((-255457264));
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('e');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match e - X, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 7;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("g", 7);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^[zwm4u>-M7@");
      jSONReaderScanner0.eofPos = (-3023);
      jSONReaderScanner0.scanDecimal('V');
      jSONReaderScanner0.scanInt('_');
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[7];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = 'V';
      charArray0[3] = 'V';
      charArray0[4] = 'V';
      charArray0[5] = '_';
      charArray0[6] = '_';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("BJ*NhG0;[McCV:", 7);
      char[] charArray0 = new char[0];
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      char char0 = '';
      jSONScanner0.scanStringArray(set0, '');
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(7, 7, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '#';
      charArray0[2] = '1';
      charArray0[3] = 't';
      charArray0[4] = ']';
      charArray0[5] = '#';
      charArray0[6] = 'v';
      charArray0[7] = 'V';
      charArray0[8] = 'g';
      int int0 = 1241;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1241, 1241);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.nextToken(34);
      jSONReaderScanner0.scanFloat('t');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.bytesValue();
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'F';
      charArray0[1] = '=';
      charArray0[2] = 'B';
      charArray0[3] = '*';
      charArray0[4] = 'S';
      charArray0[5] = 'C';
      jSONScanner0.scanFieldString(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = '$';
      charArray0[2] = 'N';
      charArray0[3] = 'h';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 65279);
      jSONReaderScanner0.features = 65279;
      jSONReaderScanner0.scanIdent();
      Class<String> class0 = String.class;
      jSONReaderScanner0.integerValue();
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      jSONReaderScanner0.calendar = calendar0;
      jSONReaderScanner0.putChar('4');
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.charAt(65279);
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.info();
      assertEquals('$', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=`vUy*15%q$");
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = 'k';
      charArray0[2] = 'M';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'W';
      charArray0[1] = 'm';
      charArray0[2] = 'C';
      charArray0[3] = '';
      charArray0[4] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3635);
      jSONReaderScanner0.ch = 'R';
      jSONReaderScanner0.nextIdent();
      assertEquals('', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v[w&-*");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = '?';
      charArray0[2] = '2';
      charArray0[3] = 'e';
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.pos();
      Locale locale0 = Locale.GERMANY;
      locale0.getExtension('D');
      locale0.getScript();
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = 'D';
      charArray0[2] = 'D';
      charArray0[3] = 'D';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.setLocale(locale0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('z');
      jSONReaderScanner0.resetStringPosition();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '#';
      charArray0[1] = 'C';
      charArray0[2] = '1';
      charArray0[3] = 't';
      charArray0[4] = ']';
      charArray0[5] = '#';
      charArray0[6] = 'v';
      charArray0[7] = 'V';
      charArray0[8] = 'g';
      int int0 = 1241;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1241, 1241);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      int int1 = 34;
      jSONReaderScanner0.nextToken(34);
      jSONReaderScanner0.scanFloat('t');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '#';
      charArray0[1] = 'C';
      charArray0[2] = '1';
      charArray0[3] = 't';
      charArray0[4] = ']';
      charArray0[5] = '#';
      charArray0[6] = 'v';
      charArray0[7] = 'V';
      charArray0[8] = 'g';
      int int0 = 1241;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1241, 1241);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      int int1 = 34;
      jSONReaderScanner0.nextToken(34);
      jSONReaderScanner0.scanFloat('t');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      String string0 = "";
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("?GxWP,cp=9)rp3&5");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "SP?/r";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("SP?/r", 2527);
      jSONReaderScanner0.stringVal();
      SymbolTable symbolTable0 = new SymbolTable(2527);
      char char0 = '6';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '6');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      charArray0[1] = '/';
      charArray0[2] = 'm';
      charArray0[3] = '=';
      charArray0[4] = 'k';
      charArray0[5] = 'j';
      charArray0[6] = 'X';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      jSONScanner0.config(feature0, true);
      assertEquals(2048, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@type");
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. t
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.pos = (-1914);
      jSONReaderScanner0.matchStat();
      jSONReaderScanner0.getCurrent();
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanLong('\u0000');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("parse number key error", (-1529));
      jSONScanner0.scanISO8601DateIfMatch();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanFloat('=');
      jSONScanner0.matchStat();
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.util.Locale$LanguageRange
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 65;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 65);
      jSONReaderScanner0.nextToken(11);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-977), 65);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[3] = 't';
      charArray0[4] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 117);
      jSONReaderScanner0.scanNumber();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 1708;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("RC@M&", 1708);
      jSONReaderScanner0.nextToken(1708);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(3664, (-2147483647));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2147483647
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'K';
      charArray0[1] = '[';
      charArray0[2] = '4';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 4, (-2431));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1hBK~xd#9lP", (-1791239333));
      jSONReaderScanner0.subString(2, 1615);
      assertEquals((-1791239333), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = '6';
      charArray0[2] = '~';
      charArray0[3] = 'Q';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 12);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, 127);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }
}
