/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:25:05 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.EigenDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositor_ESTest extends EigenDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RowMajorSparseMatrix.identity(10);
      Matrix matrix0 = Matrix.unit(2759, 10);
      EigenDecompositor eigenDecompositor0 = null;
      try {
        eigenDecompositor0 = new EigenDecompositor(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2647.1;
      doubleArray0[3] = 2647.1;
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = 0.0;
      doubleArray1[1] = 595.7455924368154;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(6);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(columnMajorSparseMatrix0);
      eigenDecompositor0.matrix = (Matrix) columnMajorSparseMatrix0;
      eigenDecompositor0.decompose();
      Random.setNextRandom(6);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.zero(221, 30);
      eigenDecompositor0.matrix = (Matrix) columnMajorSparseMatrix1;
      // Undeclared exception!
      try { 
        eigenDecompositor0.decompose();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't decompose rectangle matrix
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(3, 3);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(744L);
      DenseMatrix denseMatrix0 = DenseMatrix.random(5, 5, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor0.decompose();
      Random.setNextRandom(262);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(10);
      DenseMatrix denseMatrix0 = DenseMatrix.random(10, 10, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor0.decompose();
      MockRandom mockRandom1 = new MockRandom(10);
      int int0 = 16;
      // Undeclared exception!
      DenseMatrix.random(2258, 16, mockRandom1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2674L));
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(6, 6, mockRandom0);
      assertNotNull(denseMatrix0);
      assertEquals(6, denseMatrix0.columns());
      assertEquals(6, denseMatrix0.rows());
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertNotNull(eigenDecompositor0);
      assertEquals(6, denseMatrix0.columns());
      assertEquals(6, denseMatrix0.rows());
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(6, denseMatrix0.columns());
      assertEquals(6, denseMatrix0.rows());
      
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      RowMajorSparseMatrix.from1DArray(1173651183, 6, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(6);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(6, 6, mockRandom0);
      assertNotNull(denseMatrix0);
      assertEquals(6, denseMatrix0.columns());
      assertEquals(6, denseMatrix0.rows());
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertNotNull(eigenDecompositor0);
      assertEquals(6, denseMatrix0.columns());
      assertEquals(6, denseMatrix0.rows());
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(6, denseMatrix0.columns());
      assertEquals(6, denseMatrix0.rows());
      
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      assertNotNull(sparseVector0);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8);
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(8, 8, mockRandom0);
      assertNotNull(denseMatrix0);
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertNotNull(eigenDecompositor0);
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
      
      MockRandom mockRandom1 = new MockRandom(8);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      Random.setNextRandom(896612725);
      Random.setNextRandom(2);
      Random.setNextRandom(1417);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 8;
      MockRandom mockRandom0 = new MockRandom(8);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(8, 8, mockRandom0);
      assertNotNull(denseMatrix0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertNotNull(eigenDecompositor0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
      
      double double1 = mockRandom0.nextGaussian();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.5, double1, 0.01);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
      
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      boolean boolean0 = eigenDecompositor0.applicableTo(denseMatrix0);
      assertTrue(boolean0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
      
      // Undeclared exception!
      try { 
        SparseVector.fromMatrixMarket("HVys0k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2674L));
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(9, 9, mockRandom0);
      assertNotNull(denseMatrix0);
      assertEquals(9, denseMatrix0.rows());
      assertEquals(9, denseMatrix0.columns());
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertNotNull(eigenDecompositor0);
      assertEquals(9, denseMatrix0.rows());
      assertEquals(9, denseMatrix0.columns());
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(9, denseMatrix0.rows());
      assertEquals(9, denseMatrix0.columns());
      
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.random(1962, 9, (double) 1962, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(8, 8, mockRandom0);
      assertNotNull(denseMatrix0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertNotNull(eigenDecompositor0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
      
      EigenDecompositor eigenDecompositor1 = new EigenDecompositor(denseMatrix0);
      assertFalse(eigenDecompositor1.equals((Object)eigenDecompositor0));
      assertNotNull(eigenDecompositor1);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertFalse(eigenDecompositor0.equals((Object)eigenDecompositor1));
      assertNotSame(eigenDecompositor0, eigenDecompositor1);
      assertNotNull(matrixArray0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
      
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      // Undeclared exception!
      try { 
        SparseVector.fromCSV("HVys0k");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.random(6, 6, 0.0, (java.util.Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertEquals(0.6, rowMajorSparseMatrix0.max(), 0.01);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)rowMajorSparseMatrix0.transpose();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotNull(cCSMatrix0);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertEquals(0.6, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.6, cCSMatrix0.max(), 0.01);
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6, cCSMatrix0.rows());
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(cCSMatrix0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(eigenDecompositor0);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertEquals(0.6, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.6, cCSMatrix0.max(), 0.01);
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6, cCSMatrix0.rows());
      
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }
}
