/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:10:45 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.ReturnaddressType;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong((-2082408397));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      int int0 = (-308);
      int int1 = 3058;
      ConstantString constantString0 = new ConstantString(3058);
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong((-2082408397));
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(128, 256);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(256, 256);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      int int0 = constantPoolGen0.addInteger(256);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger(260);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = new ConstantDouble(1393.4792676352004);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantFloat constantFloat0 = new ConstantFloat(260);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Character.valueOf('L');
      Character character0 = new Character('L');
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, character0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("fconst_1#fstore#YEpVkM>s3Hi(GXL%;w-mtj`7V~dEXex[X", "fconst_1#fstore#YEpVkM>s3Hi(GXL%;w-mtj`7V~dEXex[X", "fconst_1#fstore#YEpVkM>s3Hi(GXL%;w-mtj`7V~dEXex[X");
      int int0 = constantPoolGen0.addInteger(4);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(0, 0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("EXaD%Bd.Ky89^okyO\"");
      Constant[] constantArray0 = new Constant[2];
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen1.lookupFieldref("", "EXaD%Bd.Ky89^okyO\"", "EXaD%Bd.Ky89^okyO\"");
      assertEquals(2, constantPoolGen1.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantClass constantClass0 = new ConstantClass(1754);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1754, 29);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantFloat constantFloat0 = new ConstantFloat(29);
      constantFloat0.clone();
      constantArray0[2] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantArray0[1], constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = 1754, reference_index = 29)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantInteger constantInteger0 = new ConstantInteger(1367);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(3449, 1367);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-1049);
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref("goto", "M8{jw0*5=96:vVqQ%bK", "goto");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.lookupClass("short:9&Pj:.MLdKK:6H`30*Lx");
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      int int0 = constantPoolGen0.addConstant(constantDouble1, constantPoolGen0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1574), (-1574));
      ConstantString constantString0 = new ConstantString((-1574));
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1574
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(3359);
      int int0 = constantPoolGen0.addFloat(1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      int int0 = Pattern.DOTALL;
      constantPoolGen0.addInterfaceMethodref("YEpVkM>s3Hi(GXL", "YEpVkM>s3Hi(GXL", "fconst_1");
      constantPoolGen0.addClass("YEpVkM>s3Hi(GXL");
      constantPoolGen0.lookupInteger(32);
      assertEquals(6, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("8'1v2dGk;~");
      ConstantClass constantClass0 = new ConstantClass(400);
      constantArray0[2] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 400
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      int int0 = (-1075);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = null;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      constantPoolGen0.addFloat((-1075));
      PUSH pUSH0 = new PUSH(constantPoolGen0, 455.6495F);
      ConstantPoolGen constantPoolGen2 = null;
      try {
        constantPoolGen2 = new ConstantPoolGen((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantString constantString0 = new ConstantString((-2021161065));
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(", reference_index = ");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("bvgVjAza:$ ");
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_1);
      constantUtf8_2.clone();
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantUtf8_1;
      constantArray0[1] = (Constant) constantUtf8_1;
      constantArray0[4] = (Constant) constantUtf8_1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-562), 3546);
      constantArray0[6] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -562
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.CASE_INSENSITIVE;
      constantPoolGen0.lookupFloat(0.0F);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1), (-1));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("fconst_1");
      constantUtf8_0.toString();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupDouble(0.0);
      int int0 = Character.MAX_RADIX;
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen0);
      int int1 = Character.BYTES;
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(1359);
      constantPoolGen0.lookupInteger(1);
      constantPoolGen0.size = (-1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref("g!*&Wg|eQ", "g!*&Wg|eQ", "g!*&Wg|eQ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.lookupDouble(2);
      NEW nEW0 = new NEW();
      // Undeclared exception!
      try { 
        nEW0.getLoadClassType(constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected class `CONSTANT_Class' at index 0 and got CONSTANT_Double[6](bytes = 0.0)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("z;6,TW]}6Cn");
      int int0 = constantPoolGen0.index;
      constantPoolGen0.addDouble((-0.9713661256767985));
      ConstantString constantString0 = new ConstantString(3);
      ConstantString constantString1 = new ConstantString(2);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("z;6,TW]}6Cn");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantUtf8_1;
      constantArray0[2] = (Constant) constantString0;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_1);
      constantArray0[3] = (Constant) constantUtf8_1;
      constantArray0[5] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int1 = constantPoolGen0.addLong(3);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-1L));
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "? super ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      constantPoolGen0.adjustSize();
      constantPoolGen0.lookupString("uFoS");
      constantPoolGen0.addDouble(1407.55);
      constantPoolGen0.lookupDouble(1);
      int int0 = constantPoolGen0.lookupNameAndType("W", "? super ");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1118), 3);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong(4659028790096166912L);
      constantPoolGen0.lookupLong(3);
      int int0 = constantPoolGen0.getSize();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(0.0F);
      constantPoolGen0.lookupFloat(0.0F);
      constantPoolGen0.lookupString("_oR-6}%WU5V");
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addLong((-2476L));
      constantPoolGen0.lookupFieldref("ConstantValue", "_oR-6}%WU5V", "y");
      constantPoolGen0.lookupNameAndType("ConstantValue", "ConstantValue");
      constantPoolGen0.addLong((-2476L));
      constantPoolGen0.lookupDouble(1);
      constantPoolGen0.toString();
      constantPoolGen0.addUtf8("_oR-6}%WU5V");
      DASTORE dASTORE0 = (DASTORE)InstructionConstants.DASTORE;
      InstructionHandle instructionHandle0 = new InstructionHandle(dASTORE0);
      ReturnaddressType returnaddressType0 = new ReturnaddressType(instructionHandle0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ConstantValue";
      stringArray0[1] = "ConstantValue";
      stringArray0[2] = "y";
      stringArray0[3] = "_oR-6}%WU5V";
      stringArray0[4] = "_oR-6}%WU5V";
      stringArray0[5] = "L+";
      stringArray0[6] = "y";
      String string0 = "java.lang.Short%q7E#Z%jm\"NB#C*xhM/hT(_'/F\"";
      String string1 = "]VaC)i#[JJZXp";
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList((CompoundInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantString constantString0 = new ConstantString((-2005));
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble((-2005));
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2005
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[18];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1080), (-1080));
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("P(43\"", "P(43\"", "P(43\"");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("P(43\"");
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("%0tOD/~!:<X@W", "P(43\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"P(43\"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1075), (-1075));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      constantMethodHandle0.copy();
      ConstantDouble constantDouble0 = new ConstantDouble((-1075));
      constantArray0[2] = (Constant) constantDouble0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1075), (-1075));
      ConstantInteger constantInteger0 = new ConstantInteger((-983));
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("' metY/J");
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupDouble((-1075));
      constantPoolGen0.addInterfaceMethodref("' metY/J", "' metY/J", "' metY/J");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.toString();
      constantPoolGen1.addString("' metY/J");
      int int0 = constantPoolGen0.addString("' metY/J");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Long.BYTES;
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(8, 8);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      constantPoolGen1.getFinalConstantPool();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantMethodref0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantClass constantClass0 = new ConstantClass(1754);
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1754, 29);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantFloat constantFloat0 = new ConstantFloat(29);
      ConstantDouble constantDouble0 = new ConstantDouble(2101.913);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantDouble1.setBytes(2101.913);
      constantDouble1.clone();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1754
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.lookupFieldref("q6q)0Bv!q", "Q2=n\"^|\"d}.j.8", ":");
      constantPool0.setConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.size = (-1);
      ConstantInteger constantInteger0 = new ConstantInteger((-1));
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPool0.setConstantPool(constantArray0);
      constantPoolGen0.lookupFieldref("\"", "q6q)0Bv!q", "jav.lang.hort");
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen2);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen2);
      assertEquals(2, constantPoolGen0.getSize());
      
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen();
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      int int1 = constantPoolGen2.lookupInteger((-1));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getSize();
      constantPoolGen0.addDouble(1);
      ObjectType objectType0 = Type.STRING;
      constantPoolGen0.addClass(objectType0);
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SIPUSH sIPUSH0 = new SIPUSH();
      ConstantInteger constantInteger0 = new ConstantInteger((-1));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      float float0 = 0.75F;
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.75F);
      int int0 = Double.MAX_EXPONENT;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(3529, (-200));
      constantPoolGen0.lookupInteger(1638);
      constantPoolGen0.addFloat(0.75F);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2013265918), 1638);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.lookupDouble((-1787.9927904225412));
      // Undeclared exception!
      try { 
        constantPoolGen1.getConstant(1023);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1023
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(246, 246);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-1049);
      // Undeclared exception!
      try { 
        constantPoolGen0.addDouble(2248.70993688);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SIPUSH sIPUSH0 = new SIPUSH();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPool0.copy();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2160, (-374));
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2160
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2003), (-2003));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantString constantString0 = new ConstantString((-2003));
      FCMPG fCMPG0 = new FCMPG();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFieldref("rW2XXV7OF{*Zj]SZI.", "rW2XXV7OF{*Zj]SZI.", "~uH65=a'IB&)6:n:g~a");
      constantPoolGen0.addDouble((-2003));
      constantPoolGen0.addDouble(1.0);
      constantPoolGen0.addDouble((-2003));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      constantPoolGen0.addInteger(1);
      constantPoolGen0.lookupFloat(0.0F);
      int int0 = Float.MIN_EXPONENT;
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType("0B8~KCOE", 2984);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: 2984
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantDouble constantDouble0 = new ConstantDouble(0.966599137917034);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.addDouble((-1072.331));
      ConstantLong constantLong0 = new ConstantLong(1L);
      ConstantLong constantLong1 = new ConstantLong((-1075));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.addConstant(constantLong0, constantPoolGen0);
      constantPoolGen1.lookupInteger(151);
      constantPoolGen0.addFloat(383);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(151, (-1));
      GOTO_W gOTO_W0 = new GOTO_W();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO_W0);
      DADD dADD0 = new DADD();
      Type type0 = dADD0.getType(constantPoolGen0);
      MethodGen methodGen0 = new MethodGen(1578, type0, type0.NO_ARGS, (String[]) null, "", "The array of prefixes must not be null", instructionList0, constantPoolGen0);
      constantPoolGen0.lookupInterfaceMethodref(methodGen0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(223, 151);
      constantPoolGen1.setConstant(1, constantLong0);
      constantPoolGen0.toString();
      assertEquals(9, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantInteger constantInteger0 = new ConstantInteger(94);
      ConstantInteger constantInteger1 = new ConstantInteger((-5246));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addUtf8("cd#<m");
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantInteger constantInteger0 = new ConstantInteger(2);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 2253.54F);
      constantPoolGen0.addFieldref("::/// (trMnc(ted)", "^X&j\"nJ=w8`+KM7/=m", "xR@(\"rjX`J &ury>LU");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-3574), 7);
      ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      LocalVariables localVariables0 = null;
      try {
        localVariables0 = new LocalVariables((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantFloat constantFloat0 = new ConstantFloat(2.0F);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantFloat0, constantPoolGen1);
      constantPoolGen0.lookupInterfaceMethodref((String) null, (String) null, (String) null);
      int int0 = constantPoolGen0.addFloat((-1));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1431655764), (-1431655764));
      ConstantFieldref constantFieldref1 = new ConstantFieldref((-1431655764), (-1431655764));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addLong((-1431655764));
      constantPoolGen1.addFieldref("", "", "");
      constantPoolGen1.addInterfaceMethodref("", "", "");
      assertEquals(6, constantPoolGen1.getSize());
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("");
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen2.lookupMethodref("", "", "");
      assertEquals(1, constantPoolGen2.getSize());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.lookupFieldref("fIu", "fIu", "");
      ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.addString("a6Lm>Y");
      constantPoolGen0.addInterfaceMethodref("", "", "");
      constantPool1.toString();
      constantPoolGen1.addString("a6Lm>Y");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("java.lang.Short");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("a6Lm>Y");
      // Undeclared exception!
      try { 
        constantPoolGen0.getConstant((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("Unexpected constant type: ", "Unexpected constant type: ", "");
      constantPoolGen0.lookupMethodref("Unexpected constant type: ", "Unexpected constant type: ", "Unexpected constant type: ");
      constantPoolGen0.addString("Unexpected constant type: ");
      int int0 = Pattern.COMMENTS;
      int int1 = constantPoolGen0.lookupString("Unexpected constant type: ");
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(6, int1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      FileSystemHandling.createFolder(evoSuiteFile0);
      constantPoolGen0.lookupFieldref("**", "java.layg.Short", "**");
      constantPoolGen0.addMethodref("java.layg.Short", "java.layg.Short", "java.layg.Short");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("**");
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      Constant constant0 = constantPoolGen1.getConstant(5);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1), 8);
      constantPoolGen0.size = 162;
      MockPrintStream mockPrintStream0 = new MockPrintStream("+");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantPool0.dump(dataOutputStream0);
      constantPoolGen1.addConstant(constant0, constantPoolGen0);
      int int0 = Double.SIZE;
      constantPool0.copy();
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      constantPoolGen0.lookupString("java.layg.Short");
      int int1 = Pattern.LITERAL;
      assertEquals(16, int1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = Long.BYTES;
      constantPoolGen0.addMethodref("java.lang.Short", "fconst_1#fstore#YEpVkM>s3Hi(GXL%;w-mtj`7V~dEXex[X", "java.lang.Short");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("fconst_1#fstore#YEpVkM>s3Hi(GXL%;w-mtj`7V~dEXex[X");
      Constant constant0 = constantPoolGen0.getConstant(11);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(26, 26);
      ConstantFloat constantFloat0 = new ConstantFloat((-3106.408F));
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      ConstantDouble constantDouble1 = new ConstantDouble(8);
      ConstantDouble constantDouble2 = new ConstantDouble(constantDouble1);
      ConstantDouble constantDouble3 = new ConstantDouble((-1.0));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen2.size = (-3315);
      // Undeclared exception!
      try { 
        constantPoolGen2.addConstant(constant0, constantPoolGen0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1080), (-1080));
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addInterfaceMethodref("javalang.Short", "", "javalang.Short");
      constantPoolGen0.getFinalConstantPool();
      Constant constant0 = constantPoolGen0.getConstant(11);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantMethodHandle0.clone();
      JavaClass.getComparator();
      constantPoolGen0.addString("javalang.Short");
      int int0 = (-1);
      constantPoolGen1.addInteger((-1));
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantMethodHandle0.setReferenceKind(259);
      int int1 = Character.MAX_CODE_POINT;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(11, 12);
      constantPoolGen0.addConstant(constant0, constantPoolGen0);
      int int2 = Member.PUBLIC;
      constantPoolGen2.addUtf8("javalang.Short");
      Method method0 = new Method();
      constantPoolGen2.addString("f6Pnack%]Yz8");
      // Undeclared exception!
      try { 
        constantPoolGen2.addConstant(constant0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
}
