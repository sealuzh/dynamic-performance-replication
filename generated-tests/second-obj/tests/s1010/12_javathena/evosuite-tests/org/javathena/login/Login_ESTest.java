/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:19:50 GMT 2018
 */

package org.javathena.login;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import javolution.util.FastComparator;
import javolution.util.FastMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.login.Login;
import org.javathena.login.UserManagement;
import org.javathena.login.parse.FromAdmin;
import org.javathena.login.parse.FromChar;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Login_ESTest extends Login_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Login login0 = new Login();
      login0.getOut();
      login0.setOut((PrintWriter) null);
      assertEquals(0, login0.getAuth_max());
      
      login0.do_initXML();
      int int0 = login0.check_ipmask(4000, "2%63;QqrSN&K8^_6/(");
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = Login.mmo_auth_initXML();
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      login_ConnectionListener0.close();
      Login.mmo_auth_syncXML();
      int int1 = login0.check_ipmask(9, "-Bs_u");
      assertTrue(int1 == int0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Login.logUnknownPackets((Socket_data) null);
      IDBManagementLogin iDBManagementLogin0 = Login.getDbManagemtType();
      assertNull(iDBManagementLogin0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.close();
      login_ConnectionListener0.run();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Login login0 = new Login();
      login0.save_config_in_log();
      int int0 = login0.getAuth_max();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Login login0 = new Login();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      // Undeclared exception!
      try { 
        login_Timer_interval_check_auth_sync0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Login login0 = new Login();
      MySQLConfig.setLogin_server_ip("SxBP~[p_4{I");
      ConfigurationManagement.setAccess_deny("conf/subnet_athena.conf");
      login0.setAuth_max((-1003));
      login0.do_initTXT();
      assertEquals((-1003), login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Login login0 = new Login();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("conf/subnet_athena.conf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      InetAddress inetAddress0 = MockInetAddress.getByName("end");
      login0.check_ip(inetAddress0);
      Login.mmo_auth_syncXML();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Login login0 = new Login();
      int[] intArray0 = new int[7];
      intArray0[0] = 30;
      intArray0[1] = 191;
      intArray0[2] = 100000000;
      intArray0[3] = 50;
      // Undeclared exception!
      try { 
        Login.version((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Login.getPASSWORDENC();
      Login login0 = new Login();
      ConfigurationManagement.setAuth_before_save_file(2000000);
      login0.getAuth_num();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      // Undeclared exception!
      try { 
        Login.login_log("conf/subnet_athena.conf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)1;
      Login.showTab(byteArray0);
      assertArrayEquals(new byte[] {(byte)93, (byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Login.display_title();
      Login login0 = new Login();
      login0.getServer_fd();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      FromClient fromClient0 = new FromClient();
      Socket_data socket_data0 = new Socket_data(mockSocket0, fromClient0);
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Login login0 = new Login();
      MySQLConfig.setLogin_server_ip("conf/subnet_athena.conf");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(10);
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      FromChar fromChar0 = new FromChar();
      Socket_data socket_data1 = new Socket_data(mockSocket0, fromChar0);
      Login login1 = null;
      // Undeclared exception!
      try { 
        login0.parse_admin(2208, socket_data0, (Login) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.thoughtworks.xstream.converters.collections.TreeSetConverter");
      Login.setPASSWORDENC(2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Login.login_log("$v9W%Qp*");
      Login login0 = new Login();
      int int0 = 101;
      MockFile mockFile0 = new MockFile("conf/subnet_athena.conf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Login.loginLogOut = (PrintWriter) mockPrintWriter0;
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("conf/subnet_athena.conf", 101);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@46bf34f2
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("warning_45", 10002);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Random.setNextRandom(961);
      Login login0 = new Login();
      Login.mmo_auth_syncXML();
      login0.do_initTXT();
      byte[] byteArray0 = new byte[0];
      login0.parse_console("big-int");
      Login.showTab(byteArray0);
      Socket_data socket_data0 = new Socket_data((Socket) null);
      // Undeclared exception!
      try { 
        socket_data0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Login login0 = new Login();
      MySQLConfig.setLogin_server_ip("conf/subnet_athena.conf");
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      Auth_data auth_data0 = mock(Auth_data.class, new ViolatedAssumptionAnswer());
      doReturn(50, 2000000).when(auth_data0).getAccount_id();
      doReturn("conf/subnet_athena.conf").when(auth_data0).getUserid();
      doReturn((String) null).when(auth_data0).toString();
      fastMap0.put((Integer) 2000000, auth_data0);
      UserManagement.setAuth_dats(fastMap0);
      login0.do_initTXT();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("big-int");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      Login.logUnknownPackets(socket_data0);
      Login login0 = new Login();
      ConfigurationManagement.setAccess_allow("conf/subnet_athena.conf");
      socket_data0.setName((String) null);
      login0.do_initXML();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2200);
      int[] intArray0 = new int[9];
      intArray0[1] = 100000000;
      intArray0[2] = 30;
      intArray0[3] = 2;
      intArray0[4] = 2000000;
      intArray0[5] = 100000000;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(50);
      FromClient fromClient0 = new FromClient();
      Socket_data socket_data1 = new Socket_data(mockSocket0, fromClient0);
      Socket_data socket_data2 = new Socket_data(mockSocket0, fromClient0);
      Login.logUnknownPackets(socket_data2);
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      boolean boolean0 = login0.yesNoOnOffToBoolean("YES");
      assertTrue(boolean0);
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Login login0 = new Login();
      MySQLConfig.setLogin_server_ip("conf/subnet_athena.conf");
      ConfigurationManagement.setAccess_deny("rrFz'Eh&");
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      Integer integer0 = new Integer(1);
      Auth_data auth_data0 = mock(Auth_data.class, new ViolatedAssumptionAnswer());
      doReturn(30, integer0).when(auth_data0).getAccount_id();
      doReturn("rrFz'Eh&").when(auth_data0).getUserid();
      fastMap0.put((Integer) 2000000, auth_data0);
      UserManagement.setAuth_dats(fastMap0);
      login0.setAuth_max(3648);
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      // Undeclared exception!
      try { 
        Login.codingKey(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      Login.logUnknownPackets(socket_data0);
      ConfigurationManagement.setAccess_deny(" using TextFormat.setInstance(Class, TextFormat) static method");
      Random.setNextRandom(11);
      Login login0 = new Login();
      Login.mmo_auth_syncXML();
      login0.do_initTXT();
      // Undeclared exception!
      try { 
        login0.parse_console("exit");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("warning_45", 10002);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String string0 = "rrFz'Eh&";
      ConfigurationManagement.setAccess_deny("rrFz'Eh&");
      Random.setNextRandom(112);
      Login login0 = new Login();
      Login.mmo_auth_syncXML();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initXML();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  : Content is not allowed in prolog.
         //
         verifyException("com.thoughtworks.xstream.io.xml.DomDriver", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncXML();
      Login.mmo_auth_syncXML();
      login0.do_initTXT();
      login0.parse_console("A6");
      FromAdmin fromAdmin0 = new FromAdmin();
      login0.parse_console("conf/subnet_athena.conf");
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      FastComparator<Object> fastComparator0 = (FastComparator<Object>) mock(FastComparator.class, new ViolatedAssumptionAnswer());
      FastMap<Integer, Auth_data> fastMap1 = new FastMap<Integer, Auth_data>(2);
      fastMap1.setKeyComparator(fastComparator0);
      Integer integer0 = new Integer(2000000);
      Login.display_title();
      MockSocket mockSocket0 = new MockSocket();
      Socket_data socket_data0 = new Socket_data((Socket) null);
      FromAdmin fromAdmin1 = new FromAdmin();
      login0.check_auth_sync();
      Login.mmo_auth_syncTXT();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncXML();
      Login.mmo_auth_syncXML();
      login0.do_initTXT();
      Socket_data socket_data0 = new Socket_data((Socket) null);
      FromAdmin fromAdmin0 = new FromAdmin();
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      fastMap0.setShared(false);
      Integer integer0 = new Integer((-99823863));
      Integer integer1 = new Integer((-834));
      fastMap0.put(integer1, (Auth_data) null);
      // Undeclared exception!
      try { 
        UserManagement.setAuth_dats(fastMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Login.getDbManagemtType();
      Login login0 = new Login();
      login0.do_final();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ").0nSwT>ULwN=~f=5");
      login0.getLog_fp();
      login0.setAuth_max((-1456416095));
      Login.mmo_auth_initXML();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      login0.check_ipmask(0, "CONF/SUBNET_ATHENA.CONF");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Login login0 = new Login();
      ConfigurationManagement.lesslessAuth_before_save_file();
      Login.mmo_auth_syncXML();
      Login.mmo_auth_syncXML();
      login0.do_initTXT();
      login0.parse_console("status");
      Socket_data socket_data0 = new Socket_data((Socket) null);
      FromAdmin fromAdmin0 = new FromAdmin();
      login0.parse_console("A6");
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      FastMap<Integer, Auth_data> fastMap1 = new FastMap<Integer, Auth_data>();
      FastMap.newInstance();
      UserManagement.setAuth_dats(fastMap1);
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      mockSocket0.getLocalAddress();
      Login login1 = new Login();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      Login.getMd5Data(socket_data0);
      login0.do_initTXT();
      Login login2 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login2.new ConnectionListener();
      login_ConnectionListener0.run();
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Login login0 = new Login();
      Login login1 = new Login();
      MySQLConfig.setLogin_server_pw("conf/subnet_athena.conf");
      Login.mmo_auth_syncXML();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      FastMap.newInstance();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      mockSocket0.getLocalAddress();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      Login.getMd5Data(socket_data0);
      login1.do_initTXT();
      // Undeclared exception!
      try { 
        login1.yesNoOnOffToBoolean("conf/subnet_athena.conf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Login login0 = new Login();
      Login login1 = new Login();
      MySQLConfig.setLogin_server_pw("conf/subnet_athena.conf");
      Login.mmo_auth_syncXML();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      FastMap.newInstance();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      mockSocket0.getLocalAddress();
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(aCO0);
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      Login.getMd5Data(socket_data0);
      login1.do_initTXT();
      Login login2 = new Login();
      // Undeclared exception!
      try { 
        login2.yesNoOnOffToBoolean("conf/subnet_athena.conf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Login login0 = new Login();
      Login login1 = new Login();
      MySQLConfig.setLogin_server_pw("conf/subnet_athena.conf");
      Login.mmo_auth_syncXML();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      FastMap.newInstance();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      mockSocket0.getLocalAddress();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      socket_data0.setMd5key("gml+gVjX2#W2g `3");
      Login.getMd5Data(socket_data0);
      login1.do_initTXT();
      Login login2 = new Login();
      // Undeclared exception!
      try { 
        login2.yesNoOnOffToBoolean("conf/subnet_athena.conf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Login login0 = new Login();
      Login login1 = new Login();
      MySQLConfig.setLogin_server_pw("&APOS;");
      Login.mmo_auth_syncXML();
      login0.do_initTXT();
      login1.parse_console("`Ps|/@oi ");
      Socket_data socket_data0 = new Socket_data((Socket) null);
      FromAdmin fromAdmin0 = new FromAdmin();
      login0.parse_console("3");
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      FastComparator<Object> fastComparator0 = (FastComparator<Object>) mock(FastComparator.class, new ViolatedAssumptionAnswer());
      fastMap0.setKeyComparator(fastComparator0);
      Integer integer0 = new Integer((-746));
      login1.parse_console("8=d");
      Login.display_title();
      MockSocket mockSocket0 = new MockSocket();
      Socket_data socket_data1 = new Socket_data((Socket) null);
      FromAdmin fromAdmin1 = new FromAdmin();
      login1.check_auth_sync();
      MockPrintWriter mockPrintWriter0 = (MockPrintWriter)Login.loginLogOut;
      Login.mmo_auth_syncTXT();
      login1.yesNoOnOffToBoolean("off");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Login login0 = new Login();
      Login login1 = new Login();
      ACO aCO0 = ACO.DENY_ALLOW;
      ConfigurationManagement.setAccess_order(aCO0);
      Login.mmo_auth_syncXML();
      login1.do_initTXT();
      login0.parse_console("A6");
      Socket_data socket_data0 = new Socket_data((Socket) null);
      FromAdmin fromAdmin0 = new FromAdmin();
      login0.parse_console("A6");
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      fastMap0.setKeyComparator((FastComparator<? super Integer>) null);
      Integer integer0 = new Integer(16);
      String string0 = "quit";
      // Undeclared exception!
      try { 
        login0.parse_console("quit");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Login login0 = new Login();
      Login login1 = new Login();
      Login.mmo_auth_syncXML();
      login0.do_initTXT();
      String string0 = "A6";
      login1.parse_console("A6");
      FromAdmin fromAdmin0 = new FromAdmin();
      String string1 = "z}V.p^ ";
      login1.parse_console("z}V.p^ ");
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      Login login2 = new Login();
      login0.parse_console("-Bs_u");
      FastMap<Integer, Auth_data> fastMap1 = new FastMap<Integer, Auth_data>();
      MySQLConfig.setLogin_server_db((String) null);
      fastMap0.setKeyComparator((FastComparator<? super Integer>) null);
      Integer integer0 = new Integer(4050);
      // Undeclared exception!
      try { 
        login2.parse_console("end");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Login login0 = new Login();
      Login login1 = new Login();
      Login.mmo_auth_syncXML();
      Login.mmo_auth_syncXML();
      login0.do_initTXT();
      login1.parse_console("A6");
      FromAdmin fromAdmin0 = new FromAdmin();
      login0.parse_console("\"Jg<\"");
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      FastMap<Integer, Auth_data> fastMap1 = new FastMap<Integer, Auth_data>();
      MySQLConfig.setLogin_server_db("A6");
      fastMap0.setKeyComparator((FastComparator<? super Integer>) null);
      Integer integer0 = new Integer(1424);
      Login.display_title();
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getTrafficClass();
      MockSocket mockSocket1 = new MockSocket();
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      FromAdmin fromAdmin1 = new FromAdmin();
      login1.check_auth_sync();
      MockPrintWriter mockPrintWriter0 = (MockPrintWriter)Login.loginLogOut;
      Login.mmo_auth_syncTXT();
      Login.ConnectionListener login_ConnectionListener0 = login1.new ConnectionListener();
      login_ConnectionListener0.close();
      login1.getOut();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncXML();
      Login.mmo_auth_syncXML();
      login0.do_initTXT();
      Socket_data socket_data0 = new Socket_data((Socket) null);
      FromAdmin fromAdmin0 = new FromAdmin();
      Login.mmo_auth_syncXML();
      Login login1 = new Login();
      login1.parse_console("zy[");
      Login.display_title();
      MockSocket mockSocket0 = new MockSocket();
      Login.auth_num = 73408859;
      Socket_data socket_data1 = new Socket_data((Socket) null);
      FromAdmin fromAdmin1 = new FromAdmin();
      Login login2 = new Login();
      login2.check_auth_sync();
      MockPrintWriter mockPrintWriter0 = (MockPrintWriter)Login.loginLogOut;
      Login.mmo_auth_syncTXT();
      login2.yesNoOnOffToBoolean("NO");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("conf/subnet_athena.conf");
      MockSocket mockSocket1 = null;
      try {
        mockSocket1 = new MockSocket("EF%P", (-81475512), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-81475512
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "conf/subnet_athena.conf");
      login0.parse_console("QeN]L");
      Socket_data socket_data0 = new Socket_data((Socket) null);
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      FastComparator<Object> fastComparator0 = (FastComparator<Object>) mock(FastComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fastComparator0).hashCodeOf(any());
      Login.mmo_auth_syncTXT();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      login_Timer_interval_check_auth_sync0.run();
      Auth_data auth_data0 = mock(Auth_data.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null, (Integer) null).when(auth_data0).getAccount_id();
      doReturn((String) null).when(auth_data0).getUserid();
      fastMap0.put((Integer) 100000000, auth_data0);
      FastMap<Integer, Auth_data> fastMap1 = fastMap0.setKeyComparator(fastComparator0);
      UserManagement.setAuth_dats(fastMap1);
      Login login1 = new Login();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
