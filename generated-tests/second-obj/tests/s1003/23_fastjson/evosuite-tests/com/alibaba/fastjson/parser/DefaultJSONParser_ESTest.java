/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:01:02 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.Time;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.ParsePosition;
import java.text.StringCharacterIterator;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z]}C^G");
      Class<Byte> class0 = Byte.TYPE;
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      defaultJSONParser0.setConfig(parserConfig0);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : Z]}C^G
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("B&80gcE/4_[iM:", 6);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(feature0, jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.config(feature0, true);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertNotNull(list0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("<mo");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : <mo
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+DQkKs,,RkzI^K72yrpW");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Rectangle rectangle0 = new Rectangle(0, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but float, pos 2, json : +DQkKs,,RkzI^K72yrpW
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      parserConfig0.setAsmEnable(true);
      classLoader1.clearAssertionStatus();
      classLoader0.clearAssertionStatus();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ph+o&;*N7rqcCM", parserConfig0);
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.setResolveStatus(37);
      assertEquals(37, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$", parserConfig0);
      Feature feature0 = Feature.DisableASM;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("scanEnum", parserConfig0);
      ParserConfig parserConfig1 = defaultJSONParser0.getConfig();
      assertNotNull(parserConfig1);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("k", parserConfig0);
      List<ExtraProcessor> list0 = new ArrayList<ExtraProcessor>();
      defaultJSONParser0.getContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",[");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getInput();
      Boolean boolean0 = Boolean.FALSE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("a(Y", (-679));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      defaultJSONParser0.setDateFormat("/m -:5PR~Y!#Qu");
      defaultJSONParser0.setContext((Object) mockThaiBuddhistDate0, (Object) "},./EI7_o 1Lz&");
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeSupport", 15);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unterminated", (-1442));
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.getExtraProcessors();
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = 'K';
      charArray0[2] = '&';
      charArray0[3] = '&';
      charArray0[4] = '&';
      charArray0[5] = 'u';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '#', 0);
      jSONReaderScanner0.np = 0;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getDateFormat();
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(Ljava/lang/Object;Ljava/lang/Object;)V", parserConfig0, 3);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";Ljava/lang/reflect/Type;Ljava/lang/Object;)V");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : ;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.setDefaultAssertionStatus(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.close();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("gGnO{q`-a.pk#");
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("gGnO{q`-a.pk#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - G, info : pos 1, json : gGnO{q`-a.pk#
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("*Lf|?v?mngS3#Q'", parserConfig0);
      TreeSet<MockDate> treeSet0 = new TreeSet<MockDate>();
      defaultJSONParser0.checkListResolve(treeSet0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(115, 115);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual ,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : syntax error, expect 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0);
      defaultJSONParser0.setDateFomrat(dateFormat0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";Ljava/lang/reflect/Type;Ljava/lang/Object;)V");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;Ljava/lang/reflect/Type;Ljava/lang/Object;)V
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("expect ':' at ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : expect ':' at 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";Ljava/lang/reflect/Type;Ljava/lang/Object;)V");
      Rectangle rectangle0 = new Rectangle(0, 0);
      defaultJSONParser0.getExtraTypeProviders();
      SymbolTable symbolTable0 = defaultJSONParser0.getSymbolTable();
      assertNotNull(symbolTable0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("iLJ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      JobAttributes jobAttributes0 = new JobAttributes();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) jobAttributes0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<Rectangle> class0 = Rectangle.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ua9j<^LB{T&Ov", parserConfig0);
      defaultJSONParser0.handleResovleTask(aSMDeserializerFactory0);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("O~U~>==S32_Oc.UOl@", parserConfig0);
      Class<Point> class0 = Point.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.serializer.AwtCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      ArrayDeque<Method> arrayDeque0 = new ArrayDeque<Method>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) arrayDeque0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      parserConfig0.defaultClassLoader = (ClassLoader) aSMClassLoader0;
      Locale locale0 = new Locale("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName fastjson.parser.deny
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      parserConfig0.setAsmEnable(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",u1+L25vG|O!&", parserConfig0, 2841);
      defaultJSONParser0.getExtraTypeProviders();
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      defaultJSONParser0.getInput();
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      defaultJSONParser0.parse((Object) "");
      defaultJSONParser0.getDateFomartPattern();
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException((-123008));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      defaultJSONParser0.parse((Object) "null");
      ParseContext parseContext0 = defaultJSONParser0.context;
      HttpCookie httpCookie0 = new HttpCookie("null", "null");
      Object object0 = new Object();
      ParseContext parseContext1 = new ParseContext((ParseContext) null, httpCookie0, object0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext1, "null");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lQR~iQdg6U=C");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("lQR~iQdg6U=C", parserConfig0, (-149));
      parserConfig0.addDeny("NaN");
      defaultJSONParser0.setContext((ParseContext) null, (Object) "lQR~iQdg6U=C", (Object) "lQR~iQdg6U=C");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus((String) null, false);
      classLoader0.setDefaultAssertionStatus(false);
      parserConfig0.defaultClassLoader = classLoader0;
      defaultJSONParser0.setConfig(parserConfig0);
      defaultJSONParser0.setContext((ParseContext) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : lQR~iQdg6U=C
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      parserConfig0.setAsmEnable(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ", parserConfig0, 1);
      TreeMap<Boolean, Dimension> treeMap0 = new TreeMap<Boolean, Dimension>();
      treeMap0.firstEntry();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{R,");
      Type type0 = null;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual ,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      aSMClassLoader0.setDefaultAssertionStatus(false);
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      char[] charArray0 = new char[2];
      charArray0[1] = '@';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 22, 62);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getDateFormat();
      defaultJSONParser0.getDateFormat();
      defaultJSONParser0.getExtraTypeProviders();
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.setExponentSeparator("null");
      ParsePosition parsePosition0 = new ParsePosition((-683));
      Type[] typeArray0 = new Type[1];
      defaultJSONParser0.parseArray(typeArray0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<Byte> class0 = Byte.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl1 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      parserConfig0.setAsmEnable(false);
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeSupport", (-683));
      JSONScanner jSONScanner1 = (JSONScanner)defaultJSONParser0.getLexer();
      assertTrue(jSONScanner1.isEOF());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "", (Object) "[boylean");
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) "[boylean", (Object) aSMDeserializerFactory0);
      parseContext1.toString();
      MockDateFormat.getTimeInstance(0);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      defaultJSONParser0.getFieldTypeResolver();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error  ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ParseContext parseContext0 = defaultJSONParser0.context;
      Collator collator0 = Collator.getInstance();
      ParseContext parseContext1 = defaultJSONParser0.setContext((ParseContext) null, (Object) collator0, (Object) collator0);
      assertNotNull(parseContext1);
      
      parseContext1.toString();
      parseContext1.toString();
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      BreakIterator.getCharacterInstance();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Dimension dimension0 = new Dimension();
      defaultJSONParser0.setContext(parseContext1, (Object) null, (Object) dimension0);
      defaultJSONParser0.getFieldTypeResolver();
      HashSet<SimpleTimeZone> hashSet0 = new HashSet<SimpleTimeZone>();
      HashMap<InputStream, Long> hashMap0 = new HashMap<InputStream, Long>();
      TreeMap<InputStream, Long> treeMap0 = new TreeMap<InputStream, Long>(hashMap0);
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("N.:v4}rRJb\"");
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setResolveStatus(24);
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("N", hashtable0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "fastjson.parser.deny");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.getResolveTaskList();
      assertEquals(24, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",u1+L25vG|O!&", parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ,u1+L25vG|O!&
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "syntax error : ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error  ");
      defaultJSONParser0.getObject("@7Z#/DKqw,ThJ+");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("syntax error : ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - y, info : pos 1, json : syntax error  
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      parserConfig0.setAsmEnable(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",1+L5|UF|!&", parserConfig0, 91);
      TreeMap<Boolean, Dimension> treeMap0 = new TreeMap<Boolean, Dimension>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, json : ,1+L5|UF|!&
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("dKbB92", parserConfig0);
      Object object0 = defaultJSONParser0.resolveReference("dKbB92");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = ", ";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+DQkKs,,zI^K72yrpW");
      defaultJSONParser0.getFieldTypeResolver();
      Type type0 = null;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // empty String, pos 2, json : +DQkKs,,zI^K72yrpW
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Xh|.pZihV{ML");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      defaultJSONParser0.config = parserConfig0;
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
      
      defaultJSONParser0.getObject("Xh|.pZihV{ML");
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      FileSystemHandling.shouldAllThrowIOExceptions();
      parserConfig0.setAutoTypeSupport(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("},./EI7_o 1Lz&", parserConfig0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(0, 1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) dateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual }
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("create");
      char[] charArray0 = new char[0];
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      defaultJSONParser1.getInput();
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser1.fieldTypeResolver;
      defaultJSONParser1.setFieldTypeResolver((FieldTypeResolver) null);
      MockDate mockDate0 = new MockDate(0L);
      defaultJSONParser0.handleResovleTask(mockDate0);
      Locale locale0 = Locale.UK;
      MessageFormat messageFormat0 = new MessageFormat("com.alibaba.fastjson.parser.deserializer.JSONPDeserializer", locale0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : create
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.setAutoTypeSupport(true);
      parserConfig0.setAutoTypeSupport(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("},./EI7_o 1Lz&", parserConfig0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Mh]~uT-ji{:");
      ArrayDeque<MockJapaneseDate> arrayDeque0 = new ArrayDeque<MockJapaneseDate>();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "Mh]~uT-ji{:", (Object) "},./EI7_o 1Lz&");
      defaultJSONParser0.setContext(parseContext0);
      defaultJSONParser0.getExtraTypeProviders();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      JSON.setDefaultTypeKey("u).14[YqBiGcpUqm+");
      parseContext0.toString();
      defaultJSONParser0.popContext();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "},./EI7_o 1Lz&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : },./EI7_o 1Lz&
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 128;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pZR&8w:T", 128);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.close();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("},.EI_o 1L&");
      Hashtable<BufferCapabilities, DecimalFormatSymbols> hashtable0 = new Hashtable<BufferCapabilities, DecimalFormatSymbols>();
      Object object0 = defaultJSONParser0.parseObject((Map) hashtable0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : .pos 2, json : },.EI_o 1L&
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("j[qNO>", parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      Locale locale0 = new Locale("j[qNO>");
      ArrayDeque<GridBagConstraints> arrayDeque0 = new ArrayDeque<GridBagConstraints>();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray((Collection) arrayDeque0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : j[qNO>
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.setExponentSeparator("null");
      HttpCookie httpCookie0 = new HttpCookie("uG", "uG");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual null, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("},./EI7_o 1Lz&", parserConfig1);
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : }
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{R,", parserConfig0);
      Class<Double> class0 = Double.TYPE;
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";Ljava/lang/reflect/Type;Ljava/lang/Object;)V");
      ParserConfig parserConfig0 = ParserConfig.global;
      defaultJSONParser0.setConfig(parserConfig0);
      Object object0 = new Object();
      ParseContext parseContext0 = defaultJSONParser0.setContext(object0, object0);
      defaultJSONParser0.setContext(parseContext0);
      Stack<ExtraTypeProvider> stack0 = new Stack<ExtraTypeProvider>();
      defaultJSONParser0.setDateFormat("$.com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory@2");
      IdentityHashMap<Double, MockMinguoDate> identityHashMap0 = new IdentityHashMap<Double, MockMinguoDate>();
      Double double0 = new Double(1);
      Double double1 = new Double(0);
      identityHashMap0.put(double1, (MockMinguoDate) null);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      defaultJSONParser0.checkMapResolve(identityHashMap0, mockMinguoDate0);
      defaultJSONParser0.getObject("fastjson.parser.deny");
      Class<TimeZone> class0 = TimeZone.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("$.com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory@2", class0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. $.com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory@2
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("N.:v4}rRJb\"", parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : N.:v4}rRJb\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(Ljava/lang/reflect/Type;)");
      Feature feature0 = Feature.SupportNonPublicField;
      defaultJSONParser0.config(feature0, false);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (Ljava/lang/reflect/Type;)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.setPatternSeparator('=');
      DecimalFormat decimalFormat0 = new DecimalFormat("null", decimalFormatSymbols0);
      defaultJSONParser0.parse((Object) decimalFormat0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.setAutoTypeSupport(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".,./E/vI7_o 1Lz&", parserConfig0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      defaultJSONParser0.setDateFomrat(mockSimpleDateFormat0);
      Locale locale0 = Locale.CHINESE;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(decimalFormatSymbols0, defaultJSONParser0.lexer, parserConfig0);
      Hashtable<Time, PageAttributes> hashtable0 = new Hashtable<Time, PageAttributes>();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Map) hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : .pos 2, json : .,./E/vI7_o 1Lz&
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.setAutoTypeSupport(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("N.:v4}rRJb\"", parserConfig0);
      defaultJSONParser0.setConfig(parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeAccept");
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Rectangle2D rectangle2D0 = rectangle0.createUnion(rectangle2D_Float0);
      Rectangle2D.union(rectangle2D0, rectangle0, rectangle2D0);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      defaultJSONParser1.checkListResolve(list0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(rectangle0, "aQgDw7aMpI>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, json : N.:v4}rRJb\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Rectangle rectangle0 = new Rectangle(39, 13);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("N_?+=^{T_0b8+`!K|0");
      defaultJSONParser0.parseKey();
      LinkedList<BufferCapabilities> linkedList0 = new LinkedList<BufferCapabilities>();
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "N_?+=^{T_0b8+`!K|0");
      defaultJSONParser0.setContext((Object) mockDate0, (Object) rectangle0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 1, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.setAutoTypeSupport(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("N.:v4}rRJb\"", parserConfig0);
      defaultJSONParser0.setConfig(parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("syntax error, position at ");
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Line2D.Double line2D_Double0 = new Line2D.Double((-960.0), 0.0, (-2249.9246), 0);
      line2D_Double0.getBounds();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      defaultJSONParser1.getResolveTaskList();
      DefaultJSONParser defaultJSONParser3 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : N.:v4}rRJb\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.setExponentSeparator("null");
      ParsePosition parsePosition0 = new ParsePosition((-664));
      Type[] typeArray0 = new Type[1];
      defaultJSONParser0.parseArray(typeArray0);
      ParserConfig.getGlobalInstance();
      Class<Byte> class0 = Byte.TYPE;
      ClassLoader.getSystemClassLoader();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Rectangle rectangle0 = new Rectangle(2, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 4, json : null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("null", decimalFormatSymbols0);
      ParsePosition parsePosition0 = new ParsePosition((-686));
      Class<Rectangle> class0 = Rectangle.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultJSONParser0.getFieldTypeResolver();
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      defaultJSONParser0.parseArray(typeArray0);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("null", parserConfig0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Mh]~uT-ji{:");
      ArrayDeque<MockJapaneseDate> arrayDeque0 = new ArrayDeque<MockJapaneseDate>();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      ImageCapabilities imageCapabilities1 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.PRIOR;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "Mh]~uT-ji{:", (Object) bufferCapabilities0);
      parseContext0.toString();
      defaultJSONParser1.setContext(parseContext0);
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser1.setDateFormat("null");
      JSON.setDefaultTypeKey("$");
      parseContext0.toString();
      defaultJSONParser1.popContext();
      assertEquals("null", defaultJSONParser1.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.setExponentSeparator("null");
      ParsePosition parsePosition0 = new ParsePosition((-664));
      ParserConfig.getGlobalInstance();
      Class<Byte> class0 = Byte.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("s2BAm", false);
      defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
      defaultJSONParser0.getExtraTypeProviders();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.setAutoTypeSupport(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("N.:v4}rRJb\"", parserConfig0);
      defaultJSONParser0.setConfig(parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Rectangle rectangle0 = new Rectangle(0, 2, 1, 1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : N.:v4}rRJb\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.time.LocalDateTime");
      defaultJSONParser0.getObject("fastjson.parser.autoTypeSupport");
      ParseContext parseContext0 = defaultJSONParser0.context;
      defaultJSONParser0.setContext((ParseContext) null);
      defaultJSONParser0.accept(1, 1);
      ParserConfig parserConfig1 = new ParserConfig();
      parserConfig1.addAccept("@VYb(!-PG{k");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      defaultJSONParser0.resolveReference("Z");
      Long long0 = new Long(0);
      Float float0 = new Float(0.75);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse((Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : java.time.LocalDateTime
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("expect ':' at ", parserConfig0, 22);
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      defaultJSONParser0.getExtraProcessors();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("j[qNO>", parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      ClassLoader.getSystemClassLoader();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Rectangle rectangle0 = new Rectangle(78, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Type) parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : j[qNO>
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("j[qNO>", parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      Locale locale0 = new Locale("ul");
      int int0 = DateFormat.LONG;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      parserConfig0.setDefaultClassLoader(classLoader0);
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      defaultJSONParser1.parseArray(class0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",u1+L25vG|O!&");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) ",u1+L25vG|O!&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - +, info : pos 3, json : ,u1+L25vG|O!&
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("j[qNO>", parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      Locale locale0 = new Locale("ul");
      int int0 = DateFormat.LONG;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      parserConfig0.setDefaultClassLoader(classLoader0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      classLoader1.getParent();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      HashSet<Rectangle> hashSet0 = new HashSet<Rectangle>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) parameterizedTypeImpl0, (Collection) hashSet0, (Object) pipedInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 3, json : j[qNO>
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.setAutoTypeSupport(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("N.:v4}rRJb\"", parserConfig0);
      defaultJSONParser0.setConfig(parserConfig0);
      defaultJSONParser0.parseKey();
      Rectangle rectangle0 = new Rectangle(20, 20, 2, 20);
      String string0 = File.separator;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String string1 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      HashMap<InputStream, Long> hashMap0 = new HashMap<InputStream, Long>();
      defaultJSONParser0.checkListResolve((Collection) null);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("h9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      int int0 = (-664);
      ParsePosition parsePosition0 = new ParsePosition((-664));
      Hashtable<DateFormatSymbols, BigInteger> hashtable0 = new Hashtable<DateFormatSymbols, BigInteger>();
      defaultJSONParser0.parseObject((Map) hashtable0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.setExponentSeparator("null");
      ParserConfig parserConfig0 = new ParserConfig();
      Properties properties0 = new Properties();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("null", parserConfig0);
      Type[] typeArray0 = new Type[0];
      defaultJSONParser0.parseArray(typeArray0);
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      defaultJSONParser1.parseObject(class0);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser1.getFieldTypeResolver();
      assertNull(fieldTypeResolver0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      String string0 = "";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      Boolean boolean0 = Boolean.FALSE;
      int int0 = 20;
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.setPackageAssertionStatus("Z", false);
      classLoader0.setPackageAssertionStatus("Z", true);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ParseContext parseContext0 = defaultJSONParser0.context;
      ParseContext parseContext1 = defaultJSONParser0.setContext((ParseContext) null, (Object) "[boolean", (Object) aSMDeserializerFactory0);
      parseContext1.toString();
      Collator collator0 = Collator.getInstance();
      ParseContext parseContext2 = defaultJSONParser0.setContext((ParseContext) null, (Object) collator0, (Object) collator0);
      parseContext2.toString();
      parseContext1.toString();
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-14);
      defaultJSONParser0.setContext(parseContext2, (Object) "$", (Object) aSMDeserializerFactory0);
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      parserConfig1.addAccept(", actual ");
      Long long0 = new Long((byte)0);
      JSONObject jSONObject0 = new JSONObject();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      defaultJSONParser0.getObject("$");
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getContext();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) "[boolean", (Object) aSMDeserializerFactory0);
      parseContext0.toString();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("[boolean", parserConfig0, 0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedInputStream pipedInputStream1 = new PipedInputStream(98);
      pipedInputStream1.mark(1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream1);
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+DQkKs,,zI^K72yrpW");
      defaultJSONParser0.getResolveTaskList();
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      ParserConfig parserConfig0 = ParserConfig.global;
      defaultJSONParser0.handleResovleTask(parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)46;
      byte byte0 = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-55);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-87);
      byteArray0[6] = (byte)123;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ParserConfig parserConfig0 = new ParserConfig();
      String string0 = "(Ljava/lang/reflect/Type;)";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",1+L5|FG&", parserConfig0, (byte) (-55));
      parserConfig0.addDeny("(Ljava/lang/reflect/Type;)");
      TreeMap<Boolean, Dimension> treeMap0 = new TreeMap<Boolean, Dimension>();
      LinkedHashMap<Annotation, MockSimpleDateFormat> linkedHashMap0 = new LinkedHashMap<Annotation, MockSimpleDateFormat>();
      Boolean boolean0 = new Boolean("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, json : ,1+L5|FG&
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("j[qNO>", parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ");
      Object object0 = new Object();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 2, json : , 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
