/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:33:29 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.lang.reflect.Array;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = ":?";
      constantPoolGen0.lookupFieldref("Uf%tdFF", "Uf%tdFF", ":?");
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(4638777984935788544L);
      int int0 = constantPoolGen0.lookupFloat(1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-50), (-50));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-50));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addLong(1041L);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((-65.066734F));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantFloat constantFloat2 = new ConstantFloat(0.0F);
      constantArray0[1] = (Constant) constantFloat2;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2959, 2959);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[2] = (Constant) constantNameAndType1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2959
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((-3637));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2676), (-3637));
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2676
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.lookupInterfaceMethodref("$A1h`<J_Cc~>", "$A1h`<J_Cc~>", "#Q=j#t");
      assertEquals((-1), int0);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger(794);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      int int0 = 1585;
      ConstantString constantString0 = new ConstantString(1585);
      constantArray0[2] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1585
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(134, 134);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupFieldref("gI*#%hP_Wl#%hP_Wl", "gI*#%hP_Wl#%hP_Wl", "gI*#%hP_Wl#%hP_Wl");
      assertEquals((-1), int0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(0L);
      constantPoolGen0.lookupString("n=]]2h|3CCh<(U^T");
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass((ObjectType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[19];
      ConstantInteger constantInteger0 = new ConstantInteger(46);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = Character.MAX_RADIX;
      int int1 = constantPoolGen0.addDouble(46);
      assertEquals(21, constantPoolGen0.getSize());
      assertEquals(19, int1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1, 1);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1178, 1);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      int int0 = 9;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1203), 9);
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantInvokeDynamic cannot be cast to org.apache.bcel.classfile.ConstantNameAndType
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(177, 214);
      constantPoolGen0.setConstant(214, constantMethodref0);
      int int0 = constantPoolGen0.addFieldref("5,_,K<L", "5,_,K<L", "5,_,K<L");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(0L);
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.lookupDouble(1);
      constantPoolGen0.lookupNameAndType("#", "q2!XC}o");
      // Undeclared exception!
      try { 
        constantPoolGen1.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantInteger constantInteger0 = new ConstantInteger(8);
      int int0 = Character.SIZE;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(4, 8);
      int int1 = Pattern.MULTILINE;
      Constant[] constantArray0 = new Constant[23];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      Constant[] constantArray1 = new Constant[7];
      constantArray1[0] = (Constant) constantMethodHandle0;
      constantArray1[1] = (Constant) constantInteger0;
      constantArray1[3] = (Constant) constantInteger0;
      constantArray1[4] = (Constant) constantMethodHandle0;
      constantArray1[5] = (Constant) constantInteger0;
      constantArray1[6] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray1);
      constantPoolGen0.addConstant(constantArray1[6], constantPoolGen1);
      constantPoolGen0.lookupInteger(8);
      int int2 = Member.PUBLIC;
      Constant constant0 = constantPoolGen1.getConstant(116);
      assertNull(constant0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      int int0 = Character.MIN_CODE_POINT;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantDouble constantDouble0 = new ConstantDouble((-3458.2933879015986));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantPool0.constantToString((Constant) constantDouble1);
      constantPoolGen0.getFinalConstantPool();
      constantPool0.toString();
      constantPoolGen0.addLong(0);
      constantPoolGen0.addInteger(0);
      int int1 = Byte.SIZE;
      int int2 = Pattern.UNIX_LINES;
      String string1 = Constants.ILLEGAL_TYPE;
      constantPoolGen0.toString();
      int int3 = Byte.BYTES;
      constantPoolGen0.lookupString("<clinit>");
      int int4 = Pattern.CANON_EQ;
      constantPoolGen0.lookupInteger(1);
      constantPoolGen0.lookupString("<illegal type>");
      int int5 = Pattern.CANON_EQ;
      int int6 = Member.PUBLIC;
      int int7 = Short.BYTES;
      int int8 = Long.BYTES;
      constantPoolGen0.toString();
      assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[11];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.adjustSize();
      int int0 = constantPoolGen0.addFloat(0.0F);
      assertEquals(1, int0);
      
      Constant constant0 = constantPoolGen0.getConstant(2);
      assertNull(constant0);
      assertEquals(11, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[17];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.lookupInterfaceMethodref("$A1h`<J_Cc~>", "$A1h`<J_Cc~>", "%");
      int int0 = constantPoolGen0.addFloat((-1));
      assertEquals(18, constantPoolGen0.getSize());
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantDouble0;
      constantArray0[4] = (Constant) constantDouble0;
      constantArray0[5] = (Constant) constantDouble0;
      constantArray0[6] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.getSize();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong(22L);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("5m!i5i/U%9Od");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantDouble constantDouble0 = new ConstantDouble((-1288.1173515553005));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupFieldref("Z_V,Z\"Z|Z(N2", "Z_V,Z\"Z|Z(N2", "Method to invoke must not be '<init>'.");
      assertEquals((-1), int0);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-648L));
      int int0 = Pattern.CANON_EQ;
      constantPoolGen0.addLong(1);
      int int1 = constantPoolGen0.addLong(3);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-2843);
      // Undeclared exception!
      try { 
        constantPoolGen0.addLong(4638777984935788544L);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantFloat constantFloat0 = new ConstantFloat((-2230.706F));
      constantArray0[0] = (Constant) constantFloat0;
      String string0 = "$(QptPC+X%|)kY<%*Ok";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("$(QptPC+X%|)kY<%*Ok");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("$(QptPC+X%|)kY<%*Ok");
      constantArray0[4] = (Constant) constantUtf8_1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.getConstant((-851));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -851
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[29];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addNameAndType("8QK's~DxEN", "8QK's~DxEN");
      int int0 = Double.MAX_EXPONENT;
      int int1 = Double.MIN_EXPONENT;
      int int2 = Pattern.MULTILINE;
      int int3 = Character.BYTES;
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPool0.getConstant((-1022));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -1022. Constant pool size is: 31
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(845, 845);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantLong constantLong0 = new ConstantLong(845);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[3] = (Constant) constantLong1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      int int0 = constantPoolGen0.lookupDouble(845);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">~.O7D`yX`");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1843, 1716);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">~.O7D`yX`");
      ConstantString constantString0 = new ConstantString((-128));
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1716, (-431));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(1843, (-128));
      ConstantDouble constantDouble0 = new ConstantDouble(1843);
      ConstantInteger constantInteger0 = new ConstantInteger((-1458));
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1484), (-192));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[29];
      ConstantInteger constantInteger0 = new ConstantInteger(41);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addNameAndType("8Q1's~DE@", "8Q1's~DE@");
      constantPoolGen0.addFloat(41);
      constantPoolGen0.addMethodref("8Q1's~DE@", "8Q1's~DE@", "8Q1's~DE@");
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1188), 41);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen((Constant[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(1);
      int int0 = Character.MAX_RADIX;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(4, 1);
      int int1 = Pattern.MULTILINE;
      Constant[] constantArray0 = new Constant[23];
      constantArray0[9] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantInteger0;
      constantArray0[4] = (Constant) constantInteger0;
      constantArray0[5] = (Constant) constantInteger0;
      constantArray0[6] = (Constant) constantInteger0;
      constantArray0[12] = (Constant) constantMethodHandle0;
      constantArray0[8] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantArray0[5], constantPoolGen1);
      assertEquals(2, constantPoolGen0.getSize());
      
      int int2 = constantPoolGen1.lookupInterfaceMethodref("Unexpected constant type: ", "Dd-DB{\"}!J", "");
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantDouble constantDouble0 = new ConstantDouble(1534.485303513);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantPoolGen0.addConstant(constantDouble1, constantPoolGen0);
      constantPoolGen0.size = 133;
      assertEquals(3, constantPoolGen0.getSize());
      
      int int0 = Character.BYTES;
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Constant[] constantArray0 = new Constant[19];
      ConstantInteger constantInteger0 = new ConstantInteger(42);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong(42);
      constantPoolGen0.lookupNameAndType("yWDS;ha7;D", "yWDS;ha7;D");
      constantPoolGen0.addLong(42);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen0);
      constantPoolGen0.adjustSize();
      ConstantString constantString0 = new ConstantString((-1));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = Pattern.COMMENTS;
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(726);
      constantString0.toString();
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.lookupFieldref("CONSTANT_String[8](string_index = 726)", "PMGClass", "PMGClass");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 726
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantInteger constantInteger0 = new ConstantInteger((-3285));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = Pattern.MULTILINE;
      ConstantFloat constantFloat0 = new ConstantFloat(42);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(42, 395);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantString constantString0 = new ConstantString((-1664));
      int int1 = constantPoolGen0.size;
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("()];*\"");
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantPoolGen0.addConstant(constantUtf8_1, constantPoolGen1);
      int int2 = constantPoolGen0.addDouble(2.0);
      assertEquals(13, constantPoolGen0.getSize());
      assertEquals(11, int2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Constant[] constantArray0 = new Constant[15];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2781), (-2781));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2781), (-2781));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(")");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantFloat constantFloat0 = new ConstantFloat((-2781));
      constantArray0[3] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addConstant(constantFloat0, constantPoolGen0);
      assertEquals(3, int0);
      assertEquals(15, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.MULTILINE;
      constantPoolGen0.addString("=iV");
      int int1 = Pattern.DOTALL;
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.lookupNameAndType(" /?Q|Hdx{0LH9bA:>:O", "@} 3NYO}");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int2 = (-653);
      ConstantClass constantClass0 = new ConstantClass((-653));
      byte byte0 = (byte)10;
      // Undeclared exception!
      try { 
        constantClass0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass((-16));
      constantArray0[2] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "q'<gX%]DcMD|k7_wZ&";
      ObjectType objectType0 = ObjectType.getInstance("q'<gX%]DcMD|k7_wZ&");
      constantPoolGen0.addClass(objectType0);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      int int0 = Byte.SIZE;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.getConstantPool();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(8, 2);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantClass cannot be cast to org.apache.bcel.classfile.ConstantNameAndType
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.lookupFieldref(".y1mX", ".y1mX", ".y1mX");
      int int0 = Float.MAX_EXPONENT;
      constantPoolGen0.lookupFieldref(".y1mX", "'9z", ".y1mX");
      constantPoolGen0.getSize();
      constantPoolGen0.lookupUtf8(".y1mX");
      constantPoolGen0.addFieldref("W;#?do;~+]`p", "'9z", "'9z");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(89, 127);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(6, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(42);
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      String string0 = "' illegal? Pass 3a should have checked this!";
      constantPoolGen0.addMethodref("' illegal? Pass 3a should have checked this!", "Unknown constant type ", "Unknown constant type ");
      int int0 = Float.MAX_EXPONENT;
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.lookupNameAndType((String) null, "");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.adjustSize();
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref((String) null, "\n#4':[gk= /#Expecting a reference type as 'objectref' on the stack, not a '", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(25, (-13));
      constantPoolGen0.addInterfaceMethodref("HGXDMQ<B=gOxI {`", "HGXDMQ<B=gOxI {`", "%");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      int int0 = Byte.SIZE;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      String string0 = "swap";
      ConstantMethodref constantMethodref0 = new ConstantMethodref(5, (-13));
      // Undeclared exception!
      try { 
        constantPoolGen1.setConstant((-3061), constantMethodHandle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3061
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(845, 845);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantDouble constantDouble0 = new ConstantDouble(845);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble1;
      ConstantLong constantLong0 = new ConstantLong(845);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[3] = (Constant) constantLong1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      constantLong1.toString();
      int int0 = constantPoolGen0.lookupDouble(845);
      assertEquals(2, int0);
      assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantClass constantClass0 = new ConstantClass(256);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(845, 105);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantDouble constantDouble0 = new ConstantDouble(845);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      assertEquals(256, constantPool0.getLength());
      
      int int0 = constantPoolGen0.lookupDouble(256);
      assertEquals((-1), int0);
      
      int int1 = constantPoolGen0.addConstant(constantArray0[2], constantPoolGen0);
      assertEquals(2, int1);
      assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2058005160), 3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantMethodHandle1.toString();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[0], constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = -2058005160, reference_index = 3)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)93;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)23, 2555);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantNameAndType0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2555
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = 2467;
      constantPoolGen0.lookupLong((-1L));
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Constant[] constantArray0 = new Constant[19];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("c#lUxZ&", "c#lUxZ&", "c#lUxZ&");
      constantPoolGen0.adjustSize();
      constantPoolGen0.addMethodref("c#lUxZ&", "c#lUxZ&", "c#lUxZ&");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = Pattern.CASE_INSENSITIVE;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        constantPool1.getConstant(1029);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1029. Constant pool size is: 19
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantInteger constantInteger0 = new ConstantInteger(46);
      int int0 = Character.SIZE;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2067, 4);
      int int1 = Pattern.MULTILINE;
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("org.apache.bcel.generic.ConstantPoolGen");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[3] = (Constant) constantUtf8_1;
      constantArray0[4] = (Constant) constantMethodHandle0;
      constantArray0[5] = (Constant) constantMethodHandle0;
      constantArray0[6] = (Constant) constantInteger0;
      constantArray0[7] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addLong(46);
      constantPoolGen1.addConstant(constantArray0[7], constantPoolGen0);
      assertEquals(10, constantPoolGen1.getSize());
      
      constantPoolGen0.lookupInteger(6);
      int int2 = Member.PUBLIC;
      constantPoolGen0.getConstant(0);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantString constantString0 = new ConstantString(12);
      ConstantString constantString1 = new ConstantString(106);
      constantPoolGen0.toString();
      constantPoolGen0.addString("");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPool0.copy();
      constantPoolGen0.addString("");
      int int0 = Float.MAX_EXPONENT;
      constantPool0.copy();
      constantPoolGen0.getFinalConstantPool();
      int int1 = Pattern.DOTALL;
      constantPoolGen0.getFinalConstantPool();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository((ClassLoader) null);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        classLoaderRepository0.loadClass(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Constant[] constantArray0 = new Constant[19];
      ConstantString constantString0 = new ConstantString(42);
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      int int0 = Float.MAX_EXPONENT;
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.lookupNameAndType((String) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.adjustSize();
      ConstantString constantString2 = new ConstantString(245);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      ConstantClass constantClass0 = new ConstantClass((-1392));
      // Undeclared exception!
      try { 
        constantPoolGen2.addConstant(constantClass0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1392
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(222, 0);
      ConstantLong constantLong0 = new ConstantLong(0L);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantLong constantLong1 = new ConstantLong(0);
      ConstantLong constantLong2 = new ConstantLong(constantLong1);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantLong1;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong1;
      constantArray0[4] = (Constant) constantLong0;
      constantArray0[5] = (Constant) constantLong2;
      constantArray0[6] = (Constant) constantLong2;
      constantArray0[7] = (Constant) constantLong2;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      constantPoolGen0.lookupDouble((-2365.63907265399));
      constantPoolGen0.addString("tXH_$p8l");
      constantPoolGen0.lookupString("tXH_$p8l");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantArray0[1], constantPoolGen1);
      assertEquals(10, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupMethodref("l&vxza2vf8km<V^Ft|o", "1n4?F1NI%d!Brd?>4", ";daSD");
      constantPoolGen0.addLong((-1385L));
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1), 0);
      constantMethodref0.setClassIndex(818);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 818
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("The filters must not be null");
      String string0 = "]WKL@Y7}mE'";
      constantPoolGen0.addInterfaceMethodref("|dyf", "The filters must not be null", "]WKL@Y7}mE'");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      Constant constant0 = constantPoolGen0.getConstant(7);
      String string1 = constantPool0.toString();
      constantPoolGen0.lookupFloat(2);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constant0, constantPoolGen1);
      constantPoolGen1.lookupLong(2);
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType(string1, (-106));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: -106
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Constant[] constantArray0 = new Constant[29];
      ConstantInteger constantInteger0 = new ConstantInteger(41);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addNameAndType("8QK's~DxEN", "8QK's~DxEN");
      constantPoolGen0.addMethodref("8QK's~DxEN", "8QK's~DxEN", "8QK's~DxEN");
      int int0 = Pattern.MULTILINE;
      constantPoolGen0.addString("=iV");
      int int1 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.addConstant(constantInteger0, constantPoolGen0);
      Constant[] constantArray1 = new Constant[30];
      constantPool0.getConstant(32);
      constantArray1[1] = (Constant) constantInteger0;
      constantInteger0.setBytes(25);
      ConstantInteger constantInteger1 = (ConstantInteger)constantInteger0.copy();
      constantInteger1.setBytes(41);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPool0.copy();
      constantPoolGen0.addFieldref("8QK's~DxEN", "2Y", "The filters must not be null");
      ConstantFieldref constantFieldref0 = (ConstantFieldref)constantPoolGen0.getConstant(38);
      constantPoolGen2.getConstantPool();
      constantPoolGen2.toString();
      constantPoolGen2.addConstant(constantFieldref0, constantPoolGen0);
      constantPoolGen0.addInterfaceMethodref("8QK's~DxEN", "8QK's~DxEN", "The filters must not be null");
      constantPoolGen2.toString();
      assertEquals(7, constantPoolGen2.getSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Constant[] constantArray0 = new Constant[29];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.adjustSize();
      constantPoolGen0.addMethodref("8QK's~DxEN", "8QK's~DxEN", "8QK's~DxEN");
      int int0 = Float.MAX_EXPONENT;
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      Constant constant0 = constantPool0.getConstant(32);
      ConstantInteger constantInteger0 = new ConstantInteger(32);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPool0.copy();
      constantPoolGen0.addFieldref("8QK's~DxEN", "=iV", "=iV");
      constantPoolGen0.toString();
      constantPoolGen0.addConstant(constant0, constantPoolGen0);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen0);
      constantPoolGen1.addInterfaceMethodref("bPwwBzG4", "=iV", "=iV");
      constantPool0.copy();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(127, 36);
      constantPoolGen1.toString();
      int int1 = Float.MIN_EXPONENT;
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constant0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
}
