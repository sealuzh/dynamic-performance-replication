/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 03:27:39 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.common.plugins.MapNodePositionHolderBase;
import java.awt.AWTEventMulticaster;
import java.awt.Choice;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.geom.AffineTransform;
import java.beans.PropertyChangeListener;
import java.io.ByteArrayOutputStream;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Locale;
import java.util.Properties;
import java.util.TimeZone;
import javax.help.TryMap;
import javax.swing.AbstractButton;
import javax.swing.DebugGraphics;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.TransferHandler;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.PanelUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.GapContent;
import javax.swing.text.GlyphView;
import javax.swing.text.LabelView;
import javax.swing.text.PlainDocument;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellEditor;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.templates.OutputProperties;
import org.apache.xml.serializer.EmptySerializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = Locale.forLanguageTag("");
      locale0.hasExtensions();
      locale0.getExtensionKeys();
      jDayChooser0.setLocale(locale0);
      JMenu jMenu0 = new JMenu();
      MenuSelectionManager.defaultManager();
      jDayChooser0.setYear(68);
      jDayChooser0.setDay(1493);
      jDayChooser0.getFocusTraversalKeys(2);
      Font font0 = new Font("day", 42, 44);
      jDayChooser0.setFont(font0);
      jDayChooser0.setMonth(42);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      jDayChooser0.setForeground(systemColor0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser1, 2);
      jDayChooser1.focusGained(focusEvent0);
      jDayChooser0.keyTyped((KeyEvent) null);
      assertEquals(31, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MenuElement[] menuElementArray0 = new MenuElement[1];
      JMenu jMenu0 = new JMenu();
      menuElementArray0[0] = (MenuElement) jMenu0;
      Object[][] objectArray0 = new Object[3][5];
      objectArray0[0] = (Object[]) menuElementArray0;
      objectArray0[1] = (Object[]) menuElementArray0;
      objectArray0[2] = (Object[]) menuElementArray0;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray0[2]);
      JTable jTable0 = new JTable(defaultTableModel0);
      Rectangle rectangle0 = jTable0.getCellRect(41, 41, true);
      jDayChooser0.paintImmediately(rectangle0);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 17, 3450L, 4400, 41, '\u0084', menuElementArray0, menuSelectionManager0);
      KeyEvent.getKeyText(2655);
      jDayChooser0.keyPressed(menuKeyEvent0);
      Color color0 = Color.yellow;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setMonth(4400);
      Timestamp timestamp0 = new Timestamp(0);
      Date date0 = new Date(3450L);
      jDayChooser0.setMaxSelectableDate(date0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getLocale();
      jDayChooser1.focusGained((FocusEvent) null);
      jDayChooser0.getMaxSelectableDate();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[1];
      JMenu jMenu0 = new JMenu();
      menuElementArray0[0] = (MenuElement) jMenu0;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Object[][]) null, (Object[]) null);
      JTable jTable0 = new JTable(defaultTableModel0);
      Rectangle rectangle0 = jTable0.getCellRect((-4140), 41, true);
      jDayChooser0.paintImmediately(rectangle0);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jTable0, 4400, 0L, (-4140), 0, '`', menuElementArray0, menuSelectionManager0);
      String string0 = AbstractButton.MNEMONIC_CHANGED_PROPERTY;
      jDayChooser0.keyPressed(menuKeyEvent0);
      Color color0 = Color.yellow;
      jDayChooser0.setDecorationBackgroundColor(color0);
      Color color1 = Color.blue;
      jDayChooser0.setDecorationBackgroundColor(color1);
      jDayChooser0.getDecorationBackgroundColor();
      DefaultTableModel defaultTableModel1 = new DefaultTableModel();
      ActionEvent actionEvent0 = new ActionEvent(jTable0, 49, "28", (-1571));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JTable cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters((-225));
      jDayChooser0.drawWeeks();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setMonth(5);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton1.paint((Graphics) null);
      jDayChooser0.getKeyListeners();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setYear(0);
      JYearChooser jYearChooser0 = new JYearChooser();
      assertFalse(jYearChooser0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      jDayChooser0.getMinSelectableDate();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      Locale locale0 = new Locale("day", "day", "day");
      locale0.clone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      jDayChooser0.dayNames = stringArray0;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getWeekdayForeground();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      System.setCurrentTimeMillis(1L);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JMenuItem jMenuItem0 = new JMenuItem("day");
      Color color0 = Color.yellow;
      jDayChooser1.drawWeeks();
      MenuElement[] menuElementArray0 = new MenuElement[2];
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      menuElementArray0[1] = (MenuElement) jMenuItem0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser1, 164, 1L, 164, (-1666), 'x', menuElementArray0, (MenuSelectionManager) null);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      JDayChooser jDayChooser3 = new JDayChooser(true);
      jDayChooser3.keyPressed(menuKeyEvent0);
      JDayChooser jDayChooser4 = new JDayChooser();
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      Date date0 = new Date(1L);
      jDayChooser2.setMinSelectableDate(date0);
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(1);
      System.setCurrentTimeMillis(1);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JMenuItem jMenuItem0 = new JMenuItem("day");
      Color color0 = Color.yellow;
      jDayChooser0.drawWeeks();
      MenuElement[] menuElementArray0 = new MenuElement[1];
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 1450, 0L, 3379, 164, 'v', menuElementArray0, (MenuSelectionManager) null);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      JDayChooser jDayChooser3 = new JDayChooser(true);
      jDayChooser3.keyPressed(menuKeyEvent0);
      JDayChooser jDayChooser4 = new JDayChooser();
      JDayChooser jDayChooser5 = new JDayChooser();
      jDayChooser5.keyPressed(menuKeyEvent0);
      jDayChooser5.keyReleased(menuKeyEvent0);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.green;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-829.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2570.0F);
      floatArray0[3] = 586.7518F;
      floatArray0[4] = 1519.9509F;
      floatArray0[5] = 32.0F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      color0.getRGBColorComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 24, (-352), 1750, 24, 'N');
      jDayChooser0.setDay(7);
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.isDayBordersVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser0.days = null;
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      Color color0 = Color.green;
      jDayChooser0.setDecorationBackgroundColor(color0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser_DecoratorButton1, 24);
      jDayChooser0.focusLost(focusEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.setWeekdayForeground(color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 25);
      jDayChooser0.focusLost(focusEvent0);
      PlainDocument plainDocument0 = new PlainDocument();
      Element element0 = plainDocument0.getParagraphElement(911);
      LabelView labelView0 = new LabelView(element0);
      Color.getColor("day");
      jDayChooser0.setWeekdayForeground((Color) null);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setSundayForeground((Color) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0, "day");
      jDayChooser0.removePropertyChangeListener((PropertyChangeListener) jSpinner_NumberEditor0);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true);
      focusEvent0.getOppositeComponent();
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusGained(focusEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      KeyEvent keyEvent0 = new KeyEvent(jSpinner0, 2497, (-2158L), 32, 32, 'j');
      jDayChooser0.keyReleased(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.firePropertyChange("30", ';', 'Q');
      jDayChooser0.isWeekOfYearVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "C {F<j");
      jDayChooser0.setDay(2);
      jDayChooser0.getDayPanel();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(2, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = Locale.forLanguageTag("");
      jDayChooser0.setLocale(locale0);
      jDayChooser0.firePropertyChange("", (-2303L), (-9223372036854775808L));
      jDayChooser0.getTransferHandler();
      int int0 = (-518);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1513), 2010L, (-518), 34, 'f');
      KeyEvent.getKeyText((-1513));
      keyEvent0.consume();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = Locale.forLanguageTag("Metal");
      jDayChooser0.setLocale(locale0);
      JMenu jMenu0 = new JMenu();
      MenuSelectionManager.defaultManager();
      JYearChooser jYearChooser0 = new JYearChooser();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)62;
      byteArray0[8] = (byte)115;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jYearChooser0.setVisible(true);
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setMaxDayCharacters(2);
      StringContent stringContent0 = new StringContent();
      PlainDocument plainDocument0 = new PlainDocument(stringContent0);
      JYearChooser jYearChooser1 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      
      jDayChooser0.setMaxDayCharacters(68);
      jDayChooser0.setDay(2);
      jDayChooser0.setWeekdayForeground((Color) null);
      jDayChooser0.setEnabled(true);
      Color color0 = Color.PINK;
      jDayChooser0.setSundayForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[1];
      JMenu jMenu0 = new JMenu();
      menuElementArray0[0] = (MenuElement) jMenu0;
      Object[][] objectArray0 = new Object[3][5];
      objectArray0[0] = (Object[]) menuElementArray0;
      objectArray0[1] = (Object[]) menuElementArray0;
      jDayChooser0.firePropertyChange("8[DKUpYySby?Q@CQ", (long) 41, (-9223372036854775808L));
      KeyEvent keyEvent0 = new KeyEvent(jMenu0, 41, (-303L), 41, (-1884), 'D');
      KeyEvent.getKeyText(41);
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.drawWeeks();
      FocusEvent focusEvent0 = new FocusEvent(jMenu0, (-130945), false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 600000L;
      floatArray0[1] = (float) '\u0084';
      floatArray0[2] = (float) (-9223372036854775808L);
      floatArray0[3] = (float) 41;
      floatArray0[4] = (float) (-303L);
      floatArray0[5] = (float) (-130945);
      AffineTransform affineTransform0 = new AffineTransform(floatArray0);
      GraphicContext graphicContext0 = new GraphicContext(affineTransform0);
      Color color1 = graphicContext0.getColor();
      jDayChooser0.setWeekdayForeground(color1);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setSundayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[1];
      JMenu jMenu0 = new JMenu();
      jDayChooser0.getAutoscrolls();
      menuElementArray0[0] = (MenuElement) jMenu0;
      Object[][] objectArray0 = new Object[7][5];
      objectArray0[0] = (Object[]) menuElementArray0;
      objectArray0[1] = (Object[]) menuElementArray0;
      objectArray0[2] = (Object[]) menuElementArray0;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray0[2]);
      JTable jTable0 = new JTable(defaultTableModel0);
      jMenu0.getRolloverIcon();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jDayChooser0, (-1956), 1272L, 41, 2, (-1), 41, false, menuElementArray0, menuSelectionManager0);
      menuSelectionManager0.processMouseEvent(menuDragMouseEvent0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 17, 3450L, 4400, 41, '\u0084', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.isDecorationBordersVisible();
      Color color0 = Color.yellow;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getLocale();
      System.setCurrentTimeMillis(41);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.setVisible(false);
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setMaxDayCharacters(2);
      StringContent stringContent0 = new StringContent();
      PlainDocument plainDocument0 = new PlainDocument(stringContent0);
      Element element0 = plainDocument0.getParagraphElement((byte)31);
      GlyphView glyphView0 = new GlyphView(element0);
      glyphView0.getBackground();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      System.setCurrentTimeMillis(2);
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getComponentListeners();
      jDayChooser0.getMinSelectableDate();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setYear(1);
      jDayChooser0.setDay(1);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-3489), true, jDayChooser0);
      focusEvent0.paramString();
      focusEvent0.paramString();
      focusEvent0.paramString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.focusLost(focusEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "unknown type,temporary,opposite=accessories.plugins.time.JDayChooser[JDayChooser,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
      Font font0 = new Font("day", 1, 975);
      jDayChooser1.setFont(font0);
      jDayChooser1.setMonth(7);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      GapContent gapContent0 = new GapContent((-927));
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      styleContext_NamedStyle0.getAttributeNames();
      Color color0 = defaultStyledDocument0.getForeground(styleContext_NamedStyle0);
      jDayChooser0.setForeground(color0);
      try { 
        MockURL.URL("day", "CloseAction", (-927), "{Ej4,RG}A}CPgU-Y", (URLStreamHandler) null);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid port number :-927
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 5492, true);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.HORIZONTAL_ORIENTATION_ANGLE;
      JMenu jMenu0 = new JMenu();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 2, 1L, 11, (-2251), 'C', menuElementArray0, menuSelectionManager0);
      JDayChooser jDayChooser1 = new JDayChooser((boolean) gVTAttributedCharacterIterator_TextAttribute0.OVERLINE_ON);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setDay(48);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setDay(0);
      Color color0 = Color.BLUE;
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getColorSpace();
      jpegImage0.load(0);
      // Undeclared exception!
      try { 
        color0.getComponents((ColorSpace) null, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      Locale locale0 = Locale.forLanguageTag("day");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-80);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setLocale(locale0);
      PDFDocument pDFDocument0 = new PDFDocument("day");
      pDFDocument0.getInfo();
      java.util.Date date0 = jDayChooser0.defaultMinSelectableDate;
      java.util.Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      JDayChooser jDayChooser1 = new JDayChooser();
      Timestamp timestamp0 = new Timestamp(454L);
      jDayChooser1.setSelectableDateRange(date1, timestamp0);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.getLocale();
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = Locale.forLanguageTag("");
      jDayChooser0.setLocale(locale0);
      JMenu jMenu0 = new JMenu();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      jDayChooser0.setYear(30);
      jDayChooser0.setDay(1504);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 30, true, jMenu0);
      TransferHandler transferHandler0 = new TransferHandler("");
      MenuSelectionManager.defaultManager();
      MenuElement[] menuElementArray0 = new MenuElement[3];
      menuElementArray0[0] = (MenuElement) jMenu0;
      menuElementArray0[1] = (MenuElement) jMenu0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jMenu0, 30, 0L, 1542, 0, 'N', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.setKeyChar('<');
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.keyPressed(menuKeyEvent0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getFont();
      jDayChooser0.setFont((Font) null);
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JMenu jMenu0 = new JMenu();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuElement[] menuElementArray0 = new MenuElement[2];
      menuElementArray0[0] = (MenuElement) jMenu0;
      menuElementArray0[1] = (MenuElement) jMenu0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jMenu0, 2270, (byte)31, (byte)31, (byte)31, 'N', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.setKeyChar('0');
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.keyPressed(menuKeyEvent0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[1] = "JSpinField";
      stringArray0[2] = "hrb?-0pPh&(?vi?sB|";
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)38;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (byte) (-109), (-2784L), 3263, (byte)38, '}');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      byte[] byteArray0 = new byte[1];
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.setVisible(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.drawWeeks();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = Locale.forLanguageTag("");
      jDayChooser0.setLocale(locale0);
      JMenu jMenu0 = new JMenu();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      jDayChooser0.setYear(30);
      jDayChooser0.setDay(1504);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 30, true, jMenu0);
      TransferHandler transferHandler0 = new TransferHandler("");
      MenuSelectionManager.defaultManager();
      MenuElement[] menuElementArray0 = new MenuElement[3];
      menuElementArray0[0] = (MenuElement) jMenu0;
      menuElementArray0[1] = (MenuElement) jMenu0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jMenu0, 30, 0L, 1542, 0, 'N', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.setKeyChar('.');
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 5492, true);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.HORIZONTAL_ORIENTATION_ANGLE;
      focusEvent0.setSource(gVTAttributedCharacterIterator_TextAttribute0);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.setEnabled(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setWeekOfYearVisible(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_NONE, (-1025L), (-148), 10087, 'm');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JPanel jPanel0 = new JPanel();
      jDayChooser0.weekPanel = jPanel0;
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.isDayBordersVisible();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 5492, true);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.HORIZONTAL_ORIENTATION_ANGLE;
      focusEvent0.setSource(gVTAttributedCharacterIterator_TextAttribute0);
      focusEvent0.getOppositeComponent();
      focusEvent0.paramString();
      jDayChooser0.focusGained(focusEvent0);
      java.util.Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setYear(5492);
      jDayChooser0.setDay(5492);
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 5492, true, jDayChooser0);
      TransferHandler transferHandler0 = new TransferHandler("day");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_NONE, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_TERMINAL, 8);
      mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setMaxSelectableDate(date0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((int) gVTAttributedCharacterIterator_TextAttribute0.ADJUST_ALL, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_TERMINAL, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_INITIAL, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_NONE, (int) gVTAttributedCharacterIterator_TextAttribute0.ADJUST_ALL);
      jDayChooser0.getSundayForeground();
      jDayChooser0.getWeekdayForeground();
      assertEquals(29, jDayChooser0.getDay());
      
      JDayChooser jDayChooser1 = new JDayChooser();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, (boolean) gVTAttributedCharacterIterator_TextAttribute0.OVERLINE_ON, false, false);
      jDayChooser1.setDecorationBackgroundVisible(true);
      jDayChooser1.updateUI();
      jDayChooser1.addListeners((int) gVTAttributedCharacterIterator_TextAttribute0.UNDERLINE_ON);
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.setVisible(true);
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.drawWeeks();
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(14, jDayChooser0.getDay());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      System.setCurrentTimeMillis(981L);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.info;
      jDayChooser1.setForeground(systemColor0);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMouseListeners();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Center");
      jDayChooser0.setYear((-2778));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2778), 0L, 2385, 2932, ':');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMaxDayCharacters((-2778));
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      Locale locale0 = Locale.forLanguageTag("");
      jDayChooser0.setLocale(locale0);
      PDFDocument pDFDocument0 = new PDFDocument("b`G");
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((java.util.Date) null, (java.util.Date) null);
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMenu jMenu0 = new JMenu();
      MenuSelectionManager.defaultManager();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jMenu0, 2, 2, (-1933), 238, ',', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMouseListeners();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "West");
      jDayChooser0.setYear((-1781));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1781), (-1781), (-1781), (-1781), '.');
      jDayChooser0.keyTyped(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.isDayBordersVisible();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 5492, true);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.HORIZONTAL_ORIENTATION_ANGLE;
      focusEvent0.setSource(gVTAttributedCharacterIterator_TextAttribute0);
      focusEvent0.getOppositeComponent();
      focusEvent0.paramString();
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setYear(5492);
      jDayChooser0.setDay(5492);
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 5492, true, jDayChooser0);
      focusEvent1.paramString();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Font font0 = new Font("-z&OFNpX=k@", (int) gVTAttributedCharacterIterator_TextAttribute0.ORIENTATION_AUTO, 5492);
      jDayChooser0.setFont(font0);
      jDayChooser0.setMonth((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_INITIAL);
      jDayChooser0.isPaintingTile();
      jDayChooser0.setYear(1480);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      assertEquals(30, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setForeground((Color) null);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(true);
      assertEquals(14, jDayChooser0.getDay());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.grabFocus();
      jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(3266);
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      jDayChooser0.setSundayForeground(systemColor0);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser_DecoratorButton0, (-4799), (-2529L), (-4799), 3266, '7', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.menuText;
      jDayChooser0.setSundayForeground(systemColor0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.decorationBordersVisible = false;
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setFocus();
      Color color0 = DebugGraphics.flashColor();
      color0.getColorSpace();
      jDayChooser0.setWeekdayForeground(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.getUI();
      KeyEvent keyEvent0 = new KeyEvent(jYearChooser0, (-969), (-969), 49, 26, 'w');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.getLocale();
      jDayChooser0.setDay(139);
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getLocale();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.addListeners(10);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setEnabled(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2665), false);
      jDayChooser0.focusGained(focusEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[2];
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("day", false);
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      JRadioButtonMenuItem jRadioButtonMenuItem1 = new JRadioButtonMenuItem("day", (Icon) null, false);
      menuElementArray0[1] = (MenuElement) jRadioButtonMenuItem1;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 36, 856L, (-1666), 1076, '~', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-2982), "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Metal");
      byteArray0[0] = (byte)76;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      System.setCurrentTimeMillis((byte)76);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setWeekdayForeground(systemColor0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_FORM;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_NONE, "2#G{D2}f", (-2912L), (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED);
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals((-16754012), color0.getRGB());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultClosedIcon();
      JButton jButton0 = new JButton(icon0);
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 1201, "Windows");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      ImageIcon imageIcon0 = MapNodePositionHolderBase.sMapLocationIcon;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JCheckBox jCheckBox0 = new JCheckBox((Icon) null, true);
      DefaultCellEditor defaultCellEditor0 = new DefaultCellEditor(jCheckBox0);
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor((JTree) null, defaultTreeCellRenderer0, defaultCellEditor0);
      defaultTreeCellEditor0.getBorderSelectionColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      Choice choice0 = null;
      try {
        choice0 = new Choice();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.BLUE;
      jDayChooser0.setSundayForeground(color0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      MockDate mockDate0 = new MockDate();
      Color color0 = Color.green;
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2332));
      jDayChooser0.focusLost(focusEvent0);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.FLOW_EMPTY_PARAGRAPH;
      ActionEvent actionEvent0 = new ActionEvent("Jf\"O*s4^0S:]|~Xt~-", (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED, "expected SVGLength", (-2332));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.LENGTH_ADJUST;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, 2056, "day", 13L, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_NONE);
      ActionEvent actionEvent1 = new ActionEvent(jDayChooser0, (int) gVTAttributedCharacterIterator_TextAttribute0.UNDERLINE_ON, "year");
      actionEvent1.paramString();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.keyReleased((KeyEvent) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Center");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInheritsPopupMenu();
      jDayChooser0.getDecorationBackgroundColor();
      int int0 = (-1627);
      int int1 = (-1);
      ActionEvent actionEvent0 = new ActionEvent("Center", (-1627), "=x~S,mXTa.jn", (-1));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(90, color0.getGreen());
      
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setMonth(1235);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "JSpinField";
      stringArray0[2] = "hrb?-0pPh&(?vi?sB|";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-115);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      ActionEvent actionEvent0 = new ActionEvent(mockGregorianCalendar0, (byte)38, "West");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[1];
      JMenu jMenu0 = new JMenu();
      menuElementArray0[0] = (MenuElement) jMenu0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-1933), 0L, 41, 41, 'q', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = SwingConstants.NEXT;
      jDayChooser0.setDecorationBackgroundVisible(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getHierarchyBoundsListeners();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.days = null;
      jDayChooser0.getDaysInMonth();
      // Undeclared exception!
      try { 
        jDayChooser0.setDecorationBackgroundVisible(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[1] = "JSpinField";
      stringArray0[2] = "hrb?-0pPh&(?vi?sB|";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)38;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (byte) (-115), (-2784L), 3263, (byte)38, '}');
      jDayChooser0.keyPressed(keyEvent0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JYearChooser jYearChooser0 = new JYearChooser();
      PanelUI panelUI0 = jDayChooser0.getUI();
      jYearChooser0.setUI(panelUI0);
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setMaxDayCharacters(26);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 26, 26, 26, 26, 'u');
      jDayChooser0.keyReleased(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = jDayChooser0.getBaselineResizeBehavior();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-323), (-323), 710, 525, '/');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDay();
      ActionEvent actionEvent0 = new ActionEvent(keyEvent0, 12, "day", 41);
      actionEvent0.setSource(jDayChooser0);
      actionEvent0.setSource(component_BaselineResizeBehavior0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.Component$BaselineResizeBehavior cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      Locale locale0 = Locale.forLanguageTag("");
      jDayChooser0.setLocale(locale0);
      PDFDocument pDFDocument0 = new PDFDocument("b`G");
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      java.util.Date date0 = jDayChooser0.setMaxSelectableDate((java.util.Date) null);
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initialized = false;
      MockDate mockDate0 = new MockDate(3, (-1896), 8, 3, 2022);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.setYear(39);
      long long0 = 1073741824L;
      int int0 = (-346);
      char char0 = '=';
      MenuElement[] menuElementArray0 = new MenuElement[7];
      ImageIcon imageIcon0 = null;
      try {
        imageIcon0 = new ImageIcon((URL) null, "=38}q>Y8TMo|c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 1679, "mode_status", 333L, 1679);
      jDayChooser0.getComponentPopupMenu();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuElement[] menuElementArray0 = new MenuElement[3];
      menuElementArray0[0] = (MenuElement) null;
      menuElementArray0[1] = (MenuElement) null;
      menuElementArray0[2] = (MenuElement) null;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 1679, 1679, 1679, (-1839), 'h', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)16;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setLenient(true);
      mockGregorianCalendar0.set((-342), 38, 833, (int) (byte)11, (int) (byte)38);
      mockGregorianCalendar0.toZonedDateTime();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(30, int0);
      
      jDayChooser0.updateUI();
      jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.repaint((-1548), (-1548), (-1548), (-1548));
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setIgnoreRepaint(false);
      jDayChooser0.setOpaque(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)49;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (byte)58, (-1119L), (byte)49, (byte)49, 'r');
      jDayChooser0.keyReleased(keyEvent0);
      Date date0 = new Date(2147483647L);
      jDayChooser0.setMaxSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-453));
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setFocus();
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setIgnoreRepaint(false);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, int0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      EmptySerializer emptySerializer0 = new EmptySerializer();
      emptySerializer0.getOutputFormat();
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1765);
      jDayChooser0.focusGained(focusEvent0);
      OutputProperties outputProperties0 = new OutputProperties((Properties) null);
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(outputProperties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDoubleBuffered(false);
      jDayChooser0.setSize(15, 15);
      jDayChooser0.drawWeeks();
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1636);
      jDayChooser0.focusLost(focusEvent0);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 1, 0L, 494, (-2407), '8', 26);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[2];
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "14");
      Icon icon0 = defaultTreeCellRenderer0.getDefaultLeafIcon();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("?\"cUD2Ra", icon0);
      menuElementArray0[0] = (MenuElement) jCheckBoxMenuItem0;
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      menuElementArray0[1] = (MenuElement) jPopupMenu0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 3668, 3668, (-527), 3668, '9', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1148, 1148, 1148, 1148, '\\');
      jDayChooser0.keyTyped(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setYear((-3491));
      jDayChooser0.getMouseListeners();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getAutoscrolls();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "AP0<bhncX+BFH");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3, 196L, 17, 17, '6', 3);
      jDayChooser0.setAlwaysFireDayProperty(true);
      keyEvent0.consume();
      InputEvent.getModifiersExText(40);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setFocus();
      jDayChooser0.getWeekdayForeground();
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, 17, ")_E1", 3, 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(10129, 16);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      Color color0 = jTable0.getGridColor();
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 10129;
      floatArray0[1] = (float) 16;
      floatArray0[2] = (float) 16;
      color0.getRGBColorComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.isDayBordersVisible();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 5492, true);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.HORIZONTAL_ORIENTATION_ANGLE;
      focusEvent0.setSource(gVTAttributedCharacterIterator_TextAttribute0);
      focusEvent0.getOppositeComponent();
      focusEvent0.paramString();
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setYear(5492);
      jDayChooser0.setDay(5492);
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 5492, true, jDayChooser0);
      focusEvent1.paramString();
      jDayChooser0.focusLost(focusEvent1);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Font font0 = new Font("-z&OFNpX=k@", 3894, 5492);
      jDayChooser0.setFont(font0);
      jDayChooser0.setMonth(3894);
      jDayChooser0.isPaintingTile();
      jDayChooser0.setYear(1480);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      assertEquals(31, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      Color color0 = jDayChooser1.getSundayForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      TryMap tryMap0 = new TryMap();
      try { 
        MockURL.URL("day");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: day
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = true;
      int int0 = 1028;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1028);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, byteArrayOutputStream0, (-158), 14);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.getDecorationBackgroundColor();
      String string0 = "FWF2AIU74T&fK7q3";
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("FWF2AIU74T&fK7q3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.repaint((-1548), (-1548), (-1548), (-1548));
      Font font0 = new Font("", 0, 0);
      jDayChooser0.setFont(font0);
      jDayChooser0.setMonth(0);
      jDayChooser0.isPaintingTile();
      jDayChooser0.setYear((-1061));
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.getDaysInMonth();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(28, 3800, 3800, 9, 9);
      mockGregorianCalendar0.get(0);
      mockGregorianCalendar0.setTimeInMillis(3800);
      mockGregorianCalendar0.isLeapYear(9);
      jDayChooser0.getTransferHandler();
      java.util.Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setMaxSelectableDate(date0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.repaint((-1502), 10170, (-1548), 2469);
      Font font0 = new Font("day", 0, (-1548));
      jDayChooser0.setFont(font0);
      jDayChooser0.setMonth((-1548));
      jDayChooser0.isPaintingTile();
      jDayChooser0.setYear((-1548));
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setDecorationBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getLocale();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 38, true);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setDecorationBordersVisible(true);
      Locale locale0 = Locale.forLanguageTag("");
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("ndO1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: ndO1
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = new Date(0L);
      jDayChooser0.setMaxSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.hasFocus();
      jDayChooser0.setInheritsPopupMenu(false);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[1];
      jDayChooser0.getComponentPopupMenu();
      menuElementArray0[0] = (MenuElement) null;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-1206), 604800000L, 0, 12, 'V', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 1679, "mode_status", 333L, 4606);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.repaint((-1548), (-1548), (-1548), (-1548));
      Font font0 = new Font("", 0, 0);
      jDayChooser0.setFont(font0);
      jDayChooser0.setMonth(0);
      jDayChooser0.isPaintingTile();
      jDayChooser0.setYear((-1061));
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.isDayBordersVisible();
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "JSpinField";
      stringArray0[2] = "hrb?-0pPh&(?vi?sB|";
      stringArray0[3] = "00m-B49n,s$#";
      stringArray0[4] = "";
      stringArray0[5] = "'@(9M 3z.8H&wPgG=9";
      stringArray0[6] = "Dialog Plain 11";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getDaysInMonth();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(31, 31, 31, 31, 31);
      mockGregorianCalendar0.get(0);
      mockGregorianCalendar0.setTimeInMillis(0);
      mockGregorianCalendar0.isLeapYear(31);
      java.util.Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setMaxSelectableDate(date0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.isDayBordersVisible();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 5492, true);
      focusEvent0.paramString();
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setYear(5492);
      jDayChooser0.setDay(5492);
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 5492, true, jDayChooser0);
      focusEvent1.paramString();
      jDayChooser0.focusLost(focusEvent1);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MockFile mockFile0 = new MockFile("day");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "&,Wv&vhUH}sGg$u#");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // &,Wv&vhUH}sGg$u#
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getFocusListeners();
      java.util.Date date0 = jDayChooser0.setMinSelectableDate((java.util.Date) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.transferFocusDownCycle();
      jDayChooser_DecoratorButton0.isFocusable();
      Color color0 = Color.getHSBColor((-1425.07F), (-1425.07F), (-1403.2515F));
      jDayChooser0.setForeground(color0);
      jDayChooser0.setWeekOfYearVisible(true);
      Locale locale0 = Locale.UK;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMinSelectableDate((java.util.Date) null);
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.isDecorationBordersVisible();
      DefaultComboBoxModel<Integer> defaultComboBoxModel0 = new DefaultComboBoxModel<Integer>();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.SMALL_CAPS;
      defaultComboBoxModel0.addElement(integer0);
      defaultComboBoxModel0.removeAllElements();
      // Undeclared exception!
      try { 
        defaultComboBoxModel0.removeElementAt(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDayPanel();
      jDayChooser0.getMaxSelectableDate();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = new Locale("U;;{:oxK}Z7p<U", "U;;{:oxK}Z7p<U");
      jDayChooser0.setLocale(locale0);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.setDebugGraphicsOptions(14);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.drawWeeks();
      jDayChooser0.getSelectedDay();
      MockDate mockDate0 = new MockDate();
      jDayChooser0.maxDayCharacters = (-540);
      MockDate.UTC(14, 0, (-131), 0, 0, (-131));
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.init();
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D((Document) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // domFactory should not be null
         //
         verifyException("org.apache.batik.svggen.SVGGeneratorContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Rectangle rectangle0 = jDayChooser0.getVisibleRect();
      Rectangle rectangle1 = new Rectangle(rectangle0);
      rectangle1.translate((-1361), 2748);
      jDayChooser0.getBounds(rectangle1);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-2292));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
