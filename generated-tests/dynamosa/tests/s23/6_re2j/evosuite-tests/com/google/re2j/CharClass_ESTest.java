/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 11:09:19 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-17);
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-17), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[3][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      // Undeclared exception!
      charClass1.appendTableWithSign(intArray1, (-1149));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-17);
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-17), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[3][0];
      intArray1[0] = intArray0;
      int int0 = (-2225);
      CharClass charClass2 = charClass1.appendFoldedRange(3582, (-2225));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {(-17), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      try { 
        charClass2.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      int[][] intArray1 = new int[8][2];
      intArray1[0] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass1 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass1.cleanClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 69688;
      intArray0[1] = (-451);
      intArray0[2] = 1563;
      intArray0[4] = 304;
      intArray0[6] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {69688, (-451), 1563, 0, 304, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 69687, (-450), 1562, 1, 303, 1, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral(2114, 1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 69687, (-450), 1562, 1, 303, 1, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendFoldedRange(66640, 69688);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 69687, (-450), 1562, 1, 303, 1, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {(-450), 1114111, 0, 69687, 1, 1114111, 1, 303}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertArrayEquals(new int[] {(-450), 1114111, 0, 69687, 1, 1114111, 1, 303}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.appendClass(intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertArrayEquals(new int[] {(-450), 1114111, 0, 69687, 1, 1114111, 1, 303}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass6.negateClass();
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass0);
      assertArrayEquals(new int[] {(-450), 1114111, 0, 69687, 1, 1114111, 1, 303}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass7);
      
      // Undeclared exception!
      try { 
        charClass3.appendTableWithSign((int[][]) null, 69687);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3892;
      intArray0[1] = 4607;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[0][7];
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass2);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = 4607;
      intArray2[2] = 4607;
      intArray2[3] = 0;
      CharClass charClass3 = charClass2.appendNegatedClass(intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {0, 4607, 4607, 0}, intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass2.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass0.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass5);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 69688;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {69688, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 69687, 1, 1114111, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral((-1346), 304);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 69687, 1, 1114111, (-1346), (-1346), 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      charClass1.appendFoldedRange(1563, 66639);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3892;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3892, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[1][7];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {3892, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 0, 3892, 0, 0, 0, 3892, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 3892);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[2][4];
      int[] intArray1 = new int[0];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass1);
      
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1341;
      intArray2[1] = 3995;
      intArray2[2] = 703;
      intArray2[3] = 2835;
      intArray2[4] = 232;
      intArray2[5] = 0;
      intArray0[0] = intArray2;
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 232;
      intArray3[1] = 2835;
      intArray3[2] = 232;
      intArray3[3] = 0;
      intArray0[1] = intArray3;
      CharClass charClass2 = charClass0.appendTableWithSign(intArray0, 0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      
      int[] intArray4 = new int[5];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      CharClass charClass3 = charClass0.appendFoldedRange(2, 232);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray2, 2300);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray4);
      assertNotSame(intArray2, intArray3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertArrayEquals(new int[] {1341, 3995, 703, 2835, 232, 0}, intArray2);
      assertEquals(6, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray4));
      assertFalse(intArray2.equals((Object)intArray3));
      assertNotNull(charClass4);
      
      intArray4[0] = 0;
      intArray4[1] = 1341;
      intArray4[2] = 0;
      intArray4[3] = 6816;
      intArray4[4] = 2835;
      // Undeclared exception!
      try { 
        charClass2.appendClassWithSign(intArray4, 1341);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-597);
      intArray0[2] = 0;
      intArray0[3] = (-1156);
      intArray0[4] = 65536;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, (-597), 0, (-1156), 65536}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass1.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 3258;
      int int0 = 0;
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3258, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      charClass1.appendFoldedRange((-2831), 3258);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-3235);
      intArray0[1] = 0;
      int int0 = 1131;
      intArray0[2] = 1131;
      intArray0[3] = 68472;
      intArray0[4] = (-727);
      intArray0[5] = 1919;
      intArray0[6] = 0;
      intArray0[7] = (-1923);
      intArray0[8] = (-529);
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2405;
      intArray0[1] = (-2);
      intArray0[2] = 605;
      intArray0[3] = (-1);
      intArray0[4] = 1399;
      intArray0[5] = 120744;
      intArray0[6] = 794;
      intArray0[7] = 1835;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2405, (-2), 605, (-1), 1399, 120744, 794, 1835}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[8][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 1835);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertArrayEquals(new int[] {2405, (-2), 605, (-1), 1399, 120744, 794, 1835}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertArrayEquals(new int[] {2405, (-2), 605, (-1), 1399, 120744, 0, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      charClass2.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(7, 32);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign((int[]) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3892;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-17);
      intArray1[1] = 3892;
      intArray1[2] = 1840;
      intArray1[3] = (-17);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray1);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-17), 3892, 1840, (-17)}, intArray1);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass1);
      
      int[][] intArray2 = new int[8][5];
      intArray2[0] = intArray1;
      intArray2[1] = intArray0;
      intArray2[2] = intArray1;
      intArray2[3] = intArray1;
      intArray2[4] = intArray0;
      intArray2[5] = intArray1;
      intArray2[6] = intArray1;
      intArray2[7] = intArray1;
      CharClass charClass2 = charClass0.appendTableWithSign(intArray2, (-1507));
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertEquals(8, intArray2.length);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3992;
      intArray0[1] = 0;
      intArray0[2] = 4;
      intArray0[3] = 2026;
      intArray0[5] = 0;
      intArray0[6] = 589822;
      intArray0[7] = 1;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3992, 0, 4, 2026, 0, 0, 589822, 1}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(589822, 4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {3992, 0, 4, 2026, 0, 0, 589822, 1}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {3992, 0, 4, 2026, 0, 0, 589822, 1}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[2][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {3992, 0, 4, 2026, 0, 0, 589822, 1}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass1.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {3992, 0, 4, 2026, 0, 0, 589822, 1}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass4);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1625);
      intArray0[3] = 66639;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, (-1625), 66639}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, (-1625), 66639}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 66639);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 0, (-1625), 66639}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 0, (-1625), 66639}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {0, 0, (-1625), 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendFoldedRange(6085, 0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertArrayEquals(new int[] {0, 0, (-1625), 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass5);
      
      int[][] intArray1 = new int[2][6];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 6085;
      intArray2[1] = (-1625);
      intArray2[2] = 0;
      intArray2[3] = 66639;
      intArray2[4] = 0;
      intArray2[5] = 66639;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray2, 6085);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3992;
      intArray0[1] = 0;
      intArray0[2] = 4;
      intArray0[3] = 2026;
      intArray0[4] = 1114111;
      intArray0[5] = 0;
      intArray0[6] = 589822;
      intArray0[7] = 1;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3992, 0, 4, 2026, 1114111, 0, 589822, 1}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(589822, 4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {3992, 0, 4, 2026, 1114111, 0, 589822, 1}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {3992, 0, 4, 2026, 1114111, 0, 589822, 1}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[2][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass3 = charClass2.appendTable(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {3992, 0, 4, 2026, 1114111, 0, 589822, 1}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {3992, 0, 4, 2026, 1114111, 0, 589822, 1}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.negateClass();
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertArrayEquals(new int[] {3992, 0, 4, 2026, 1114111, 0, 589822, 1}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass5);
      
      String string0 = charClass5.toString();
      assertEquals("[0x0-0x3 0x7eb-0xf97 0x1-0x8fffd 0x5-0x8fffd 0x2-0x10fffe]", string0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertArrayEquals(new int[] {3992, 0, 4, 2026, 1114111, 0, 589822, 1}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(359, 359);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int[] intArray0 = charClass2.toArray();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 358, 360, 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray0);
      
      int[][] intArray1 = new int[9][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      CharClass charClass3 = charClass2.appendTableWithSign(intArray1, 2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertEquals(9, intArray1.length);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 611;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {611, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 611);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2);
      intArray0[1] = (-2095);
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {(-2), (-2095)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendLiteral((-1112), (-2631));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {(-2), (-2095)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass2.appendClassWithSign(intArray0, (-2));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertArrayEquals(new int[] {(-2), (-2095)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass3.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertArrayEquals(new int[] {(-2), (-2095)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertArrayEquals(new int[] {(-2), (-2095)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass2.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertArrayEquals(new int[] {(-2), (-2095)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass7);
      assertNotNull(charClass8);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 69688;
      intArray0[1] = (-451);
      intArray0[2] = 1563;
      intArray0[3] = 3175;
      intArray0[4] = 304;
      intArray0[5] = 0;
      intArray0[6] = 3175;
      intArray0[7] = 65;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {69688, (-451), 1563, 3175, 304, 0, 3175, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 69687, (-450), 1562, 1, 3174, 66, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 69687, (-450), 1562, 1, 3174, (-450), 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {(-450), 1114111, (-450), 1562, 0, 69687, 1, 3174}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      
      String string0 = CharClass.charClassToString(intArray0, (-282));
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {(-450), 1114111, (-450), 1562, 0, 69687, 1, 3174}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(string0);
      
      CharClass charClass4 = charClass2.appendLiteral((-1858), 1114111);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {(-450), 1114111, (-1858), (-1858), 0, 69687, 1, 3174}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass4);
      
      // Undeclared exception!
      charClass1.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3257;
      intArray0[1] = 66639;
      intArray0[2] = (-540);
      intArray0[3] = 2101;
      intArray0[4] = 64;
      intArray0[5] = (-3705);
      intArray0[6] = 0;
      intArray0[7] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3257, 66639, (-540), 2101, 64, (-3705), 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange((-622), (-3085));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {3257, 66639, (-540), 2101, 64, (-3705), 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral((-3705), (-622));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {3257, 66639, (-540), 2101, 64, (-3705), 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[7][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      charClass2.appendTableWithSign(intArray1, (-540));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = charClass1.toArray();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      
      String string0 = charClass0.toString();
      assertEquals("[0x0-0x10ffff]", string0);
      assertSame(charClass0, charClass1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3992;
      intArray0[1] = 0;
      intArray0[2] = 4;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3992, 0, 4, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 3991, 1, 3, 1, 1114111, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      String string0 = CharClass.charClassToString((int[]) null, (-1139));
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      CharClass charClass2 = charClass1.appendLiteral((-2825), (-1099));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 3991, 1, 3, 1, 1114111, (-2825), (-2825)}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      charClass2.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 4607;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[0][7];
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass2);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = 4607;
      intArray2[2] = 4607;
      CharClass charClass3 = charClass2.appendNegatedClass(intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {0, 4607, 4607, 0}, intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass1.appendLiteral(124, 4607);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass3.appendRange(119892, 0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertArrayEquals(new int[] {0, 4607, 4607, 0}, intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass0.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass6);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3992;
      intArray0[1] = 0;
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[4] = 1114111;
      intArray0[5] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3992, 0, 4, 4, 1114111, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 4, 4, 3992, 0, 1114111, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 69688;
      intArray0[1] = (-451);
      intArray0[2] = 1563;
      intArray0[3] = 3175;
      intArray0[4] = 304;
      intArray0[5] = 0;
      intArray0[6] = 66640;
      intArray0[7] = 65;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {69688, (-451), 1563, 3175, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(2114, 304);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {69688, (-451), 1563, 3175, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {69688, (-451), 1563, 3175, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {69688, (-451), 1563, 3175, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {69688, (-451), 1563, 3175, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertArrayEquals(new int[] {69688, (-451), 1563, 3175, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.negateClass();
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertArrayEquals(new int[] {69688, (-451), 1563, 3175, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass0.appendFoldedRange(66640, 0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertArrayEquals(new int[] {69688, (-451), 1563, 3175, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass7);
      
      // Undeclared exception!
      try { 
        charClass4.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2693);
      intArray0[1] = 0;
      intArray0[2] = 64;
      intArray0[3] = 1114111;
      intArray0[4] = 66045;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1279;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 66045);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-2693), 0, 64, 1114111, 66045, 0, 0, 1279}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[2][4];
      int[] intArray1 = new int[6];
      intArray1[0] = 65;
      intArray1[2] = 928;
      intArray1[3] = 1393;
      intArray1[4] = 9;
      intArray1[5] = 16;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 9;
      intArray2[1] = 928;
      intArray2[2] = 928;
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      intArray2[3] = 65;
      intArray2[4] = 1301;
      intArray2[5] = 120744;
      intArray2[6] = 2644;
      intArray2[7] = 120744;
      intArray0[1] = intArray2;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, 1393);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      
      int[] intArray3 = charClass1.toArray();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertArrayEquals(new int[] {0, 8, 10, 1114111}, intArray3);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray3.length);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertNotNull(intArray3);
      
      CharClass charClass4 = charClass2.appendLiteral(65, 65);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass0.cleanClass();
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertNotNull(charClass5);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = (-740);
      intArray0[0] = (-740);
      int int1 = 64;
      intArray0[1] = 64;
      intArray0[2] = (-930);
      int int2 = 0;
      intArray0[3] = 0;
      int int3 = 43020;
      intArray0[4] = 43020;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-740), 64, (-930), 0, 43020}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2684);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 283;
      intArray0[1] = 65129;
      intArray0[2] = 128064;
      intArray0[3] = (-2);
      intArray0[4] = 64;
      intArray0[5] = (-1);
      intArray0[6] = 0;
      intArray0[7] = 2444;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {283, 65129, 128064, (-2), 64, (-1), 0, 2444}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(1014, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {283, 65129, 128064, (-2), 64, (-1), 0, 2444}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign((int[][]) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3026);
      intArray0[1] = 6169;
      intArray0[2] = 10;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-3026), 6169, 10, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1289);
      intArray0[1] = (-3166);
      intArray0[2] = (-139);
      intArray0[3] = 133;
      intArray0[4] = 462;
      intArray0[5] = (-628);
      intArray0[6] = 0;
      intArray0[7] = 242;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-1289), (-3166), (-139), 133, 462, (-628), 0, 242}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 242);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-1289), (-3166), (-139), 133, 462, (-628), 0, 242}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {(-1289), (-3166), (-139), 133, 462, (-628), 0, 242}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {(-1289), (-3166), (-139), 133, 462, (-628), 0, 242}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendLiteral((-628), (-1460));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {(-1289), (-3166), (-139), 133, 462, (-628), 0, 242}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendRange(1752, (-2418));
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertArrayEquals(new int[] {(-1289), (-3166), (-139), 133, 462, (-628), 0, 242}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.negateClass();
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertArrayEquals(new int[] {(-1289), (-3166), (-139), 133, 462, (-628), 0, 242}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass6);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3992;
      intArray0[1] = 0;
      intArray0[2] = 4;
      intArray0[4] = 1114111;
      intArray0[5] = 0;
      intArray0[7] = 1;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3992, 0, 4, 0, 1114111, 0, 0, 1}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(0, 4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {3992, 0, 4, 0, 1114111, 0, 0, 4}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 4, 3992, 0, 1114111, 0, 1114111, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[2][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass3 = charClass2.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 4, 3992, 0, 1114111, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {0, 4, 3992, 0, 1114111, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass4);
      
      String string0 = charClass4.toString();
      assertEquals("[0x0-0x4 0xf98-0x0 0x10ffff-0x0 0x0 0x1-0x10ffff]", string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {0, 4, 3992, 0, 1114111, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(string0);
      
      CharClass charClass5 = charClass2.appendNegatedClass(intArray0);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertArrayEquals(new int[] {0, 4, 3992, 0, 1114111, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass5);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2482;
      intArray0[1] = 3022;
      intArray0[2] = 2478;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 3022);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1193);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 3725;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-1193), 0, 0, 3725}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-1193), 3725, 0, 3725}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3026);
      intArray0[1] = 6169;
      int int0 = 2;
      intArray0[2] = 2;
      int int1 = 0;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-3026), 6169, 2, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArrayArray0 = null;
      String string0 = charClass0.toString();
      assertEquals("[0xfffff42e-0x1819 0x2-0x0]", string0);
      assertArrayEquals(new int[] {(-3026), 6169, 2, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, (-394));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[2][4];
      int[] intArray1 = new int[6];
      intArray1[0] = 65;
      intArray1[2] = 928;
      intArray1[3] = 1393;
      int int0 = 9;
      intArray1[4] = 9;
      intArray1[5] = 16;
      intArray0[0] = intArray1;
      int int1 = 1;
      CharClass charClass1 = null;
      try {
        charClass1 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1193);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-1193), 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      int int0 = 1114111;
      // Undeclared exception!
      charClass0.appendFoldedRange(1940, 1114111);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      int int0 = 0;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      
      int int0 = (-314);
      CharClass charClass1 = charClass0.appendRange((-314), (-314));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendRange((-992), 5547);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      
      String string0 = charClass2.toString();
      assertEquals("[0xfffffc20-0x15ab]", string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      
      int[][] intArray1 = new int[6][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      String string1 = charClass3.toString();
      assertEquals("[0xfffffc20-0x15ab]", string1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendTableWithSign(intArray1, (-314));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1763);
      int int0 = 0;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3892;
      intArray0[1] = 4607;
      intArray0[2] = 420;
      intArray0[3] = 910;
      intArray0[4] = 0;
      intArray0[5] = 43701;
      intArray0[6] = 0;
      intArray0[7] = 405;
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {3892, 4607, 420, 910, 0, 43701, 0, 405}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(string0);
      
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3892, 4607, 420, 910, 0, 43701, 0, 405}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {3892, 4607, 420, 910, 0, 43701, 0, 43701}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange(3892, 32);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {3892, 4607, 420, 910, 0, 43701, 0, 43701}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      charClass2.appendFoldedRange((-2696), 11778);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 69688;
      intArray0[1] = (-451);
      intArray0[2] = 1563;
      intArray0[3] = 3175;
      intArray0[4] = 304;
      intArray0[5] = 0;
      intArray0[6] = 3175;
      intArray0[7] = 65;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {69688, (-451), 1563, 3175, 304, 0, 3175, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 69687, (-450), 1562, 1, 3174, 66, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral(2114, 1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 69687, (-450), 1562, 1, 3174, 66, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendFoldedRange(66640, 69688);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 69687, (-450), 1562, 1, 3174, 66, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertArrayEquals(new int[] {(-450), 1114111, 0, 69687, 1, 3174, 66, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertArrayEquals(new int[] {(-450), 1114111, 0, 69687, 1, 3174, 66, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.appendClass(intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertArrayEquals(new int[] {(-450), 1114111, 0, 69687, 1, 3174, 66, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass6.negateClass();
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertArrayEquals(new int[] {(-450), 1114111, 0, 69687, 1, 3174, 66, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass0.appendFoldedRange(66, 0);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertArrayEquals(new int[] {66, 0, 0, 69687, 1, 3174, 66, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass8);
      
      // Undeclared exception!
      try { 
        charClass5.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 69688;
      intArray0[1] = (-451);
      intArray0[2] = 1563;
      intArray0[3] = 3175;
      intArray0[4] = 304;
      intArray0[5] = 0;
      intArray0[6] = 66640;
      intArray0[7] = 65;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {69688, (-451), 1563, 3175, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 69687, (-450), 1562, 1, 66639, 66, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral(2114, 1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 69687, (-450), 1562, 1, 66639, 66, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendFoldedRange(66640, 69688);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 69687, (-450), 1562, 1, 66639, 66, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {(-450), 1114111, 0, 69687, 1, 66639, 66, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertArrayEquals(new int[] {(-450), 1114111, 0, 69687, 1, 66639, 66, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.appendClass(intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertArrayEquals(new int[] {(-450), 1114111, 0, 69687, 1, 66639, 66, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass6.negateClass();
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass1);
      assertArrayEquals(new int[] {(-450), 1114111, 0, 69687, 1, 66639, 66, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass0.appendFoldedRange(66, 0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertArrayEquals(new int[] {66, 0, 0, 69687, 1, 66639, 66, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass8);
      
      // Undeclared exception!
      try { 
        charClass5.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = new CharClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral(1659, 132);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass0.negateClass();
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass1));
      assertNotNull(charClass4);
      
      int[] intArray0 = new int[0];
      CharClass charClass5 = charClass4.appendFoldedClass(intArray0);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass5);
      assertNotSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertNotSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertNotSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass1));
      assertNotNull(charClass5);
      
      int[][] intArray1 = new int[2][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass4.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 2933;
      intArray0[1] = 2933;
      intArray0[2] = (-3451);
      intArray0[3] = 64;
      intArray0[4] = (-2750);
      intArray0[5] = 64;
      intArray0[6] = 0;
      intArray0[7] = 2191;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 2933, (-3451), 64, (-2750), 64, 0, 2191}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-3451), 2933, (-2750), 64, 0, 2933, 0, 2191}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 64;
      intArray1[1] = 64;
      intArray1[2] = 0;
      intArray1[3] = 64;
      intArray1[4] = (-282);
      intArray1[5] = 2933;
      String string0 = CharClass.charClassToString(intArray1, 0);
      assertEquals("[]", string0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {64, 64, 0, 64, (-282), 2933}, intArray1);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(string0);
      
      CharClass charClass2 = charClass0.appendLiteral(65123, 65123);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertArrayEquals(new int[] {(-3451), 2933, 65123, 65123, 0, 2933, 0, 2191}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendFoldedClass(intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3451), 2933, 65123, 65123, 8490, 8490, 76, 76}, intArray0);
      assertArrayEquals(new int[] {64, 64, 0, 64, (-282), 2933}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass3);
      
      int[][] intArray2 = new int[1][7];
      intArray2[0] = intArray1;
      // Undeclared exception!
      charClass1.appendNegatedTable(intArray2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 0;
      CharClass charClass1 = charClass0.appendLiteral(0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 69688;
      intArray0[1] = (-451);
      intArray0[2] = 1563;
      intArray0[3] = 3175;
      intArray0[4] = 304;
      intArray0[5] = 0;
      intArray0[6] = 66640;
      intArray0[7] = 65;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {69688, (-451), 1563, 3175, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 69687, (-450), 1562, 1, 66639, 66, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral(2114, 1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 69687, (-450), 1562, 1, 66639, 66, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {0, 69687, (-450), 1562, 1, 66639, (-450), 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {(-450), 1114111, (-450), 1562, 0, 69687, 1, 66639}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertArrayEquals(new int[] {(-450), 1114111, (-450), 1562, 0, 69687, 1, 66639}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.appendClass(intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertArrayEquals(new int[] {(-450), 1114111, (-450), 1562, 0, 69687, 1, 66639}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass6.negateClass();
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass7);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertArrayEquals(new int[] {(-450), 1114111, (-450), 1562, 0, 69687, 1, 66639}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass0.appendFoldedRange(1, 0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertArrayEquals(new int[] {1, 0, (-450), 1562, 0, 69687, 1, 66639}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass8);
      
      // Undeclared exception!
      try { 
        charClass5.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 69688;
      intArray0[1] = 69688;
      intArray0[2] = 1563;
      intArray0[3] = 3175;
      intArray0[4] = 304;
      intArray0[0] = 0;
      intArray0[6] = 66640;
      intArray0[7] = 65;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 69688, 1563, 3175, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {1, 66639, 66, 1114111, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral(2114, 304);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {1, 66639, 66, 1114111, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendFoldedRange(66640, 69688);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {1, 66639, 66, 1114111, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertArrayEquals(new int[] {1, 1114111, 66, 1114111, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertArrayEquals(new int[] {0, 1114111, 66, 1114111, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertArrayEquals(new int[] {0, 1114111, 66, 1114111, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass6.negateClass();
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass7);
      assertArrayEquals(new int[] {0, 1114111, 66, 1114111, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass0.appendFoldedRange(66640, 0);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertArrayEquals(new int[] {66640, 0, 66, 1114111, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass8);
      
      int int0 = (-1);
      String string0 = CharClass.charClassToString(intArray0, (-1));
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {66640, 0, 66, 1114111, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(string0);
      
      CharClass charClass9 = charClass1.appendNegatedClass(intArray0);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertArrayEquals(new int[] {0, 1114111, 66, 1114111, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass9);
      
      CharClass charClass10 = charClass2.appendClass(intArray0);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass10);
      assertArrayEquals(new int[] {0, 1114111, 66, 1114111, 304, 0, 66640, 65}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass10);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2933;
      intArray0[2] = (-3451);
      intArray0[3] = 64;
      intArray0[4] = (-3451);
      intArray0[5] = 64;
      intArray0[6] = 0;
      intArray0[7] = 2191;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 2933, (-3451), 64, (-3451), 64, 0, 2191}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-3451), 2933, (-3451), 64, 0, 2933, 0, 2191}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 64;
      intArray1[1] = 64;
      intArray1[2] = 0;
      intArray1[3] = 64;
      intArray1[4] = (-282);
      intArray1[5] = 2933;
      String string0 = CharClass.charClassToString(intArray1, 0);
      assertEquals("[]", string0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {64, 64, 0, 64, (-282), 2933}, intArray1);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(string0);
      
      CharClass charClass2 = charClass0.appendLiteral(65123, 65123);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertArrayEquals(new int[] {(-3451), 2933, 65123, 65123, 0, 2933, 0, 2191}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendFoldedClass(intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3451), 2933, 65123, 65123, 8490, 8490, 76, 76}, intArray0);
      assertArrayEquals(new int[] {64, 64, 0, 64, (-282), 2933}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass3);
      
      int[] intArray2 = charClass3.toArray();
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3451), 2933, 65123, 65123, 8490, 8490, 76, 76}, intArray0);
      assertArrayEquals(new int[] {64, 64, 0, 64, (-282), 2933}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(484, intArray2.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange((-98), 9);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[8][1];
      intArray1[7] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass3 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      int[] intArray3 = new int[3];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = 16;
      intArray3[1] = 1393;
      intArray1[3] = intArray3;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-17);
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-17), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass1);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass1));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendClass(intArray0);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass2);
      assertArrayEquals(new int[] {(-17), 0, 0, 0, 0, 0, (-17), 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass2.cleanClass();
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass3);
      assertSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass3));
      assertNotNull(charClass4);
      
      String string0 = CharClass.charClassToString(intArray0, (-17));
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {(-17), 0, 0, 0, 0, 0, (-17), 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(string0);
      
      CharClass charClass5 = charClass1.appendLiteral(32, 0);
      assertSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass2);
      assertNotSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass0);
      assertNotSame(charClass5, charClass4);
      assertArrayEquals(new int[] {(-17), 0, 0, 0, 0, 0, (-17), 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass4));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass4));
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass0.appendFoldedClass(intArray0);
      assertNotSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass6, charClass2);
      assertNotSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertNotSame(charClass6, charClass1);
      assertArrayEquals(new int[] {(-17), 0, 0, 0, 0, 0, (-17), 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass5));
      assertFalse(charClass6.equals((Object)charClass1));
      assertNotNull(charClass6);
      
      int[] intArray1 = charClass5.toArray();
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass6);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass2);
      assertNotSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass0);
      assertNotSame(charClass5, charClass6);
      assertNotSame(charClass5, charClass4);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-17), 0, 0, 0, 0, 0, (-17), 0}, intArray0);
      assertArrayEquals(new int[] {(-17), 0, 0, 0, 0, 0, (-17), 0, 32, 32}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(10, intArray1.length);
      assertFalse(charClass1.equals((Object)charClass6));
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass4));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass6));
      assertFalse(charClass5.equals((Object)charClass4));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1193);
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-1193), 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(8, 64);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-1193), 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {(-1193), 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1114111;
      intArray0[1] = (-3397);
      intArray0[2] = 1524;
      intArray0[3] = (-730);
      intArray0[4] = 0;
      intArray0[5] = (-344);
      intArray0[6] = 754;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1114111, (-3397), 1524, (-730), 0, (-344), 754}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(1524, 1524);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {1114111, (-3397), 1524, (-730), 0, (-344), 754}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      int[][] intArray1 = new int[8][2];
      intArray1[0] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass1 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 4607;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[0][7];
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass2);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[1] = 4607;
      intArray2[2] = 4607;
      CharClass charClass3 = charClass2.appendNegatedClass(intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {0, 4607, 4607, 0}, intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendRange(119892, 0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertArrayEquals(new int[] {0, 4607, 4607, 0}, intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass0.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass5);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[3];
      intArray1[0] = (-703);
      intArray1[1] = 65506;
      intArray1[2] = (-453);
      intArray0[0] = intArray1;
      // Undeclared exception!
      charClass2.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 1682;
      intArray0[3] = 120128;
      intArray0[4] = (-212);
      intArray0[5] = 2390;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2, 0, 1682, 120128, (-212), 2390}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(687, 2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {2, 0, 1682, 120128, (-212), 2390}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange((-212), (-3232));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {2, 0, 1682, 120128, (-212), 2390}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {2, 0, 1682, 120128, (-212), 2390}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendFoldedRange(0, 0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {2, 0, 1682, 120128, (-212), 2390}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendFoldedRange(2390, 0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertArrayEquals(new int[] {2, 0, 1682, 120128, (-212), 2390}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass4.appendClassWithSign(intArray0, 3010);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertArrayEquals(new int[] {2, 0, 1682, 120128, (-212), 2390}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass6);
      
      int[][] intArray1 = new int[0][7];
      CharClass charClass7 = charClass0.appendTableWithSign(intArray1, 2390);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertArrayEquals(new int[] {2, 0, 1682, 120128, (-212), 2390}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass7);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      int int0 = 0;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[2][7];
      CharClass charClass3 = charClass0.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3992;
      intArray0[1] = 0;
      intArray0[2] = 4;
      intArray0[3] = 2026;
      intArray0[4] = 1114111;
      intArray0[5] = 0;
      intArray0[6] = 589822;
      intArray0[7] = 1;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3992, 0, 4, 2026, 1114111, 0, 589822, 1}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 3991, 1, 3, 2027, 1114110, 1, 589821}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendRange(1, 1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 3991, 1, 3, 2027, 1114110, 1, 589821}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {0, 3991, 1, 3, 2027, 1114110, 1, 589821}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      
      int[][] intArray1 = new int[2][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass4 = charClass3.appendTable(intArray1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertArrayEquals(new int[] {0, 3991, 1, 3, 2027, 1114110, 1, 589821}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendNegatedClass(intArray0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertArrayEquals(new int[] {0, 3991, 1, 3, 2027, 1114110, 1, 589821}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.negateClass();
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertArrayEquals(new int[] {0, 3991, 1, 3, 2027, 1114110, 1, 589821}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass6);
      
      String string0 = charClass6.toString();
      assertEquals("[]", string0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertArrayEquals(new int[] {0, 3991, 1, 3, 2027, 1114110, 1, 589821}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      
      int int0 = 66640;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 66640);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[7];
      int int0 = (-315);
      intArray0[0] = (-315);
      intArray0[1] = 796;
      int int1 = 0;
      intArray0[2] = 0;
      int int2 = 0;
      intArray0[3] = 0;
      intArray0[4] = (-3847);
      intArray0[5] = 0;
      intArray0[6] = 1114111;
      // Undeclared exception!
      charClass1.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      int[][] intArray0 = new int[5][5];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray3[3] = 0;
      intArray3[4] = 0;
      intArray3[5] = 0;
      intArray3[6] = 0;
      intArray3[7] = 0;
      intArray3[8] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      intArray4[0] = 96;
      intArray4[1] = 0;
      intArray4[2] = 0;
      intArray4[3] = 0;
      intArray4[4] = 0;
      intArray4[5] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[4];
      intArray5[0] = (-197);
      intArray5[1] = 0;
      intArray5[2] = 0;
      intArray5[3] = 0;
      intArray0[4] = intArray5;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.cleanClass();
      CharClass.charClassToString(intArray0, (-1193));
      CharClass charClass1 = charClass0.appendLiteral((-282), 2949);
      charClass0.appendFoldedClass(intArray0);
      charClass1.toArray();
      assertArrayEquals(new int[] {0, 0, (-282), (-282)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[2][4];
      int[] intArray1 = new int[6];
      intArray1[0] = 65;
      intArray1[2] = 120744;
      intArray1[3] = 1393;
      intArray1[4] = 1393;
      intArray1[5] = 16;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 928;
      intArray2[1] = 928;
      intArray2[2] = 928;
      charClass0.toString();
      intArray2[3] = 65;
      intArray2[4] = 1301;
      intArray2[5] = 120744;
      intArray2[7] = 120744;
      intArray0[1] = intArray2;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, 1393);
      CharClass charClass2 = charClass1.negateClass();
      CharClass charClass3 = charClass2.appendNegatedTable(intArray0);
      int[] intArray3 = charClass1.toArray();
      charClass3.toString();
      charClass0.toArray();
      int[][] intArray4 = new int[8][2];
      intArray4[0] = intArray1;
      intArray4[1] = intArray1;
      intArray4[2] = intArray2;
      intArray4[3] = intArray3;
      intArray4[4] = intArray1;
      intArray4[5] = intArray1;
      intArray4[7] = intArray3;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray4, 1393);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 611;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3992;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1114111;
      intArray0[5] = 0;
      intArray0[6] = 589822;
      intArray0[7] = 1;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendRange(589822, 0);
      CharClass charClass2 = charClass1.cleanClass();
      int[][] intArray1 = new int[2][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass3 = charClass2.appendTable(intArray1);
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      CharClass charClass5 = charClass4.negateClass();
      assertSame(charClass3, charClass5);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendFoldedRange(3992, (-1411));
      charClass0.negateClass();
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {0, 3991, (-1410), 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 3892;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[2][4];
      int[] intArray1 = new int[6];
      intArray1[0] = 1341;
      intArray1[1] = 3995;
      intArray1[2] = 705;
      intArray1[3] = 2835;
      intArray1[4] = 232;
      intArray1[5] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 232;
      intArray2[1] = 2835;
      intArray2[2] = 232;
      intArray2[3] = 0;
      intArray0[1] = intArray2;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, 0);
      int[] intArray3 = new int[5];
      intArray3[0] = 0;
      intArray3[1] = 1341;
      intArray3[2] = 0;
      intArray3[3] = 6816;
      intArray3[4] = 2835;
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray3, 1341);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 698;
      intArray0[2] = 1003;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendLiteral(64, 698);
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 0;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][4];
      int[] intArray1 = new int[7];
      intArray1[0] = 2929;
      intArray1[1] = 2545;
      intArray1[2] = 2926;
      intArray1[3] = (-1988);
      intArray1[4] = 6089;
      CharClass charClass1 = charClass0.appendLiteral(2926, 2545);
      intArray1[5] = 3142;
      intArray1[6] = (-4752);
      intArray0[0] = intArray1;
      CharClass charClass2 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 69688;
      intArray0[1] = (-451);
      intArray0[2] = 1563;
      intArray0[3] = 3175;
      intArray0[4] = 304;
      intArray0[5] = (-451);
      intArray0[6] = 3175;
      intArray0[7] = 65;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass0.appendRange(1562, 1114111);
      charClass2.cleanClass();
      CharClass.charClassToString(intArray0, (-282));
      charClass1.appendNegatedClass(intArray0);
      charClass2.appendLiteral((-1858), 1114111);
      // Undeclared exception!
      charClass1.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3892;
      intArray0[1] = 4607;
      intArray0[2] = 420;
      intArray0[4] = 0;
      intArray0[5] = 43701;
      intArray0[6] = 0;
      intArray0[7] = 405;
      CharClass.charClassToString(intArray0, 0);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendClass(intArray0);
      int[][] intArray1 = new int[5][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass2 = charClass0.appendTableWithSign(intArray1, 0);
      CharClass charClass3 = charClass2.negateClass();
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      charClass1.toArray();
      charClass1.toString();
      charClass3.toArray();
      charClass4.appendTableWithSign(intArray1, (-3373));
      assertArrayEquals(new int[] {0, 3891, 1, 1114111, 0, 43701, 0, 43701}, intArray0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendRange(66639, 465);
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {66639, 465}, intArray0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 1747;
      intArray0[1] = 0;
      intArray0[2] = 1965;
      intArray0[3] = (-573);
      intArray0[4] = 2929;
      intArray0[5] = (-246);
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      CharClass charClass2 = charClass1.appendRange((-557), 0);
      int[][] intArray1 = new int[9][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      CharClass charClass3 = charClass2.appendTable(intArray1);
      CharClass charClass4 = charClass3.appendTableWithSign(intArray1, 65);
      CharClass charClass5 = charClass4.appendClassWithSign(intArray0, (-215));
      CharClass charClass6 = charClass5.appendNegatedTable(intArray1);
      assertSame(charClass6, charClass4);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      int[] intArray0 = new int[2];
      intArray0[0] = (-2);
      intArray0[1] = (-2095);
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      CharClass charClass3 = charClass2.appendLiteral((-1112), (-2631));
      CharClass charClass4 = charClass3.negateClass();
      charClass4.cleanClass();
      CharClass charClass5 = charClass2.appendClass(intArray0);
      CharClass charClass6 = charClass1.cleanClass();
      assertSame(charClass6, charClass5);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[2][4];
      int[] intArray1 = new int[6];
      intArray1[0] = 65;
      intArray1[2] = 928;
      intArray1[3] = 1393;
      intArray1[4] = 9;
      intArray1[5] = 16;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 9;
      intArray2[1] = 928;
      intArray2[2] = 928;
      charClass0.toString();
      intArray2[3] = 65;
      intArray2[4] = 1301;
      intArray2[5] = 120744;
      intArray2[6] = 2644;
      intArray2[7] = 120744;
      intArray0[1] = intArray2;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, 1393);
      charClass1.negateClass();
      charClass0.negateClass();
      String string0 = charClass1.toString();
      assertEquals("[0x9]", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 69688;
      intArray0[1] = 69688;
      intArray0[2] = 1563;
      intArray0[4] = 1563;
      intArray0[6] = 0;
      int[][] intArrayArray0 = null;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass1.appendLiteral(65, 1563);
      // Undeclared exception!
      charClass2.appendFoldedClass(intArray0);
  }
}
