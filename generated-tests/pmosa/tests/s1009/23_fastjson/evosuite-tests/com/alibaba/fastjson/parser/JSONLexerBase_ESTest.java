/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 16:03:31 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.format.TextStyle;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = 'h';
      char char0 = '6';
      charArray0[2] = '6';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("hTvM&}~");
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.scanIdent();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^'Wy");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.stringDefaultValue = "V&)<_Hkd2Y";
      int int0 = Calendar.WEEK_OF_YEAR;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 55232, 55232);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner.checkDate('j', 'A', 'A', 'A', 'j', 'A', 11, 341);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("<{(>g#", 11);
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.timeZone = timeZone0;
      long long0 = jSONReaderScanner0.scanLong('_');
      assertEquals(0L, long0);
      
      timeZone0.getOffset(0L);
      jSONReaderScanner0.scanNumber();
      int int0 = jSONReaderScanner0.pos();
      assertEquals(11, jSONReaderScanner0.getFeatures());
      assertEquals('<', jSONReaderScanner0.getCurrent());
      assertEquals(0, int0);
      
      jSONReaderScanner0.indexOf('A', 0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'j';
      charArray0[2] = '_';
      charArray0[3] = 'D';
      long long1 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      jSONReaderScanner0.scanLong('=');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("A");
      jSONReaderScanner0.nextIdent();
      int int0 = 3979;
      jSONReaderScanner0.bp = 3979;
      jSONReaderScanner0.pos();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.next();
      char char0 = '}';
      jSONReaderScanner0.scanFloat('}');
      jSONReaderScanner0.scanType("");
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      ZoneId zoneId0 = ZoneId.ofOffset("", zoneOffset0);
      zoneId0.normalized();
      String string0 = "";
      ZoneId.ofOffset("", zoneOffset0);
      zoneId0.equals(jSONReaderScanner0);
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      Locale locale0 = Locale.KOREA;
      zoneId0.getDisplayName(textStyle0, locale0);
      ZoneId.systemDefault();
      jSONReaderScanner0.ch = '}';
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      jSONReaderScanner0.setTimeZone(timeZone0);
      JSONScanner jSONScanner0 = new JSONScanner("IgnoreErrorGetter", (-2));
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.charAt(513);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 10000022);
      float float0 = jSONScanner0.scanFloat('M');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(10000022, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 51, 51);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.scanType("w#d=W)q@)$/uz$fkg-");
      jSONScanner0.setToken(58);
      assertEquals(58, jSONScanner0.token());
      
      jSONScanner0.scanBoolean('d');
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(19, 63);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("A", (-2191));
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('\"');
      assertEquals((-2191), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("L&:N");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("p^}U");
      char char0 = 'Z';
      jSONReaderScanner0.scanDecimal('Z');
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      jSONReaderScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000");
      jSONReaderScanner0.nextToken(116);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanBoolean('y');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanInt('\"');
      char[] charArray0 = new char[6];
      jSONScanner0.hasSpecial = true;
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldString(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 22);
      char[] charArray0 = new char[2];
      jSONScanner0.scanNumber();
      charArray0[0] = 'M';
      jSONScanner0.scanFieldLong(charArray0);
      charArray0[1] = ';';
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.close();
      int int0 = jSONScanner0.getFeatures();
      assertEquals(2, jSONScanner0.token());
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 0);
      jSONReaderScanner0.skipWhitespace();
      Locale locale0 = Locale.KOREA;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.close();
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 55232, 55232);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.indexOf('?', 55232);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^'Wy", 100);
      jSONReaderScanner0.scanString('[');
      jSONReaderScanner0.nextToken();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^'Wy");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      double double0 = jSONReaderScanner0.scanDouble('#');
      assertEquals(9.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oracle.sql.");
      jSONReaderScanner0.isRef();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDouble('q');
      jSONReaderScanner0.skipWhitespace();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("JS(OH", 10000022);
      jSONScanner0.np = 80;
      int int0 = jSONScanner0.intValue();
      Number number0 = jSONScanner0.integerValue();
      assertTrue(number0.equals((Object)int0));
      assertEquals(10000022, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.indexOf('.', 10000022);
      jSONScanner0.getCurrent();
      assertEquals(10000022, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char char0 = 'j';
      char char1 = 'A';
      JSONScanner.checkDate('j', 'A', 'A', 'A', 'j', 'A', 11, 341);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("<{(>g#", 11);
      char char2 = '_';
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.timeZone = timeZone0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("JS(OH", 10000029);
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      SymbolTable symbolTable0 = new SymbolTable(1751);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '*');
      assertEquals(10000029, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%op");
      jSONScanner0.scanUUID('k');
      int int0 = Calendar.SATURDAY;
      SymbolTable symbolTable0 = new SymbolTable(7);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'k');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("F+8CdPS;azx?X{f/G");
      Locale locale0 = Locale.CHINA;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      jSONReaderScanner0.setLocale(locale0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = '8';
      charArray0[2] = 'X';
      charArray0[3] = 's';
      SymbolTable symbolTable0 = new SymbolTable(65536);
      jSONReaderScanner0.scanSymbol(symbolTable0, '8');
      charArray0[4] = 'm';
      charArray0[5] = 'w';
      charArray0[6] = 'l';
      charArray0[7] = 'd';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", (-2));
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.alibaba.fastjson.parser.Feature
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "is";
      JSONScanner jSONScanner0 = new JSONScanner("is");
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      charArray0[1] = 'k';
      charArray0[2] = '&';
      charArray0[3] = ']';
      charArray0[4] = 'K';
      charArray0[5] = 'c';
      charArray0[6] = 'U';
      charArray0[7] = 'T';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanISO8601DateIfMatch(false);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("L&:N");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      Locale locale0 = Locale.CHINA;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      jSONReaderScanner0.nextIdent();
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedHashSet0);
      jSONReaderScanner0.setLocale(locale0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '\'';
      charArray0[3] = ' ';
      charArray0[4] = 'j';
      charArray0[5] = ']';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2452, 2452);
      jSONReaderScanner0.scanString('j');
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      double double0 = jSONReaderScanner0.scanDouble('j');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(33.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("L&:N");
      jSONReaderScanner0.isRef();
      SymbolTable symbolTable0 = new SymbolTable(76);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("is", 4388);
      jSONReaderScanner0.bytesValue();
      SymbolTable symbolTable0 = new SymbolTable(1111);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^'Wy", 100);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(1246);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 9, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 0);
      Locale locale0 = new Locale("");
      char char0 = '%';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      jSONReaderScanner0.scanType("not match ");
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(44);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, ',');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("JS(OH", 9999999);
      jSONScanner0.longValue();
      jSONScanner0.intValue();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jSONScanner0.setLocale(locale0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 0);
      Locale locale0 = new Locale("");
      jSONReaderScanner0.scanString('%');
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '%';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanDouble('\\');
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      jSONReaderScanner0.scanStringArray(set0, '(');
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 42;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("T3m:", 42);
      jSONReaderScanner0.bytesValue();
      SymbolTable symbolTable0 = new SymbolTable(42);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "\":\"";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"", 2515);
      jSONReaderScanner0.scanString();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^'Wy", 100);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, '!');
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken(100);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'A';
      charArray0[2] = ',';
      charArray0[3] = ' ';
      charArray0[4] = 'j';
      charArray0[5] = ']';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2452, 2452);
      jSONReaderScanner0.scanString('j');
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanDouble('j');
      jSONReaderScanner0.nextToken(2452);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 0);
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals("Unknown", string0);
      
      Locale locale0 = new Locale("");
      jSONReaderScanner0.setLocale(locale0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.skipWhitespace();
      jSONScanner0.pos();
      char[] charArray0 = new char[1];
      jSONScanner0.setToken(109);
      jSONScanner0.scanDecimal('>');
      charArray0[0] = 'c';
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy((-1858), charArray0, 265, (-1858));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("|-+g*NB<u)jxX");
      jSONReaderScanner0.putChar('z');
      jSONReaderScanner0.nextToken();
      assertEquals('-', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 92);
      jSONScanner0.setToken(92);
      char[] charArray0 = new char[8];
      charArray0[0] = ',';
      charArray0[1] = 'L';
      charArray0[2] = '{';
      charArray0[3] = 'r';
      charArray0[4] = 'H';
      charArray0[5] = '}';
      charArray0[6] = '\"';
      charArray0[7] = 'b';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldDate(charArray1);
      jSONScanner0.scanFieldIntArray(charArray1);
      char char0 = '\'';
      int int0 = jSONScanner0.scanInt('\'');
      jSONScanner0.scanString('\'');
      jSONScanner0.scanString();
      char char1 = '/';
      int int1 = 102;
      JSONScanner.checkDate(charArray0[5], charArray0[1], char1, charArray0[5], char0, charArray0[7], int1, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 0);
      String string0 = "";
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = '(';
      charArray0[2] = '@';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFloat('|');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      Locale locale0 = Locale.CHINA;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      jSONReaderScanner0.scanDecimal('M');
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      charArray0[6] = 'r';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      Locale locale1 = new Locale("illegal identifier : ");
      jSONReaderScanner0.setLocale(locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(13, "illegal identifier : ");
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("JS(OH", 10000029);
      jSONScanner0.np = 80;
      int int0 = jSONScanner0.intValue();
      Number number0 = jSONScanner0.integerValue();
      assertTrue(number0.equals((Object)int0));
      assertEquals(10000029, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pB*HF=/JS:t#)p!DwFI", 0);
      Locale locale0 = new Locale("");
      jSONReaderScanner0.setLocale(locale0);
      JSONScanner jSONScanner0 = new JSONScanner("pB*HF=/JS:t#)p!DwFI");
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'O';
      charArray0[2] = 'i';
      jSONScanner0.matchField2(charArray0);
      jSONReaderScanner0.getLocale();
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('\"');
      Locale locale0 = new Locale("");
      jSONReaderScanner0.setLocale(locale0);
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("JS(OH", 10000029);
      jSONScanner0.scanUUID('/');
      jSONScanner0.longValue();
      SymbolTable symbolTable0 = new SymbolTable(10000029);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("gi0\"L^04Fk~-K2 t");
      char[] charArray0 = new char[6];
      jSONScanner0.tokenName();
      jSONScanner0.nextToken();
      charArray0[0] = ':';
      charArray0[1] = 'B';
      charArray0[2] = '|';
      charArray0[3] = '7';
      charArray0[4] = 't';
      jSONScanner0.scanUUID('+');
      charArray0[5] = '?';
      jSONScanner0.np = (-2115);
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.close();
      jSONScanner0.isEOF();
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("JS(OH", 65);
      jSONReaderScanner0.skipWhitespace();
      Locale locale0 = Locale.KOREA;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      jSONReaderScanner0.scanStringArray(list0, 'A');
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("i6>-");
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.nextToken();
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.skipWhitespace();
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.alibaba.fastjson.parser.Feature
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('\"');
      Locale locale0 = new Locale("");
      jSONReaderScanner0.setLocale(locale0);
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 55232, 55232);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^'Wy");
      jSONReaderScanner0.isRef();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('a');
      jSONReaderScanner0.skipWhitespace();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("JS(OH");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.sp = 58;
      jSONScanner0.setToken(58);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. u
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str", (-1633));
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nGw");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.isRef();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('m');
      jSONReaderScanner0.skipWhitespace();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("FXMA*]");
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = jSONReaderScanner0.scanInt('a');
      assertEquals(0, int0);
      
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.resetStringPosition();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      JSONScanner jSONScanner0 = new JSONScanner("is");
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      SymbolTable symbolTable0 = new SymbolTable(2048);
      int int0 = jSONScanner0.matchStat();
      assertEquals(0, int0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", 2515);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("scan new error");
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^'Wy");
      jSONReaderScanner0.scanDate('\"');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^'Wy");
      jSONReaderScanner0.scanDate(')');
      jSONReaderScanner0.putChar('!');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">-");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanBoolean('i');
      assertEquals('-', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 2515);
      jSONReaderScanner0.scanDecimal('d');
      jSONReaderScanner0.scanNullOrNew();
      jSONReaderScanner0.nextToken();
      JSONScanner.checkDate('d', 'j', 'j', 'U', 'd', 'k', 2, 16);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2265));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 2515);
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(boolean0);
      
      jSONReaderScanner0.scanDecimal('p');
      assertEquals(2515, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ECEfN<", 7);
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = 'Z';
      charArray0[2] = ')';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = '^';
      charArray0[6] = '$';
      charArray0[7] = 'l';
      charArray0[8] = '9';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 2995);
      jSONReaderScanner1.nextToken();
      assertEquals(1, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.scanType("w#d=W)q@)$/uz$fkg-");
      StringReader stringReader0 = new StringReader("TreeSet");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^'Wy", 100);
      char[] charArray0 = new char[2];
      jSONReaderScanner0.getCalendar();
      jSONReaderScanner0.calendar = null;
      charArray0[0] = 'p';
      charArray0[1] = '4';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 100);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N]x#|aw.T y6JgSr");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(".u*l{Q&L-3i", 0);
      jSONReaderScanner0.nextToken();
      assertEquals(']', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WAq|");
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - W, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 17);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", 1427);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanInt('<');
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 2671;
      JSONScanner jSONScanner0 = new JSONScanner("false", 2671);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "false");
      jSONScanner0.matchStat = 50;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char char0 = 'T';
      jSONScanner0.scanDouble('T');
      jSONScanner0.isEnabled((-2122));
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - f, info : pos 0, json : false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = '5';
      charArray0[2] = '!';
      charArray0[3] = '=';
      charArray0[4] = 'g';
      charArray0[5] = 'B';
      charArray0[6] = 'q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 125, 44);
      SymbolTable symbolTable0 = new SymbolTable(1185);
      jSONReaderScanner0.addSymbol(44, 18, 23, symbolTable0);
      jSONReaderScanner0.nextToken();
      SymbolTable symbolTable1 = null;
      try {
        symbolTable1 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("i6>-");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanDecimal('E');
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9$xK", 123);
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58);
      jSONReaderScanner0.scanDecimal('N');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.nextToken();
      jSONScanner0.scanType("w#d=W)q@)$/uz$fkg-");
      jSONScanner0.setToken(58);
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 1);
      SymbolTable symbolTable0 = new SymbolTable(1);
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = 'r';
      charArray0[2] = 'O';
      charArray0[3] = 'O';
      charArray0[4] = 'a';
      charArray0[5] = '2';
      charArray0[6] = '!';
      charArray0[7] = 'Q';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 1, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Qr?rn9%");
      jSONScanner0.scanNumber();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "53xAc>Qcx$L7k.-b");
      jSONScanner0.scanFloat('j');
      jSONScanner0.scanString('0');
      jSONScanner0.isEnabled(41, 2113);
      jSONScanner0.scanDouble('x');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanDecimal('e');
      jSONReaderScanner0.setToken(97);
      jSONReaderScanner0.scanFloat(';');
      assertEquals(97, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^'Wy");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFloat('j');
      jSONReaderScanner0.isEnabled(114, 24);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("JS(OH", 10000029);
      SymbolTable symbolTable0 = new SymbolTable(58);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.longValue();
      SymbolTable symbolTable1 = new SymbolTable(10000029);
      jSONScanner0.nextToken();
      assertEquals('O', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 55232, 55232);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-810));
      int int0 = Calendar.SECOND;
      BigDecimal bigDecimal0 = new BigDecimal(17);
      jSONScanner0.nextToken(4);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldIntArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not matc//xh ");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^'Wy");
      jSONReaderScanner0.isRef();
      int int0 = Calendar.WEEK_OF_YEAR;
      jSONReaderScanner0.close();
      SymbolTable symbolTable0 = new SymbolTable(1);
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = 'U';
      charArray0[2] = 'u';
      charArray0[3] = 'w';
      charArray0[4] = 'n';
      charArray0[5] = 'I';
      charArray0[6] = 'J';
      charArray0[7] = '(';
      symbolTable0.addSymbol(charArray0, 5, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 9
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("JS(OH", 10000022);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9$xK", 123);
      jSONScanner0.longValue();
      jSONScanner0.scanDecimal('N');
      char[] charArray0 = new char[0];
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.alibaba.fastjson.parser.Feature
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("i6>-");
      jSONReaderScanner0.nextToken();
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      jSONReaderScanner0.config(feature0, false);
      char char0 = jSONReaderScanner0.next();
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('>', char0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hTvM", 39);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.indexOf('\\', 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/", 0);
      jSONReaderScanner0.scanLong('V');
      jSONReaderScanner0.scanDate('\"');
      Locale locale0 = new Locale("");
      locale0.toLanguageTag();
      Locale.getISOLanguages();
      jSONReaderScanner0.setLocale(locale0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("JS(OH", (-2483));
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("JS(OH", (-4310));
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSONReaderScanner1;
      objectArray0[1] = (Object) "JS(OH";
      objectArray0[2] = (Object) "JS(OH";
      objectArray0[3] = (Object) jSONReaderScanner1;
      jSONReaderScanner1.lexError("JS(OH", objectArray0);
      jSONReaderScanner1.scanStringArray((Collection<String>) null, ')');
      jSONReaderScanner1.isRef();
      jSONReaderScanner1.nextToken((-2483));
      jSONReaderScanner1.scanLong(')');
      assertEquals(1, jSONReaderScanner1.token());
      
      jSONReaderScanner0.scanDouble(')');
      assertEquals((-2483), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("J:x(H", (-3044));
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals((-3044), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.skipWhitespace();
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = '{';
      charArray0[2] = 'c';
      charArray0[3] = '4';
      charArray0[4] = ')';
      charArray0[5] = ' ';
      jSONReaderScanner0.matchField(charArray0);
      Locale locale0 = Locale.FRANCE;
      jSONReaderScanner0.setLocale(locale0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-526));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ECEfN<", 7);
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[2] = ')';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = '^';
      charArray0[6] = '$';
      charArray0[8] = '9';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, '$');
      jSONReaderScanner1.nextToken();
      assertEquals('C', jSONReaderScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("JS(OH", 10000022);
      jSONScanner0.isBlankInput();
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oracle.sql.", 44);
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = ':';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('E');
      assertEquals(44, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JSONScanner jSONScanner0 = new JSONScanner("JS(OH", 10000022);
      jSONScanner0.np = 80;
      jSONScanner0.sp = 4772;
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^'Wy");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.stringDefaultValue = "V&)<_Hkd2Y";
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse true", 0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.sub_chars(10, 175);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("treeset", (-1843987232));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(999999999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("|Qa>", 39);
      jSONReaderScanner0.nextToken(20);
      assertEquals('Q', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("JS(OH", 10000022);
      jSONScanner0.isBlankInput();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":>l_x6Gv{Xp", 278);
      jSONReaderScanner0.nextToken(0);
      assertEquals('>', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanUUID('k');
      int int0 = Calendar.SATURDAY;
      jSONScanner0.setToken(103);
      assertEquals(103, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("|b.i", 45);
      JSONScanner jSONScanner0 = new JSONScanner(".class", 1620);
      jSONScanner0.nextToken(8064);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloat((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan null error", (-1752));
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[1] = '<';
      charArray0[2] = 'n';
      charArray0[3] = ']';
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.nextToken(18);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1752));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = ')';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 10000022, 10000022);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, (-2273), 10000022);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not matc//xh ");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.isBlankInput();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanDecimal('~');
      assertFalse(jSONReaderScanner1.isEOF());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 2515);
      jSONReaderScanner0.scanStringArray(arrayList0, '3');
      jSONReaderScanner0.isRef();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Y<NLpnRF& j|PAUq@", 8192);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null", 8192);
      Class<Object> class0 = Object.class;
      jSONReaderScanner1.newCollectionByType(class0);
      jSONReaderScanner1.nextToken(101);
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      
      jSONReaderScanner0.isEnabled(63);
      jSONReaderScanner0.scanType("null");
      assertEquals(8192, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanStringArray((Collection<String>) null, ' ');
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'Zv");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" }y@M: [d!;)", 2515);
      jSONReaderScanner0.nextToken(2515);
      assertEquals(13, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-r'_bE~4(btl7");
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-7e?tL^]JqpFV~D", 86);
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1733);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - i, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^'Wy");
      jSONReaderScanner0.scanLong('=');
      jSONReaderScanner0.nextToken(57);
      assertEquals('_', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.decimalValue(false);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.sub_chars(13, 13);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('W');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = 'D';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.skipWhitespace();
      int int0 = jSONReaderScanner0.token();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("JS(OH", 10000022);
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = '6';
      charArray0[2] = 'F';
      charArray0[3] = 'l';
      charArray0[4] = '\"';
      charArray0[5] = 'a';
      charArray0[6] = 'C';
      charArray0[7] = '\\';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 3269);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 16);
      jSONReaderScanner0.nextToken(16);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.scanIdent();
      jSONScanner0.scanDecimal('M');
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloat((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      Locale locale0 = Locale.ENGLISH;
      jSONReaderScanner0.locale = locale0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.nextToken(15);
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      locale0.getUnicodeLocaleAttributes();
      charArray0[1] = '!';
      charArray0[2] = 'p';
      charArray0[3] = '_';
      jSONReaderScanner0.scanFloat('T');
      jSONReaderScanner0.isBlankInput();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanString('X');
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONScanner0.setToken(6812);
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("uhdefined");
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = '@';
      charArray0[2] = '1';
      charArray0[3] = '`';
      charArray0[4] = 'n';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1742);
      jSONReaderScanner1.scanFieldBigInteger(charArray0);
      jSONReaderScanner1.nextToken(113);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2566));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken(3);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\u001A';
      charArray0[1] = '5';
      charArray0[2] = 's';
      charArray0[3] = '@';
      charArray0[4] = 'V';
      charArray0[5] = ')';
      charArray0[6] = 'v';
      charArray0[7] = 'N';
      charArray0[8] = 'Z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 36, 1610);
      jSONReaderScanner0.nextToken(14);
      assertEquals('s', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WriteSlashAsSpecial");
      jSONReaderScanner0.nextToken(7);
      boolean boolean0 = jSONReaderScanner0.scanBoolean('{');
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", Ibjon ");
      jSONReaderScanner0.nextToken(10);
      assertEquals(16, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.skipWhitespace();
      SymbolTable symbolTable0 = new SymbolTable(117);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'P');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.JSONToken");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("com.alibaba.fastjson.parser.JSONToken", 9);
      jSONReaderScanner0.nextToken(9);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", Ibjon ");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanString(']');
      assertEquals(16, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^'Wy");
      jSONReaderScanner0.setToken(0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('q');
      assertEquals(9.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^'6Wy");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.ENGLISH;
      JSONScanner jSONScanner0 = new JSONScanner("x6uo=,nQCV");
      jSONScanner0.setToken(0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = '$';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2501, 4096);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. $
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-201));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.sp = 1588;
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(8192, (char[]) null, (-816), (-201));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9_^'Wy", 1705);
      jSONScanner0.sp = 29;
      int int0 = ObjectStreamConstants.baseWireHandle;
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = 'o';
      charArray0[2] = '~';
      JSONLexerBase.readString(charArray0, 0);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[9];
      charArray0[0] = 'F';
      charArray0[1] = '\\';
      charArray0[2] = '%';
      charArray0[3] = 'b';
      charArray0[4] = '3';
      charArray0[5] = '`';
      charArray0[6] = '?';
      charArray0[7] = 'e';
      charArray0[8] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 55232, (-503));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : %
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("UoH");
      jSONReaderScanner0.nextToken(12);
      jSONReaderScanner0.scanBoolean('\\');
      JSONScanner jSONScanner0 = new JSONScanner("UoH", 12);
      jSONScanner0.indexOf('\\', 12);
      jSONReaderScanner0.stringVal();
      assertEquals('o', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oracle.sql.");
      jSONReaderScanner0.nextToken(12);
      assertEquals('r', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.info();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^Wy");
      jSONReaderScanner0.scanDate('_');
      jSONReaderScanner0.scanLong('_');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDouble('_');
      char[] charArray0 = new char[6];
      charArray0[0] = 'k';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = '_';
      charArray0[4] = '_';
      charArray0[5] = '_';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1), 773);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9");
      jSONReaderScanner0.nextToken(8);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 13);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken(13);
      jSONReaderScanner0.scanBoolean('B');
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '{', (-1040));
      char[] charArray1 = new char[1];
      jSONReaderScanner0.scanFieldUUID(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-1040));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 115, (-1040));
      char[] charArray1 = new char[1];
      charArray1[0] = '{';
      jSONReaderScanner0.scanFieldUUID(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-1040));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - {, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oracle.sql.");
      jSONReaderScanner0.nextToken(11);
      PipedReader pipedReader0 = new PipedReader(58);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("$");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not matc//xh ");
      jSONReaderScanner0.scanString('l');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('=');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanString('|');
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      char[] charArray1 = new char[1];
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONReaderScanner0.scanFieldStringArray(charArray1, class0);
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      jSONScanner0.scanFieldStringArray(charArray1, class0);
      BigDecimal bigDecimal0 = new BigDecimal((-2));
      jSONScanner0.scanNumber();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not matc//xh ");
      int int0 = jSONReaderScanner0.scanInt('^');
      assertEquals(0, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = '5';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      jSONReaderScanner0.charArrayCompare(charArray0);
      double double0 = jSONReaderScanner0.scanDouble('R');
      assertEquals(0.0, double0, 0.01);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not matc//xh ");
      long long0 = jSONReaderScanner0.scanLong('=');
      assertEquals(0L, long0);
      
      jSONReaderScanner0.scanInt('=');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = 10000022;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = '|';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hTvM", 10000022);
      int int1 = 16;
      SymbolTable symbolTable0 = new SymbolTable(16);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(13);
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = 'O';
      charArray0[3] = '%';
      charArray0[4] = '%';
      charArray0[5] = '^';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 382);
      boolean boolean0 = jSONReaderScanner0.isEnabled(2, 2);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^'Wy");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) "9_^'Wy";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "und2efined";
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.token();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 34);
      jSONReaderScanner1.matchStat();
      jSONReaderScanner1.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^'Wy");
      Object object0 = new Object();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.skipWhitespace();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('q');
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("|-+g*NB<u)jxX", 4);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFloat('D');
      jSONReaderScanner0.isBlankInput();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+9_^'Wy");
      jSONReaderScanner0.scanDecimal('e');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("+9_^'Wy");
      jSONReaderScanner1.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.charAt((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not Zatch ");
      char[] charArray0 = new char[0];
      byte byte0 = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      int int0 = (-747);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo((-67), (-747), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">d7iZ\"", (-89));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFloat('%');
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.resetStringPosition();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      jSONReaderScanner0.intValue();
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(20, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "not match ");
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9");
      jSONReaderScanner0.stringDefaultValue = " ";
      jSONReaderScanner0.scanFloat('~');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "not Zatch ";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not Zatch ");
      char[] charArray0 = new char[0];
      int int0 = 166;
      JSONScanner jSONScanner0 = new JSONScanner("not Zatch ", 166);
      jSONScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^'Wy");
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[1] = 'D';
      charArray0[2] = '5';
      charArray0[3] = 'P';
      charArray0[4] = 'S';
      charArray0[5] = 'Q';
      charArray0[6] = 'e';
      charArray0[7] = '4';
      charArray0[8] = 'V';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 55232, 55232);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.nextToken(55232);
      jSONReaderScanner1.nextIdent();
      assertEquals(15, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nGw");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 382, 0);
      boolean boolean0 = jSONReaderScanner2.isEnabled(0, 67);
      assertFalse(boolean0);
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONReaderScanner0.scanStringArray(set0, 'v');
      SymbolTable symbolTable0 = new SymbolTable(3405);
      jSONReaderScanner0.addSymbol(659, 3405, 67, symbolTable0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^'Wy");
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[1] = 'D';
      charArray0[2] = '5';
      charArray0[3] = 'P';
      charArray0[4] = 'S';
      charArray0[5] = 'Q';
      jSONReaderScanner0.nextToken(1720);
      jSONReaderScanner0.nextIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not Zatch ");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      double double0 = jSONReaderScanner0.scanDouble('<');
      assertEquals(0.0, double0, 0.01);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not Zatch ");
      jSONReaderScanner0.scanDate('Z');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "not Zatch ";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not Zatch ");
      jSONReaderScanner0.scanDate('Z');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 55232, 55232);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.nextToken(4);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("?t/^i,/Y<T3K|/wF", 3600);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^'Wy");
      jSONReaderScanner0.indexOf('4', 7);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDouble('#');
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.scanBoolean(' ');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken(19);
      PipedReader pipedReader0 = new PipedReader(3520);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse null or new");
      jSONScanner0.scanFloat('(');
      jSONScanner0.scanFloat('d');
      jSONScanner0.scanNumber();
      assertEquals(3, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?t/^i,/Y<T3K|/wF");
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      StringReader stringReader0 = new StringReader("?t/^i,/Y<T3K|/wF");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dCCCs6SEk,c");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 57344);
      jSONReaderScanner0.nextToken((-310));
      jSONReaderScanner0.scanBoolean('m');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".-GG", 159);
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.stringDefaultValue();
      assertEquals(3, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[\"pBu`f$A,@");
      jSONReaderScanner0.nextToken(3329);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.close();
      assertEquals(14, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("q#'L#0~");
      jSONReaderScanner0.matchStat = (-6398);
      jSONReaderScanner0.scanFloat('\\');
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9_^'Wy");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      char[] charArray0 = new char[22];
      charArray0[0] = ';';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[12] = 'b';
      charArray0[2] = 'B';
      charArray0[3] = 'h';
      charArray0[4] = 'z';
      charArray0[5] = 'p';
      charArray0[6] = '_';
      charArray0[7] = '*';
      charArray0[8] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 5078, 5078);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }
}
