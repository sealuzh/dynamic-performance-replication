/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 13:46:44 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = IOUtils.stringSize(0L);
      assertEquals(1, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'U';
      charArray0[1] = ']';
      charArray0[2] = '4';
      charArray0[3] = 'R';
      charArray0[4] = 'J';
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte) (-82);
      int int1 = IOUtils.encodeUTF8(charArray0, 1, 0, byteArray0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(iOUtils0.CA, 118, 102, iOUtils0.specicalFlags_doubleQuotes);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 118
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('y');
      assertTrue(boolean0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("#");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOUtils.firstIdentifier('^');
      byte[] byteArray0 = IOUtils.decodeBase64("n'+k/L");
      IOUtils.firstIdentifier('^');
      IOUtils.stringSize(1560);
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = '^';
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 25, 25, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOUtils.decodeBase64("ji%$8J");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("@zOY\"67-*m/:q", 3, 88);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IOUtils.decodeBase64("UTF-8");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOUtils.loadPropertiesFromFile();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IOUtils.firstIdentifier('y');
      IOUtils.isIdent('_');
      IOUtils.stringSize(99);
      // Undeclared exception!
      try { 
        IOUtils.getStringProperty((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.decodeUTF8(iOUtils0.specicalFlags_doubleQuotes, 224, (-64), iOUtils0.DIGITS);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("9'?MNpI3-P", (-2381), 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-62);
      byteArray1[1] = (byte) (-2);
      byteArray1[2] = (byte) (-23);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)38;
      byteArray1[5] = (byte) (-104);
      byteArray1[6] = (byte)118;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)19;
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = '}';
      charArray0[2] = 'h';
      charArray0[3] = 'J';
      charArray0[4] = 'k';
      charArray0[5] = '+';
      int int0 = IOUtils.decodeUTF8(byteArray1, (-2381), (-416), charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IOUtils.decodeBase64((char[]) null, 0, 0);
      IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 1141, 0);
      IOUtils iOUtils0 = new IOUtils();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = 244;
      IOUtils.loadPropertiesFromFile();
      IOUtils.encodeUTF8(iOUtils0.DIGITS, 244, (-1821), iOUtils0.specicalFlags_singleQuotes);
      IOUtils.getStringProperty("q-?@SqLyl)ot/t");
      String string0 = "com.alibaba.fastjson.util.UTF8Decoder";
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder", (-1899), 119);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64((char[]) null, 0, 0);
      IOUtils.loadPropertiesFromFile();
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, (-1087), 144, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("-B1@b#Mz^Z.l", 128, (-1534));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[6];
      IOUtils.getChars((byte)2, (int) (byte)2, charArray0);
      IOUtils.firstIdentifier('i');
      IOUtils.loadPropertiesFromFile();
      String string0 = IOUtils.getStringProperty("/(@R");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars((-1016L), (-883), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -884
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IOUtils.isValidJsonpQueryParam("fastjson.compatibleWithFieldName");
      String string0 = "";
      int int0 = (-2102);
      int int1 = 98;
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("", (-2102), 98);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[6];
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, (int) (byte)1, (int) (byte)1);
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(iOUtils0.replaceChars, (byte)1, 144, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '>';
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 2, 2, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-12), (int) (byte) (-12), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -13
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)0, (int) (byte)0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.getChars((-720), (-720), iOUtils0.ASCII_CHARS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -721
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars(0, 0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IOUtils.stringSize((-768));
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("", (-768), (-768));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils.isValidJsonpQueryParam("\"(CEWKRzQ0vwC.9");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("w=:h8qUF\"'mYE:g");
      IOUtils.close(mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IOUtils.close((Closeable) null);
      IOUtils.close((Closeable) null);
      IOUtils.close((Closeable) null);
      IOUtils.loadPropertiesFromFile();
      IOUtils.loadPropertiesFromFile();
      int int0 = (-449);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64((String) null, (-449), (-449));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char char0 = '/';
      IOUtils.isIdent('/');
      IOUtils.isIdent('/');
      IOUtils.stringSize(3738L);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        IOUtils.getChars(0L, (-1030), (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = ',';
      charArray0[2] = 'p';
      charArray0[3] = '$';
      charArray0[4] = ' ';
      charArray0[5] = '8';
      charArray0[6] = '8';
      charArray0[7] = 'c';
      charArray0[8] = 'Y';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 0, 144);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 143
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IOUtils.decodeBase64("R");
      Charset charset0 = IOUtils.UTF8;
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      ByteBuffer byteBuffer0 = charset0.encode("com.alibaba.fastjson.util.UTF8Decoder");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      assertEquals("com.alibaba.fastjson.util.UTF8Decoder", charBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IOUtils.decodeBase64("0W1#[f5.'yz/MItu1");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      Charset charset0 = IOUtils.UTF8;
      ByteBuffer byteBuffer0 = charset0.encode("0W1#[f5.'yz/MItu1");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      // Undeclared exception!
      try { 
        IOUtils.decode(uTF8Decoder0, byteBuffer0, charBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state = FLUSHED, new state = CODING_END
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = ',';
      charArray0[2] = 'p';
      charArray0[3] = '$';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 2, 36);
      charArrayReader0.skip(2);
      charArrayReader0.ready();
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0, 36);
      pushbackReader0.read(charArray0);
      charArrayReader0.read(charArray0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      IOUtils.close(charArrayReader0);
      IOUtils.getStringProperty("com.alibaba.fastjson.JSONException");
      IOUtils.stringSize((long) 2);
      IOUtils.getChars(0L, 1, charArray0);
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars(0L, 15, iOUtils0.replaceChars);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[6];
      IOUtils.getChars((byte)2, (int) (byte)2, charArray0);
      IOUtils.firstIdentifier('i');
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IOUtils.firstIdentifier(' ');
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = IOUtils.decodeBase64("SUO#]^4rBU,H");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte)43, (byte) (-1), (byte) (-1), (byte) (-57)}, byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      String string0 = IOUtils.readAll(charArrayReader0);
      assertEquals("  ", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.stringSize(0L);
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      charArray0[1] = '5';
      charArray0[2] = 'D';
      charArray0[3] = 'l';
      charArray0[4] = '_';
      charArray0[5] = 'y';
      charArray0[6] = '`';
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)72, 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IOUtils.firstIdentifier(' ');
      IOUtils.loadPropertiesFromFile();
      IOUtils.decodeBase64("SUO#]^4rBU,H");
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("SUO#]^4rBU,H", 7, 14);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[6];
      IOUtils.loadPropertiesFromFile();
      IOUtils.decodeBase64(charArray0, (int) (byte)1, (int) (byte)1);
      IOUtils iOUtils0 = new IOUtils();
      String string0 = IOUtils.getStringProperty("^_9 n");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[6];
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)1;
      int int0 = IOUtils.decodeUTF8(byteArray0, 1550, (-2877), charArray0);
      assertEquals(0, int0);
      
      int int1 = IOUtils.decodeUTF8(byteArray0, 0, 1316, charArray0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.decodeUTF8(iOUtils0.specicalFlags_doubleQuotes, 1, 1, iOUtils0.DIGITS);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-35);
      char[] charArray0 = new char[6];
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, 8, charArray0);
      assertEquals((-1), int0);
      
      int int1 = IOUtils.stringSize((long) 8);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[2];
      byte[] byteArray0 = new byte[2];
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)1, (byte)1, charArray0);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IOUtils.firstIdentifier(' ');
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = IOUtils.decodeBase64("SUO#]^4rBU,H");
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.stringSize(100L);
      IOUtils.decodeUTF8(byteArray0, 3, 3, charArray0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = uTF8Decoder0.malformedInputAction();
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      Charset charset0 = IOUtils.UTF8;
      ByteBuffer byteBuffer0 = charset0.encode("SUO#]^4rBU,H");
      CharBuffer charBuffer0 = uTF8Decoder0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state = FLUSHED, new state = CODING_END
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Charset charset0 = IOUtils.UTF8;
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars(6, 6, iOUtils0.ASCII_CHARS);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("ji%$8J");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-16)}, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = '3';
      charArray0[2] = '$';
      IOUtils.getChars(3, 3, charArray0);
      assertArrayEquals(new char[] {'6', '3', '3'}, charArray0);
      
      byte[] byteArray1 = IOUtils.decodeBase64("@zOY\"67-*m/:q");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-22)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[5];
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)1;
      // Undeclared exception!
      try { 
        IOUtils.getChars(1002, (int) (byte)1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[6];
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-34);
      IOUtils.decodeUTF8(byteArray0, (byte)1, (byte)1, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, (-1593), 2322, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1593
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[7];
      charArray0[0] = 'j';
      charArray0[1] = '?';
      charArray0[2] = 'v';
      charArray0[3] = '';
      charArray0[4] = '8';
      charArray0[5] = '$';
      charArray0[6] = '[';
      // Undeclared exception!
      try { 
        IOUtils.getChars(3738L, 2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[6];
      IOUtils.decodeBase64(charArray0, (int) (byte)1, (int) (byte)1);
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.decodeBase64("fastjson.properties", (int) (byte)1, (int) (byte)1);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      int int0 = IOUtils.stringSize(10020L);
      assertEquals(5, int0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("jXk$y}D1c_yhP.", 5, 5);
      assertArrayEquals(new byte[] {(byte)15, (byte)87}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder", 3, 3);
      String string0 = IOUtils.getStringProperty("2. 45<CQi");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '?';
      charArray0[1] = 'r';
      charArray0[2] = ';';
      charArray0[3] = '/';
      charArray0[4] = '~';
      charArray0[5] = 'e';
      charArray0[6] = '~';
      charArray0[7] = 'X';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.ready();
      String string0 = IOUtils.readAll(charArrayReader0);
      assertEquals("?r;/~e~X", string0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder", 2, 2);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = 's';
      charArray0[2] = 'w';
      charArray0[3] = 'z';
      charArray0[4] = 'H';
      charArray0[5] = '_';
      IOUtils.decodeBase64(charArray0, (int) (byte)1, 5);
      IOUtils iOUtils0 = new IOUtils();
      String string0 = IOUtils.getStringProperty("-<");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray1 = IOUtils.decodeBase64(iOUtils0.replaceChars, 4, 4);
      assertArrayEquals(new byte[] {(byte) (-29), (byte) (-82), (byte) (-69)}, byteArray1);
      
      boolean boolean0 = IOUtils.firstIdentifier('4');
      assertFalse(boolean0);
      
      boolean boolean1 = IOUtils.isIdent(',');
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-17);
      char[] charArray0 = new char[0];
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, 12, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[6];
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, (int) (byte)1, (int) (byte)1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = IOUtils.firstIdentifier('u');
      boolean boolean1 = IOUtils.isValidJsonpQueryParam((String) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)29;
      byteArray0[4] = (byte)119;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)104;
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)104, charArray0);
      byte[] byteArray1 = IOUtils.specicalFlags_singleQuotes;
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 308, (byte)29, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 308
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IOUtils.isValidJsonpQueryParam("y");
      int int0 = 46;
      char[] charArray0 = new char[20];
      charArray0[0] = '=';
      charArray0[1] = 'A';
      charArray0[2] = 'H';
      charArray0[3] = 'L';
      charArray0[4] = ';';
      charArray0[5] = 'u';
      charArray0[6] = '=';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 46, (-32));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = IOUtils.stringSize((long) (byte)1);
      assertEquals(1, int0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("jXk$y}D1c_yhP.", 1, 5);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-14)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      IOUtils.stringSize(2154L);
      IOUtils.decodeBase64("jXk$y}D1c_yhP.", 4, 4);
      String string0 = IOUtils.getStringProperty("UTF-8");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = IOUtils.stringSize(2154L);
      assertEquals(4, int0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("jXk$y}D1c_yhP.");
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '*';
      charArray0[2] = '!';
      charArray0[3] = 'E';
      IOUtils.getChars((long) 4, 4, charArray0);
      int int1 = IOUtils.decodeUTF8(byteArray0, 4, 4, charArray0);
      assertArrayEquals(new char[] {'X', '*', '!', '4'}, charArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-16), (byte) (-11), (byte) (-1), (byte) (-4), (byte) (-95)}, byteArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      IOUtils.stringSize(2154L);
      byte[] byteArray0 = IOUtils.decodeBase64("jXk$y}D1c_yhP.");
      char[] charArray0 = new char[4];
      IOUtils.decodeUTF8(byteArray0, 4, 4, charArray0);
      String string0 = IOUtils.getStringProperty("jXk$y}D1c_yhP.");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 4, 2);
      String string0 = iOUtils0.UTF8.toString();
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 4, 2);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      InputStreamReader inputStreamReader0 = null;
      try {
        inputStreamReader0 = new InputStreamReader(sequenceInputStream0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[1] = '\u008A';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[2] = '\u008A';
      charArray0[3] = '>';
      byte[] byteArray0 = new byte[4];
      int int0 = IOUtils.encodeUTF8(charArray0, 2, 2, byteArray0);
      assertEquals(3, int0);
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-118), (byte)62, (byte)0}, byteArray0);
      
      int int1 = IOUtils.stringSize(2);
      assertEquals(1, int1);
      
      boolean boolean0 = IOUtils.isIdent('\u008A');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = IOUtils.decodeBase64("");
      char[] charArray0 = new char[7];
      charArray0[0] = '\u00F5';
      charArray0[1] = '\u00F5';
      IOUtils.firstIdentifier('\u0000');
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, '\u0000', '\u00F5', byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("-r]z=");
      assertFalse(boolean0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("-r]z=");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-4)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("ABCDEGHIJKLMNOPQDSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 5, 5);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".G`7:< _H#Q");
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(".G`7:< _H#Q", objectArray0);
      IOUtils.close(printWriter0);
      byte[] byteArray1 = IOUtils.decodeBase64("HuU7t'E5|jvyWz{w=");
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      IOUtils.stringSize(0L);
      byte[] byteArray0 = IOUtils.decodeBase64(" G/WJ1!A");
      char[] charArray0 = new char[9];
      charArray0[0] = '\u00C5';
      charArray0[1] = '\u00C5';
      charArray0[2] = '!';
      charArray0[3] = '!';
      charArray0[4] = '!';
      charArray0[5] = '!';
      charArray0[6] = '\u00C5';
      charArray0[7] = '\u00C5';
      charArray0[8] = '\u00C5';
      IOUtils.decodeUTF8(byteArray0, 1, 1, charArray0);
      String string0 = IOUtils.getStringProperty(" G/WJ1!A");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('\u0101');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      boolean boolean0 = IOUtils.isIdent('\u010C');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-64);
      char[] charArray0 = new char[0];
      int int0 = IOUtils.decodeUTF8(byteArray0, 1, 12, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.DIGITS, 3, 5);
      int int0 = IOUtils.decodeUTF8(iOUtils0.specicalFlags_singleQuotes, 90, (-593), iOUtils0.DIGITS);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 0, 90, iOUtils0.DIGITS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }
}
