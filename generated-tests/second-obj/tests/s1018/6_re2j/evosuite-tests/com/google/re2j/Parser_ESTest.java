/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:27:48 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Parser.parse("|", 1104);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = new Object();
      Regexp[] regexpArray0 = new Regexp[1];
      int int0 = 77;
      Regexp regexp0 = Parser.parse("1^", 77);
      regexpArray0[0] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 42, (-2776));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Regexp regexp0 = Parser.parse("z", (-3));
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 109;
      String string0 = "*)";
      try { 
        Parser.parse("*)", 109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "(?i:";
      int int0 = 1456;
      try { 
        Parser.parse("(?i:", 1456);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = (-51);
      try { 
        Parser.parse("%**P0nYB#7-k", (-51));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `**`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\t", 416);
      String string0 = regexp0.name;
      regexp0.toString();
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        Parser.parse("(?P<(?X(xQY|9", 476);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?X(xQY|9`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse("+Jw Za~5&4eAjG?]GRg", 120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "wijKo6o";
      int int0 = 56;
      try { 
        Parser.parse("?(gq|9", 56);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p55oJhr<;*", 2484);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Parser.parse("(u", 2147483645);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(u`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "\\pP\\w`!Rhp/r*i3WnD6j}";
      Regexp[] regexpArray0 = new Regexp[6];
      int int0 = 102;
      try { 
        Parser.parse("a(", 112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `a(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "[:r:q]";
      int int0 = 4032;
      try { 
        Parser.parse("(?", 4032);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = " \\C";
      int int0 = (-5127);
      Regexp regexp0 = Parser.parse(" C", (-5127));
      assertNotNull(regexp0);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\C`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Regexp regexp0 = Parser.parse("$", 2649);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("mea\")Z)A]c`F\".~MeEn", (-5));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":.", 124);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser(",#F0BXJ(6]y'^n;S", 217);
      assertNotNull(parser0);
      
      Regexp regexp1 = Parser.parse("p{d2Q4hPf-fi", 1311);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Parser parser1 = new Parser("Px[dCx{FFF}S", 82);
      assertFalse(parser1.equals((Object)parser0));
      assertNotNull(parser1);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      regexpArray0[2] = regexp2;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 51, (-192));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      assertTrue(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      
      regexpArray0[4] = regexp4;
      Regexp regexp5 = Parser.parse("^$", 12);
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp2);
      
      regexpArray0[5] = regexp5;
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      Regexp regexp6 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp2));
      assertNotNull(regexp6);
      
      regexpArray0[6] = regexp6;
      Regexp.Op regexp_Op2 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp7 = new Regexp(regexp_Op2);
      assertFalse(regexp_Op2.equals((Object)regexp_Op1));
      assertFalse(regexp_Op2.equals((Object)regexp_Op0));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp0));
      assertNotNull(regexp7);
      
      regexpArray0[7] = regexp7;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 12, 7);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "Z3.Tf?)X2BQReV";
      try { 
        Parser.parse("Z3.Tf?)X2BQReV", 36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 60;
      try { 
        Parser.parse("|*!*e{,", 3129);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      try { 
        Parser.parse("v[", 120068);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp[] regexpArray0 = new Regexp[8];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Regexp regexp0 = Parser.parse("d", 92);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:]", 2572);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|g", (-2472));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      try { 
        Parser.parse(">(y|1|9", 1772);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `>(y|1|9`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "(y1|";
      int int0 = 1761;
      try { 
        Parser.parse("(y1|", 1761);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(y1|`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      try { 
        Parser.parse("nH!|F)O1O@Ie", 332);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      try { 
        Parser.parse(">$(<y|Y|9", (-172));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `>$(<y|Y|9`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "E\\";
      int int0 = 332;
      Regexp regexp0 = Parser.parse("E", 92);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: trailing backslash at end of expression
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p", 64);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Regexp regexp0 = Parser.parse("psd2-fi", 476);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "\\Por'ZEQsd2-fi";
      Regexp regexp0 = Parser.parse("Por'ZEQsd2-fi", (-1308));
      assertNotNull(regexp0);
      
      int int0 = 11;
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "{";
      int int0 = (-2126);
      Regexp regexp0 = Parser.parse("{", 2348);
      assertNotNull(regexp0);
      
      Regexp regexp1 = null;
      try {
        regexp1 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Regexp regexp0 = Parser.parse("AF{ ", 7224);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Parser parser0 = new Parser((String) null, 7224);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 452;
      String string0 = "17{K4)vhkZ(J@";
      try { 
        Parser.parse("17{K4)vhkZ(J@", 452);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      try { 
        Parser.parse("[:", 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 217;
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Parser.parse(")=;O}7mF8nTek", 217);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Regexp regexp0 = Parser.parse("J{584D", 76);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Regexp regexp0 = Parser.parse("YwijKo{6oB", 92);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      int int0 = 57;
      String string0 = "^";
      Regexp regexp0 = Parser.parse("^", 57);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 57, 57);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      
      int int1 = (-2818);
      Regexp[] regexpArray2 = Parser.subarray(regexpArray1, (-2818), (-2818));
      assertFalse(regexpArray0.equals((Object)regexpArray1));
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertFalse(regexpArray2.equals((Object)regexpArray1));
      assertFalse(regexpArray2.equals((Object)regexpArray0));
      assertNotNull(regexpArray2);
      assertNotSame(regexpArray0, regexpArray2);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray2);
      assertNotSame(regexpArray1, regexpArray0);
      assertNotSame(regexpArray2, regexpArray1);
      assertNotSame(regexpArray2, regexpArray0);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 57, 3574);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 57
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 428;
      Regexp regexp0 = Parser.parse("", 428);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("(?:)", string0);
      assertNotNull(string0);
      
      String string1 = regexp0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("(?:)", string1);
      assertNotNull(string1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string2 = "k";
      Regexp regexp2 = Parser.parse(string2, int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = (-1820);
      try { 
        Parser.parse("s*[", (-1820));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp[] regexpArray0 = new Regexp[8];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Regexp regexp0 = Parser.parse("Y|E", (-1024));
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 83, (-1024));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Regexp regexp0 = Parser.parse("BZ\"t8yZ\no", 6576);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("J$8rR-OJsl@>v", 55);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      boolean boolean0 = regexp1.equals("BZ\"t8yZ\no");
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(boolean0);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "#Y";
      int int0 = 52;
      Regexp regexp0 = Parser.parse("\u0001", 52);
      assertNotNull(regexp0);
      
      String string1 = "QK";
      Regexp regexp1 = Parser.parse(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Parser parser0 = new Parser(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "$(|Y.9";
      int int0 = (-4160);
      try { 
        Parser.parse("$(|Y.9", (-4160));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `$(|Y.9`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[5] = 25;
      Regexp regexp0 = Parser.parse("()", 25);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 2147483645;
      try { 
        Parser.parse("[:-%ob</~1^dO(DO", 2147483645);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `:-%`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = (-212);
      String string0 = "Q[qe-g";
      try { 
        Parser.parse("Q[qe-g", (-212));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[qe-g`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 180;
      Regexp regexp0 = Parser.parse("E\u0005", 180);
      assertNotNull(regexp0);
      
      String string0 = "\\p:a-fi";
      int int1 = (-2593);
      Regexp regexp1 = Parser.parse(string0, int1);
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Parser parser0 = new Parser(string0, int1);
      assertFalse(int1 == int0);
      assertNotNull(parser0);
      
      String string1 = "r:";
      int int2 = 5945;
      Regexp regexp2 = Parser.parse(string1, int2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = Parser.parse(string1, int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pPw`!Rhp/r*i3WnED6j}", 214);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("QT", 1164);
      assertNotNull(parser0);
      
      Parser parser1 = new Parser((String) null, 1164);
      assertFalse(parser1.equals((Object)parser0));
      assertNotNull(parser1);
      
      Regexp regexp1 = Parser.parse("\f", (-1215));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 116, 116);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        Parser.parse("(?(?P<", 117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 593;
      try { 
        Parser.parse("[QDKR^:'", 593);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[QDKR^:'`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":", (-1127));
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("9|Djk N+AS91b>+", 46);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      boolean boolean0 = regexp1.equals(regexp2);
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(boolean0);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = new Regexp(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 46, (-1127));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = ">(X|Y|6";
      try { 
        Parser.parse(">(X|Y|6", 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `>(X|Y|6`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Regexp regexp0 = Parser.parse("a", (-11));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[2] = regexp0;
      regexpArray0[7] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1765), (-80));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1765
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp[] regexpArray0 = new Regexp[8];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = "\\d";
      int int0 = 109;
      Regexp regexp0 = Parser.parse("d", 109);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 3068, (-791));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pPeZxdU{FF}]", 2147483645);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0007<d2-fqi", (-1751));
      assertNotNull(regexp0);
      
      String string0 = "Saurashtra";
      int int0 = 68098;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 217;
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "\\x";
      Regexp regexp0 = Parser.parse("x", 24);
      assertNotNull(regexp0);
      
      String string1 = "#";
      Regexp regexp1 = Parser.parse(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string2 = "";
      int int1 = 785;
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\x`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x{", 65517);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string0 = "N4";
      int int0 = 35;
      Regexp regexp2 = Parser.parse(string0, int0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Regexp regexp0 = Parser.parse("j]7xX=k'LX", 1248);
      assertNotNull(regexp0);
      
      String string0 = "\\";
      int int0 = (-3751);
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      int int1 = 15;
      String string1 = "7<";
      Regexp regexp1 = Parser.parse(string1, int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[6] = regexp0;
      Regexp regexp1 = Parser.parse("::xd$x{FFF}]", 4885);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      regexpArray0[1].reinit();
      String string0 = regexp1.toString();
      assertFalse(regexp1.equals((Object)regexp0));
      assertEquals("(?i:::XD)(?-m:$)(?i:X\\{FFF\\}\\])", string0);
      assertNotNull(string0);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = null;
      try {
        regexp2 = new Regexp(regexpArray0[5]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "jSsM#N.|/4D6rNY~";
      Regexp regexp0 = Parser.parse("jSsM#N.|/4D6rNY~", 10);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("jSsM#N.|/4D6rNY~", 1062);
      assertNotNull(parser0);
      
      int int0 = (-203);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      int int1 = 48;
      Regexp regexp2 = Parser.parse("[:x00-x{|0FFFF}e]", 48);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      String string1 = "(?(y|Y)6";
      try { 
        Parser.parse(string1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      try { 
        Parser.parse(".+*?()|[]{}^$", 1264);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `+*?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 124;
      try { 
        Parser.parse("(?-_:$)", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-_`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "(?-mgK:Ol$)";
      int int0 = 77;
      try { 
        Parser.parse("(?-mgK:Ol$)", 77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-mg`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 124;
      try { 
        Parser.parse("(?-m:$", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?-m:$`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m:$)", (-2692));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1928, (-2692));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p{d2Q4hPf-fi", 217);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("[^\\x00-\\x{10FFFF}]", string0);
      assertNotNull(string0);
      
      int int0 = 49;
      Regexp regexp1 = Parser.parse("[^x00-x{10FFFF}]", 49);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 2509);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Regexp regexp0 = Parser.parse("A", (-1580));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexp0.subs = regexpArray0;
      regexpArray0[1] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 38, 38);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      
      regexp0.reinit();
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, 2702, 15);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "\\vn";
      Regexp regexp0 = Parser.parse("vn", 601);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-34));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 124;
      Regexp regexp0 = Parser.parse("D", 124);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      String string0 = regexp0.toString();
      assertEquals("D", string0);
      assertNotNull(string0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string1 = "-]";
      Parser parser0 = new Parser("-]", 124);
      assertNotNull(parser0);
      
      Regexp regexp2 = Parser.parse("[^0-9]", 124);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = Parser.parse("Pno", 124);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      
      Parser parser1 = new Parser(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(parser1.equals((Object)parser0));
      assertNotNull(parser1);
      
      String string2 = null;
      int int1 = 45;
      // Undeclared exception!
      try { 
        Parser.parse(string2, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 8;
      Regexp regexp0 = Parser.parse("[:x00-x{10FFFF}e]", 8);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      String string0 = null;
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      int int1 = 4351;
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2824, 8);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 452;
      String string0 = null;
      Regexp regexp0 = Parser.parse("p^cntrl:]", 452);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Parser parser0 = new Parser("(?P<", (-577));
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("(?P<", 54);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("\t", 36);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 118;
      Regexp[] regexpArray0 = new Regexp[0];
      intArray0[3] = 118;
      String string0 = "R[:O(\\";
      try { 
        Parser.parse("R[:O(", 1857);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:O(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = ":]";
      Regexp regexp0 = Parser.parse("A`Z^^r9@\u0003\"d9?|", 1677);
      assertNotNull(regexp0);
      
      String string1 = ":]";
      int int0 = 3323;
      String string2 = null;
      int int1 = (-2927);
      Parser parser0 = new Parser(string2, int1);
      assertFalse(int1 == int0);
      assertNotNull(parser0);
      
      int int2 = 4396;
      Regexp regexp1 = Parser.parse(string0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string3 = ")z[7=d";
      Regexp regexp2 = Parser.parse(string3, int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      int int3 = 2599;
      Regexp regexp3 = Parser.parse(string1, int3);
      assertFalse(string1.equals((Object)string3));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      try { 
        Parser.parse(">(y|Y|6", (-2967));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `>(y|Y|6`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "\\pP\\w`!Rh\\p/r*i3Wn6p";
      int int0 = 204;
      Regexp regexp0 = Parser.parse("pPw`!Rhp/r*i3Wn6p", 204);
      assertNotNull(regexp0);
      
      String string1 = "jkJ";
      int int1 = 4270;
      Regexp regexp1 = Parser.parse(string1, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      String string2 = regexp0.toString();
      assertTrue(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("pPw`!Rhp/r*i3Wn6p", string2);
      assertNotNull(string2);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `\\p/`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "1IZ[-L]c/ TZSO";
      Regexp regexp0 = Parser.parse("1IZ[-L]c/ TZSO", 8);
      assertNotNull(regexp0);
      
      regexp0.max = 53;
      Regexp[] regexpArray0 = new Regexp[3];
      int int0 = 3565;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 3565, 8);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "\\p{d2Q4hPf-fi";
      int int0 = 217;
      Regexp regexp0 = Parser.parse("B", (-1430));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("B", 217);
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp3 = Parser.parse("p{d2Q4hPf-fi", (-1430));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp2;
      int int1 = (-1081);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1081), (-1430));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Regexp regexp0 = Parser.parse("}:B/~QOztwf4GLL$", (-1225));
      assertNotNull(regexp0);
      
      int int0 = 1051;
      Regexp regexp1 = Parser.parse("}:B/~QOztwf4GLL$", 43142);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("\b", 85);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 85);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?s:.)", 1241);
      assertNotNull(regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp0.equals(object0);
      assertFalse(boolean0);
      
      Regexp[] regexpArray0 = new Regexp[8];
      regexp0.reinit();
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 11822, (-312));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "(?-m:$)";
      int int0 = 2147483645;
      String string1 = "\\r";
      Regexp regexp0 = Parser.parse("\r", 2147483645);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp1;
      int int1 = (-3412);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-3412), (-2115));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3412
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "7[:]";
      int int0 = 393;
      Regexp regexp0 = Parser.parse("7[:]", 393);
      assertNotNull(regexp0);
      
      int[] intArray0 = new int[1];
      regexp0.flags = 393;
      intArray0[0] = 393;
      regexp0.runes = intArray0;
      int int1 = 47;
      int int2 = 50;
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 47, 50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "3A0a9\\4FH%OJ\"@g^dH";
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("3A0a9\u0004FH%OJ\"@g^dH", 1489);
      assertNotNull(regexp0);
      
      int int0 = (-3789);
      String string1 = "rE5fK{6SO-G";
      Regexp regexp1 = Parser.parse(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      int int1 = 2524;
      Regexp regexp2 = new Regexp(regexp1);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\4`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":fq", 2348);
      assertNotNull(regexp0);
      
      regexp0.max = 2348;
      Regexp[] regexpArray0 = new Regexp[6];
      regexp0.reinit();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Regexp regexp0 = Parser.parse("l[f]", 3673);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "Wl[]";
      try { 
        Parser.parse("Wl[]", 3673);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[]`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "1IZ[-L]c/ TZSO";
      int int0 = 124;
      Regexp regexp0 = Parser.parse("1IZ[-L]c/ TZSO", 124);
      assertNotNull(regexp0);
      
      regexp0.name = "1IZ[-L]c/ TZSO";
      int int1 = 53;
      regexp0.max = 53;
      int int2 = 51;
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      Regexp[] regexpArray1 = regexp0.subs;
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      
      try { 
        Parser.parse("+", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Regexp regexp0 = Parser.parse("::xdCx{FFF}]", 78);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp1.equals(object0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(boolean0);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string0 = regexp1.name;
      assertNull(string0);
      
      int int0 = 64;
      try { 
        Parser.parse("[~d", 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[~d`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 1245;
      int int1 = (-278);
      Regexp regexp0 = Parser.parse("rs`$(y|Y.|9", (-278));
      assertNotNull(regexp0);
      
      int int2 = 1709;
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp1 = Parser.parse("^x00-x{10FFFF}", (-1219));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp0;
      regexp2.cap = 46;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-278), 1709);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -278
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "lFRX/80Q{";
      String string1 = "I[[FMxT3OA^\"W?p";
      Regexp regexp0 = Parser.parse("I[[FMxT3OA^\"W?p", 622);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("I[[FMxT3OA^\"W?p", 13);
      assertNotNull(parser0);
      
      try { 
        Parser.parse("(?i:", (-1979));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 110;
      try { 
        Parser.parse("klt6C3(%0@\u0002.e=GwV", 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `klt6C3(%0@\u0002.e=GwV`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Regexp regexp0 = Parser.parse("'\u0001+vE%^{$oBoQ3@HP", 1648);
      assertNotNull(regexp0);
      
      String string0 = null;
      int int0 = 43273;
      // Undeclared exception!
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        Parser.parse("((y|Yw9", 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `((y|Yw9`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      try { 
        Parser.parse("$(y|Y.|9", 2405);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `$(y|Y.|9`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Regexp regexp0 = Parser.parse("U/7[:]", 393);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      int[] intArray0 = new int[1];
      regexp0.flags = 393;
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("BEGIN_TEXT", 0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Parser parser0 = new Parser("BEGIN_TEXT", 50);
      assertNotNull(parser0);
      
      Regexp regexp3 = Parser.parse("U/7[:]", 47);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      
      Regexp[] regexpArray0 = Parser.subarray((Regexp[]) null, 4560, 4560);
      assertNotNull(regexpArray0);
      
      Regexp regexp4 = new Regexp(regexp1);
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      try { 
        Parser.parse("$(y|Y.|9", (-1219));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `$(y|Y.|9`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Regexp regexp0 = Parser.parse("@=D:{7,-L_", 2492);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 551, 2492);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 551
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 2504;
      Regexp regexp0 = Parser.parse("[::x00-x{10FFFFe]", 2504);
      assertNotNull(regexp0);
      
      String string0 = "(?(?P<(?X(xQY|9";
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 41;
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse("((y|Y^Xw9", 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `((y|Y^Xw9`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "J(yT|Yk|";
      try { 
        Parser.parse("J(yT|Yk|", (-1711));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `J(yT|Yk|`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\t", 416);
      assertNotNull(regexp0);
      
      String string0 = regexp0.name;
      assertNull(string0);
      
      String string1 = regexp0.toString();
      assertEquals("\\t", string1);
      assertNotNull(string1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp1 = Parser.parse("\t", 416);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Parser parser0 = new Parser("\t", 416);
      assertNotNull(parser0);
      
      boolean boolean0 = regexp1.equals("\t");
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(boolean0);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp regexp3 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      try { 
        Parser.parse("rs`$(y|YV.|9", (-1219));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `rs`$(y|YV.|9`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        Parser.parse("QHT/[}fWo%}H 2.", 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[}fWo%}H 2.`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Parser parser0 = new Parser("pe]", 224);
      assertNotNull(parser0);
      
      int int0 = 6755;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("p|=4jOc-", (-981));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      Regexp[] regexpArray0 = regexp3.subs;
      assertNull(regexpArray0);
      
      String string0 = "[:c-";
      int int1 = 709;
      regexp3.max = 973;
      try { 
        Parser.parse("[:c-", 709);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:c-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 124;
      String string0 = "F9fq/k.qAV\\6qoxQ$";
      Regexp regexp0 = Parser.parse("F9fq/k.qAV\u0006qoxQ$", 124);
      assertNotNull(regexp0);
      
      int int1 = 1013;
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\6`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }
}
