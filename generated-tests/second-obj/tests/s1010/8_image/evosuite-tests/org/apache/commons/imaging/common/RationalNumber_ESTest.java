/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:58:39 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      int int0 = rationalNumber0.intValue();
      assertEquals(1.0E-8, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, int0);
      assertEquals(100000000, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1745), (-1745));
      int int0 = rationalNumber0.intValue();
      assertEquals(1, int0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-2147483647", string0);
      
      String string1 = rationalNumber0.toString();
      assertEquals("-2,147,483,647", string1);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      int int0 = rationalNumber0.intValue();
      assertEquals(0, int0);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(23L);
      long long0 = rationalNumber0.longValue();
      assertEquals(23.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(23L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.1474836046418476E9);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("2147483605", string0);
      assertEquals(2.147483605E9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(3.4055119613185525E-8);
      assertEquals(3.405511909568947E-8, rationalNumber0.doubleValue(), 0.01);
      assertEquals(29364161, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0027829313543179524);
      assertEquals(0.0027829313F, rationalNumber0.floatValue(), 0.01F);
      
      RationalNumber rationalNumber1 = new RationalNumber(1078, 93);
      assertEquals(11L, rationalNumber1.longValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-2752), (-2752));
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("2147483647", string0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(2147483647L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1756), 0);
      rationalNumber0.toString();
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.001703337500457);
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = (-2147483667L);
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483667L), 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483667, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber.factoryMethod(2147483671L, 2147483671L);
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(780L, 2147483671L);
      assertEquals(3.632158003790548E-7, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-16.377));
      rationalNumber0.toDisplayString();
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      rationalNumber1.toString();
      rationalNumber1.toString();
      RationalNumber.factoryMethod((-92L), (-1L));
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(92, (-2147483667L));
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod((-7L), 31L);
      rationalNumber2.intValue();
      rationalNumber3.negate();
      RationalNumber.factoryMethod((-92L), 2045L);
      RationalNumber rationalNumber5 = rationalNumber0.negate();
      rationalNumber5.intValue();
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod(92, 1292L);
      String string0 = rationalNumber6.toString();
      assertEquals("23/323 (0.071)", string0);
      
      rationalNumber4.negate();
      RationalNumber rationalNumber7 = RationalNumber.valueOf(536870917);
      String string1 = rationalNumber4.toDisplayString();
      assertEquals("-0.226", string1);
      
      rationalNumber3.negate();
      assertEquals((-4.284083803332562E-8), rationalNumber3.doubleValue(), 0.01);
      
      RationalNumber rationalNumber8 = rationalNumber7.negate();
      rationalNumber8.toString();
      String string2 = rationalNumber8.toString();
      assertEquals("-536,870,917", string2);
      
      RationalNumber rationalNumber9 = RationalNumber.valueOf(2.147483647E9);
      assertEquals(Integer.MAX_VALUE, rationalNumber9.intValue());
      
      String string3 = rationalNumber0.toDisplayString();
      assertEquals("-16.377", string3);
  }
}
