/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 14:22:55 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map0, class0);
      doubleKeyMap1.remove((Object) "}w2!:", (Object) doubleKeyMap0);
      HashMap<Object, Map<String, String>> hashMap1 = new HashMap<Object, Map<String, String>>();
      HashMap<Object, Map<String, String>> hashMap2 = new HashMap<Object, Map<String, String>>(hashMap1);
      DoubleKeyMap<Object, String, String> doubleKeyMap2 = new DoubleKeyMap<Object, String, String>(hashMap2, class0);
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap2.put((Object) doubleKeyMap1, (Map<String, String>) hashMap3);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>((Map<Object, Map<Integer, Integer>>) null);
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>();
      doubleKeyMap1.remove(";n?");
      String string0 = "";
      doubleKeyMap1.get("");
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Integer> doubleKeyMap2 = null;
      try {
        doubleKeyMap2 = new DoubleKeyMap<Object, String, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<Map<String, String>, Map<Integer, Object>> hashMap0 = new HashMap<Map<String, String>, Map<Integer, Object>>();
      DoubleKeyMap<Map<String, String>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Integer, Object>(hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      hashMap0.put(hashMap1, hashMap2);
      Integer integer0 = new Integer((-1265));
      doubleKeyMap0.put((Map<String, String>) hashMap1, integer0, (Object) hashMap0);
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap3.replaceAll(biFunction0);
      doubleKeyMap0.get((Map<String, String>) hashMap3);
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, Object>();
      doubleKeyMap1.remove(integer0, integer0);
      HashMap<String, Map<Object, Map<String, String>>> hashMap4 = new HashMap<String, Map<Object, Map<String, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Map<String, String>> doubleKeyMap2 = new DoubleKeyMap<String, Object, Map<String, String>>(hashMap4, class0);
      doubleKeyMap2.get("", (Object) "");
      HashMap<Object, Map<Object, Integer>> hashMap5 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap3 = new DoubleKeyMap<Object, Object, Integer>(hashMap5, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap3.newMap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(hashMap0, class0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put("", hashMap1);
      doubleKeyMap0.get((Object) "", "wrong proto type map ");
      String string0 = doubleKeyMap0.put((Object) "", "N,$R4I}3Idyuh", "N,$R4I}3Idyuh");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      Integer integer0 = new Integer(76);
      doubleKeyMap0.put((Object) "", (Object) "", integer0);
      Object object0 = new Object();
      Integer integer1 = doubleKeyMap0.remove((Object) "", (Object) "~?Ly(3");
      assertNull(integer1);
  }
}
