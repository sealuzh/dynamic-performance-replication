/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 18:22:08 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)42;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte) (-7), (byte)0, (byte)18, (byte)72, (byte)42}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte) (-7), (byte)0, (byte)18, (byte)72, (byte)42}, byteArray0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      assertNotNull(constantDouble0);
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      constantArray0[0] = (Constant) constantDouble0;
      String string0 = Utility.methodTypeToSignature("StackMapTable", (String[]) null);
      assertNotNull(string0);
      assertEquals("()LStackMapTable;", string0);
      
      short short0 = Utility.searchOpcode("()LStackMapTable;");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      String string0 = Utility.accessToString(229);
      assertNotNull(string0);
      assertEquals("public protected synchronized volatile transient", string0);
      
      String string1 = Utility.format(791, 1223, true, 'G');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.convertString("<5!$F-0-");
      assertNotNull(string2);
      assertEquals("<5!$F-0-", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = Utility.fillup("piU?@#M{0<l\\;K", 0, true, 'G');
      assertNotNull(string3);
      assertEquals("piU?@#M{0<l\\;K", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = Utility.replace("", "anewarray", "piU?@#M{0<l\\;K");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t\t";
      short short0 = Utility.searchOpcode("\t\t");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.convertString("\t\t");
      assertNotNull(string0);
      assertEquals("\t\t", string0);
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) stringArray0);
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals("foo.bar", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName(", low = ", ", low = ", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-466), 40);
      assertNotNull(string1);
      assertEquals("0:    return\n", string1);
      assertEquals(1, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-79)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("idB/C V%-Lry[:+&", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[:+&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)56;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-68), (byte)56}, byteArray0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("$K$bc8", string0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-68), (byte)56}, byteArray0);
      
      boolean boolean1 = true;
      String string1 = Utility.fillup("f2l", (-22), true, 'C');
      assertNotNull(string1);
      assertEquals("f2l", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = Utility.clearBit((byte)56, 115);
      assertEquals(56, int0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string2 = Utility.compactClassName("uYWc>Fg}1");
      assertNotNull(string2);
      assertEquals("uYWc>Fg}1", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("ret");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("ret", constantUtf8_0.getBytes());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      int int1 = 3213;
      int int2 = 214;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.convertString(" no ident, reaching EOF");
      assertNotNull(string0);
      assertEquals(" no ident, reaching EOF", string0);
      
      String string1 = Utility.accessToString(91);
      assertNotNull(string1);
      assertEquals("public private static final volatile", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.format(90, 699, false, '}');
      assertNotNull(string2);
      assertEquals("}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}90", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)43}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotNull(string3);
      assertEquals("aload_1", string3);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte)43}, byteArray0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)43;
      byteArray1[1] = (byte) (-16);
      byteArray1[2] = (byte)13;
      byteArray1[3] = (byte)43;
      byteArray1[4] = (byte)13;
      byteArray1[5] = (byte) (-70);
      byteArray1[6] = (byte) (-16);
      byteArray1[7] = (byte)13;
      byteArray1[8] = (byte)13;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, (int) (byte) (-70), (int) (byte)13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-66), (byte) (-31)}, byteArray0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotNull(string0);
      assertEquals("if_acmpeq\t\t#-16671", string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals(3, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-66), (byte) (-31)}, byteArray0);
      
      String string1 = Utility.convertString("cARuO>");
      assertNotNull(string1);
      assertEquals("cARuO>", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.printArray((Object[]) constantArray0);
      assertNotNull(string2);
      assertEquals("{null}", string2);
      assertEquals(1, constantArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The prefix must not be null");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("YX%Oi^X%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YX%Oi^X%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = Utility.classOrInterface(16);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-19);
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("class");
      assertNotNull(constantUtf8_0);
      assertEquals("class", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("class");
      assertNotNull(constantUtf8_1);
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("class", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantLong constantLong0 = new ConstantLong((-1535L));
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-1535L), constantLong0.getBytes());
      
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("mV:5!aV)3`^b");
      assertNotNull(constantUtf8_2);
      assertEquals("mV:5!aV)3`^b", constantUtf8_2.getBytes());
      assertEquals((byte)1, constantUtf8_2.getTag());
      assertFalse(constantUtf8_2.equals((Object)constantUtf8_1));
      assertFalse(constantUtf8_2.equals((Object)constantUtf8_0));
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string1);
      assertEquals("i2f", string1);
      assertEquals(4, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertEquals(4, constantArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string2);
      assertEquals("lushr", string2);
      assertEquals(4, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertEquals(4, constantArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      boolean boolean0 = false;
      String string3 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-19), 182, false);
      assertNotNull(string3);
      assertEquals("0:    i2f\n1:    lushr\n2:    <illegal opcode>\n", string3);
      assertEquals(4, constantPool0.getLength());
      assertEquals(3, byteArray0.length);
      assertEquals(4, constantArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("ixor", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!0^ @#k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0^ @#k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Utility.getSignature("WUUU^A]2%m(8P");
      assertNotNull(string0);
      assertEquals("LWUUU^A]2%m(8P;", string0);
      
      byte byte0 = Utility.typeOfSignature("LWUUU^A]2%m(8P;");
      assertEquals((byte)14, byte0);
      
      String string1 = Utility.accessToString((int) (byte)14);
      assertNotNull(string1);
      assertEquals("private protected static", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.format(503, (byte)14, false, '}');
      assertNotNull(string2);
      assertEquals("}}}}}}}}}}}503", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = Utility.convertString("}}}}}}}}}}}503");
      assertNotNull(string3);
      assertEquals("}}}}}}}}}}}503", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string4 = Utility.convertString("8.=%f!Q[");
      assertNotNull(string4);
      assertEquals("8.=%f!Q[", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = Utility.fillup("private protected static", 503, true, '}');
      assertNotNull(string5);
      assertEquals("private protected static}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)47;
      String string6 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)47);
      assertNotNull(string6);
      assertEquals("0:    dconst_0\n1:    laload\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string6);
      assertEquals(0, constantPool0.getLength());
      assertEquals(7, byteArray0.length);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)14, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)14, 62, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)42;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte) (-7), (byte)0, (byte)18, (byte)72, (byte)42}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte) (-7), (byte)0, (byte)18, (byte)72, (byte)42}, byteArray0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      
      constantArray0[0] = (Constant) constantDouble0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      assertNotNull(constantFieldref0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(18432, constantFieldref0.getClassIndex());
      assertEquals(63744, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte) (-7), (byte)0, (byte)18, (byte)72, (byte)42}, byteArray0);
      
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      assertNotNull(constantInteger0);
      assertEquals(0, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      
      ConstantInteger constantInteger1 = new ConstantInteger((byte)72);
      assertNotNull(constantInteger1);
      assertEquals(72, constantInteger1.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      assertFalse(constantInteger1.equals((Object)constantInteger0));
      
      String string0 = Utility.signatureToString("TB~6Rbe)ek{E7v#;");
      assertNotNull(string0);
      assertEquals("B~6Rbe)ek{E7v#", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = Utility.getSignature("");
      assertNotNull(string0);
      assertEquals("L;", string0);
      
      String string1 = Utility.convertString("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)32;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte)39;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 96, (-1805), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), 819);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.methodSignatureReturnType("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals(3, objectArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-79);
      String string1 = Utility.encode(byteArray0, true);
      assertNotNull(string1);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      assertEquals(8, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-72), (byte)0, (byte)73, (byte)16, (byte) (-82), (byte)0, (byte)8, (byte) (-79)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)40;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)40}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray1 = Utility.decode("org.apache.bcel.classfile.ConstantClass", false);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(39, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)40}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("dload_2", string0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)40}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = Utility.clearBit((-834), (-834));
      assertEquals((-1073742658), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = Utility.setBit((-2386), (-2386));
      assertEquals((-2386), int0);
      
      String string0 = Utility.classOrInterface((-2386));
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      String string1 = "!^a [#k";
      try { 
        Utility.typeOfSignature("interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "Z5OX>!TlZM";
      short short0 = Utility.searchOpcode("Z5OX>!TlZM");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, 659, true);
      assertNotNull(string1);
      assertEquals("5:    iconst_2\n6:    iconst_2\n", string1);
      assertEquals(7, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)5, (byte)5, (byte)5, (byte)5, (byte)5, (byte)5, (byte)5}, byteArray0);
      
      String string2 = Utility.accessToString(783);
      assertNotNull(string2);
      assertEquals("public private protected static native interface", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      try { 
        Utility.typeOfSignature("lstore_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lstore_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-70);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte) (-70));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)42;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte) (-7), (byte)0, (byte)18, (byte)72, (byte)42}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte) (-7), (byte)0, (byte)18, (byte)72, (byte)42}, byteArray0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      assertNotNull(constantDouble0);
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.clone();
      assertNotNull(constantDouble1);
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals((-1.0), constantDouble1.getBytes(), 0.01);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      
      constantArray0[0] = (Constant) constantDouble0;
      boolean boolean1 = Utility.isSet(4096, (byte)0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      try { 
        Utility.methodSignatureArgumentTypes("m7C:d|d", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: m7C:d|d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = Utility.compactClassName("YX%Oi^XQ", false);
      assertNotNull(string0);
      assertEquals("YX%Oi^XQ", string0);
      
      boolean boolean0 = Utility.isSet(221, 329);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76}, byteArray0);
      
      ConstantInteger constantInteger0 = new ConstantInteger((byte)76);
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(76, constantInteger0.getBytes());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("astore_1", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = Utility.compactClassName("ar&2|-%Nice^=", false);
      assertNotNull(string0);
      assertEquals("ar&2|-%Nice^=", string0);
      
      String string1 = "$Y,i(?:Ctk)4epq';";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ar&2|-%Nice^=", "$Y,i(?:Ctk)4epq';", "MmPyK,^~*YsIFo0*U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ar&2|-%Nice^=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)42, (byte) (-1), (byte)51, (byte) (-66), (byte)1}, byteArray0);
      
      int int0 = byteSequence0.readInt();
      assertEquals(1076559667, int0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)42, (byte) (-1), (byte)51, (byte) (-66), (byte)1}, byteArray0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((byte)51);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(51.0, constantDouble0.getBytes(), 0.01);
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.clone();
      assertNotNull(constantDouble1);
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(51.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals(51.0, constantDouble1.getBytes(), 0.01);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantDouble0;
      byteSequence0.close();
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)42, (byte) (-1), (byte)51, (byte) (-66), (byte)1}, byteArray0);
      
      String string0 = "CONSTANT_InvokeDynamic";
      String string1 = Utility.signatureToString("CONSTANT_InvokeDynamic", true);
      assertNotNull(string1);
      assertEquals("char", string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.typeOfMethodSignature("(reference_kind = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (reference_kind = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("nop", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)20}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('Z');
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      try { 
        Utility.decode("D hVj79,BfC1]K", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = Utility.fillup("<41C@mgD\t", (-994), false, '4');
      assertNotNull(string0);
      assertEquals("<41C@mgD\t", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), 59);
      assertNotNull(string1);
      assertEquals("0:    impdep2\n", string1);
      assertEquals(1, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      
      try { 
        Utility.methodSignatureReturnType("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `long'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("WUUUA]%m(8", false);
      assertNotNull(byteArray0);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)87, (byte)85, (byte)85, (byte)85, (byte)65, (byte)93, (byte)37, (byte)109, (byte)40, (byte)56}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)87, (byte)85, (byte)85, (byte)85, (byte)65, (byte)93, (byte)37, (byte)109, (byte)40, (byte)56}, byteArray0);
      
      int int0 = byteSequence0.readUnsignedByte();
      assertEquals(87, int0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)87, (byte)85, (byte)85, (byte)85, (byte)65, (byte)93, (byte)37, (byte)109, (byte)40, (byte)56}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotNull(string0);
      assertEquals("castore", string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)87, (byte)85, (byte)85, (byte)85, (byte)65, (byte)93, (byte)37, (byte)109, (byte)40, (byte)56}, byteArray0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "goto_w";
      stringArray0[1] = "-k52`iys3p";
      stringArray0[2] = "WUUUA]%m(8";
      stringArray0[3] = "-k52`iys3p";
      stringArray0[4] = "-k52`iys3p";
      stringArray0[5] = "-k52`iys3p";
      String string1 = Utility.methodTypeToSignature("goto_w", stringArray0);
      assertNotNull(string1);
      assertEquals("(Lgoto_w;L-k52`iys3p;LWUUUA]%m(8;L-k52`iys3p;L-k52`iys3p;L-k52`iys3p;)Lgoto_w;", string1);
      assertEquals(6, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string0 = constantPool1.toString();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotNull(constantPool2);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)34;
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-77), (int) (byte)97, true);
      assertNotNull(string1);
      assertEquals("0:    <illegal opcode>\n1:    ladd\n2:    fload_0\n", string1);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      assertEquals(3, byteArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-16), (byte)97, (byte)34}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "RjEKnn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = Utility.classOrInterface(231);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)125;
      byte byte0 = (byte) (-19);
      byteArray0[2] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("class");
      assertNotNull(constantUtf8_0);
      assertEquals("class", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("class");
      assertNotNull(constantUtf8_1);
      assertEquals("class", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      
      ConstantLong constantLong0 = new ConstantLong((byte) (-19));
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-19L), constantLong0.getBytes());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(3, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      byteSequence1.close();
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(3, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence1);
      assertNotNull(dataInputStream0);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(3, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence1);
      assertNotNull(constantMethodType0);
      assertEquals(2, byteSequence1.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(34429, constantMethodType0.getDescriptorIndex());
      assertEquals(3, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertNotNull(constantMethodType1);
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(34429, constantMethodType1.getDescriptorIndex());
      assertEquals(2, byteSequence1.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(34429, constantMethodType0.getDescriptorIndex());
      assertEquals(3, byteArray0.length);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantArray0.length);
      
      String string1 = constantPool0.toString();
      assertNotNull(string1);
      assertEquals("1)null\n2)null\n3)null\n", string1);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertEquals(4, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string2 = Utility.codeToString(byteSequence1, constantPool1, true);
      assertNotNull(string2);
      assertEquals("<illegal opcode>", string2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertEquals(3, byteSequence1.getIndex());
      assertEquals(3, byteArray0.length);
      assertEquals(4, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      String string3 = Utility.printArray((Object[]) constantArray0, true);
      assertNotNull(string3);
      assertEquals("{CONSTANT_Utf8[1](\"class\"), null, null, null}", string3);
      assertEquals(4, constantArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = Utility.replace("{CONSTANT_Utf8[1](\"class\"), null, null, null}", "pRsvcq$s*fe~!28,O,A", "{CONSTANT_Utf8[1](\"class\"), null, null, null}");
      assertNotNull(string4);
      assertEquals("{CONSTANT_Utf8[1](\"class\"), null, null, null}", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{CONSTANT_Utf8[1](\"class\"), null, null, null}";
      String string5 = Utility.toHexString(byteArray0);
      assertNotNull(string5);
      assertEquals("86 7d ed", string5);
      assertEquals(3, byteArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      try { 
        Utility.methodSignatureReturnType("{CONSTANT_Utf8[1](\"class\"), null, null, null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `, null, null, null}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "J&)DbHbj</@l'";
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (int) (byte) (-67));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)110, (int) (byte)26, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-95);
      byteArray0[3] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)78, (byte) (-95), (byte)0, (byte)78, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Unreachable default case reached!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)123;
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      byte byte0 = Utility.typeOfSignature("C00*-^");
      assertEquals((byte)5, byte0);
      
      String string0 = Utility.compactClassName("4");
      assertNotNull(string0);
      assertEquals("4", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)72;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string0 = Utility.replace("iB7Jn7xl(vr", "iB7Jn7xl(vr", "\nAttribute(s):\n");
      assertNotNull(string0);
      assertEquals("\nAttribute(s):\n", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "iB7Jn7xl(vr";
      stringArray0[1] = "-#YR?,l\"9";
      stringArray0[2] = "\nAttribute(s):\n";
      stringArray0[3] = "\nAttribute(s):\n";
      stringArray0[4] = "=o P-9UotK +bJ";
      String string1 = Utility.methodTypeToSignature("=o P-9UotK +bJ", stringArray0);
      assertNotNull(string1);
      assertEquals("(LiB7Jn7xl(vr;L-#YR?,l\"9;LAttribute(s):;LAttribute(s):;L=o;)L=o;", string1);
      assertEquals(5, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.getSignature("\nAttribute(s):\n");
      assertNotNull(string2);
      assertEquals("LAttribute(s):;", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-95);
      byteArray0[0] = (byte) (-68);
      byteArray0[3] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-95), (byte)0, (byte) (-119), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(7, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-95), (byte)0, (byte) (-119), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteSequence1.reset();
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(7, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-95), (byte)0, (byte) (-119), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      short short0 = byteSequence1.readShort();
      assertEquals((short) (-17247), short0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(2, byteSequence1.getIndex());
      assertEquals(7, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-95), (byte)0, (byte) (-119), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = byteSequence1.readBoolean();
      assertFalse(boolean0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(3, byteSequence1.getIndex());
      assertEquals(7, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-95), (byte)0, (byte) (-119), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("l2f", string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(4, byteSequence1.getIndex());
      assertEquals(7, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-95), (byte)0, (byte) (-119), (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte byte0 = (byte) (-21);
      byte byte1 = (byte)42;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-83));
      assertNotNull(constantMethodType0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((-83), constantMethodType0.getDescriptorIndex());
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(264);
      assertNotNull(constantMethodType1);
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(264, constantMethodType1.getDescriptorIndex());
      assertFalse(constantMethodType1.equals((Object)constantMethodType0));
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u]p=qA62]2");
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = Utility.getSignature("WUUU^A]2%m(8P");
      assertNotNull(string0);
      assertEquals("LWUUU^A]2%m(8P;", string0);
      
      byte byte0 = Utility.typeOfSignature("LWUUU^A]2%m(8P;");
      assertEquals((byte)14, byte0);
      
      String string1 = Utility.accessToString((int) (byte)14);
      assertNotNull(string1);
      assertEquals("private protected static", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.format(503, (byte)14, false, '}');
      assertNotNull(string2);
      assertEquals("}}}}}}}}}}}503", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = Utility.convertString("}}}}}}}}}}}503");
      assertNotNull(string3);
      assertEquals("}}}}}}}}}}}503", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string4 = Utility.convertString("8.=%f!Q[");
      assertNotNull(string4);
      assertEquals("8.=%f!Q[", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = Utility.fillup("private protected static", 503, true, '}');
      assertNotNull(string5);
      assertEquals("private protected static}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-90);
      String string6 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-90), (int) (byte)47);
      assertNotNull(string6);
      assertEquals("0:    dconst_0\n1:    laload\n2:    if_acmpne\t\t#2\n5:    nop\n6:    nop\n", string6);
      assertEquals(0, constantPool0.getLength());
      assertEquals(7, byteArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)14, (byte)47, (byte) (-90), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string7 = Utility.classOrInterface((byte) (-90));
      assertNotNull(string7);
      assertEquals("interface", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      
      String string8 = Utility.codeToString(byteArray0, constantPool0, (-3237), (int) (byte)47, true);
      assertNotNull(string8);
      assertEquals("0:    dconst_0\n1:    laload\n2:    if_acmpne\t\t#2\n5:    nop\n6:    nop\n", string8);
      assertEquals(0, constantPool0.getLength());
      assertEquals(7, byteArray0.length);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertArrayEquals(new byte[] {(byte)14, (byte)47, (byte) (-90), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14, (byte)47, (byte) (-90), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string9 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string9);
      assertEquals("dconst_0", string9);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertArrayEquals(new byte[] {(byte)14, (byte)47, (byte) (-90), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.methodSignatureArgumentTypes("Illegally nested brackets:", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Illegally nested brackets:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-84)}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertNotNull(string0);
      assertEquals("ireturn", string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantArray0.length);
      assertEquals(1, byteArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertArrayEquals(new byte[] {(byte) (-84)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-119);
      try { 
        Utility.typeOfSignature("#mi3SuhLgl*3DSav");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #mi3SuhLgl*3DSav
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)50, (byte)12, (byte)92, (byte) (-71), (byte) (-1)}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(5, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)50, (byte)12, (byte)92, (byte) (-71), (byte) (-1)}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("aaload", string0);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertArrayEquals(new byte[] {(byte)50, (byte)12, (byte)92, (byte) (-71), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('D');
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("\n", "\n", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte) (-1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string1 = Utility.methodTypeToSignature("Hsdretu1n", stringArray0);
      assertNotNull(string1);
      assertEquals("(L;)LHsdretu1n;", string1);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-128);
      byteArray1[1] = (byte)52;
      byteArray1[2] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-128), (byte)52, (byte)15}, byteArray1);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string2);
      assertEquals("ior", string2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(3, byteArray1.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-128), (byte)52, (byte)15}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      String string0 = Utility.compactClassName("\n", "Hsdretu1n", true);
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      ConstantPool constantPool0 = null;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1154), (-1154), true);
      assertNotNull(string1);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string1);
      assertEquals(8, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Hsdretu1n";
      stringArray0[1] = "0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n";
      stringArray0[2] = "Hsdretu1n";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("\n", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("WUUUA]%m(8", false);
      assertNotNull(byteArray0);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)87, (byte)85, (byte)85, (byte)85, (byte)65, (byte)93, (byte)37, (byte)109, (byte)40, (byte)56}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)87, (byte)85, (byte)85, (byte)85, (byte)65, (byte)93, (byte)37, (byte)109, (byte)40, (byte)56}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("pop", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)87, (byte)85, (byte)85, (byte)85, (byte)65, (byte)93, (byte)37, (byte)109, (byte)40, (byte)56}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = Utility.getSignature("WUUU^A]2%m(8P");
      assertNotNull(string0);
      assertEquals("LWUUU^A]2%m(8P;", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-124), (byte)19}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertNotNull(string1);
      assertEquals("faload", string1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool1.getLength());
      assertEquals(3, byteArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)48, (byte) (-124), (byte)19}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Q-\"kC1m'TAZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q-\"kC1m'TAZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = Utility.accessToString((-1245));
      assertNotNull(string0);
      assertEquals("public private synchronized native interface strictfp synthetic annotation enum", string0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(313, (-1245));
      assertNotNull(constantFieldref0);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(313, constantFieldref0.getClassIndex());
      assertEquals((-1245), constantFieldref0.getNameAndTypeIndex());
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool2);
      assertEquals(0, constantPool2.getLength());
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80)}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool2, false);
      assertNotNull(string1);
      assertEquals("areturn", string1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(0, constantPool2.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80)}, byteArray0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = ">\t";
      stringArray0[1] = "goto_w";
      stringArray0[2] = "areturn";
      stringArray0[3] = "areturn";
      stringArray0[4] = "areturn";
      stringArray0[5] = "public private synchronized native interface strictfp synthetic annotation enum";
      String string2 = Utility.methodTypeToSignature("areturn", stringArray0);
      assertNotNull(string2);
      assertEquals("(L>;Lgoto_w;Lareturn;Lareturn;Lareturn;Lpublic;)Lareturn;", string2);
      assertEquals(6, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      String string0 = Utility.accessToString((-1708));
      assertNotNull(string0);
      assertEquals("protected final volatile native strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.getSignature("");
      assertNotNull(string1);
      assertEquals("L;", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.replace("6puk7u]\"", "jsr", "nZ");
      assertNotNull(string2);
      assertEquals("6puk7u]\"", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Utility.classOrInterface((byte) (-1));
      assertNotNull(string3);
      assertEquals("interface", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = Utility.signatureToString("LWUUU^A]2%m(8P;V", true);
      assertNotNull(string0);
      assertEquals("WUUU^A]2%m(8P", string0);
      
      String string1 = Utility.format(2737, 16, true, 'd');
      assertNotNull(string1);
      assertEquals("2737dddddddddddd", string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)43, (byte)28, (byte)43, (byte)24, (byte)28, (byte)28}, byteArray0);
      
      float float0 = byteSequence0.readFloat();
      assertEquals(5.548214E-13F, float0, 0.01F);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)43, (byte)28, (byte)43, (byte)24, (byte)28, (byte)28}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string2);
      assertEquals("iload_2", string2);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(6, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)43, (byte)28, (byte)43, (byte)24, (byte)28, (byte)28}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 174, 2084);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(0, objectArray0.length);
      
      String string1 = Utility.accessToString(70);
      assertNotNull(string1);
      assertEquals("private protected volatile", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "java.lang.Short";
      stringArray0[1] = "private protected volatile";
      stringArray0[2] = "{}";
      stringArray0[3] = "java.lang.";
      stringArray0[4] = "{}";
      stringArray0[5] = "private protected volatile";
      stringArray0[6] = "private protected volatile";
      String string2 = Utility.convertString("java.lang.Short");
      assertNotNull(string2);
      assertEquals("java.lang.Short", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool1, (int) (byte) (-67), (-1052), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = Utility.accessToString((-1245));
      assertNotNull(string0);
      assertEquals("public private synchronized native interface strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.format(2233, 7, false, 'G');
      assertNotNull(string1);
      assertEquals("GGG2233", string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[0];
      String string2 = Utility.toHexString(byteArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2233, 50, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("/a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals(4, objectArray0.length);
      
      String string1 = ":bXO&FYt_+.`]t!O";
      try { 
        Utility.typeOfSignature(":bXO&FYt_+.`]t!O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :bXO&FYt_+.`]t!O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)52;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 1, 155, true);
      assertNotNull(string0);
      assertEquals("3:    impdep2\n4:    astore\t\t%52\n6:    nop\n", string0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-94), (byte)69, (byte)96, (byte) (-1), (byte)58, (byte)52, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = Utility.compactClassName("", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = Utility.accessToString(126);
      assertNotNull(string0);
      assertEquals("private protected static final synchronized volatile", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-77), (byte) (-98)}, byteArray0);
      
      int int0 = byteSequence0.skipBytes((byte) (-77));
      assertEquals(0, int0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-77), (byte) (-98)}, byteArray0);
      
      byteSequence0.reset();
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-77), (byte) (-98)}, byteArray0);
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -98
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-95);
      byteArray0[4] = (byte)114;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-95), (int) (byte) (-79));
      assertNotNull(string0);
      assertEquals("0:    f2d\n1:    return\n2:    if_icmplt\t\t#116\n5:    nop\n6:    nop\n", string0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-79), (byte) (-95), (byte)0, (byte)114, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.methodSignatureReturnType("0:    f2d\n1:    return\n2:    if_icmplt\t\t#116\n5:    nop\n6:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    f2d
         // 1:    return
         // 2:    if_icmplt\t\t#116
         // 5:    nop
         // 6:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = Utility.accessToString((int) (byte) (-1));
      assertNotNull(string0);
      assertEquals("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.format((byte) (-1), 791, true, '_');
      assertNotNull(string1);
      assertEqualsstring1);
      assertFalse(string1.equals((Object)string0));
      
      Utility.convertString("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum");
      Utility.compactClassName("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enumtrue);
      String[] stringArray0 = Constants.OPCODE_NAMES;
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.convertString("8.=%f!Q[");
      assertNotNull(string0);
      assertEquals("8.=%f!Q[", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-90);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-90), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('q');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)33, (byte) (-92), (byte) (-101), (byte) (-6)}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("lload_3", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)33, (byte) (-92), (byte) (-101), (byte) (-6)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(194, 194);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(194, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(194, constantInvokeDynamic0.getClassIndex());
      assertEquals(194, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertNotNull(constantInvokeDynamic1);
      assertEquals(194, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(194, constantInvokeDynamic0.getClassIndex());
      assertEquals(194, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(194, constantInvokeDynamic1.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals(194, constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals(194, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertNotNull(constantPool2);
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      ConstantPool constantPool3 = constantPool0.copy();
      assertNotNull(constantPool3);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool3.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-75), (byte) (-56), (byte) (-15), (byte)40, (byte)114, (byte) (-96)}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertNotNull(string0);
      assertEquals("ixor", string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      assertEquals(7, byteArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool3));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-75), (byte) (-56), (byte) (-15), (byte)40, (byte)114, (byte) (-96)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Z0X");
      assertNotNull(string0);
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Utility.getSignature("WUUU^A]2%m(8P");
      assertNotNull(string0);
      assertEquals("LWUUU^A]2%m(8P;", string0);
      
      byte byte0 = Utility.typeOfSignature("LWUUU^A]2%m(8P;");
      assertEquals((byte)14, byte0);
      
      int int0 = Utility.clearBit((byte)14, 503);
      assertEquals(14, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14}, byteArray0);
      
      byteSequence0.close();
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      assertNotNull(dataInputStream0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(9, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14}, byteArray0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence1);
      assertNotNull(constantMethodType0);
      assertEquals(2, byteSequence1.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(3598, constantMethodType0.getDescriptorIndex());
      assertEquals(9, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14}, byteArray0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(byteSequence0);
      assertNotNull(constantMethodType1);
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(3598, constantMethodType1.getDescriptorIndex());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14}, byteArray0);
      
      String string1 = constantMethodType1.toString();
      assertNotNull(string1);
      assertEquals("CONSTANT_MethodType[16](descriptor_index = 3598)", string1);
      assertNotSame(constantMethodType1, constantMethodType0);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(3598, constantMethodType1.getDescriptorIndex());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14}, byteArray0);
      
      ConstantMethodType constantMethodType2 = new ConstantMethodType(constantMethodType1);
      assertNotNull(constantMethodType2);
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(3598, constantMethodType1.getDescriptorIndex());
      assertEquals(3598, constantMethodType2.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType2.getTag());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertTrue(constantMethodType2.equals((Object)constantMethodType0));
      assertTrue(constantMethodType2.equals((Object)constantMethodType1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14}, byteArray0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "checkcast";
      stringArray0[1] = "h?4gk'uB(w3:bb0+";
      String string2 = Utility.methodTypeToSignature("LWUUU^A]2%m(8P;", stringArray0);
      assertNotNull(string2);
      assertEquals("(Lcheckcast;Lh?4gk'uB(w3:bb0+;)LLWUUU^A]2%m(8P;;", string2);
      assertEquals(2, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      short short0 = Utility.searchOpcode("checkcast");
      assertEquals((short)192, short0);
      
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = Utility.setBit((-2386), (-2386));
      assertEquals((-2386), int0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.fillup("p&T$p", 2519, false, '3');
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "p&T$p";
      objectArray0[1] = (Object) "p&T$p";
      String string1 = Utility.fillup("p&T$p", (-2386), false, '#');
      assertNotNull(string1);
      assertEquals("p&T$p", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = Utility.signatureToString("Dont call getValueDouble() on a non DOUBLE ElementValue", true);
      assertNotNull(string0);
      assertEquals("double", string0);
      
      try { 
        Utility.methodSignatureReturnType("4AfDgm%ybP)KH,%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KH,%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = Utility.classOrInterface(267);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-122), 82);
      assertNotNull(string1);
      assertEquals("0:    i2f\n1:    nop\n2:    nop\n", string1);
      assertEquals(3, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = Utility.getSignature("WUUU^A]2%m(8P");
      assertNotNull(string0);
      assertEquals("LWUUU^A]2%m(8P;", string0);
      
      byte byte0 = Utility.typeOfSignature("LWUUU^A]2%m(8P;");
      assertEquals((byte)14, byte0);
      
      String string1 = Utility.accessToString((int) (byte)14);
      assertNotNull(string1);
      assertEquals("private protected static", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.format(503, (byte)14, false, '}');
      assertNotNull(string2);
      assertEquals("}}}}}}}}}}}503", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Utility.convertString("}}}}}}}}}}}503");
      assertNotNull(string3);
      assertEquals("}}}}}}}}}}}503", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)14;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte)39;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 96, (-1805), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = Utility.getSignature("WUUU^A]2%m(8P");
      assertNotNull(string0);
      assertEquals("LWUUU^A]2%m(8P;", string0);
      
      byte byte0 = Utility.typeOfSignature("LWUUU^A]2%m(8P;");
      assertEquals((byte)14, byte0);
      
      int int0 = Utility.clearBit((byte)14, 503);
      assertEquals(14, int0);
      
      String string1 = Utility.replace("LWUUU^A]2%m(8P;", "?jWFjW[m8E", "class");
      assertNotNull(string1);
      assertEquals("LWUUU^A]2%m(8P;", string1);
      assertTrue(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("LWUUU^A]2%m(8P;", "WUUU^A]2%m(8P", "uc|l", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LWUUU^A]2%m(8P;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = Utility.signatureToString("LWUUU^A]2%m(8P;V", true);
      assertNotNull(string0);
      assertEquals("WUUU^A]2%m(8P", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(", high = ", "p{sV?MzNY$", "goto", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-75), (int) (byte) (-75));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals("newarray\t\t<<illegal type>>", string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.methodSignatureArgumentTypes("newarray\t\t<<illegal type>>", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: newarray\t\t<<illegal type>>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("YX%Oi^XQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YX%Oi^XQ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)114, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("frem", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)114, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)0;
      byteArray0[7] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 153, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString(90);
      assertNotNull(string0);
      assertEquals("private static final volatile", string0);
      
      String string1 = Utility.format(90, 90, true, '@');
      assertNotNull(string1);
      assertEquals("90@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)61, (byte)101, (byte) (-70), (byte)102, (byte) (-89), (byte)61, (byte) (-70), (byte) (-65)}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string2);
      assertEquals("istore_2", string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(8, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)61, (byte)101, (byte) (-70), (byte)102, (byte) (-89), (byte)61, (byte) (-70), (byte) (-65)}, byteArray0);
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotNull(string3);
      assertEquals("lsub", string3);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(8, byteArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)61, (byte)101, (byte) (-70), (byte)102, (byte) (-89), (byte)61, (byte) (-70), (byte) (-65)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      short short0 = Utility.searchOpcode("k?fol[wV");
      assertEquals((short) (-1), short0);
      
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      try { 
        Utility.decode("*eNAzle$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "lookupswitch";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lookupswitch", "lookupswitch", "lookupswitch");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lookupswitch
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)72;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-367), (int) (byte)46, false);
      assertNotNull(string0);
      assertEquals("0:    dstore_1\n1:    nop\n2:    nop\n3:    nop\n4:    iaload\n5:    dstore_1\n6:    nop\n", string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(7, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte)0, (byte)0, (byte)46, (byte)72, (byte)0}, byteArray0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte)0, (byte)0, (byte)46, (byte)72, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)42;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76, (byte)42, (byte)0, (byte)51, (byte) (-66), (byte)1}, byteArray0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((byte)51);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(51.0, constantDouble0.getBytes(), 0.01);
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.clone();
      assertNotNull(constantDouble1);
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(51.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals(51.0, constantDouble1.getBytes(), 0.01);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(6, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)76, (byte)42, (byte)0, (byte)51, (byte) (-66), (byte)1}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("astore_1", string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(6, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)76, (byte)42, (byte)0, (byte)51, (byte) (-66), (byte)1}, byteArray0);
      
      String string1 = Utility.classOrInterface((byte) (-66));
      assertNotNull(string1);
      assertEquals("interface", string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.methodSignatureReturnType("@MQ}MG%XC", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `@MQ}MG%XC'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)26;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)26}, byteArray1);
      
      byteSequence0.reset();
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)26}, byteArray1);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("iload_0", string0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)26}, byteArray1);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) byteSequence0;
      byteSequence0.reset();
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)26}, byteArray1);
      
      objectArray0[2] = (Object) (byte)26;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) (byte)26;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[5] = object1;
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertEquals(6, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t\t";
      short short0 = Utility.searchOpcode("\t\t");
      assertEquals((short) (-1), short0);
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.print("char");
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals("foo.bar", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) stringArray0);
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals("foo.bar", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(2, stringArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-87);
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("aX$a9", string0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)88, (byte) (-87)}, byteArray0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertNotNull(string1);
      assertEquals("aX$a9", string1);
      assertEquals(3, byteArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)97, (byte)88, (byte) (-87)}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)88, (byte) (-87)}, byteArray0);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string2);
      assertEquals("ladd", string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)97, (byte)88, (byte) (-87)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)0, (byte)0}, byteArray0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(29298, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(29298, constantInvokeDynamic0.getClassIndex());
      assertEquals(0, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.decode("$ 6`", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = Utility.format((-233), (-233), false, '>');
      assertNotNull(string0);
      assertEquals("-233", string0);
      
      String string1 = Utility.getSignature("long");
      assertNotNull(string1);
      assertEquals("J", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.convertString("long");
      assertNotNull(string2);
      assertEquals("long", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Pj,=~X'ZU=_uf$", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pj,=~X'ZU=_uf$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = Utility.clearBit(1508, 1508);
      assertEquals(1508, int0);
      
      String string0 = Utility.classOrInterface(1984);
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)116;
      boolean boolean0 = true;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)118, true);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    nop\n2:    ineg\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)116, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = Utility.accessToString((int) (byte)85);
      assertNotNull(string0);
      assertEquals("public protected final volatile", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)85;
      short short0 = Utility.searchOpcode("4 owxd:UL)k");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.compactClassName(".pvYhp^Y7", "", false);
      assertNotNull(string1);
      assertEquals(".pvYhp^Y7", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = Utility.setBit(877, (byte)69);
      assertEquals(877, int0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals((byte)85, byte0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantDouble constantDouble0 = new ConstantDouble(266.12445612797734);
      assertNotNull(constantDouble0);
      assertEquals(266.12445612797734, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      assertNotNull(constantFieldref0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(0, constantFieldref0.getClassIndex());
      assertEquals(0, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('#');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      short short0 = Utility.searchOpcode("kq!}NT]");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.compactClassName("kq!}NT]");
      assertNotNull(string0);
      assertEquals("kq!}NT]", string0);
      
      try { 
        Utility.typeOfMethodSignature("jCY~ ?RXE~nix");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jCY~ ?RXE~nix
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "dstore_3";
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("Ge'OMrJ=5a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ge'OMrJ=5a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('q');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-101), (byte) (-92)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)125;
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)2, (byte) (-110), (byte)125}, byteArray0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertNotNull(string1);
      assertEquals("$92$C$92$7d", string1);
      assertEquals(4, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-110), (byte)2, (byte) (-110), (byte)125}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)2, (byte) (-110), (byte)125}, byteArray0);
      
      MockFile mockFile0 = new MockFile("SV");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.format("<x(:kg0", (Object[]) null);
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("SV", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(7L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals("SV", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      Utility.printArray(printStream0, (Object[]) null);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("SV", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(12L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals("SV", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short short0 = Utility.searchOpcode("jsr");
      assertEquals((short)168, short0);
      
      String string0 = "PX-\\N:";
      try { 
        Utility.typeOfSignature("PX-N:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PX-N:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=\"'KLmxg{Qv");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string0 = Utility.printArray(objectArray0, true, false);
      assertNotNull(string0);
      assertEquals("{null, null}", string0);
      assertEquals(2, objectArray0.length);
      
      boolean boolean3 = Utility.isJavaIdentifierPart('z');
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), (int) (byte) (-86), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lload_2
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("sipush\t\t0", string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('');
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 168, (int) (byte)60, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte) (-116);
      String string0 = Utility.signatureToString("F9K%;_t*0mev#B=7k", true);
      assertNotNull(string0);
      assertEquals("float", string0);
      
      String string1 = Utility.classOrInterface((byte) (-30));
      assertNotNull(string1);
      assertEquals("interface", string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.typeOfSignature("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = Utility.classOrInterface(231);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0}, byteArray0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((-176.85166462495));
      assertNotNull(constantDouble0);
      assertEquals((-176.85166462495), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(3, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0}, byteArray0);
      
      byteSequence0.close();
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      assertNotNull(dataInputStream0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0}, byteArray0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      assertNotNull(constantMethodType0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(34304, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(3, byteArray0.length);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0}, byteArray0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType((byte)125);
      assertNotNull(constantMethodType1);
      assertEquals(125, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertFalse(constantMethodType1.equals((Object)constantMethodType0));
      
      ConstantMethodType constantMethodType2 = new ConstantMethodType((byte)125);
      assertNotNull(constantMethodType2);
      assertEquals(125, constantMethodType2.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType2.getTag());
      assertTrue(constantMethodType2.equals((Object)constantMethodType1));
      assertFalse(constantMethodType2.equals((Object)constantMethodType0));
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string1 = Utility.printArray((Object[]) constantArray0);
      assertNotNull(string1);
      assertEquals("{}", string1);
      assertEquals(0, constantArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.compactClassName("", "class", true);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Utility.printArray((Object[]) constantArray0, false, false);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(0, constantArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("laload", false);
      assertNotNull(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)108, (byte)97, (byte)108, (byte)111, (byte)97, (byte)100}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)108, (byte)97, (byte)108, (byte)111, (byte)97, (byte)100}, byteArray0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2486, 2486);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1716), (-1716));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = Utility.getSignature("WUUU^A]2%m(8P");
      assertNotNull(string0);
      assertEquals("LWUUU^A]2%m(8P;", string0);
      
      byte byte0 = Utility.typeOfSignature("LWUUU^A]2%m(8P;");
      assertEquals((byte)14, byte0);
      
      int int0 = 87;
      int int1 = Utility.clearBit(87, 87);
      assertEquals(87, int1);
      assertTrue(int1 == int0);
      
      String string1 = Utility.replace("", "WUUU^A]2%m(8P", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("return");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `return'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)33;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(7, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)26, (byte)0, (byte) (-63), (byte)0, (byte)0, (byte)33}, byteArray0);
      
      short short0 = Utility.searchOpcode("dreturn");
      assertEquals((short)175, short0);
      
      byte[] byteArray1 = Utility.decode("dreturn", false);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)100, (byte)114, (byte)101, (byte)116, (byte)117, (byte)114, (byte)110}, byteArray1);
      
      String string0 = Utility.convertString(",");
      assertNotNull(string0);
      assertEquals(",", string0);
      
      // Undeclared exception!
      Utility.replace("Y?YqzE#SP*[->#o\"C'", "", "dreturn");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[0] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)127, (byte)0}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(2, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)127, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("land", string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(2, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)127, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("GMA9)R", false);
      assertNotNull(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)71, (byte)77, (byte)65, (byte)57, (byte)41, (byte)82}, byteArray0);
      
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)71, (byte)77, (byte)65, (byte)57, (byte)41, (byte)82}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("dstore_0", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)71, (byte)77, (byte)65, (byte)57, (byte)41, (byte)82}, byteArray0);
      
      int int0 = 931;
      int int1 = Utility.clearBit(931, 194);
      assertEquals(931, int1);
      assertTrue(int1 == int0);
      
      String string1 = "long";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("putstatic", "long", "GMA9)R", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)33;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(7, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)26, (byte)0, (byte) (-63), (byte)0, (byte)0, (byte)33}, byteArray0);
      
      short short0 = Utility.searchOpcode("f5<%i;[EXf}~m#");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray1 = Utility.decode("f5<%i;[EXf}~m#", false);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(15, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = Utility.getSignature(",");
      assertNotNull(string0);
      assertEquals("L,;", string0);
      
      // Undeclared exception!
      Utility.replace("Y?YqzE#SP*[->#o\"C'", "", "f5<%i;[EXf}~m#");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = Utility.convertString("dstore_3");
      assertNotNull(string0);
      assertEquals("dstore_3", string0);
      
      String string1 = Utility.accessToString((-4283));
      assertNotNull(string1);
      assertEquals("public protected volatile native interface abstract strictfp annotation enum", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.format((-4283), (-4283), true, 'w');
      assertNotNull(string2);
      assertEquals("-4283", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Utility.convertString("M&YWaU=7f-8X>)");
      assertNotNull(string3);
      assertEquals("M&YWaU=7f-8X>)", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("dstore_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dstore_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)88;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)88, (byte)88, (byte)88}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)88, (byte)88, (byte)88}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("pop2", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)88, (byte)88, (byte)88}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[6] = (byte)42;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)72, (byte)0, (byte)0, (byte)18, (byte)0, (byte)42}, byteArray0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.clone();
      assertNotNull(constantDouble1);
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals((-1.0), constantDouble1.getBytes(), 0.01);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("-]y&nB+|");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("-]y&nB+|", constantUtf8_0.getBytes());
      
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantDouble1;
      constantArray0[1] = (Constant) constantDouble1;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantDouble0;
      constantArray0[4] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 214, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "4h";
      try { 
        Utility.typeOfSignature("2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("org.apache.bcel.classfile.Utility");
      assertNotNull(constantUtf8_0);
      assertEquals("org.apache.bcel.classfile.Utility", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("org.apache.bcel.classfile.Utility");
      assertNotNull(constantUtf8_1);
      assertEquals("org.apache.bcel.classfile.Utility", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      
      ConstantLong constantLong0 = new ConstantLong(0L);
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(0L, constantLong0.getBytes());
      
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("null");
      assertNotNull(constantUtf8_2);
      assertEquals((byte)1, constantUtf8_2.getTag());
      assertEquals("null", constantUtf8_2.getBytes());
      assertFalse(constantUtf8_2.equals((Object)constantUtf8_0));
      assertFalse(constantUtf8_2.equals((Object)constantUtf8_1));
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string0);
      assertEquals("dstore_1", string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string1);
      assertEquals("nop", string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)56;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-68), (byte)56}, byteArray0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("$K$bc8", string0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-68), (byte)56}, byteArray0);
      
      String string1 = Utility.fillup("f2l", (-22), true, 'C');
      assertNotNull(string1);
      assertEquals("f2l", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = Utility.clearBit((byte)56, 115);
      assertEquals(56, int0);
      
      String string2 = Utility.compactClassName("uYWc>Fg}1");
      assertNotNull(string2);
      assertEquals("uYWc>Fg}1", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("ret");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("ret", constantUtf8_0.getBytes());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3213, 214, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-79), (byte) (-95), (byte) (-95), (byte)114, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("f2d", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-79), (byte) (-95), (byte) (-95), (byte)114, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      try { 
        Utility.methodSignatureToString("\"", "monitorexit", "\"", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.fillup("mC", 4, false, '-');
      assertNotNull(string0);
      assertEquals("--mC", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 163, (int) (byte) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      boolean boolean0 = false;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      String string1 = "[[AgI";
      byte[] byteArray0 = Utility.decode("[[AgI", false);
      assertNotNull(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)65, (byte)103, (byte)73}, byteArray0);
      
      int int0 = 7;
      PipedReader pipedReader0 = new PipedReader(7);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.println('^');
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      
      try { 
        pipedReader0.mark(7);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Dont call getValueDouble() on a non DOUBLE ElementValue");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string0 = Utility.replace("", "<@T]u`A", "LQl&#c}");
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "<@T]u`A", "\tdefault = ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("file", uRI0.getScheme());
      
      byte[] byteArray0 = new byte[3];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1), (-1));
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n", string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.methodSignatureReturnType("#W)XvOEI\"rk0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XvOEI\"rk0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string0);
      assertEquals("saload", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.convertString(";9V]hl51Or/6%x$M~ZM");
      assertNotNull(string1);
      assertEquals(";9V]hl51Or/6%x$M~ZM", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-98);
      byteArray1[1] = (byte) (-98);
      byteArray1[2] = (byte)93;
      byteArray1[3] = (byte) (-98);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-98), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-98), (byte)93, (byte) (-98)}, byteArray1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-98), (byte)93, (byte) (-98)}, byteArray1);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("ifle\t\t#-24995", string0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(3, byteSequence1.getIndex());
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-98), (byte)93, (byte) (-98)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)42;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)42, (byte)0, (byte)0, (byte) (-64), (byte)1}, byteArray0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((byte)0);
      assertNotNull(constantDouble0);
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      int int0 = byteSequence0.readInt();
      assertEquals(1076494336, int0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)42, (byte)0, (byte)0, (byte) (-64), (byte)1}, byteArray0);
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.clone();
      assertNotNull(constantDouble1);
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals(0.0, constantDouble1.getBytes(), 0.01);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      String string0 = constantDouble0.toString();
      assertNotNull(string0);
      assertEquals("CONSTANT_Double[6](bytes = 0.0)", string0);
      assertNotSame(constantDouble0, constantDouble1);
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantDouble0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(6, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)64, (byte)42, (byte)0, (byte)0, (byte) (-64), (byte)1}, byteArray0);
      
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)96, (byte)54, (byte)53, (byte) (-85), (byte) (-3), (byte) (-59)}, byteArray0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertNotNull(string0);
      assertEquals("dload_1", string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(7, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertArrayEquals(new byte[] {(byte)39, (byte)96, (byte)54, (byte)53, (byte) (-85), (byte) (-3), (byte) (-59)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      try { 
        Utility.typeOfSignature("YX%Oi^XQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YX%Oi^XQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("\r", false);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)13}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\r", "\r", "@F*Nw7.Vf,>", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[6];
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean2);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-72);
      byteArray1[1] = (byte) (-72);
      byteArray1[2] = (byte) (-37);
      byteArray1[3] = (byte)33;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-72), (byte) (-37), (byte)33}, byteArray1);
      
      boolean boolean3 = byteSequence1.readBoolean();
      assertTrue(boolean3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-72), (byte) (-37), (byte)33}, byteArray1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)114;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)114;
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)114, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)114}, byteArray1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)114, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("frem", string0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)114, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-128), (byte)11, (byte)111, (byte) (-29), (byte)90, (byte)72, (byte)46, (byte) (-79)}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("lrem", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-128), (byte)11, (byte)111, (byte) (-29), (byte)90, (byte)72, (byte)46, (byte) (-79)}, byteArray0);
      
      short short0 = Utility.searchOpcode(",tyz7");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = Utility.classOrInterface(231);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(62, 231);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(231, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(62, constantInterfaceMethodref0.getClassIndex());
      
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertNotNull(constantInterfaceMethodref1);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(231, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(62, constantInterfaceMethodref0.getClassIndex());
      assertEquals(231, constantInterfaceMethodref1.getNameAndTypeIndex());
      assertEquals(62, constantInterfaceMethodref1.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "short";
      stringArray0[1] = "class";
      stringArray0[5] = "dSih";
      stringArray0[7] = "class";
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertNotNull(constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      ConstantPool constantPool3 = constantPool0.copy();
      assertNotNull(constantPool3);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool3.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)41, (byte) (-36), (byte) (-64), (byte) (-88), (byte)116}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool2, true);
      assertNotNull(string1);
      assertEquals("dload_3", string1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, constantArray0.length);
      assertEquals(5, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool2.equals((Object)constantPool3));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertArrayEquals(new byte[] {(byte)41, (byte) (-36), (byte) (-64), (byte) (-88), (byte)116}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = Utility.signatureToString("LWUUU^A]2%m(8P;V", true);
      assertNotNull(string0);
      assertEquals("WUUU^A]2%m(8P", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)23;
      byteArray0[2] = (byte)23;
      byteArray0[8] = (byte)23;
      byteArray0[7] = (byte)23;
      byteArray0[8] = (byte)23;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)23, (byte)23, (byte)23, (byte)23, (byte)23, (byte)0, (byte)0, (byte)23, (byte)23}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)23, (byte)23, (byte)23, (byte)23, (byte)23, (byte)0, (byte)0, (byte)23, (byte)23}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string1);
      assertEquals("fload\t\t%23", string1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)23, (byte)23, (byte)23, (byte)23, (byte)23, (byte)0, (byte)0, (byte)23, (byte)23}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(9, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)23, (byte)23, (byte)23, (byte)23, (byte)23, (byte)0, (byte)0, (byte)23, (byte)23}, byteArray0);
      
      byte byte0 = byteSequence1.readByte();
      assertEquals((byte)23, byte0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(9, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)23, (byte)23, (byte)23, (byte)23, (byte)23, (byte)0, (byte)0, (byte)23, (byte)23}, byteArray0);
      
      int int0 = byteSequence1.available();
      assertEquals(8, int0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(9, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)23, (byte)23, (byte)23, (byte)23, (byte)23, (byte)0, (byte)0, (byte)23, (byte)23}, byteArray0);
      
      String string2 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertNotNull(string2);
      assertEquals("fload\t\t%23", string2);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(3, byteSequence1.getIndex());
      assertEquals(9, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)23, (byte)23, (byte)23, (byte)23, (byte)23, (byte)0, (byte)0, (byte)23, (byte)23}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('&');
      assertFalse(boolean0);
      
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("\"A~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"A~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)42, (byte) (-1), (byte)51, (byte) (-66), (byte)1}, byteArray0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((byte)51);
      assertNotNull(constantDouble0);
      assertEquals(51.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      int int0 = Utility.clearBit((byte) (-66), 118);
      assertEquals((-4194370), int0);
      
      String string0 = Utility.replace("getstatic", "getstatic", "Q;]_xN\"Y{:@$o");
      assertNotNull(string0);
      assertEquals("Q;]_xN\"Y{:@$o", string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("T/ eSAM<dP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T/ eSAM<dP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)44}, byteArray1);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("aload_2", string0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)44}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = Utility.accessToString((-1245));
      assertNotNull(string0);
      assertEquals("public private synchronized native interface strictfp synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-45);
      ConstantLong constantLong0 = new ConstantLong((-628L));
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-628L), constantLong0.getBytes());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertNotNull(constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-45);
      byteArray1[1] = (byte) (-56);
      byteArray1[2] = (byte) (-70);
      byteArray1[3] = (byte) (-70);
      byteArray1[4] = (byte) (-70);
      byteArray1[5] = (byte) (-56);
      byteArray1[6] = (byte) (-70);
      byteArray1[7] = (byte) (-45);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-45), (byte) (-56), (byte) (-70), (byte) (-70), (byte) (-70), (byte) (-56), (byte) (-70), (byte) (-45)}, byteArray1);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string1);
      assertEquals("<illegal opcode>", string1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-45), (byte) (-56), (byte) (-70), (byte) (-70), (byte) (-70), (byte) (-56), (byte) (-70), (byte) (-45)}, byteArray1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (-255), (int) (byte) (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    goto_w\t\t#-1162167607
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-113);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)118, true);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    nop\n2:    d2l\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-113), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.convertString("0:    nop\n1:    nop\n2:    d2l\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n");
      assertNotNull(string1);
      assertEquals("0:    nop\\n1:    nop\\n2:    d2l\\n3:    nop\\n4:    nop\\n5:    nop\\n6:    nop\\n7:    nop\\n8:    nop\\n", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    nop\n1:    nop\n2:    d2l\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    nop
         // 1:    nop
         // 2:    d2l
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = Utility.accessToString((int) (byte)85);
      assertNotNull(string0);
      assertEquals("public protected final volatile", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)85;
      byteArray0[3] = (byte)69;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)111;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertNotNull(constantPool2);
      assertEquals(0, constantPool2.getLength());
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      ConstantPool constantPool3 = constantPool0.copy();
      assertNotNull(constantPool3);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool2);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool3.getLength());
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)69, (byte)85, (byte)0, (byte)85, (byte)111}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool2, false);
      assertNotNull(string1);
      assertEquals("fstore_2", string1);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertEquals(0, constantPool2.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool2.equals((Object)constantPool3));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)69, (byte)85, (byte)0, (byte)85, (byte)111}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-115);
      byteArray1[1] = (byte) (-115);
      byteArray1[2] = (byte) (-117);
      String string0 = Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-115), (int) (byte) (-117), true);
      assertNotNull(string0);
      assertEquals("0:    f2d\n1:    f2d\n2:    f2i\n", string0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-115), (byte) (-117)}, byteArray1);
      
      try { 
        Utility.typeOfSignature("org.apahe.bcel.classfile.JavaClass$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apahe.bcel.classfile.JavaClass$1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("Y %pp", false);
      assertNotNull(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)89, (byte)32, (byte)37, (byte)112, (byte)112}, byteArray0);
      
      String string0 = "-k52`ifs3p";
      try { 
        Utility.typeOfSignature("Y %pp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y %pp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = Utility.accessToString((-1245));
      assertNotNull(string0);
      assertEquals("public private synchronized native interface strictfp synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-45);
      ConstantLong constantLong0 = new ConstantLong((-628L));
      assertNotNull(constantLong0);
      assertEquals((-628L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertNotNull(constantPool2);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-45);
      byteArray1[1] = (byte) (-56);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertFalse(boolean1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-45), (byte) (-56), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      byteArray1[2] = (byte) (-70);
      byteArray1[3] = (byte) (-70);
      byteArray1[4] = (byte) (-70);
      byteArray1[5] = (byte) (-56);
      byteArray1[6] = (byte) (-70);
      byteArray1[7] = (byte) (-45);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-45), (byte) (-56), (byte) (-70), (byte) (-70), (byte) (-70), (byte) (-56), (byte) (-70), (byte) (-45)}, byteArray1);
      
      float float0 = byteSequence0.readFloat();
      assertEquals((-1.72425242E12F), float0, 0.01F);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-45), (byte) (-56), (byte) (-70), (byte) (-70), (byte) (-70), (byte) (-56), (byte) (-70), (byte) (-45)}, byteArray1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 51386. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(13, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(13, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("nop", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(13, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = Utility.replace("B>w8N5$S", "B>w8N5$S", "\"");
      assertNotNull(string0);
      assertEquals("\"", string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = ")\t";
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)48;
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte) (-124);
      byteArray1[5] = (byte)48;
      byteArray1[6] = (byte) (-124);
      byteArray1[7] = (byte) (-122);
      byteArray1[8] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)39, (byte)48, (byte)48, (byte)32, (byte) (-124), (byte)48, (byte) (-124), (byte) (-122), (byte)19}, byteArray1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 76, (int) (byte) (-122), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(194, 194);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(194, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(194, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(194, constantInvokeDynamic0.getNameAndTypeIndex());
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertNotNull(constantInvokeDynamic1);
      assertEquals(194, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(194, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(194, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(194, constantInvokeDynamic1.getClassIndex());
      assertEquals(194, constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals(194, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertNotNull(constantPool2);
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      ConstantPool constantPool3 = constantPool0.copy();
      assertNotNull(constantPool3);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool3.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      
      ConstantLong constantLong0 = new ConstantLong((-413L));
      assertNotNull(constantLong0);
      assertEquals((-413L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      String string0 = constantLong0.toString();
      assertNotNull(string0);
      assertEquals("CONSTANT_Long[5](bytes = -413)", string0);
      assertEquals((-413L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-22);
      ConstantPool constantPool4 = constantPool3.copy();
      assertNotNull(constantPool4);
      assertNotSame(constantPool4, constantPool2);
      assertNotSame(constantPool4, constantPool1);
      assertNotSame(constantPool4, constantPool3);
      assertNotSame(constantPool4, constantPool0);
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool4);
      assertEquals(1, constantPool4.getLength());
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool3.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool4, (int) (byte) (-59), 265);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 62194. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)62, (byte)62, (byte)123, (byte)62, (byte)62, (byte)125, (byte) (-64)}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("istore_3", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)62, (byte)62, (byte)123, (byte)62, (byte)62, (byte)125, (byte) (-64)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-74)}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(1, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-74)}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = Utility.convertString("dstore_3");
      assertNotNull(string0);
      assertEquals("dstore_3", string0);
      
      String string1 = Utility.accessToString(90);
      assertNotNull(string1);
      assertEquals("private static final volatile", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.format(90, 90, true, '}');
      assertNotNull(string2);
      assertEquals("90}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-70), (byte)61, (byte)101, (byte)102}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string3);
      assertEquals("goto\t\t#-17859", string3);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-70), (byte)61, (byte)101, (byte)102}, byteArray0);
      
      String string4 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string4);
      assertEquals("lsub", string4);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-70), (byte)61, (byte)101, (byte)102}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = Utility.isSet(34, 80);
      assertFalse(boolean0);
      
      try { 
        Utility.methodSignatureArgumentTypes("? extends ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-110);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotNull(constantPool2);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)88, (byte) (-110)}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool2, true);
      assertNotNull(string0);
      assertEquals("ladd", string0);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertArrayEquals(new byte[] {(byte)97, (byte)88, (byte) (-110)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Object[] objectArray0 = new Object[18];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      assertEquals(18, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(17L);
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(17L, constantLong0.getBytes());
      
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong0;
      constantArray0[0] = (Constant) constantLong0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("\t\t<");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("\t\t<", constantUtf8_0.getBytes());
      
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotNull(constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantPool2.getLength());
      assertEquals(7, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)34;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte)34, (byte)0, (byte)63, (byte)123, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 597, (int) (byte)34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)114;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-79), (byte) (-95), (byte) (-95), (byte)114, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.methodSignatureReturnType("[In|1w9TO*O<$T(");
      assertNotNull(string0);
      assertEquals("int[]", string0);
      
      String string1 = Utility.accessToString((int) (byte) (-79));
      assertNotNull(string1);
      assertEquals("public final synchronized transient native interface abstract strictfp synthetic annotation enum", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "if_icmpge";
      String string3 = "lushr";
      try { 
        MockURI.URI("if_icmpge", "lushr", "getField");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 2: if_icmpge:lushr#getField
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = Utility.compactClassName("int", "int", false);
      assertNotNull(string0);
      assertEquals("int", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte) (-40);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)63, (byte)48, (byte) (-111), (byte)93, (byte)9, (byte) (-119), (byte) (-127), (byte) (-40)}, byteArray0);
      
      int int0 = byteSequence0.available();
      assertEquals(8, int0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)63, (byte)48, (byte) (-111), (byte)93, (byte)9, (byte) (-119), (byte) (-127), (byte) (-40)}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string1);
      assertEquals("lstore_0", string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)63, (byte)48, (byte) (-111), (byte)93, (byte)9, (byte) (-119), (byte) (-127), (byte) (-40)}, byteArray0);
      
      String string2 = Utility.accessToString(213);
      assertNotNull(string2);
      assertEquals("public protected final volatile transient", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Utility.accessToString((int) (byte)63);
      assertNotNull(string3);
      assertEquals("public private protected static final synchronized", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("WUUUA]%m(8", false);
      assertNotNull(byteArray0);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)87, (byte)85, (byte)85, (byte)85, (byte)65, (byte)93, (byte)37, (byte)109, (byte)40, (byte)56}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)87, (byte)85, (byte)85, (byte)85, (byte)65, (byte)93, (byte)37, (byte)109, (byte)40, (byte)56}, byteArray0);
      
      double double0 = byteSequence0.readDouble();
      assertEquals(5.130469270572341E112, double0, 0.01);
      assertEquals(8, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)87, (byte)85, (byte)85, (byte)85, (byte)65, (byte)93, (byte)37, (byte)109, (byte)40, (byte)56}, byteArray0);
      
      int int0 = byteSequence0.readUnsignedByte();
      assertEquals(40, int0);
      assertEquals(9, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)87, (byte)85, (byte)85, (byte)85, (byte)65, (byte)93, (byte)37, (byte)109, (byte)40, (byte)56}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)62, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("fcmpl", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)62, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)78, (byte)2, (byte)91, (byte) (-45), (byte)2, (byte)91}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotNull(string0);
      assertEquals("astore_3", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)78, (byte)2, (byte)91, (byte) (-45), (byte)2, (byte)91}, byteArray0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(eNr";
      stringArray0[1] = "(eNr";
      stringArray0[2] = "astore_3";
      stringArray0[3] = "astore_3";
      String string1 = Utility.methodTypeToSignature("short", stringArray0);
      assertNotNull(string1);
      assertEquals("(L(eNr;L(eNr;Lastore_3;Lastore_3;)S", string1);
      assertEquals(4, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "\"";
      try { 
        Utility.methodSignatureToString("\"", "monitorexit", "\"", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = false;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)82, (int) (byte)69, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = Utility.convertString("5");
      assertNotNull(string0);
      assertEquals("5", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = Utility.accessToString((int) '-', true);
      assertNotNull(string0);
      assertEquals("public protected static", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-6);
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong((byte) (-6));
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-6L), constantLong0.getBytes());
      
      constantArray0[0] = (Constant) constantLong0;
      ConstantDouble constantDouble0 = new ConstantDouble(1123);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(1123.0, constantDouble0.getBytes(), 0.01);
      
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-6), 1123, false);
      assertNotNull(string1);
      assertEquals("0:    <illegal opcode>\n", string1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertEquals(1, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-6)}, byteArray0);
      
      boolean boolean0 = Utility.isSet((-1217), (-1217));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "\t\t<";
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = Utility.getSignature("WUUU^A]2%m(8P");
      assertNotNull(string0);
      assertEquals("LWUUU^A]2%m(8P;", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 69, (int) (byte)124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      boolean boolean0 = Utility.isJavaIdentifierPart('y');
      assertTrue(boolean0);
      
      String string0 = Utility.replace("v:y)", "L", "L");
      assertNotNull(string0);
      assertEquals("v:y)", string0);
      
      String string1 = Utility.compactClassName("v:y)", "L", false);
      assertNotNull(string1);
      assertEquals("v:y)", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte byte0 = (byte) (-95);
      byte byte1 = Utility.typeOfSignature("B");
      assertEquals((byte)8, byte1);
      assertFalse(byte1 == byte0);
      
      try { 
        Utility.typeOfSignature("5hQw7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5hQw7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte) (-116);
      byteArray0[8] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116), (byte)71, (byte)71, (byte)71, (byte) (-116), (byte)71}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("f2l", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116), (byte)71, (byte)71, (byte)71, (byte) (-116), (byte)71}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName(", low = ", ", low = ", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Utility.getSignature(", low = ");
      assertNotNull(string1);
      assertEquals("L,;", string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      try { 
        Utility.typeOfSignature("&f|{l^#SE47");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &f|{l^#SE47
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)0}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      String string0 = Utility.accessToString(229);
      assertNotNull(string0);
      assertEquals("public protected synchronized volatile transient", string0);
      
      String string1 = Utility.format(791, 1223, true, 'G');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.toHexString(byteArray0);
      assertNotNull(string2);
      assertEquals("ff 00 00 00 00 00 00", string2);
      assertEquals(7, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)33;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte) (-63), (byte)0, (byte)0, (byte)33, (byte)0}, byteArray0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-95);
      String string0 = Utility.convertString("[Jwfxn");
      assertNotNull(string0);
      assertEquals("[Jwfxn", string0);
      
      String string1 = Utility.signatureToString("[Jwfxn", false);
      assertNotNull(string1);
      assertEquals("long[]", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.classOrInterface(188);
      assertNotNull(string2);
      assertEquals("class", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = Utility.replace("aj)`~", "@saK'pK'j&_DQ", "2BN");
      assertNotNull(string3);
      assertEquals("aj)`~", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)74;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)36, (byte) (-64), (byte)76, (byte) (-82), (byte)74}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)36, (byte) (-64), (byte)76, (byte) (-82), (byte)74}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("fload_2", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)36, (byte) (-64), (byte)76, (byte) (-82), (byte)74}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = Utility.classOrInterface(5);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("_3N2/.!%:", "WuGf", "_3N2/.!%:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _3N2/.!%:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("zs&#]", false);
      assertNotNull(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)122, (byte)115, (byte)38, (byte)35, (byte)93}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)122, (byte)115, (byte)38, (byte)35, (byte)93}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 256, 3450);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t\t";
      stringArray0[1] = "char";
      String string0 = Utility.methodTypeToSignature("\t\t", stringArray0);
      assertNotNull(string0);
      assertEquals("(L;C)L;", string0);
      assertEquals(2, stringArray0.length);
      
      short short0 = Utility.searchOpcode("\t\t");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-67);
      byteArray0[0] = (byte) (-67);
      byteArray0[3] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-67), (byte)0, (byte) (-83), (byte)0}, byteArray0);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-67));
      assertNotNull(constantMethodType0);
      assertEquals((-67), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantString constantString0 = new ConstantString(159);
      assertNotNull(constantString0);
      assertEquals(159, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      
      ConstantString constantString1 = new ConstantString(constantString0);
      assertNotNull(constantString1);
      assertEquals(159, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertEquals((byte)8, constantString1.getTag());
      assertEquals(159, constantString1.getStringIndex());
      assertTrue(constantString1.equals((Object)constantString0));
      
      constantArray0[1] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48384. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = Utility.accessToString((-1269));
      assertNotNull(string0);
      assertEquals("public private static native interface strictfp synthetic annotation enum", string0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(313, (-1269));
      assertNotNull(constantFieldref0);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-1269), constantFieldref0.getNameAndTypeIndex());
      assertEquals(313, constantFieldref0.getClassIndex());
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-84);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertNotNull(constantPool2);
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      ConstantPool constantPool3 = constantPool2.copy();
      assertNotNull(constantPool3);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool0);
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, constantPool3.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      
      ConstantPool constantPool4 = new ConstantPool(constantArray0);
      assertNotNull(constantPool4);
      assertEquals(1, constantPool4.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool1));
      
      ConstantPool constantPool5 = constantPool4.copy();
      assertNotNull(constantPool5);
      assertNotSame(constantPool4, constantPool0);
      assertNotSame(constantPool4, constantPool3);
      assertNotSame(constantPool4, constantPool2);
      assertNotSame(constantPool4, constantPool1);
      assertNotSame(constantPool4, constantPool5);
      assertNotSame(constantPool5, constantPool0);
      assertNotSame(constantPool5, constantPool2);
      assertNotSame(constantPool5, constantPool3);
      assertNotSame(constantPool5, constantPool4);
      assertNotSame(constantPool5, constantPool1);
      assertEquals(1, constantPool4.getLength());
      assertEquals(1, constantPool5.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool5.equals((Object)constantPool0));
      assertFalse(constantPool5.equals((Object)constantPool2));
      assertFalse(constantPool5.equals((Object)constantPool3));
      assertFalse(constantPool5.equals((Object)constantPool4));
      assertFalse(constantPool5.equals((Object)constantPool1));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-84)}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool4, true);
      assertNotNull(string1);
      assertEquals("ireturn", string1);
      assertNotSame(constantPool4, constantPool0);
      assertNotSame(constantPool4, constantPool3);
      assertNotSame(constantPool4, constantPool2);
      assertNotSame(constantPool4, constantPool1);
      assertNotSame(constantPool4, constantPool5);
      assertEquals(1, constantPool4.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantArray0.length);
      assertEquals(1, byteArray0.length);
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool4.equals((Object)constantPool5));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-84)}, byteArray0);
      
      String string2 = Utility.codeToString(byteArray0, constantPool3, (-3603), (int) (byte) (-84), true);
      assertNotNull(string2);
      assertEquals("0:    ireturn\n", string2);
      assertNotSame(constantPool2, constantPool4);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool2, constantPool5);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool4);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool5);
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, constantPool3.getLength());
      assertEquals(1, constantArray0.length);
      assertEquals(1, byteArray0.length);
      assertFalse(constantPool2.equals((Object)constantPool4));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool3));
      assertFalse(constantPool2.equals((Object)constantPool5));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool4));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte) (-84)}, byteArray0);
      
      String string3 = Utility.printArray((Object[]) constantArray0);
      assertNotNull(string3);
      assertEquals("{CONSTANT_Fieldref[9](class_index = 313, name_and_type_index = -1269)}", string3);
      assertEquals(1, constantArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("ishr", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-87);
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertEquals("a9", string0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-87)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = Utility.compactClassName("WUUU^A]2%m(8P");
      assertNotNull(string0);
      assertEquals("WUUU^A]2%m(8P", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)81;
      byteArray0[5] = (byte) (-31);
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)124, (byte)59, (byte)42, (byte)81, (byte)0, (byte) (-91), (byte) (-55)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), (int) (byte)42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iushr
         // 1:    istore_0
         // 2:    aload_0
         // 3:    fastore
         // 4:    nop
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "dstore_3";
      String string1 = Utility.convertString("dstore_3");
      assertNotNull(string1);
      assertEquals("dstore_3", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("Ge'OMrJ=5a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ge'OMrJ=5a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("if_icmpge");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpge
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = Utility.signatureToString("Invalid method signature: ");
      assertNotNull(string0);
      assertEquals("int", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-71), (byte) (-67), (byte)9, (byte)97}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = Utility.getSignature("DyqyuDo");
      assertEquals("LDyqyuDo;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)96, (byte)91}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotNull(string1);
      assertEquals("dup_x2", string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(4, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)96, (byte)91}, byteArray0);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotNull(string2);
      assertEquals("dup_x2", string2);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(4, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)96, (byte)91}, byteArray0);
      
      StringWriter stringWriter0 = new StringWriter(182);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "dup_x2");
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("dup_x2", stringWriter0.toString());
      assertEquals("dup_x2", stringWriter1.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      assertNotNull(mockPrintWriter0);
      
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("dup_x2null\n", stringWriter0.toString());
      assertEquals("dup_x2null\n", stringWriter1.toString());
      
      Utility.codeToString(byteSequence0, constantPool0);
      String string3 = Utility.compactClassName("Ac[;xh48_.qy", false);
      assertEquals("Ac[;xh48_.qy", string3);
      
      String string4 = Utility.fillup("nop", (byte)96, false, '');
      assertEquals("nop", string4);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-101), (byte) (-92)}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = Utility.compactClassName("[L{CONSTANT_Utf8;V");
      assertNotNull(string0);
      assertEquals("[L{CONSTANT_Utf8;V", string0);
      
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1`eWe{TJySzapJ~RX0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1`eWe{TJySzapJ~RX0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = Utility.getSignature("WUUU^A]2%m(8P");
      assertNotNull(string0);
      assertEquals("LWUUU^A]2%m(8P;", string0);
      
      String string1 = Utility.replace("LWUUU^A]2%m(8P;", "LWUUU^A]2%m(8P;", "WUUU^A]2%m(8P");
      assertNotNull(string1);
      assertEquals("WUUU^A]2%m(8P", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.methodSignatureReturnType("LWUUU^A]2%m(8P;");
      assertNotNull(string2);
      assertEquals("WUUU^A]2%m(8P", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = Utility.accessToString((-1245));
      assertNotNull(string0);
      assertEquals("public private synchronized native interface strictfp synthetic annotation enum", string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("<illegal opcode>");
      assertEquals((short)203, short0);
      
      String string1 = Utility.compactClassName("Rdouble", " 6o6PT3 Y$+z*hn", false);
      assertNotNull(string1);
      assertEquals("Rdouble", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = Utility.setBit((-1245), (short)203);
      assertEquals((-1245), int0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = Utility.decode(" 6o6PT3 Y$+z*hn", false);
      assertNotNull(byteArray0);
      assertEquals(14, byteArray0.length);
      
      try { 
        Utility.typeOfSignature(" 6o6PT3 Y$+z*hn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  6o6PT3 Y$+z*hn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)33;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte) (-63), (byte)0, (byte)0, (byte)33, (byte)0}, byteArray0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      short short0 = Utility.searchOpcode("dreturn");
      assertEquals((short)175, short0);
      
      String string0 = Utility.compactClassName("impdep2", "impdep2", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = Utility.setBit(213, (byte)0);
      assertEquals(213, int0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("jp]m\"h_8", "isub", "ynUvgWxXX*", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jp]m\"h_8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)33;
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-12), (byte)33}, byteArray0);
      
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(1.0, constantDouble0.getBytes(), 0.01);
      
      char char0 = 'k';
      boolean boolean0 = Utility.isJavaIdentifierPart('k');
      assertTrue(boolean0);
      
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = Utility.setBit((-799), (-799));
      assertEquals((-797), int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(1L);
      assertNotNull(constantLong0);
      assertEquals(1L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong0;
      constantArray0[4] = (Constant) constantLong0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("\t\t<");
      assertNotNull(constantUtf8_0);
      assertEquals("\t\t<", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotNull(constantPool2);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantPool2.getLength());
      assertEquals(7, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)34;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)91;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte)34, (byte)0, (byte)63, (byte)123, (byte)91}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte)34, (byte)0, (byte)63, (byte)123, (byte)91}, byteArray0);
      
      float float0 = byteSequence0.readFloat();
      assertEquals(1.24801E-31F, float0, 0.01F);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte)34, (byte)0, (byte)63, (byte)123, (byte)91}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool2, false);
      assertNotNull(string0);
      assertEquals("lshr", string0);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantPool2.getLength());
      assertEquals(7, constantArray0.length);
      assertEquals(6, byteArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertArrayEquals(new byte[] {(byte)12, (byte)34, (byte)0, (byte)63, (byte)123, (byte)91}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)12, 94);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)35, (byte)0}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(2, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)35, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("fload_1", string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(2, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)35, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      try { 
        Utility.typeOfSignature("XWFD}7H7UTgx;2<H'TJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XWFD}7H7UTgx;2<H'TJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)40;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)40}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray1 = Utility.decode("org.apache.bcel.classfile.ConstantClass", false);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(39, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-61)}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("monitorexit", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-61)}, byteArray0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-61), (int) (byte) (-61));
      assertNotNull(string1);
      assertEquals("0:    monitorexit\n", string1);
      assertEquals(1, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-61)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t\t";
      stringArray0[1] = "\t\t";
      String string0 = Utility.methodTypeToSignature("\t\t", stringArray0);
      assertNotNull(string0);
      assertEquals("(L;L;)L;", string0);
      assertEquals(2, stringArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-102), (int) (byte) (-102), true);
      assertNotNull(string1);
      assertEquals("0:    ifne\t\t#0\n3:    nop\n", string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(4, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-102), (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      byteArray0[4] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)0, (byte)0, (byte)0, (byte) (-119)}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(5, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-119), (byte)0, (byte)0, (byte)0, (byte) (-119)}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("l2f", string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(5, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-119), (byte)0, (byte)0, (byte)0, (byte) (-119)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = Utility.fillup("[&\"", 1753, true, '-');
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode(string0);
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)96}, byteArray0);
      
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      assertNotNull(constantDouble0);
      assertEquals(1.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.clone();
      assertNotNull(constantDouble1);
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals(1.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals(1.0, constantDouble1.getBytes(), 0.01);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      
      String string1 = Utility.encode(byteArray0, false);
      assertNotNull(string1);
      assertEquals("$60", string1);
      assertEquals(1, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)96}, byteArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[&\"";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[&\"", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [&\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode(">4 D9$?jf3C", false);
      assertNotNull(byteArray0);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)62, (byte)52, (byte)32, (byte)68, (byte)57, (byte)0, (byte)106, (byte)102, (byte)51, (byte)67}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)62, (byte)52, (byte)32, (byte)68, (byte)57, (byte)0, (byte)106, (byte)102, (byte)51, (byte)67}, byteArray0);
      
      byteSequence0.close();
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)62, (byte)52, (byte)32, (byte)68, (byte)57, (byte)0, (byte)106, (byte)102, (byte)51, (byte)67}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      assertNotNull(dataInputStream0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)62, (byte)52, (byte)32, (byte)68, (byte)57, (byte)0, (byte)106, (byte)102, (byte)51, (byte)67}, byteArray0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      assertNotNull(constantMethodType0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(15924, constantMethodType0.getDescriptorIndex());
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)62, (byte)52, (byte)32, (byte)68, (byte)57, (byte)0, (byte)106, (byte)102, (byte)51, (byte)67}, byteArray0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertNotNull(constantMethodType1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(15924, constantMethodType0.getDescriptorIndex());
      assertEquals(15924, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(10, byteArray0.length);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertArrayEquals(new byte[] {(byte)62, (byte)52, (byte)32, (byte)68, (byte)57, (byte)0, (byte)106, (byte)102, (byte)51, (byte)67}, byteArray0);
      
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantMethodType1;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType1;
      constantArray0[3] = (Constant) constantMethodType1;
      constantArray0[4] = (Constant) constantMethodType0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(0L, constantLong0.getBytes());
      
      constantArray0[5] = (Constant) constantLong0;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      assertEquals(6, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(6, constantPool0.getLength());
      assertEquals(6, constantPool1.getLength());
      assertEquals(6, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotNull(constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(6, constantPool0.getLength());
      assertEquals(6, constantPool1.getLength());
      assertEquals(6, constantPool2.getLength());
      assertEquals(6, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotNull(string0);
      assertEquals("lload_2", string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertEquals(6, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      assertEquals(6, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertArrayEquals(new byte[] {(byte)62, (byte)52, (byte)32, (byte)68, (byte)57, (byte)0, (byte)106, (byte)102, (byte)51, (byte)67}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 619, (-3345));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = Utility.compactClassName("Q<>}?", false);
      assertNotNull(string0);
      assertEquals("Q<>}?", string0);
      
      boolean boolean0 = Utility.isSet(221, 329);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.toHexString(byteArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)104;
      byteArray1[1] = (byte)68;
      byteArray1[2] = (byte) (-75);
      byteArray1[3] = (byte)10;
      byteArray1[4] = (byte)97;
      byteArray1[5] = (byte) (-128);
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)104, (byte)68, (byte) (-75), (byte)10, (byte)97, (byte) (-128)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals("dstore_1", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = Utility.convertString("dstore_3");
      assertNotNull(string0);
      assertEquals("dstore_3", string0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-57);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertEquals(7, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-56), (byte)80, (byte) (-72), (byte)120, (byte)0, (byte) (-57)}, byteArray0);
      
      String string1 = Utility.convertString("dstore_3");
      assertNotNull(string1);
      assertEquals("dstore_3", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.accessToString((-1915));
      assertNotNull(string2);
      assertEquals("public protected transient strictfp synthetic annotation enum", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Utility.accessToString((int) (byte)0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      byte byte0 = Utility.typeOfSignature("[r67=qilz");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = Utility.getSignature("WUUU^A]2%m(8P");
      assertNotNull(string0);
      assertEquals("LWUUU^A]2%m(8P;", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-124), (byte)19}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 76, 1973, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t\t";
      stringArray0[1] = "char";
      String string0 = Utility.methodTypeToSignature("\t\t", stringArray0);
      assertNotNull(string0);
      assertEquals("(L;C)L;", string0);
      assertEquals(2, stringArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)58;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, (-1154), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(7, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0}, byteArray0);
      
      short short0 = Utility.searchOpcode("CONSTANT_Float");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray1 = Utility.decode("dreturn", false);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)100, (byte)114, (byte)101, (byte)116, (byte)117, (byte)114, (byte)110}, byteArray1);
      
      String string0 = Utility.convertString("CONSTANT_Float");
      assertNotNull(string0);
      assertEquals("CONSTANT_Float", string0);
      
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "dreturn", "0C>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = Utility.printArray((Object[]) stringArray0);
      assertNotNull(string0);
      assertEquals("{null, null, null, null, null, null, null, null, null}", string0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-95), (byte) (-67), (byte) (-95), (byte) (-79), (byte) (-79), (byte)114, (byte) (-68), (byte) (-79)}, byteArray0);
      
      boolean boolean0 = byteSequence0.markSupported();
      assertTrue(boolean0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-95), (byte) (-67), (byte) (-95), (byte) (-79), (byte) (-79), (byte)114, (byte) (-68), (byte) (-79)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = Utility.classOrInterface(231);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("class");
      assertNotNull(constantUtf8_0);
      assertEquals("class", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("class");
      assertNotNull(constantUtf8_1);
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("class", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantLong constantLong0 = new ConstantLong(3619L);
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(3619L, constantLong0.getBytes());
      
      constantArray0[2] = (Constant) constantLong0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(3, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      byteSequence1.close();
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(3, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      assertNotNull(dataInputStream0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertNotNull(constantMethodType0);
      assertEquals(34429, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertNotNull(constantMethodType1);
      assertEquals(34429, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(34429, constantMethodType1.getDescriptorIndex());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertEquals(4, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertNotNull(string1);
      assertEquals("<illegal opcode>", string1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertEquals(4, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = Utility.accessToString((int) (byte) (-1));
      assertNotNull(string0);
      assertEquals("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode(" (", false);
      assertNotNull(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)32, (byte)40}, byteArray0);
      
      try { 
        Utility.typeOfSignature("8,9Z6$eThw~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8,9Z6$eThw~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("laload", false);
      assertNotNull(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)108, (byte)97, (byte)108, (byte)111, (byte)97, (byte)100}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)108, (byte)97, (byte)108, (byte)111, (byte)97, (byte)100}, byteArray0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(27745, constantInvokeDynamic0.getClassIndex());
      assertEquals(27759, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(27745, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)108, (byte)97, (byte)108, (byte)111, (byte)97, (byte)100}, byteArray0);
      
      short short0 = Utility.searchOpcode("fload_1");
      assertEquals((short)35, short0);
      
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      short short0 = Utility.searchOpcode("aload_2");
      assertEquals((short)44, short0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-82), (byte) (-1), (byte)18}, byteArray0);
      
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)99;
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertEquals("be 52 8b 9a 63", string0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)82, (byte) (-117), (byte) (-102), (byte)99}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)82, (byte) (-117), (byte) (-102), (byte)99}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(5, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-66), (byte)82, (byte) (-117), (byte) (-102), (byte)99}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string1);
      assertEquals("arraylength", string1);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-66), (byte)82, (byte) (-117), (byte) (-102), (byte)99}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-95);
      String string0 = Utility.signatureToString("V", true);
      assertNotNull(string0);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = Utility.format(0, 911, true, '6');
      assertNotNull(string0);
      assertEqualsstring0);
      
      Utility.classOrInterface(1613);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      try { 
        Utility.methodSignatureReturnType("Pj,=~X'ZU=_uf$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pj,=~X'ZU=_uf$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(11, byteArray0.length);
      
      try { 
        Utility.methodSignatureReturnType("LocalVariableTypeTable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariableTypeTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = Utility.fillup("", (-994), true, '-');
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-127), (byte) (-61), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(9, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-127), (byte) (-61), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = byteSequence1.readBoolean();
      assertTrue(boolean0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(9, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-127), (byte) (-61), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = byteSequence1.readInt();
      assertEquals((-2117924864), int0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(5, byteSequence1.getIndex());
      assertEquals(9, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-127), (byte) (-61), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.clone();
      assertNotNull(constantDouble1);
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals(0.0, constantDouble1.getBytes(), 0.01);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      
      byteSequence0.close();
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-127), (byte) (-61), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = "CONSTANT_InvokeDynamic";
      String string2 = Utility.signatureToString("CONSTANT_InvokeDynamic", true);
      assertNotNull(string2);
      assertEquals("char", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1473, (-1391), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('6');
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = Utility.convertString("dstore_3");
      assertNotNull(string0);
      assertEquals("dstore_3", string0);
      
      String string1 = Utility.accessToString(90);
      assertNotNull(string1);
      assertEquals("private static final volatile", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.format(90, 90, true, '}');
      assertNotNull(string2);
      assertEquals("90}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-89);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-70), (byte)61, (byte)101, (byte)102}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string3);
      assertEquals("goto\t\t#-17859", string3);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-70), (byte)61, (byte)101, (byte)102}, byteArray0);
      
      String string4 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string4);
      assertEquals("lsub", string4);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-70), (byte)61, (byte)101, (byte)102}, byteArray0);
      
      String string5 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotNull(string5);
      assertEquals("fsub", string5);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-70), (byte)61, (byte)101, (byte)102}, byteArray0);
      
      String string6 = Utility.getSignature("goto\t\t#-17859");
      assertNotNull(string6);
      assertEquals("Lgoto;", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = Utility.accessToString((int) (byte) (-1));
      assertNotNull(string0);
      assertEquals("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.format((byte) (-1), 791, true, 'U');
      assertNotNull(string1);
      assertEqualsstring1);
      assertFalse(string1.equals((Object)string0));
      
      Utility.classOrInterface((byte) (-1));
      Utility.getSignature("E:@m ^^?YzS");
      Utility.replace("interfaceh|A|'{Qt0xQ=/[)pWT");
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = Utility.accessToString(20);
      assertNotNull(string0);
      assertEquals("protected final", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-73);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte)103, (byte) (-73), (byte)0, (byte) (-68), (byte) (-18)}, byteArray0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(23, 1114);
      assertNotNull(constantMethodHandle0);
      assertEquals(23, constantMethodHandle0.getReferenceKind());
      assertEquals(1114, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string0);
      assertEquals("lastore", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals(6, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte)103, (byte) (-73), (byte)0, (byte) (-68), (byte) (-18)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-64)}, byteArray0);
      
      String string0 = Utility.compactClassName("<illegal opcode>", "<illegal opcode>", false);
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      byte byte0 = Utility.typeOfSignature("V:D>j,v?[+;");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      short short0 = Utility.searchOpcode("'BP]kWUmIQ>lJ[}^a");
      assertEquals((short) (-1), short0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)46, (byte) (-60), (byte) (-71), (byte) (-60), (byte) (-60)}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string0);
      assertEquals("iaload", string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)46, (byte) (-60), (byte) (-71), (byte) (-60), (byte) (-60)}, byteArray0);
      
      String string1 = Utility.accessToString((int) (byte) (-60));
      assertNotNull(string1);
      assertEquals("protected volatile transient native interface abstract strictfp synthetic annotation enum", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-95), (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("if_icmplt\t\t#0", string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-95), (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(">4 D9$?jf3C", false);
      assertNotNull(byteArray0);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)62, (byte)52, (byte)32, (byte)68, (byte)57, (byte)0, (byte)106, (byte)102, (byte)51, (byte)67}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)62, (byte)52, (byte)32, (byte)68, (byte)57, (byte)0, (byte)106, (byte)102, (byte)51, (byte)67}, byteArray0);
      
      byteSequence0.close();
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)62, (byte)52, (byte)32, (byte)68, (byte)57, (byte)0, (byte)106, (byte)102, (byte)51, (byte)67}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      assertNotNull(dataInputStream0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)62, (byte)52, (byte)32, (byte)68, (byte)57, (byte)0, (byte)106, (byte)102, (byte)51, (byte)67}, byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), (-1716));
      assertNotNull(string0);
      assertEquals("0:    istore_3\n1:    caload\n2:    lload_2\n3:    fstore_1\n4:    dstore\t\t%0\n6:    fmul\n7:    fsub\n8:    baload\n9:    fstore_0\n", string0);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)62, (byte)52, (byte)32, (byte)68, (byte)57, (byte)0, (byte)106, (byte)102, (byte)51, (byte)67}, byteArray0);
      
      try { 
        Utility.methodSignatureReturnType(">4 D9$?jf3C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>4 D9$?jf3C'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)36, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("fload_2", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)36, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = Utility.accessToString((-4283));
      assertNotNull(string0);
      assertEquals("public protected volatile native interface abstract strictfp annotation enum", string0);
      
      String string1 = Utility.format((-4283), (-4283), true, '}');
      assertNotNull(string1);
      assertEquals("-4283", string1);
      assertFalse(string1.equals((Object)string0));
      
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      assertNotNull(constantDouble0);
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.clone();
      assertNotNull(constantDouble1);
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals((-1.0), constantDouble1.getBytes(), 0.01);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)16;
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      BCELComparator bCELComparator1 = Field.getComparator();
      assertNotNull(bCELComparator1);
      assertFalse(bCELComparator1.equals((Object)bCELComparator0));
      
      Constant.setComparator(bCELComparator1);
      assertFalse(bCELComparator1.equals((Object)bCELComparator0));
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte)37, (byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertNotNull(constantPool2);
      assertEquals(2, constantPool2.getLength());
      assertEquals(2, constantArray0.length);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      String string2 = Utility.codeToString(byteSequence0, constantPool2, true);
      assertNotNull(string2);
      assertEquals("aload\t\t%37", string2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(2, constantPool2.getLength());
      assertEquals(9, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)25, (byte)37, (byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("dstore_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dstore_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = Utility.accessToString((int) (byte)85);
      assertNotNull(string0);
      assertEquals("public protected final volatile", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)111;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertNotNull(constantPool2);
      assertEquals(0, constantPool2.getLength());
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      ConstantPool constantPool3 = constantPool0.copy();
      assertNotNull(constantPool3);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool3.getLength());
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)69, (byte)85, (byte)69, (byte)85, (byte)111}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotNull(string1);
      assertEquals("fstore_2", string1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)69, (byte)85, (byte)69, (byte)85, (byte)111}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      int int0 = Utility.setBit(5, (-2252));
      assertEquals(1048581, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 86, (-1950), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)42, (byte) (-1), (byte)51, (byte) (-66), (byte)1}, byteArray0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((byte)51);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(51.0, constantDouble0.getBytes(), 0.01);
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.clone();
      assertNotNull(constantDouble1);
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(51.0, constantDouble0.getBytes(), 0.01);
      assertEquals(51.0, constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      boolean boolean2 = false;
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("$40$w$ff3$be$B", string0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)42, (byte) (-1), (byte)51, (byte) (-66), (byte)1}, byteArray0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertNotNull(string1);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      assertEquals(6, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)64, (byte)42, (byte) (-1), (byte)51, (byte) (-66), (byte)1}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.getSignature("Q>EH~6bp[R$:_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[R$:_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = Utility.convertString("5");
      assertNotNull(string0);
      assertEquals("5", string0);
      
      try { 
        Utility.decode("5", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)32;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte)39;
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      try { 
        Utility.typeOfSignature("MethodParameters");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MethodParameters
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = Utility.convertString("dstore_3");
      assertNotNull(string0);
      assertEquals("dstore_3", string0);
      
      String string1 = Utility.accessToString((-4283));
      assertNotNull(string1);
      assertEquals("public protected volatile native interface abstract strictfp annotation enum", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("dstore_3", false);
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100, (byte)115, (byte)116, (byte)111, (byte)114, (byte)101, (byte)95, (byte)51}, byteArray0);
      
      try { 
        Utility.typeOfSignature("@_U5<yx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @_U5<yx
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      try { 
        Utility.typeOfSignature("0$)h#'UW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0$)h#'UW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("laload", false);
      assertNotNull(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)108, (byte)97, (byte)108, (byte)111, (byte)97, (byte)100}, byteArray0);
      
      try { 
        Utility.typeOfSignature("()[Q,a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ()[Q,a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertEquals("11 00 00", string0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("sipush\t\t0", string1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = Utility.format(1753, 1753, false, 'u');
      assertNotNull(string0);
      
      String string1 = Utility.fillup("[&\"", 1753, true, '-');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)16;
      String string2 = Utility.toHexString(byteArray0);
      assertNotNull(string2);
      assertEquals("ff 1a 12 a6 ff 10", string2);
      assertEquals(6, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)26, (byte)18, (byte) (-90), (byte) (-1), (byte)16}, byteArray0);
      
      try { 
        Utility.methodSignatureReturnType(string1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)32;
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertEquals("c1 b5 3e 74 7a 20", string0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-75), (byte)62, (byte)116, (byte)122, (byte)32}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)62, (int) (byte)122, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(7, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      short short0 = Utility.searchOpcode("\t");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray1 = Utility.decode("_o1Y=|Az`v", false);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(10, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)95, (byte)111, (byte)49, (byte)89, (byte)61, (byte)124, (byte)65, (byte)122, (byte)96, (byte)118}, byteArray1);
      
      String string0 = Utility.convertString(",");
      assertNotNull(string0);
      assertEquals(",", string0);
      
      String string1 = Utility.replace(",", "_o1Y=|Az`v", "dreturn");
      assertNotNull(string1);
      assertEquals(",", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.printArray((Object[]) null, false);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (int) (byte)41, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('6');
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[8];
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("$A$A$A$A$A$A$A$A", string0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.fillup("5SX5:>C1PA6B1Z", 90, true, 'C');
      assertNotNull(string1);
      assertEquals("5SX5:>C1PA6B1ZCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = Utility.clearBit(115, 6);
      assertEquals(51, int0);
      
      String string2 = Utility.compactClassName("5R}lM");
      assertNotNull(string2);
      assertEquals("5R}lM", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("invokespecial");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("invokespecial", constantUtf8_0.getBytes());
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      String string3 = Utility.codeToString(byteArray0, constantPool0, (-2252), 214, false);
      assertNotNull(string3);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string3);
      assertEquals(1, constantPool0.getLength());
      assertEquals(8, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-39);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(13, byteArray0.length);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)42;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte) (-7), (byte)0, (byte)18, (byte)72, (byte)42}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte) (-7), (byte)0, (byte)18, (byte)72, (byte)42}, byteArray0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      assertNotNull(constantDouble0);
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      constantArray0[0] = (Constant) constantDouble0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      assertNotNull(constantFieldref0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(63744, constantFieldref0.getNameAndTypeIndex());
      assertEquals(18432, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte) (-7), (byte)0, (byte)18, (byte)72, (byte)42}, byteArray0);
      
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      assertNotNull(constantInteger0);
      assertEquals(0, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      
      ConstantInteger constantInteger1 = new ConstantInteger((byte)72);
      assertNotNull(constantInteger1);
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals(72, constantInteger1.getBytes());
      assertFalse(constantInteger1.equals((Object)constantInteger0));
      
      byteSequence0.close();
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte) (-7), (byte)0, (byte)18, (byte)72, (byte)42}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      assertNotNull(dataInputStream0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte) (-7), (byte)0, (byte)18, (byte)72, (byte)42}, byteArray0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      assertNotNull(constantMethodType0);
      assertEquals(4680, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(6, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte) (-7), (byte)0, (byte)18, (byte)72, (byte)42}, byteArray0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertNotNull(constantMethodType1);
      assertEquals(4680, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(4680, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(6, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte) (-7), (byte)0, (byte)18, (byte)72, (byte)42}, byteArray0);
      
      constantArray0[3] = (Constant) constantMethodType1;
      String string0 = Utility.printArray((Object[]) constantArray0, true, true);
      assertNotNull(string0);
      assertEquals("{\"CONSTANT_Double[6](bytes = -1.0)\", \"CONSTANT_Fieldref[9](class_index = 18432, name_and_type_index = 63744)\", null, \"CONSTANT_MethodType[16](descriptor_index = 4680)\"}", string0);
      assertEquals(4, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("lstore_2", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)0, (byte)0}, byteArray0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(29298, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(0, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(29298, constantInvokeDynamic0.getClassIndex());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)0, (byte)0}, byteArray0);
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertNotNull(constantInvokeDynamic1);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(29298, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(0, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(29298, constantInvokeDynamic0.getClassIndex());
      assertEquals(0, constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals(29298, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertEquals(29298, constantInvokeDynamic1.getClassIndex());
      assertEquals(4, byteArray0.length);
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)0, (byte)0}, byteArray0);
      
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(4, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertNotNull(constantPool2);
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      String string0 = Utility.codeToString(byteSequence1, constantPool2, true);
      assertNotNull(string0);
      assertEquals("frem", string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(1, constantPool2.getLength());
      assertEquals(4, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("frem");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `frem'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotNull(constantPool2);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantPool2.getLength());
      assertEquals(7, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool2, true);
      assertNotNull(string0);
      assertEquals("ladd", string0);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantPool2.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertEquals(7, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertArrayEquals(new byte[] {(byte)97, (byte)0, (byte)0}, byteArray0);
      
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)97, 172, byteSequence0, constantPool2);
      assertNotNull(localVariableTable0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantPool2.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(172, localVariableTable0.getLength());
      assertEquals((byte)5, localVariableTable0.getTag());
      assertEquals(0, localVariableTable0.getTableLength());
      assertEquals(97, localVariableTable0.getNameIndex());
      assertEquals(3, byteArray0.length);
      assertEquals(7, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertArrayEquals(new byte[] {(byte)97, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.methodSignatureToString("ladd", "l\".kWGj@kYF", "", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ladd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = Utility.getSignature("M&YWaU=f-8X>)");
      assertNotNull(string0);
      assertEquals("LM&YWaU=f-8X>);", string0);
      
      String string1 = Utility.convertString("LM&YWaU=f-8X>);");
      assertNotNull(string1);
      assertEquals("LM&YWaU=f-8X>);", string1);
      assertTrue(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("M&YWaU=f-8X>)", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M&YWaU=f-8X>)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-72), (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = Utility.accessToString((-1269));
      assertNotNull(string0);
      assertEquals("public private static native interface strictfp synthetic annotation enum", string0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1269), (-1269));
      assertNotNull(constantFieldref0);
      assertEquals((-1269), constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-1269), constantFieldref0.getNameAndTypeIndex());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-54);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)84, (byte) (-54), (byte)0, (byte) (-54), (byte)123}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string1);
      assertEquals("bastore", string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)84, (byte) (-54), (byte)0, (byte) (-54), (byte)123}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals("nop", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface(133);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("M@>");
      assertNotNull(constantUtf8_0);
      assertEquals("M@>", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("M@>");
      assertNotNull(constantUtf8_1);
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("M@>", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      
      ConstantLong constantLong0 = new ConstantLong((-2502L));
      assertNotNull(constantLong0);
      assertEquals((-2502L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(6, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteSequence0.close();
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence1);
      assertNotNull(dataInputStream0);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(6, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      assertNotNull(constantMethodType0);
      assertEquals(2, byteSequence1.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(0, constantMethodType0.getDescriptorIndex());
      assertEquals(6, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(148);
      assertNotNull(constantMethodType1);
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(148, constantMethodType1.getDescriptorIndex());
      assertFalse(constantMethodType1.equals((Object)constantMethodType0));
      
      ConstantMethodType constantMethodType2 = new ConstantMethodType(constantMethodType1);
      assertNotNull(constantMethodType2);
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(148, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType2.getTag());
      assertEquals(148, constantMethodType2.getDescriptorIndex());
      assertFalse(constantMethodType1.equals((Object)constantMethodType0));
      assertFalse(constantMethodType2.equals((Object)constantMethodType0));
      assertTrue(constantMethodType2.equals((Object)constantMethodType1));
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotNull(constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantPool2.getLength());
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertNotNull(string0);
      assertEquals("nop", string0);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = Utility.compactClassName("LWUUU^A]2%m(8P;V");
      assertNotNull(string0);
      assertEquals("LWUUU^A]2%m(8P;V", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[8] = (byte)24;
      byteArray0[7] = (byte)24;
      byteArray0[8] = (byte)24;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)24, (byte)24, (byte)24, (byte)0, (byte)0, (byte)24, (byte)24}, byteArray0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)24);
      assertNotNull(string1);
      assertEquals("0:    dload\t\t%24\n2:    dload\t\t%24\n4:    dload\t\t%0\n6:    nop\n7:    dload\t\t%24\n", string1);
      assertEquals(9, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)24, (byte)24, (byte)24, (byte)0, (byte)0, (byte)24, (byte)24}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)24, (byte)24, (byte)24, (byte)0, (byte)0, (byte)24, (byte)24}, byteArray0);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string2);
      assertEquals("dload\t\t%24", string2);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)24, (byte)24, (byte)24, (byte)0, (byte)0, (byte)24, (byte)24}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('6');
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)120;
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertEquals("2f 58 01 22 75 78", string0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)88, (byte)1, (byte)34, (byte)117, (byte)120}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-39);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)18, (byte) (-39)}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(2, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)18, (byte) (-39)}, byteArray0);
      
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(2, byteArray0.length);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertArrayEquals(new byte[] {(byte)18, (byte) (-39)}, byteArray0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = "Xau8-./[I)YRL~aN.9";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Xau8-./[I)YRL~aN.9", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xau8-./[I)YRL~aN.9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString(95, true);
      assertNotNull(string0);
      assertEquals("public private protected static final volatile", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = Utility.accessToString((int) (byte) (-1));
      assertNotNull(string0);
      assertEquals("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.classOrInterface((byte) (-1));
      assertNotNull(string1);
      assertEquals("interface", string1);
      assertFalse(string1.equals((Object)string0));
      
      ConstantInteger constantInteger0 = new ConstantInteger(47);
      assertNotNull(constantInteger0);
      assertEquals(47, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("01VaOmx2tck1eZ!j");
      assertNotNull(constantUtf8_0);
      assertEquals("01VaOmx2tck1eZ!j", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string2 = Utility.format(7, (-2765), true, 'v');
      assertNotNull(string2);
      assertEquals("7", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", "7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = Utility.accessToString((-1245));
      assertNotNull(string0);
      assertEquals("public private synchronized native interface strictfp synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-45), (byte) (-70)}, byteArray0);
      
      String string1 = Utility.fillup("public private synchronized native interface strictfp synthetic annotation enum", 2, true, 'N');
      assertNotNull(string1);
      assertEquals("public private synchronized native interface strictfp synthetic annotation enum", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = Constants.OPCODE_NAMES;
      assertNotNull(stringArray0);
      assertEquals(256, stringArray0.length);
      
      String string2 = Utility.methodSignatureReturnType("SV");
      assertNotNull(string2);
      assertEquals("short", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Utility.toHexString(byteArray0);
      assertNotNull(string3);
      assertEquals("c8 d3 ba", string3);
      assertEquals(3, byteArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-45), (byte) (-70)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)42;
      byteArray0[3] = (byte)51;
      String string0 = "O,M";
      try { 
        Utility.typeOfSignature("O,M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O,M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)30, (byte)75, (byte)0, (byte) (-1), (byte) (-80)}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray1 = new byte[12];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)123;
      byteArray1[2] = (byte)75;
      byteArray1[3] = (byte)75;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)75;
      byteArray1[6] = (byte) (-80);
      byteArray1[7] = (byte)0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(12, byteArray1.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string0);
      assertEquals("lload_0", string0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertArrayEquals(new byte[] {(byte)30, (byte)75, (byte)0, (byte) (-1), (byte) (-80)}, byteArray0);
      
      String string1 = Utility.accessToString(154);
      assertNotNull(string1);
      assertEquals("private static final transient", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('q');
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("dreturn", "dreturn", false);
      assertNotNull(string0);
      assertEquals("dreturn", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-111)}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string1);
      assertEquals("i2b", string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-111)}, byteArray0);
      
      String string2 = Utility.compactClassName("dreturn", true);
      assertNotNull(string2);
      assertEquals("dreturn", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('q');
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString(171);
      assertNotNull(string0);
      assertEquals("public private static synchronized transient", string0);
      
      try { 
        Utility.typeOfSignature("public private static synchronized transient");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private static synchronized transient
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = Utility.getSignature(", high = ");
      assertNotNull(string0);
      assertEquals("L,;", string0);
      
      String string1 = Utility.signatureToString("L,;");
      assertNotNull(string1);
      assertEquals(",", string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.typeOfSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = Utility.accessToString((int) (byte)12);
      assertNotNull(string0);
      assertEquals("protected static", string0);
      
      String string1 = Utility.fillup("protected static", 17, false, 'F');
      assertNotNull(string1);
      assertEquals("Fprotected static", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = Constants.OPCODE_NAMES;
      assertNotNull(stringArray0);
      assertEquals(256, stringArray0.length);
      
      String string2 = Utility.methodSignatureReturnType("Fprotected static");
      assertNotNull(string2);
      assertEquals("float", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      try { 
        Utility.methodSignatureReturnType("Pj,=~X'ZU=_uf$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pj,=~X'ZU=_uf$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-110);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotNull(constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)116, (byte)88, (byte) (-110)}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool2, false);
      assertNotNull(string0);
      assertEquals("ineg", string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertArrayEquals(new byte[] {(byte)116, (byte)88, (byte) (-110)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      String string0 = "4}A/KPd&W%";
      try { 
        Utility.typeOfSignature("4}A/KPd&W%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4}A/KPd&W%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("zs&#]", false);
      assertNotNull(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)122, (byte)115, (byte)38, (byte)35, (byte)93}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)122, (byte)115, (byte)38, (byte)35, (byte)93}, byteArray0);
      
      byteSequence0.close();
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)122, (byte)115, (byte)38, (byte)35, (byte)93}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      assertNotNull(dataInputStream0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)122, (byte)115, (byte)38, (byte)35, (byte)93}, byteArray0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertNotNull(constantMethodType0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(31347, constantMethodType0.getDescriptorIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)122, (byte)115, (byte)38, (byte)35, (byte)93}, byteArray0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertNotNull(constantMethodType1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(31347, constantMethodType0.getDescriptorIndex());
      assertEquals(31347, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(5, byteArray0.length);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertArrayEquals(new byte[] {(byte)122, (byte)115, (byte)38, (byte)35, (byte)93}, byteArray0);
      
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      assertEquals(3, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotNull(constantPool2);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      assertEquals(3, constantPool2.getLength());
      assertEquals(3, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      String string0 = Utility.codeToString(byteSequence0, constantPool2, false);
      assertNotNull(string0);
      assertEquals("dload_0", string0);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      assertEquals(3, constantPool2.getLength());
      assertEquals(5, byteArray0.length);
      assertEquals(3, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertArrayEquals(new byte[] {(byte)122, (byte)115, (byte)38, (byte)35, (byte)93}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-56), (byte) (-56), (byte) (-56), (byte) (-56), (byte) (-56), (byte) (-63)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      short short0 = Utility.searchOpcode("~F`v");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.getSignature("char");
      assertNotNull(string0);
      assertEquals("C", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('6');
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)1;
      String string0 = Utility.convertString("'#}L:*!");
      assertNotNull(string0);
      assertEquals("\\'#}L:*!", string0);
      
      String string1 = Utility.fillup("piU?@#M{0<l\\;K", (byte)1, false, 'G');
      assertNotNull(string1);
      assertEquals("piU?@#M{0<l\\;K", string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.methodSignatureArgumentTypes("lcmp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lcmp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = Utility.convertString("dstore_3");
      assertNotNull(string0);
      assertEquals("dstore_3", string0);
      
      String string1 = Utility.accessToString(90);
      assertNotNull(string1);
      assertEquals("private static final volatile", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.format(90, 90, true, '}');
      assertNotNull(string2);
      assertEquals("90}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)61;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("OYcZw6d3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OYcZw6d3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = Utility.fillup("[&\"", 1753, true, '-');
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode(string0);
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)96}, byteArray0);
      
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      assertNotNull(constantDouble0);
      assertEquals(1.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.clone();
      assertNotNull(constantDouble1);
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals(1.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals(1.0, constantDouble1.getBytes(), 0.01);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      
      String string1 = Utility.encode(byteArray0, false);
      assertNotNull(string1);
      assertEquals("$60", string1);
      assertEquals(1, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)96}, byteArray0);
      
      String string2 = Utility.encode(byteArray0, false);
      assertNotNull(string2);
      assertEquals("$60", string2);
      assertEquals(1, byteArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)96}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(1, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)96}, byteArray0);
      
      try { 
        Utility.typeOfSignature("%I?r3?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %I?r3?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.classOrInterface((-3212));
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) constantPool0;
      objectArray0[1] = (Object) "interface";
      objectArray0[2] = (Object) "WUUU^A]2%m(8P";
      objectArray0[3] = (Object) constantPool0;
      objectArray0[4] = (Object) constantPool0;
      objectArray0[5] = (Object) "WUUU^A]2%m(8P";
      objectArray0[6] = (Object) "WUUU^A]2%m(8P";
      // Undeclared exception!
      try { 
        Utility.printArray(objectArray0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('q');
      assertTrue(boolean0);
      
      int int0 = Utility.setBit(189, 189);
      assertEquals(536871101, int0);
      
      String string0 = "LE";
      String string1 = " m9zT8OcN b3MZ$fV";
      // Undeclared exception!
      try { 
        Utility.decode(" m9zT8OcN b3MZ$fV", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fV\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = Utility.signatureToString("SourceFile", true);
      assertNotNull(string0);
      assertEquals("short", string0);
      
      String string1 = Utility.signatureToString("SourceFile", true);
      assertNotNull(string1);
      assertEquals("short", string1);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = Utility.getSignature("WUUU^A]2%m(8P");
      assertNotNull(string0);
      assertEquals("LWUUU^A]2%m(8P;", string0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool1, (-490), (-490), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = Utility.classOrInterface(231);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("class");
      assertNotNull(constantUtf8_0);
      assertEquals("class", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("class");
      assertNotNull(constantUtf8_1);
      assertEquals("class", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantLong constantLong0 = new ConstantLong(3619L);
      assertNotNull(constantLong0);
      assertEquals(3619L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      constantArray0[2] = (Constant) constantLong0;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("invokeinterface");
      assertNotNull(constantUtf8_2);
      assertEquals("invokeinterface", constantUtf8_2.getBytes());
      assertEquals((byte)1, constantUtf8_2.getTag());
      assertFalse(constantUtf8_2.equals((Object)constantUtf8_0));
      assertFalse(constantUtf8_2.equals((Object)constantUtf8_1));
      
      constantArray0[3] = (Constant) constantUtf8_2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(4, constantPool1.getLength());
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertNotNull(string1);
      assertEquals("i2f", string1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(4, constantPool1.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, constantPool0.getLength());
      assertEquals(3, byteArray0.length);
      assertEquals(4, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("LocalVariable", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = Utility.replace("D", "D", "D");
      assertNotNull(string0);
      assertEquals("D", string0);
      
      String string1 = Utility.replace("D", "short", "D");
      assertNotNull(string1);
      assertEquals("D", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.signatureToString("D");
      assertNotNull(string2);
      assertEquals("double", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)61, (byte)61}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(2, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)61, (byte)61}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("istore_2", string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(2, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)61, (byte)61}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface(140);
      assertNotNull(string0);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = Utility.compactClassName("6Z?]~0 LuA~", true);
      assertNotNull(string0);
      assertEquals("6Z?]~0 LuA~", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte) (-53);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-2), (byte) (-54), (byte)117, (byte) (-5), (byte) (-62), (byte) (-32), (byte)95, (byte) (-53)}, byteArray0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('7');
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = Utility.accessToString((-1245));
      assertNotNull(string0);
      assertEquals("public private synchronized native interface strictfp synthetic annotation enum", string0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("L,(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L,(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)62}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte) (-1);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertEquals(7, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-82), (byte) (-91), (byte)15, (byte)125, (byte) (-100), (byte) (-1)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-63), (int) (byte)15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    freturn
         // 2:    if_acmpeq\t\t#3967
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.signatureToString("G.IA%w0pAV@y+v", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G.IA%w0pAV@y+v'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = Utility.signatureToString("BootstrapMethod(");
      assertNotNull(string0);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-110);
      byteArray0[2] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)0, (byte)88, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("i2c", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)0, (byte)88, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("R0hkT?4G_", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R0hkT?4G_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-59)}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('{');
      assertFalse(boolean0);
      
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)31}, byteArray0);
      
      ConstantInteger constantInteger0 = new ConstantInteger(1262);
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(1262, constantInteger0.getBytes());
      
      boolean boolean1 = byteSequence0.markSupported();
      assertTrue(boolean1);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)31}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("lload_1", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)31}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertNotNull(constantPool2);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool2.getLength());
      assertEquals(7, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      byte[] byteArray0 = new byte[6];
      constantPool1.setConstantPool(constantArray0);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)71;
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, (int) (byte) (-22));
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    nop\n2:    dstore_0\n3:    dstore_0\n4:    dstore_0\n5:    nop\n", string0);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantArray0.length);
      assertEquals(6, byteArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)71, (byte)71, (byte)71, (byte)0}, byteArray0);
      
      String string1 = Utility.convertString("0:    nop\n1:    nop\n2:    dstore_0\n3:    dstore_0\n4:    dstore_0\n5:    nop\n");
      assertNotNull(string1);
      assertEquals("0:    nop\\n1:    nop\\n2:    dstore_0\\n3:    dstore_0\\n4:    dstore_0\\n5:    nop\\n", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(0, objectArray0.length);
      
      String string1 = Utility.accessToString(70);
      assertNotNull(string1);
      assertEquals("private protected volatile", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "java.lang.Short";
      stringArray0[1] = "private protected volatile";
      stringArray0[2] = "{}";
      stringArray0[3] = "java.lang.";
      stringArray0[4] = "{}";
      stringArray0[5] = "private protected volatile";
      stringArray0[6] = "private protected volatile";
      stringArray0[7] = "{}";
      stringArray0[8] = "{}";
      String string2 = Utility.methodTypeToSignature("java.lang.", stringArray0);
      assertNotNull(string2);
      assertEquals("(Ljava/lang/Short;Lprivate;L{};Ljava/lang/;L{};Lprivate;Lprivate;L{};L{};)Ljava/lang/;", string2);
      assertEquals(9, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)103;
      byteArray0[0] = (byte)103;
      byte byte1 = (byte)5;
      byteArray0[1] = (byte)5;
      String string3 = Utility.toHexString(byteArray0);
      assertNotNull(string3);
      assertEquals("67 05", string3);
      assertEquals(2, byteArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte)103, (byte)5}, byteArray0);
      
      try { 
        Utility.methodSignatureArgumentTypes("monitorenter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorenter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-20);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)89, (byte)65, (byte)14, (byte)26, (byte) (-20)}, byteArray0);
      
      byteSequence0.mark((byte)65);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)89, (byte)65, (byte)14, (byte)26, (byte) (-20)}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("dup", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)89, (byte)65, (byte)14, (byte)26, (byte) (-20)}, byteArray0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertNotNull(string1);
      assertEquals("59 41 0e 1a ec", string1);
      assertEquals(5, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)89, (byte)65, (byte)14, (byte)26, (byte) (-20)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = Utility.format(1753, 1753, false, 'u');
      assertNotNull(string0);
      
      String string1 = Utility.fillup("[&\"", 1753, true, '-');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 162, (int) (byte) (-90));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = Utility.fillup("[&\"", 1753, true, '-');
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode(string0);
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)96}, byteArray0);
      
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      assertNotNull(constantDouble0);
      assertEquals(1.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.clone();
      assertNotNull(constantDouble1);
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals(1.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals(1.0, constantDouble1.getBytes(), 0.01);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      
      String string1 = Utility.encode(byteArray0, false);
      assertNotNull(string1);
      assertEquals("$60", string1);
      assertEquals(1, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)96}, byteArray0);
      
      String string2 = Utility.encode(byteArray0, false);
      assertNotNull(string2);
      assertEquals("$60", string2);
      assertEquals(1, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)96}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(1, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)96}, byteArray0);
      
      byte byte0 = Utility.typeOfSignature("I?r3?");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = Utility.fillup("", (-994), true, '-');
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)108;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-65), 177, true);
      assertNotNull(string1);
      assertEquals("0:    athrow\n1:    lor\n2:    monitorexit\n3:    iconst_5\n4:    idiv\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(9, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-127), (byte) (-61), (byte)8, (byte)108, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      try { 
        Utility.typeOfSignature("O=,YFtKuUJ@jkzn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O=,YFtKuUJ@jkzn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = Utility.convertString("dstore_3");
      assertNotNull(string0);
      assertEquals("dstore_3", string0);
      
      String string1 = Utility.accessToString((-4283));
      assertNotNull(string1);
      assertEquals("public protected volatile native interface abstract strictfp annotation enum", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.format((-4283), (-4283), true, '}');
      assertNotNull(string2);
      assertEquals("-4283", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Utility.convertString("M&YWaU=7f-8X>)");
      assertNotNull(string3);
      assertEquals("M&YWaU=7f-8X>)", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      String string4 = Utility.fillup("M&YWaU=7f-8X>)", 214, true, '}');
      assertNotNull(string4);
      assertEquals("M&YWaU=7f-8X>)}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      try { 
        Utility.typeOfSignature("M&YWaU=7f-8X>)}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M&YWaU=7f-8X>)}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-95);
      byteArray0[3] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)78, (byte) (-95), (byte)0, (byte)78, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("astore_3", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)78, (byte) (-95), (byte)0, (byte)78, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = Utility.accessToString((-1245));
      assertNotNull(string0);
      assertEquals("public private synchronized native interface strictfp synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-45);
      ConstantLong constantLong0 = new ConstantLong((-628L));
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-628L), constantLong0.getBytes());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertNotNull(constantPool2);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-45);
      byteArray1[1] = (byte) (-56);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertFalse(boolean1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-45), (byte) (-56), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      byteArray1[2] = (byte) (-70);
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gaS!b.2d^e2>bF e");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      byteArray1[3] = (byte) (-70);
      byteArray1[4] = (byte) (-70);
      byteArray1[5] = (byte) (-56);
      byteArray1[6] = (byte) (-70);
      byteArray1[7] = (byte) (-45);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-45), (byte) (-56), (byte) (-70), (byte) (-70), (byte) (-70), (byte) (-56), (byte) (-70), (byte) (-45)}, byteArray1);
      
      int int0 = byteSequence0.read();
      assertEquals(211, int0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-45), (byte) (-56), (byte) (-70), (byte) (-70), (byte) (-70), (byte) (-56), (byte) (-70), (byte) (-45)}, byteArray1);
      
      float float0 = byteSequence0.readFloat();
      assertEquals((-382421.8F), float0, 0.01F);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-45), (byte) (-56), (byte) (-70), (byte) (-70), (byte) (-70), (byte) (-56), (byte) (-70), (byte) (-45)}, byteArray1);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-75);
      try { 
        Utility.typeOfSignature("As`w3JpCOYFDFd_53");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: As`w3JpCOYFDFd_53
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("^V,2Z-r[:H1C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[:H1C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      assertNotNull(constantDouble0);
      assertEquals(1.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.clone();
      assertNotNull(constantDouble1);
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals(1.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(1.0, constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      
      try { 
        Utility.typeOfSignature("E^fB1aK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E^fB1aK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-74), (byte)0}, byteArray0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-70);
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte) (-74);
      byteArray1[3] = (byte) (-94);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.encode(byteArray1, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-70), (byte)48, (byte) (-74), (byte) (-94)}, byteArray1);
      
      String string1 = Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", true);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-74), (byte)0}, byteArray0);
      
      byte byte0 = Utility.typeOfSignature("S");
      assertEquals((byte)9, byte0);
      
      try { 
        Utility.methodSignatureArgumentTypes("jy#Xu[G1o@i({'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jy#Xu[G1o@i({'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!^a [#k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^a [#k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("5hQw7");
      assertNotNull(constantUtf8_0);
      assertEquals("5hQw7", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      ConstantLong constantLong0 = new ConstantLong((byte) (-95));
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-95L), constantLong0.getBytes());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95)}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(8, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95)}, byteArray0);
      
      byteSequence1.close();
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(8, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95)}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence1);
      assertNotNull(dataInputStream0);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(8, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95)}, byteArray0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      assertNotNull(constantMethodType0);
      assertEquals(2, byteSequence1.getIndex());
      assertEquals(41377, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(8, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95)}, byteArray0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(dataInputStream0);
      assertNotNull(constantMethodType1);
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(41377, constantMethodType1.getDescriptorIndex());
      assertEquals(4, byteSequence1.getIndex());
      assertEquals(8, byteArray0.length);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95)}, byteArray0);
      
      ConstantMethodType constantMethodType2 = new ConstantMethodType(constantMethodType1);
      assertNotNull(constantMethodType2);
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(41377, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType2.getTag());
      assertEquals(41377, constantMethodType2.getDescriptorIndex());
      assertEquals(4, byteSequence1.getIndex());
      assertEquals(8, byteArray0.length);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertTrue(constantMethodType2.equals((Object)constantMethodType0));
      assertTrue(constantMethodType2.equals((Object)constantMethodType1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95)}, byteArray0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertNotNull(string0);
      assertEquals("if_icmplt\t\t#-24155", string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(7, byteSequence1.getIndex());
      assertEquals(0, constantArray0.length);
      assertEquals(8, byteArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95)}, byteArray0);
      
      boolean boolean0 = true;
      String string1 = Utility.printArray((Object[]) constantArray0, true);
      assertNotNull(string1);
      assertEquals("{}", string1);
      assertEquals(0, constantArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.replace("Z>9LGek431>fD?F|mL@", "=", "]Ib/d}7L2#;/7");
      assertNotNull(string2);
      assertEquals("Z>9LGek431>fD?F|mL@", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Utility.methodTypeToSignature("getfield", (String[]) null);
      assertNotNull(string3);
      assertEquals("()Lgetfield;", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = "8{";
      Code code0 = null;
      try {
        code0 = new Code(181, (byte) (-95), byteSequence0, constantPool1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Code", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("E2$>woU", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E2$>woU'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      int int0 = 1753;
      boolean boolean0 = true;
      String string0 = Utility.format(1753, 1753, true, '-');
      assertNotNull(string0);
      
      String string1 = Utility.convertString("yl4J%?UXVH&<P(2aGe");
      assertNotNull(string1);
      assertEquals("yl4J%?UXVH&<P(2aGe", string1);
      assertFalse(string1.equals((Object)string0));
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte byte0 = (byte)47;
      String string2 = Utility.convertString("~21hFa#?");
      assertNotNull(string2);
      assertEquals("~21hFa#?", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = Utility.fillup("", 176, false, '-');
      assertNotNull(string3);
      assertEquals("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, 176, (-979));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 756, 756, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      assertNotNull(constantDouble0);
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.clone();
      assertNotNull(constantDouble1);
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1.0), constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte)103;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)40, (byte)0, (byte) (-99), (byte) (-94), (byte)56, (byte) (-82), (byte)103}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)40, (byte)0, (byte) (-99), (byte) (-94), (byte)56, (byte) (-82), (byte)103}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("dup_x1", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)40, (byte)0, (byte) (-99), (byte) (-94), (byte)56, (byte) (-82), (byte)103}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(72);
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(72, constantInteger0.getBytes());
      
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      assertNotNull(constantInteger1);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(72, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals(72, constantInteger1.getBytes());
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      constantArray0[0] = (Constant) constantInteger1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1), 67);
      assertNotNull(constantMethodref0);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-1), constantMethodref0.getClassIndex());
      assertEquals(67, constantMethodref0.getNameAndTypeIndex());
      
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotNull(constantPool2);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantPool2.getLength());
      assertEquals(2, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)24, (byte) (-96), (byte) (-55), (byte)41, (byte)96}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(5, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)24, (byte) (-96), (byte) (-55), (byte)41, (byte)96}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool2, true);
      assertNotNull(string0);
      assertEquals("dload\t\t%160", string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertEquals(2, byteSequence1.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantPool2.getLength());
      assertEquals(2, constantArray0.length);
      assertEquals(5, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertArrayEquals(new byte[] {(byte)24, (byte) (-96), (byte) (-55), (byte)41, (byte)96}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = Utility.accessToString((-1245));
      assertNotNull(string0);
      assertEquals("public private synchronized native interface strictfp synthetic annotation enum", string0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(313, (-1245));
      assertNotNull(constantFieldref0);
      assertEquals((-1245), constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(313, constantFieldref0.getClassIndex());
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotNull(constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 313, (-1531));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("faload", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-89), (byte)88, (byte)88}, byteArray0);
      
      long long0 = byteSequence0.skip(1L);
      assertEquals(1L, long0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-89), (byte)88, (byte)88}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("goto\t\t#22617", string0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-89), (byte)88, (byte)88}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = "char";
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("char", false);
      assertNotNull(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)99, (byte)104, (byte)97, (byte)114}, byteArray0);
      
      String string1 = "\"";
      try { 
        Utility.methodSignatureArgumentTypes("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "T";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = Utility.format(3423, 1753, false, 'u');
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)12;
      ConstantDouble constantDouble0 = new ConstantDouble(3302.08);
      assertNotNull(constantDouble0);
      assertEquals(3302.08, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantDouble0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      assertNotNull(constantMethodType0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(0, constantMethodType0.getDescriptorIndex());
      
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantDouble0;
      constantArray0[4] = (Constant) constantDouble0;
      constantArray0[5] = (Constant) constantDouble0;
      constantArray0[6] = (Constant) constantDouble0;
      constantArray0[7] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantPool1.getLength());
      assertEquals(8, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)122, (byte)42, (byte)32, (byte)12, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertNotNull(constantPool2);
      assertEquals(8, constantPool2.getLength());
      assertEquals(8, constantArray0.length);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      String string1 = constantPool0.constantToString(constantArray0[7]);
      assertNotNull(string1);
      assertEquals("3302.08", string1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertNotNull(string2);
      assertEquals("ishr", string2);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantPool1.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertEquals(8, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)122, (byte)42, (byte)32, (byte)12, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu3423'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = Utility.getSignature("WUUU^A]2%m(8P");
      assertNotNull(string0);
      assertEquals("LWUUU^A]2%m(8P;", string0);
      
      byte byte0 = Utility.typeOfSignature("LWUUU^A]2%m(8P;");
      assertEquals((byte)14, byte0);
      
      String string1 = Utility.accessToString((int) (byte)14);
      assertNotNull(string1);
      assertEquals("private protected static", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.format(503, (byte)14, false, '}');
      assertNotNull(string2);
      assertEquals("}}}}}}}}}}}503", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Utility.convertString("}}}}}}}}}}}503");
      assertNotNull(string3);
      assertEquals("}}}}}}}}}}}503", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string4 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string4);
      assertEquals("dup_x2", string4);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "WUUU^A]2%m(8P";
      stringArray0[1] = "WUUU^A]2%m(8P";
      stringArray0[2] = "$DwuE+%sI:";
      stringArray0[3] = "dup_x2";
      stringArray0[4] = ":vRzL5bV0d|.L-";
      String string5 = Utility.methodTypeToSignature("$DwuE+%sI:", stringArray0);
      assertNotNull(string5);
      assertEquals("(LWUUU^A]2%m(8P;LWUUU^A]2%m(8P;L$DwuE+%sI:;Ldup_x2;L:vRzL5bV0d|/L-;)L$DwuE+%sI:;", string5);
      assertEquals(5, stringArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-73);
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertEquals("02 4c 4c 63 00 55 b7", string0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)76, (byte)76, (byte)99, (byte)0, (byte)85, (byte) (-73)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)85, (int) (byte)2, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = Utility.accessToString((-1269));
      assertNotNull(string0);
      assertEquals("public private static native interface strictfp synthetic annotation enum", string0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1269), (-1269));
      assertNotNull(constantFieldref0);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-1269), constantFieldref0.getNameAndTypeIndex());
      assertEquals((-1269), constantFieldref0.getClassIndex());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("public private static native interface strictfp synthetic annotation enum", false);
      assertNotNull(byteArray0);
      assertEquals(73, byteArray0.length);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1269), (-1269), false);
      assertNotNull(string1);
      assertEquals("0:    irem\n1:    lneg\n2:    fadd\n3:    idiv\n4:    lmul\n5:    dadd\n6:    lload_2\n7:    irem\n8:    frem\n9:    lmul\n10:   fneg\n11:   ladd\n12:   ineg\n13:   lsub\n14:   lload_2\n15:   drem\n16:   ineg\n17:   ladd\n18:   ineg\n19:   lmul\n20:   dadd\n21:   lload_2\n22:   fdiv\n23:   ladd\n24:   ineg\n25:   lmul\n26:   fneg\n27:   lsub\n28:   lload_2\n29:   lmul\n30:   fdiv\n31:   ineg\n32:   lsub\n33:   frem\n34:   fsub\n35:   ladd\n36:   dadd\n37:   lsub\n38:   lload_2\n39:   drem\n40:   ineg\n41:   frem\n42:   lmul\n43:   dadd\n44:   ineg\n45:   fsub\n46:   irem\n47:   lload_2\n48:   drem\n49:   lshl\n50:   fdiv\n51:   ineg\n52:   imul\n53:   lsub\n54:   ineg\n55:   lmul\n56:   dadd\n57:   lload_2\n58:   ladd\n59:   fdiv\n60:   fdiv\n61:   ddiv\n62:   ineg\n63:   ladd\n64:   ineg\n65:   lmul\n66:   ddiv\n67:   fdiv\n68:   lload_2\n69:   lsub\n70:   fdiv\n71:   lneg\n72:   ldiv\n", string1);
      assertEquals(73, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      short short0 = Utility.searchOpcode(" ");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = Utility.classOrInterface(231);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-106), (byte) (-106), (byte) (-97), (byte) (-106), (byte) (-106)}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string1);
      assertEquals("fcmpg", string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-106), (byte) (-106), (byte) (-97), (byte) (-106), (byte) (-106)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals("file", uRI0.getScheme());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      
      String string0 = "4}A/KPd&W%";
      String string1 = Utility.getSignature("4}A/KPd&W%");
      assertNotNull(string1);
      assertEquals("L4}A/KPd&W%;", string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = Utility.decode("L4}A/KPd&W%;", false);
      assertNotNull(byteArray0);
      assertEquals(12, byteArray0.length);
      
      String string2 = Utility.toHexString(byteArray0);
      assertNotNull(string2);
      assertEquals("4c 34 7d 41 2f 4b 50 64 26 57 25 3b", string2);
      assertEquals(12, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 106, 197, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-87), (byte) (-50), (byte)24}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("monitorenter", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-87), (byte) (-50), (byte)24}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("K3}[(Kgut]{XD#=", false);
      assertNotNull(byteArray0);
      assertEquals(15, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "long");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(15, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("astore_0", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('m');
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = Utility.decode("D hVj79,BfC1]K", false);
      assertNotNull(byteArray0);
      assertEquals(15, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(15, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(15, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      int int0 = byteSequence0.readUnsignedByte();
      assertEquals(68, int0);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(15, byteArray0.length);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertNotNull(string0);
      assertEquals("fstore_1", string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(15, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)83;
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("$IS", string0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)8, (byte)83}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = Utility.accessToString(23);
      assertNotNull(string0);
      assertEquals("public private protected final", string0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string0);
      assertEquals("dup_x2", string0);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 91, true, 'p');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = Utility.fillup("", (-994), true, '-');
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, (-994));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("jsr");
      assertEquals((short)168, short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)0, (byte)0}, byteArray0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((byte)96);
      assertNotNull(constantDouble0);
      assertEquals(96.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.clone();
      assertNotNull(constantDouble1);
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals(96.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(96.0, constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("a$A$A", string0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertNotNull(string1);
      assertEquals("a$A$A", string1);
      assertEquals(3, byteArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)97, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)97;
      byteArray1[1] = (byte)97;
      byteArray1[2] = (byte)96;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)96}, byteArray1);
      
      try { 
        Utility.typeOfSignature("PX-N:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PX-N:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-49);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)112, (byte)125, (byte) (-12), (byte) (-49)}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string0);
      assertEquals("irem", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)112, (byte)125, (byte) (-12), (byte) (-49)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = Utility.accessToString((-4283));
      assertNotNull(string0);
      assertEquals("public protected volatile native interface abstract strictfp annotation enum", string0);
      
      String string1 = Utility.format((-4283), (-4283), false, '}');
      assertNotNull(string1);
      assertEquals("-4283", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.convertString("M&YWaU=7f-8X>)");
      assertNotNull(string2);
      assertEquals("M&YWaU=7f-8X>)", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string3 = Utility.replace("-4283", "public protected volatile native interface abstract strictfp annotation enum", "public protected volatile native interface abstract strictfp annotation enum");
      assertNotNull(string3);
      assertEquals("-4283", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = "Eb!cRIUn\"),jmfM";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Eb!cRIUn\"),jmfM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Eb!cRIUn\"),jmfM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = Utility.fillup("[&\"", 1753, true, '-');
      assertNotNull(string0);
      
      short short0 = Utility.searchOpcode(string0);
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.convertString(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file", uRI0.getScheme());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = Utility.classOrInterface(231);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      String string1 = Utility.getSignature("class");
      assertNotNull(string1);
      assertEquals("Lclass;", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Lclass;", "class", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-56), (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8,9Z6$eThw~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8,9Z6$eThw~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      int int0 = 59;
      int int1 = Utility.setBit(59, 59);
      assertEquals(134217787, int1);
      assertFalse(int1 == int0);
      
      String string0 = Utility.accessToString((-487));
      assertNotNull(string0);
      assertEquals("public static final interface abstract strictfp synthetic annotation enum", string0);
      
      String string1 = "byte";
      try { 
        Utility.typeOfMethodSignature("!^a [#k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: !^a [#k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = Utility.classOrInterface(231);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("class");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("class", constantUtf8_0.getBytes());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("class");
      assertNotNull(constantUtf8_1);
      assertEquals("class", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      
      ConstantLong constantLong0 = new ConstantLong((byte) (-19));
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-19L), constantLong0.getBytes());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(3, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      byteSequence1.close();
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(3, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence1);
      assertNotNull(dataInputStream0);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(3, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence1);
      assertNotNull(constantMethodType0);
      assertEquals(2, byteSequence1.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(34429, constantMethodType0.getDescriptorIndex());
      assertEquals(3, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertNotNull(constantMethodType1);
      assertEquals(2, byteSequence1.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(34429, constantMethodType0.getDescriptorIndex());
      assertEquals(34429, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(3, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertEquals(4, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string1 = Utility.codeToString(byteSequence1, constantPool1, true);
      assertNotNull(string1);
      assertEquals("<illegal opcode>", string1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertEquals(3, byteSequence1.getIndex());
      assertEquals(3, byteArray0.length);
      assertEquals(4, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)125, (byte) (-19)}, byteArray0);
      
      String string2 = Utility.printArray((Object[]) constantArray0, true);
      assertNotNull(string2);
      assertEquals("{CONSTANT_Utf8[1](\"class\"), null, null, null}", string2);
      assertEquals(4, constantArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = Utility.replace("{CONSTANT_Utf8[1](\"class\"), null, null, null}", "pRsvcq$s*fe~!28,O,A", "{CONSTANT_Utf8[1](\"class\"), null, null, null}");
      assertNotNull(string3);
      assertEquals("{CONSTANT_Utf8[1](\"class\"), null, null, null}", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{CONSTANT_Utf8[1](\"class\"), null, null, null}";
      stringArray0[1] = "{[";
      stringArray0[2] = "{CONSTANT_Utf8[1](\"class\"), null, null, null}";
      stringArray0[3] = "{CONSTANT_Utf8[1](\"class\"), null, null, null}";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("<illegal opcode>", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)89, (byte) (-11), (byte)92, (byte)106, (byte) (-128), (byte)0, (byte)0}, byteArray0);
      
      long long0 = byteSequence0.skip(1L);
      assertEquals(1L, long0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)89, (byte) (-11), (byte)92, (byte)106, (byte) (-128), (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("dup", string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)89, (byte) (-11), (byte)92, (byte)106, (byte) (-128), (byte)0, (byte)0}, byteArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)67;
      objectArray0[1] = (Object) (byte)106;
      objectArray0[2] = (Object) (byte)92;
      objectArray0[3] = (Object) (byte) (-128);
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertEquals("{67, 106, 92, -128}", string1);
      assertEquals(4, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-67);
      byteArray0[0] = (byte) (-67);
      byteArray0[3] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1716), (-1716));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 785, 64, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)110;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)110}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)110}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(1, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)110}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("fdiv", string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(1, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)110}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte) (-102), (byte)7, (byte)7, (byte)7}, byteArray0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(1799, constantInvokeDynamic0.getClassIndex());
      assertEquals((-26105), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(1799, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte) (-102), (byte)7, (byte)7, (byte)7}, byteArray0);
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertNotNull(constantInvokeDynamic1);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(1799, constantInvokeDynamic0.getClassIndex());
      assertEquals((-26105), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(1799, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-26105), constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals(1799, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertEquals(1799, constantInvokeDynamic1.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals(6, byteArray0.length);
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte) (-102), (byte)7, (byte)7, (byte)7}, byteArray0);
      
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotNull(constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantPool2.getLength());
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(6, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte) (-102), (byte)7, (byte)7, (byte)7}, byteArray0);
      
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      assertNotNull(constantPool3);
      assertEquals(0, constantPool3.getLength());
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      
      char char0 = byteSequence1.readChar();
      assertEquals('\u0707', char0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(2, byteSequence1.getIndex());
      assertEquals(6, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte) (-102), (byte)7, (byte)7, (byte)7}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool3, true);
      assertNotNull(string0);
      assertEquals("ifne\t\t#1801", string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool0);
      assertEquals(5, byteSequence1.getIndex());
      assertEquals(0, constantPool3.getLength());
      assertEquals(0, constantArray0.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte) (-102), (byte)7, (byte)7, (byte)7}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("ifne\t\t#1801");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifne\t\t#1801'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.methodTypeToSignature("", (String[]) null);
      assertNotNull(string0);
      assertEquals("()L;", string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)40}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("dload_2", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)40}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = Utility.format(3429, 1753, true, 'u');
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-61)}, byteArray0);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-61);
      byteArray1[1] = (byte) (-61);
      byteArray1[2] = (byte)67;
      byteArray1[3] = (byte) (-95);
      byteArray1[4] = (byte) (-61);
      byteArray1[5] = (byte) (-61);
      byteArray1[6] = (byte) (-61);
      byteArray1[7] = (byte) (-65);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-61), (byte) (-61), (byte)67, (byte) (-95), (byte) (-61), (byte) (-61), (byte) (-61), (byte) (-65)}, byteArray1);
      
      ConstantPool constantPool0 = null;
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertNotNull(string1);
      assertEquals("monitorexit", string1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(8, byteArray1.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-61), (byte) (-61), (byte)67, (byte) (-95), (byte) (-61), (byte) (-61), (byte) (-61), (byte) (-65)}, byteArray1);
      
      try { 
        Utility.typeOfMethodSignature("if_acmpeq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_acmpeq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("K3}[(Kgut]{XD#=", false);
      assertNotNull(byteArray0);
      assertEquals(15, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "long");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(15, byteArray0.length);
      
      int int0 = byteSequence0.readUnsignedByte();
      assertEquals(75, int0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(15, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string0);
      assertEquals("baload", string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(15, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 75, 75, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t\t";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("SourceFile: ", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.clone();
      assertNotNull(constantDouble1);
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertEquals((-1.0), constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(1, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0}, byteArray0);
      
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(7, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      short short0 = Utility.searchOpcode("invokeinterface");
      assertEquals((short)185, short0);
      
      byte[] byteArray1 = Utility.decode("dreturn", false);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)100, (byte)114, (byte)101, (byte)116, (byte)117, (byte)114, (byte)110}, byteArray1);
      
      String string0 = Utility.convertString("63WhG/rZA`4");
      assertNotNull(string0);
      assertEquals("63WhG/rZA`4", string0);
      
      String string1 = Utility.replace("char", "dreturn", "\t\t<");
      assertNotNull(string1);
      assertEquals("char", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.printArray((Object[]) null, true);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"A~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"A~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = Utility.fillup("", (-994), true, '-');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Utility.getSignature("");
      assertNotNull(string1);
      assertEquals("L;", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.signatureToString("L;");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertEquals("00 00 00", string0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      assertEquals(6, constantArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-4);
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(6, constantPool0.getLength());
      assertEquals(6, constantPool1.getLength());
      assertEquals(6, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-202), (-1137), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(72);
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(72, constantInteger0.getBytes());
      
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      assertNotNull(constantInteger1);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(72, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals(72, constantInteger1.getBytes());
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      constantArray0[0] = (Constant) constantInteger1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1), 67);
      assertNotNull(constantMethodref0);
      assertEquals((-1), constantMethodref0.getClassIndex());
      assertEquals(67, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotNull(constantPool2);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantPool2.getLength());
      assertEquals(2, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-55);
      String string0 = Utility.signatureToString("INSENSITIVE", true);
      assertNotNull(string0);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short short0 = Utility.searchOpcode("_u'kF2p0l");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.compactClassName("isub", "impdep2", false);
      assertNotNull(string0);
      assertEquals("isub", string0);
      
      int int0 = Utility.setBit((byte)0, (-817));
      assertEquals(32768, int0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("impdep2", "W+?", "isub", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: impdep2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      try { 
        Utility.typeOfSignature("org.apache.bcel.classfile.Utility");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = Utility.accessToString((-1245));
      assertNotNull(string0);
      assertEquals("public private synchronized native interface strictfp synthetic annotation enum", string0);
      
      byte byte0 = Utility.typeOfSignature("ZsYyIKJhb-N@`vem'");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = Utility.replace("\t\t<", "\t\t<", (String) null);
      assertNotNull(string0);
      assertEquals("null", string0);
      
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-92)}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(1, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-92)}, byteArray0);
      
      boolean boolean0 = byteSequence1.markSupported();
      assertTrue(boolean0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(1, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-92)}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('=');
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("if_icmpeq", false);
      assertNotNull(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)95, (byte)105, (byte)99, (byte)109, (byte)112, (byte)101, (byte)113}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)95, (byte)105, (byte)99, (byte)109, (byte)112, (byte)101, (byte)113}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)95, (byte)105, (byte)99, (byte)109, (byte)112, (byte)101, (byte)113}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotNull(string0);
      assertEquals("lmul", string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)95, (byte)105, (byte)99, (byte)109, (byte)112, (byte)101, (byte)113}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)83, (byte) (-30), (byte) (-45), (byte) (-45), (byte) (-116)}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("aastore", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)83, (byte) (-30), (byte) (-45), (byte) (-45), (byte) (-116)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('q');
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("dreturn", "dreturn", false);
      assertNotNull(string0);
      assertEquals("dreturn", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-90), (byte)87, (byte)0, (byte) (-1), (byte) (-32), (byte)13, (byte)90}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean1 = false;
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotNull(string1);
      assertEquals("if_acmpne\t\t#22272", string1);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(7, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-90), (byte)87, (byte)0, (byte) (-1), (byte) (-32), (byte)13, (byte)90}, byteArray0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(7, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-90), (byte)87, (byte)0, (byte) (-1), (byte) (-32), (byte)13, (byte)90}, byteArray0);
      
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('6');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = Utility.compactClassName("HUUR^sA]2;%m(85");
      assertNotNull(string0);
      assertEquals("HUUR^sA]2;%m(85", string0);
      
      try { 
        Utility.typeOfSignature("HUUR^sA]2;%m(85");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HUUR^sA]2;%m(85
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":vRzL5bV0d|.L-";
      String string0 = Utility.methodTypeToSignature(":vRzL5bV0d|.L-", stringArray0);
      assertNotNull(string0);
      assertEquals("(L:vRzL5bV0d|/L-;)L:vRzL5bV0d|/L-;", string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byte[] byteArray1 = Utility.decode("System", false);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)83, (byte)121, (byte)115, (byte)116, (byte)101, (byte)109}, byteArray1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("QUsh;bTAo(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QUsh;bTAo('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      short short0 = Utility.searchOpcode("char");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart(')');
      assertFalse(boolean0);
      
      String string0 = Utility.accessToString((int) (byte)0, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)42;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)42, (byte)0, (byte)51, (byte) (-66), (byte)1}, byteArray0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((byte)51);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(51.0, constantDouble0.getBytes(), 0.01);
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.clone();
      assertNotNull(constantDouble1);
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(51.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals(51.0, constantDouble1.getBytes(), 0.01);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(6, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)64, (byte)42, (byte)0, (byte)51, (byte) (-66), (byte)1}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("lstore_1", string0);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertArrayEquals(new byte[] {(byte)64, (byte)42, (byte)0, (byte)51, (byte) (-66), (byte)1}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 89, 1815);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = Utility.convertString("dstore_3");
      assertNotNull(string0);
      assertEquals("dstore_3", string0);
      
      String string1 = Utility.format((-4283), 227, false, '-');
      assertNotNull(string1);
      assertEquals("-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------4283", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.accessToString((-4283), false);
      assertNotNull(string2);
      assertEquals("public protected volatile native interface abstract strictfp annotation enum", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = Utility.fillup(".XwP[U@", 255, false, 'G');
      assertNotNull(string3);
      assertEquals("GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG.XwP[U@", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 46, 1468);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = Utility.convertString("dstoe_3");
      assertNotNull(string0);
      assertEquals("dstoe_3", string0);
      
      String string1 = Utility.accessToString((-4283));
      assertNotNull(string1);
      assertEquals("public protected volatile native interface abstract strictfp annotation enum", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = Utility.clearBit((-544), (-4283));
      assertEquals((-576), int0);
      
      String string2 = Utility.replace("dstoe_3", "o/DluEI~KM!\\", "public protected volatile native interface abstract strictfp annotation enum");
      assertNotNull(string2);
      assertEquals("dstoe_3", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = Utility.fillup("exGx;9qp63xxB", 220, false, 'G');
      assertNotNull(string3);
      assertEquals("GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGexGx;9qp63xxB", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("E2$>woU", "E2$>woU", "E2$>woU", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E2$>woU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("4D9$?jf3C", false);
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)68, (byte)57, (byte)0, (byte)106, (byte)102, (byte)51, (byte)67}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)68, (byte)57, (byte)0, (byte)106, (byte)102, (byte)51, (byte)67}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      assertNotNull(dataInputStream0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)68, (byte)57, (byte)0, (byte)106, (byte)102, (byte)51, (byte)67}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[0] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.methodSignatureReturnType("OVdu(DWWeF<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OVdu(DWWeF<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = Utility.getSignature("*eNAzle$");
      assertNotNull(string0);
      assertEquals("L*eNAzle$;", string0);
      
      try { 
        Utility.typeOfSignature("*eNAzle$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: eNAzle$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-73);
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertEquals("02 4c 79 63 00 55 b7", string0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)76, (byte)121, (byte)99, (byte)0, (byte)85, (byte) (-73)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)85, (int) (byte)121, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String string0 = "WUUU^Ac2%m(8P";
      // Undeclared exception!
      try { 
        Utility.signatureToString("WUUU^Ac2%m(8P", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WUUU^Ac2%m(8P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = "dstore_3";
      String string1 = Utility.convertString("dstore_3");
      assertNotNull(string1);
      assertEquals("dstore_3", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.accessToString(90);
      assertNotNull(string2);
      assertEquals("private static final volatile", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = true;
      String string3 = Utility.compactClassName("dstore_3", "dstore_3", true);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dstore_3");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-998), 40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(7, byteArray0.length);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-221), 192, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('q');
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("dreturn", "dreturn", false);
      assertNotNull(string0);
      assertEquals("dreturn", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-101), (byte) (-92)}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = Utility.accessToString(3);
      assertNotNull(string0);
      assertEquals("public private", string0);
      
      String string1 = Utility.accessToString(917, false);
      assertNotNull(string1);
      assertEquals("public protected final transient native interface", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.fillup("public protected final transient native interface", 3474, false, 'N');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      try { 
        Utility.methodSignatureReturnType(string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public protected final transient native interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      short short0 = Utility.searchOpcode("breakpoint");
      assertEquals((short)202, short0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = Utility.accessToString((-1245));
      assertNotNull(string0);
      assertEquals("public private synchronized native interface strictfp synthetic annotation enum", string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("<illegal opcode>");
      assertEquals((short)203, short0);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((short)203);
      assertNotNull(constantMethodType0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(203, constantMethodType0.getDescriptorIndex());
      
      ConstantMethodType constantMethodType1 = (ConstantMethodType)constantMethodType0.copy();
      assertNotNull(constantMethodType1);
      assertNotSame(constantMethodType0, constantMethodType1);
      assertNotSame(constantMethodType1, constantMethodType0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(203, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(203, constantMethodType1.getDescriptorIndex());
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertNotNull(constantPool2);
      assertEquals(2, constantPool2.getLength());
      assertEquals(2, constantArray0.length);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      String string1 = constantPool2.toString();
      assertNotNull(string1);
      assertEquals("1)CONSTANT_Double[6](bytes = -1.0)\n", string1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(2, constantPool2.getLength());
      assertEquals(2, constantArray0.length);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)46;
      String string2 = Utility.codeToString(byteArray0, constantPool1, (-1245), 2647);
      assertNotNull(string2);
      assertEquals("0:    iaload\n1:    iaload\n2:    wide\t(wide)\n3:    iaload\n4:    iaload\n5:    iaload\n", string2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantArray0.length);
      assertEquals(6, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte) (-60), (byte)46, (byte)46, (byte)46}, byteArray0);
      
      short short1 = Utility.searchOpcode("public private synchronized native interface strictfp synthetic annotation enum");
      assertEquals((short) (-1), short1);
      assertFalse(short1 == short0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-83)}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 162, 44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = "[gYC$.ll>?:";
      // Undeclared exception!
      try { 
        Utility.getSignature("[gYC$.ll>?:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [gYC$.ll>?:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = Utility.convertString("lshl");
      assertNotNull(string0);
      assertEquals("lshl", string0);
      
      String string1 = Utility.classOrInterface(26666);
      assertNotNull(string1);
      assertEquals("class", string1);
      assertFalse(string1.equals((Object)string0));
      
      short short0 = Utility.searchOpcode("class");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = false;
      String string2 = Utility.accessToString(201, false);
      assertNotNull(string2);
      assertEquals("public static volatile transient", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = Utility.clearBit((short) (-1), (short) (-1));
      assertEquals(Integer.MAX_VALUE, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)95;
      byteArray0[8] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)70, (byte) (-124), (byte)0, (byte) (-24), (byte)58, (byte) (-41), (byte)62, (byte)95, (byte) (-58)}, byteArray0);
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)74;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-68), (byte)74}, byteArray0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("$K$bcJ", string0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-68), (byte)74}, byteArray0);
      
      String string1 = Utility.fillup("f2l", 0, true, 'C');
      assertNotNull(string1);
      assertEquals("f2l", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = Utility.clearBit((byte)74, 3717);
      assertEquals(74, int0);
      
      String string2 = Utility.compactClassName("uYWc>Fg}1");
      assertNotNull(string2);
      assertEquals("uYWc>Fg}1", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "", "uYWc>Fg}1", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String string0 = Utility.accessToString(190, true);
      assertNotNull(string0);
      assertEquals("private protected static final transient", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('B');
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("private protected static final transient", "org.apache.bcel.classfile.SimpleElementValue", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byte byte0 = (byte) (-126);
      int int0 = new Integer(503);
      assertEquals(503, int0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.replace("?jWFjW[m8E", (String) null, "rirN1pU]Hp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("'BP]kWUmIQ>lJ[}^a");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String string0 = "kq!}NT]";
      Utility.searchOpcode("kq!}NT]");
      Utility.isSet((short) (-1), 77);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)54;
      try { 
        pipedOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Utility.searchOpcode("");
      Utility.convertString("multianewarray");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Utility.classOrInterface((short) (-1));
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("@:3Qu*)$n=Onr", "PShC?[O(7?Jab(", "PShC?[O(7?Jab(");
      Utility.getSignature("@:3Qu*)$n=Onr");
      Utility.convertString("if_acmpne");
      Utility.signatureToString("L@:3Qu*)$n=Onr;", false);
      Utility.classOrInterface((-2059));
      try { 
        Utility.typeOfSignature("@:3Qu*)$n=Onr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @:3Qu*)$n=Onr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t\t";
      stringArray0[1] = "char";
      Utility.methodTypeToSignature("\t\t", stringArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)58;
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      String string0 = Utility.classOrInterface(231);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(62, 231);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "short";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      String string0 = "^V,2Z-r[:H1\\C";
      try { 
        Utility.methodSignatureToString("^V,2Z-r[:H1C", "^V,2Z-r[:H1C", "^V,2Z-r[:H1C", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^V,2Z-r[:H1C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Utility.accessToString((-1245));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.searchOpcode("<illegal opcode>");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-60);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 43, 90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)42;
      byteArray0[6] = (byte)42;
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String string0 = Utility.compactClassName("WUUU^A]2%m(8P");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Utility.compactClassName("dstore_3");
      String string0 = Utility.replace("dstore_3", "dstore_3", "dstore_3");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpne\t\t#27453", string0);
      
      short short0 = Utility.searchOpcode("#{X8[");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), (int) (byte) (-86), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lload_2
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      String string0 = Utility.getSignature("short");
      assertEquals("S", string0);
      
      String string1 = Utility.replace("short", "S", "S");
      assertEquals("short", string1);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      String string0 = Utility.format((byte) (-75), (byte) (-75), false, '&');
      assertEquals("-75", string0);
      
      String string1 = Utility.getSignature("4+ZV48C>|YO~^9AnT");
      assertEquals("L4+ZV48C>|YO~^9AnT;", string1);
      
      String string2 = Utility.convertString("4+ZV48C>|YO~^9AnT");
      assertEquals("4+ZV48C>|YO~^9AnT", string2);
      
      String string3 = Utility.signatureToString("Byte code error: ", false);
      assertEquals("byte", string3);
      
      byte[] byteArray1 = Utility.decode("iload", false);
      assertArrayEquals(new byte[] {(byte)105, (byte)108, (byte)111, (byte)97, (byte)100}, byteArray1);
      
      Utility.fillup("", 3418, false, 'f');
      short short0 = Utility.searchOpcode("<illegal opcode>");
      assertEquals((short)203, short0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "monitorexit";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "org.apache.bcel.classfile.Field$1", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String string0 = Utility.format(3484, 1753, false, 'u');
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)32;
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      // Undeclared exception!
      Utility.methodTypeToSignature(string0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      String string0 = Utility.getSignature("'");
      assertEquals("L';", string0);
      
      byte byte0 = Utility.typeOfSignature("Sensitive");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("Ag^xH HP2f6P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ag^xH HP2f6P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("5");
      Utility.getSignature("5");
      Utility.format((-1315), (-1315), true, '}');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 61, (int) (byte)120);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("^;5", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureToString("mon`torexit", "", "]?*cB", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: mon`torexit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Utility.isJavaIdentifierPart('q');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte)66;
      byteArray0[8] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      String string0 = Utility.accessToString((-1269));
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1269), (-1269));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Utility.getSignature("WUUU^A]2%m(8P");
      Utility.replace("LWUUU^A]2%m(8P;", "LWUUU^A]2%m(8P;", "WUUU^A]2%m(8P");
      // Undeclared exception!
      try { 
        Utility.signatureToString("WUUU^A]2%m(8P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WUUU^A]2%m(8P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Utility.classOrInterface(0);
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Utility.accessToString((-1245));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.searchOpcode("<illegal opcode>");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-60);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 43, 90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      String string0 = Utility.accessToString((int) (byte) (-1));
      assertEquals("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.format((byte) (-1), 791, true, 'U');
      assertEqualsstring1);
      
      String[] stringArray0 = new String[0];
      String string2 = Utility.methodTypeToSignature(" 8?q3n,O]v|*t1^7OGp", stringArray0);
      assertEquals("()L8?q3n,O]v|*t1^7OGp;", string2);
      
      short short0 = Utility.searchOpcode("j+G$oa#e2i8HbC{b~mX");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      String string0 = Utility.accessToString((-1245));
      ConstantFieldref constantFieldref0 = new ConstantFieldref(313, (-1245));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref0;
      Utility.decode("public private synchronized native interface strictfp synthetic annotation enum", false);
      ConstantInteger constantInteger0 = new ConstantInteger((-1245));
      ConstantInteger constantInteger1 = new ConstantInteger((-1245));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-81));
      constantDouble0.clone();
      byteSequence0.close();
      String string0 = "1j^js9";
      Utility.compactClassName("Ls:G72>1*.2", "1j^js9", true);
      try { 
        Utility.typeOfMethodSignature("(reference_kind = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (reference_kind = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = Utility.typeOfSignature("FGv");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      String string0 = Utility.accessToString((-4283));
      assertEquals("public protected volatile native interface abstract strictfp annotation enum", string0);
      
      String string1 = Utility.format((-4283), (-363), true, '}');
      assertEquals("-4283", string1);
      
      Utility.accessToString((-3945));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart('}');
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("-4283", false);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteArray0, constantPool1, (-4283), (-4283));
      assertEquals("0:    aload_3\n1:    caload\n2:    aaload\n3:    fstore\t\t%51\n", string2);
      assertArrayEquals(new byte[] {(byte)45, (byte)52, (byte)50, (byte)56, (byte)51}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-113);
      byteArray0[2] = (byte) (-113);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(76, (-1450));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Utility.clearBit(0, 0);
      MockFile mockFile0 = new MockFile("isub");
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      boolean boolean1 = false;
      MockPrintStream mockPrintStream0 = new MockPrintStream("isub");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("isub");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "isub";
      objectArray0[1] = (Object) mockFileOutputStream0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, ".>5", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", (String) null, "}&UEBH~$%KyCGOg7Uwk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CONSTANT_NameAndType");
      assertEquals((byte)5, byte0);
      
      short short0 = Utility.searchOpcode("CONSTANT_NameAndType");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("fload_1", string0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = Utility.clearBit((-1994), (-2276));
      assertEquals((-268437450), int0);
      
      String string0 = Utility.replace("getstatic", "getstatic", "CV");
      assertEquals("CV", string0);
      
      Utility.signatureToString("CV");
      String string1 = Utility.classOrInterface((byte) (-19));
      assertEquals("interface", string1);
      
      String string2 = Utility.accessToString((int) (byte) (-19), false);
      assertEquals("public protected static synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Utility.accessToString((-1245));
      ConstantFieldref constantFieldref0 = new ConstantFieldref(313, (-1245));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("areturn", string0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Utility.getSignature("WUUU^A]2%m(8P");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      String string0 = Utility.compactClassName("WUUU^A]2%m(8P");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence1);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantMethodType1;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[3] = (Constant) constantMethodType1;
      constantArray0[4] = (Constant) constantMethodType1;
      constantArray0[5] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence2, constantPool1, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      String string0 = Utility.convertString("5");
      assertEquals("5", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.signatureToString("JVmU*&_{fO[tz<", true);
      assertEquals("long", string1);
      
      byte[] byteArray1 = Utility.decode("RVnl ", false);
      assertArrayEquals(new byte[] {(byte)82, (byte)86, (byte)110, (byte)108, (byte)32}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "s.&SnIeF:V", "s.&SnIeF:V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Utility.convertString("dstore_3");
      Utility.accessToString((-4283));
      Utility.format((-4283), (-4283), true, '}');
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      constantDouble0.clone();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte) (-39);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 89, 4096);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 12505. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Utility.signatureToString("JdZ61", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte) (-117);
      byteArray0[8] = (byte) (-36);
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureReturnType("R ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-114);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("d2i", string0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(1L);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-57);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifnonnull\t\t#-15667", string0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Utility.convertString("dstore_3");
      Utility.accessToString((-4283));
      Utility.format((-4283), (-4283), false, '}');
      Utility.convertString("M&YWaU=7f-8X>)");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 214, 45, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble((byte)72);
      constantDouble0.clone();
      String string0 = Utility.getSignature("1,Zhv8B6^,b");
      assertEquals("L1,Zhv8B6^,b;", string0);
      
      String string1 = Utility.methodSignatureReturnType("Invalid signature: `");
      assertEquals("int", string1);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.searchOpcode("ifge");
      Utility.compactClassName("goto", "if_icmplt", false);
      Utility.setBit(71, 80);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("impdep2", "f2d", "\t(wide)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: impdep2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[3] = (byte) (-86);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('&');
      assertFalse(boolean0);
      
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("Uf,}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Uf,}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      String string0 = Utility.classOrInterface(231);
      assertEquals("class", string0);
      
      int int0 = Utility.setBit((-3472), (-3472));
      assertEquals((-3472), int0);
      
      byte[] byteArray0 = Utility.decode("class", false);
      assertArrayEquals(new byte[] {(byte)99, (byte)108, (byte)97, (byte)115, (byte)115}, byteArray0);
      
      byte byte0 = Utility.typeOfSignature("LE");
      assertEquals((byte)14, byte0);
      
      byte byte1 = Utility.typeOfSignature("F,.t<%3Q");
      assertEquals((byte)6, byte1);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "-9y.Nf8v", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.copy();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)34;
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-77), (int) (byte)97, true);
      assertEquals("0:    <illegal opcode>\n1:    ladd\n2:    fload_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Utility.accessToString(243);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("h", "I1xGpEL_oV?}*M", "h", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("[L{CONSTANT_Utf8;V");
      assertEquals("[L{CONSTANT_Utf8;V", string0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Utility.compactClassName("WUUU^A]2%m(8P");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-66));
      constantDouble0.clone();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("iushr", string0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("E2$>woU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E2$>woU'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      int int0 = Utility.setBit(806, 806);
      assertEquals(870, int0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      String string0 = "";
      Utility.fillup("", (-994), true, '-');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, (-994));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Utility.accessToString((-1708));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byte[] byteArray0 = Utility.decode("protected final volatile native strictfp synthetic annotation enum", false);
      Utility.typeOfSignature("TCoXu1VS}nn'L[Rsx6e");
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("TCoXu1VS}nn'L[Rsx6e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TCoXu1VS}nn'L[Rsx6e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Utility.decode("WUUUA^]%m(8P", false);
      try { 
        Utility.typeOfSignature("-k52`ifs3p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -k52`ifs3p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      Utility.isJavaIdentifierPart('.');
      String[] stringArray0 = new String[3];
      stringArray0[0] = "g4GnW|fI}>6td[";
      stringArray0[1] = "g4GnW|fI}>6td[";
      stringArray0[2] = "4L4;?-!)JcD_I";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("g4GnW|fI}>6td[", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("dcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip((byte) (-83));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-113);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-113);
      byteArray0[6] = (byte)118;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-113), (int) (byte)118, false);
      assertEquals("0:    d2l\n1:    nop\n2:    d2l\n3:    d2l\n4:    nop\n5:    nop\n6:    fneg\n", string0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-66);
      byteArray1[1] = (byte)44;
      byteArray1[2] = (byte) (-91);
      byteArray1[3] = (byte) (-77);
      byteArray1[4] = (byte) (-109);
      byteArray1[5] = (byte)102;
      byteArray1[6] = (byte)44;
      byteArray1[7] = (byte)110;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence2.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aload_2", string0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = Utility.decode("WUUUA]%m(8", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)42;
      byteArray0[3] = (byte)51;
      Utility.decode("`$%^h,${T..s(-@<8,!", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5hQw7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5hQw7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-90);
      byteArray0[1] = (byte) (-103);
      byteArray0[0] = (byte) (-90);
      byteArray0[3] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_acmpne\t\t#-26202", string0);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Utility.classOrInterface(231);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-19);
      String string0 = "instanceof";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "instanceof";
      stringArray0[1] = "class";
      stringArray0[2] = "class";
      stringArray0[3] = "class";
      stringArray0[4] = "class";
      Utility.methodTypeToSignature("instanceof", stringArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte) (-122);
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "instanceof";
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) constantPool0;
      objectArray0[5] = (Object) "class";
      Object object0 = new Object();
      objectArray0[6] = object0;
      // Undeclared exception!
      try { 
        Utility.printArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Utility.accessToString((int) (byte) (-1));
      Utility.searchOpcode("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum");
      Utility.accessToString(31);
      int int0 = 2828;
      Utility.format(2828, (short) (-1), false, 'l');
      boolean boolean0 = true;
      Utility.accessToString(2828, true);
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 169, true, 'N');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      String string0 = Utility.signatureToString("LWUUU^A]2%m(8P;V", true);
      assertEquals("WUUU^A]2%m(8P", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload\t\t%0", string1);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Utility.getSignature("WUUU^Ac2%m(8P");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (int) (byte)120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aload\t\t%242
         // 2:    ior
         // 3:    lushr
         // 4:    istore_1
         // 5:    ishl
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      String string0 = "interface";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("interface", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Utility.convertString("dstore_3");
      Utility.accessToString((-4283));
      Utility.format((-4283), (-4283), true, 'w');
      Utility.convertString("M&YWaU=7f-8X>)");
      String string0 = Utility.fillup("dstore_3", 1965, false, 'w');
      try { 
        Utility.methodSignatureArgumentTypes(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwdstore_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      int int0 = 12;
      Utility.setBit(12, 397);
      Utility.accessToString(12);
      Utility.compactClassName("short");
      Utility.convertString("goto");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName(", low = ", ", low = ", true);
      Utility.getSignature(", low = ");
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)78;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "g|.r ~T/9*AJ?j";
      stringArray0[2] = "L,;";
      stringArray0[3] = ", low = ";
      stringArray0[4] = "";
      stringArray0[5] = ", low = ";
      stringArray0[7] = "L,;";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Utility.accessToString(2700, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("protected static transient interface strictfp", "protected static transient interface strictfp", "protected static transient interface strictfp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: protected static transient interface strictfp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iIzcPPX5~mpF4u");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)92;
      byte byte0 = (byte) (-42);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte)84;
      byteArray0[8] = (byte)79;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("00 09 56 5c d6 4c 4f 54 4f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00 09 56 5c d6 4c 4f 54 4f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      String string0 = "w";
      boolean boolean0 = true;
      try { 
        Utility.decode("w", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("4h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("laload", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("idiv", string0);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("3os-39_$90vA5#", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(12, byteArray0.length);
      
      String string0 = Utility.methodSignatureReturnType("CONSTANT_Long");
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-46);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("d2 d2 d2", string0);
      
      String string1 = Utility.methodSignatureReturnType("Byte code error: ");
      assertEquals("byte", string1);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      int int0 = (-3194);
      Utility.isSet((-3194), (-3194));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      byte[] byteArray0 = new byte[0];
      try { 
        pipedOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      String string0 = Utility.getSignature("WUUU^A]2%m(8P");
      assertEquals("LWUUU^A]2%m(8P;", string0);
      
      byte byte0 = Utility.typeOfSignature("LWUUU^A]2%m(8P;");
      assertEquals((byte)14, byte0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = Utility.decode("LWUUU^A]2%m(8P;", false);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), 106, false);
      assertEquals("0:    astore_1\n1:    pop\n2:    castore\n3:    castore\n4:    castore\n5:    dup2_x2\n6:    lstore_2\n7:    dup2_x1\n8:    aaload\n9:    fload_3\n10:   ldiv\n11:   dload_2\n12:   fstore\t\t%80\n14:   istore_0\n", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      constantPool1.copy();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte) (-91), (int) (byte) (-91));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Utility.classOrInterface(231);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(62, 231);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Utility.accessToString((int) (byte) (-1));
      Utility.searchOpcode("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (int) (byte) (-1), true);
      Utility.accessToString((int) (byte) (-1));
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("BVrU");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Utility.convertString("dstore_3");
      Utility.accessToString((-4283));
      Utility.format((-4283), (-4283), false, '}');
      Utility.convertString("M&YWaU=7f-8X>)");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-6);
      Utility.encode(byteArray0, false);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("Nrv:Y)}dLB|0NE8`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Nrv:Y)}dLB|0NE8`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-110);
      String string0 = Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-110));
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      String string0 = ")\t";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-79);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 192, 144, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-17);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-7));
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantInteger constantInteger0 = new ConstantInteger((byte)72);
      ConstantInteger constantInteger1 = new ConstantInteger((byte)72);
      byteSequence0.close();
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      boolean boolean1 = Utility.isSet((byte)0, (byte) (-7));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility$JavaWriter", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      byteSequence1.readLong();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("imul", string0);
      assertEquals(43, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      String string0 = Utility.fillup("Jh", 162, true, '[');
      assertEquals("Jh[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[", string0);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      String string0 = "'";
      try { 
        Utility.methodSignatureReturnType("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-64);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray1 = Utility.decode("Cmu%~>&^EQs", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals(11, byteArray1.length);
      assertEquals("ldiv", string0);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      String string0 = Utility.accessToString(243);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t<");
      assertEquals("L<;", string0);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("ToXu1VS}nn'L[Rsx6e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ToXu1VS}nn'L[Rsx6e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(descriptor_index = ", "athrow", "(descriptor_index = ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `descriptor_index = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-79);
      ConstantLong constantLong0 = new ConstantLong(0L);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Constant[] constantArray0 = new Constant[18];
      constantArray0[5] = (Constant) constantLong0;
      constantArray0[7] = (Constant) constantLong0;
      constantArray0[8] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string0 = Utility.printArray((Object[]) constantArray0, false);
      assertEquals("null, null, null, null, null, CONSTANT_Long[5](bytes = 0), null, CONSTANT_Long[5](bytes = 0), CONSTANT_Long[5](bytes = 0), null, null, null, null, null, null, null, null, null", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("null, null, null, null, null, CONSTANT_Long[5](bytes = 0), null, CONSTANT_Long[5](bytes = 0), CONSTANT_Long[5](bytes = 0), null, null, null, null, null, null, null, null, null", stringArray0);
      assertEquals("()[[[Lnull,;", string1);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      String string0 = Utility.accessToString((int) (byte)12);
      assertEquals("protected static", string0);
      
      String string1 = Utility.format((byte)12, (byte)12, false, ';');
      assertEquals(";;;;;;;;;;12", string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)12;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("80 0c", string2);
      
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (int) (byte) (-128), false);
      assertEquals("0:    ior\n1:    fconst_1\n", string3);
      
      int int0 = Utility.setBit(228, (byte) (-128));
      assertEquals(229, int0);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)10;
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      int int0 = (-937);
      Utility.fillup("AT0PaA}+_qzu\"]dt.", (-937), true, 'u');
      Utility.clearBit(115, (-22));
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      Utility.accessToString(231);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.clearBit(2385, (-674));
      Utility.replace("CV", "public private protected synchronized volatile transient", "CV");
      // Undeclared exception!
      try { 
        Utility.signatureToString("[mc._$0%/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `mc._$0%/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0);
      String string0 = Utility.format(12, 12, false, 'U');
      assertEquals("UUUUUUUUUU12", string0);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "freturn";
      Utility.methodTypeToSignature("invokeinterface", stringArray0);
      Utility.format((-425), (-425), false, 'A');
      Utility.replace("freturn", "-425", ".$yM");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|AaAm$vpm0hpuTlK8l5");
      Utility.compactClassName("monitorenter", false);
      Utility.accessToString(39);
      Utility.replace("(Lfreturn;)Linvokeinterface;", "-425", "\t(wide)");
      Utility.accessToString(16384, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("monitorenter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `monitorenter'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      String string0 = Utility.format(1753, 1753, false, 'u');
      Utility.fillup("[&\"", 1753, false, '-');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)18;
      Utility.clearBit((-152), 1108);
      String string1 = Utility.compactClassName("ireturn");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(string0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (-479), 13, false);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      try { 
        Utility.typeOfSignature("WUUUA^]%m(8P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WUUUA^]%m(8P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      String string0 = Utility.convertString("YY");
      assertEquals("YY", string0);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Utility.accessToString((-1245));
      ConstantFieldref constantFieldref0 = new ConstantFieldref(313, (-1245));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref0;
      Utility.decode("public private synchronized native interface strictfp synthetic annotation enum", false);
      ConstantInteger constantInteger0 = new ConstantInteger((-1245));
      ConstantInteger constantInteger1 = new ConstantInteger((-1245));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      Utility.fillup("org.apache.bcel.classfile.Utility$JavaWriter", (byte)74, false, '+');
      try { 
        Utility.typeOfSignature("++++++++++++++++++++++++++++++org.apache.bcel.classfile.Utility$JavaWriter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility$JavaWriter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)39;
      byteArray0[6] = (byte)42;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      Utility.accessToString((int) (byte)0, true);
      Utility.fillup("", (byte)0, false, 'N');
      String[] stringArray0 = Constants.OPCODE_NAMES;
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("*eNAzle$", false);
      assertArrayEquals(new byte[] {(byte)42, (byte)101, (byte)78, (byte)65, (byte)122, (byte)108, (byte)101}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertArrayEquals(new byte[] {(byte)42, (byte)101, (byte)78, (byte)65, (byte)122, (byte)108, (byte)101}, byteArray0);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Utility.decode("laload", false);
      try { 
        Utility.typeOfSignature("()[Q,a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ()[Q,a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      Utility.clearBit(239, 239);
      Utility.replace("u", "n;#-6,?", ",zt0E");
      Utility.fillup("n;#-6,?", 2315, true, 'k');
      String string0 = Utility.printArray((Object[]) null, true, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      String string0 = Utility.convertString("*siore_3");
      Utility.accessToString((-4283));
      Utility.format((-4283), (-4283), true, '}');
      Utility.accessToString((-4283));
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.isJavaIdentifierPart('}');
      byte[] byteArray0 = Utility.decode("brapont", false);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.compactClassName("i$|~#Zv`K");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)74;
      Utility.clearBit((byte) (-68), 12);
      String string0 = "byte";
      Utility.replace("invokevirtual", "class", "byte");
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (byte)74, false, 'G');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.decode(" (", false);
      try { 
        Utility.typeOfSignature(",P#O-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,P#O-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t\t";
      String[] stringArray1 = new String[0];
      String string0 = Utility.getSignature("\t\t");
      assertEquals("L;", string0);
      
      short short0 = Utility.searchOpcode("L;");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      try { 
        Utility.decode("Dont call getValueDouble() on a non DOUBLE ElementValue", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Utility.setBit(247, 247);
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte)126;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)117, (int) (byte)126);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType1;
      constantArray0[2] = (Constant) constantMethodType1;
      constantArray0[3] = (Constant) constantMethodType0;
      constantArray0[4] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      String string0 = "HUUR^sA]2;%m(85";
      Utility.compactClassName("HUUR^sA]2;%m(85");
      try { 
        Utility.typeOfSignature("HUUR^sA]2;%m(85");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HUUR^sA]2;%m(85
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Expected class `");
      File file0 = MockFile.createTempFile("Expected class `", "f2d");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "Expected class `";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      Utility.accessToString(1185, false);
      Utility.fillup("public synchronized transient abstract", 1185, false, '&');
      Utility.compactClassName("$C,yrl#3(EJ$6`*f.", "ishr", false);
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte) (-26);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 102
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      Utility.clearBit(0, 0);
      String string0 = "isub";
      MockFile mockFile0 = new MockFile("isub");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false, "pm4;O={V&J}de5P~");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // pm4;O={V&J}de5P~
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("H+ <fD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H+ <fD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
      
      String string0 = Utility.accessToString(155);
      assertEquals("public private static final transient", string0);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      byte byte0 = (byte)78;
      String string0 = "5+f";
      try { 
        Utility.typeOfSignature("5+f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5+f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      String string0 = Utility.getSignature("*eNAzle$");
      assertEquals("L*eNAzle$;", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iinc\t\t%132\t81", string1);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      Utility.fillup("$l$8b$I$A$A$A$A$A$A$A", 92, true, 'G');
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("LgAV`%&", "", "LgAV`%&");
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Utility.compactClassName("HUUR^sA]2;%m(85");
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Utility.isJavaIdentifierPart('q');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("lload_3", string0);
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      String string0 = Utility.convertString("\"");
      assertEquals("\\\"", string0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      String string0 = Utility.getSignature("4}A/KPd&W%");
      assertEquals("L4}A/KPd&W%;", string0);
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-62);
      Utility.encode(byteArray0, false);
      Utility.encode(byteArray0, false);
      Utility.accessToString((int) (byte)0);
      String string0 = "R>i-4A]F5#b5&)$q+n\\";
      try { 
        Utility.typeOfSignature("R>i-4A]F5#b5&)$q+n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R>i-4A]F5#b5&)$q+n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-31));
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 88, 48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Utility.convertString("dstore_3");
      Utility.accessToString((-4283));
      Utility.format((-4283), (-4283), true, '}');
      Utility.convertString("M&YWaU=7f-8X>)");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), 3250, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 8362. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = "System";
      byte[] byteArray1 = Utility.decode("System", false);
      Utility.signatureToString("System", false);
      int int0 = 106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)36, 106, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("wide\t(wide)", string0);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      String string0 = Utility.accessToString((-1269));
      assertEquals("public private static native interface strictfp synthetic annotation enum", string0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1269), (-1269));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)73;
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte)16;
      constantFieldref0.setClassIndex((byte)7);
      byteArray0[8] = (byte) (-80);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("ifnull\t\t#-23801", string1);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (-79), false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-62);
      Utility.encode(byteArray0, false);
      Utility.encode(byteArray0, false);
      Utility.accessToString((int) (byte)0);
      try { 
        Utility.typeOfSignature("R>i-4A]F5#b5&)$q+n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R>i-4A]F5#b5&)$q+n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-67);
      byteArray0[0] = (byte) (-67);
      byteArray0[3] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)42;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[3] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      String string0 = Utility.accessToString(231);
      assertEquals("public private protected synchronized volatile transient", string0);
      
      String string1 = Utility.getSignature("public private protected synchronized volatile transient");
      assertEquals("Lpublic;", string1);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      String string0 = Utility.getSignature(")k)>Ag^H");
      assertEquals("L)k)>Ag^H;", string0);
      
      String string1 = Utility.signatureToString("L)k)>Ag^H;");
      assertEquals(")k)>Ag^H", string1);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("d2l", string0);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = Utility.decode("laload", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      byteSequence0.skip((-3883L));
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("ddiv", string0);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Utility.accessToString((-1269));
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1269), (-1269));
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      Utility.getSignature("public private static native interface strictfp synthetic annotation enum");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1269));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)92;
      byteArray0[0] = (byte)106;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fmul", string0);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      String string0 = Utility.accessToString((-1269));
      assertEquals("public private static native interface strictfp synthetic annotation enum", string0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1269), (-1269));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte)16;
      constantFieldref0.setClassIndex((byte)7);
      byteArray0[8] = (byte) (-80);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("ifnull\t\t#-23801", string1);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Utility.compactClassName("");
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "jsr";
      Utility.searchOpcode("jsr");
      try { 
        Utility.typeOfSignature("E<?<os");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E<?<os
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (int) (byte) (-60));
      String string1 = Utility.compactClassName("0:    wide\t(wide)\n");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      Utility.isJavaIdentifierPart('.');
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      String string0 = "WUUU^A]2;%m(8P";
      Utility.compactClassName("WUUU^A]2;%m(8P");
      try { 
        Utility.typeOfSignature("WUUU^A]2;%m(8P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WUUU^A]2;%m(8P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("11 00 00", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-950), 2000, false);
      assertEquals("0:    sipush\t\t0\n", string1);
      
      short short0 = Utility.searchOpcode("lreturFn");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(' ');
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("if_icmpeq", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, false);
      String string0 = Utility.classOrInterface((-2609));
      assertEquals("class", string0);
      
      String string1 = Utility.accessToString((-3006), false);
      assertEquals("private volatile abstract synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      String string0 = Utility.accessToString(243);
      assertEquals("public private final synchronized volatile transient", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(62, 243);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      short short0 = Utility.searchOpcode("^lload");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      Utility.accessToString((-4283));
      Utility.format((-4283), (-4283), false, '}');
      Utility.convertString("M&YWaU=7f-8X>)");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2706);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.printArray((Object[]) constantArray0, false);
      Utility.replace("nop", "public protected volatile native interface abstract strictfp annotation enum", "\t<");
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      Utility.isJavaIdentifierPart('G');
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("", false);
      Utility.encode(byteArray0, false);
      int int0 = 0;
      Utility.setBit(180, 0);
      Utility.accessToString(180, false);
      Utility.setBit(0, 40);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Utility.isJavaIdentifierPart('q');
      Utility.compactClassName("dreturn", "dreturn", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2b", string0);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)88;
      byteArray1[1] = (byte)28;
      byteArray1[2] = (byte)101;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)101, (-638));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Utility.accessToString(243);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
      try { 
        Utility.decode("<i7%$AQC3^$cW1]='6W", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"cW\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      Utility.classOrInterface(231);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = Utility.decode("@-WN", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-22);
      byteArray1[1] = (byte)57;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readUnsignedByte();
      try { 
        Utility.codeToString(byteSequence1, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, (int) (byte)26, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte)46;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-77);
      byteArray1[1] = (byte)34;
      byteArray1[2] = (byte)36;
      byteArray1[3] = (byte)66;
      byteArray1[4] = (byte) (-67);
      byteArray1[5] = (byte) (-82);
      byteArray1[6] = (byte) (-88);
      Utility.equals(byteArray0, byteArray1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-81);
      byteArray1[1] = (byte) (-78);
      byteArray1[2] = (byte) (-43);
      byteArray1[3] = (byte)0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool0.copy();
      Utility.codeToString(byteSequence1, constantPool2, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("dreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dreturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)114;
      Utility.isJavaIdentifierPart('0');
      String string0 = "\t(wide)";
      try { 
        Utility.decode("\t(wide)", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)42;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      ConstantInteger constantInteger1 = new ConstantInteger((byte)72);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("XvL<$/V=+;f>Qph");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 72. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      Utility.isJavaIdentifierPart('G');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      Utility.convertString(";?[9v7?t$_gZn");
      Utility.fillup("U(<b;,", (byte) (-1), true, 'Z');
      try { 
        Utility.methodSignatureArgumentTypes("[0^5&0V5{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [0^5&0V5{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      Utility.typeOfSignature("Integer");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Integer", "Integer", "Integer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Integer
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      String string0 = "E2$>oU";
      try { 
        Utility.methodSignatureReturnType("E2$>oU", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E2$>oU'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.convertString("sENGuIvrZ");
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = Utility.decode("zs&#]", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      assertArrayEquals(new byte[] {(byte)122, (byte)115, (byte)38, (byte)35, (byte)93}, byteArray0);
      
      String string0 = Utility.signatureToString("CONSTANT_InvokeDynamic", true);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)18;
      File file0 = MockFile.createTempFile("nj2", "char", (File) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) (byte)72;
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = (Object) (byte)72;
      objectArray0[4] = (Object) "char";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("!#1Wq1r_fN/", "!#1Wq1r_fN/", "Hq-f", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: !#1Wq1r_fN/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-7);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature(" ", stringArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte) (-7), false);
      try { 
        Utility.typeOfSignature("7kPV8^:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7kPV8^:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      Utility.accessToString((int) (byte) (-1));
      Utility.format((byte) (-1), 791, true, 'U');
      Utility.convertString("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum");
      Utility.filluptrue, '_');
      String[] stringArray0 = Constants.OPCODE_NAMES;
      try { 
        Utility.methodSignatureArgumentTypesfalse);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -1UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)40;
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, false);
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      Utility.fillup("$u", 92, true, 'G');
      String string0 = "? super ";
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-125));
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = "*iJ=C+7\"KT:";
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable(14, 58, byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      String string0 = Utility.accessToString(231);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-98);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      short short0 = Utility.searchOpcode("YX%Oi^XQ");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      Utility.format(1753, 1753, false, 'u');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.fillup("[&\"", 1753, true, '-');
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-90);
      byteArray0[5] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 162, (int) (byte) (-90));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-113);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-113);
      byteArray0[6] = (byte)118;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-113), (int) (byte)118, true);
      Utility.convertString("0:    d2l\n1:    nop\n2:    d2l\n3:    d2l\n4:    nop\n5:    nop\n6:    fneg\n7:    nop\n8:    nop\n");
      try { 
        Utility.methodSignatureReturnType("W.", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-75);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.convertString("*siore_3");
      Utility.accessToString((-4283));
      Utility.accessToString(34);
      try { 
        Utility.typeOfSignature(".K;Aic$?L\"~%n#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .K;Aic$?L\"~%n#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      Utility.format((-2029), (-2029), false, '#');
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("t>H#\"*GbKg:ROTd|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `t>H#\"*GbKg:ROTd|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble((byte)72);
      String string0 = Utility.getSignature("1,Zhv8B6^,b");
      assertEquals("L1,Zhv8B6^,b;", string0);
      
      Utility.methodSignatureReturnType("Invalid signature: `");
      String string1 = Utility.methodSignatureReturnType("Invalid signature: `", true);
      assertEquals("int", string1);
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)12;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("f2i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `f2i'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      String string0 = Utility.classOrInterface((-148));
      assertEquals("interface", string0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = Utility.accessToString((-148), false);
      assertEquals("protected static synchronized volatile native interface abstract strictfp synthetic annotation enum", string1);
      
      int int0 = Utility.clearBit((-148), (-148));
      assertEquals((-4244), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)65;
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$d1A", string2);
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("long", "long", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      String string0 = Utility.compactClassName("^|V,2Z-r[:H1C", "^|V,2Z-r[:H1C", true);
      assertEquals("", string0);
      
      String string1 = Utility.convertString("^|V,2Z-r[:H1C");
      assertEquals("^|V,2Z-r[:H1C", string1);
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      Utility.isJavaIdentifierPart('G');
      Utility.isJavaIdentifierPart('6');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      Utility.replace("L", "L", "L");
      Utility.compactClassName("L", "L", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("short", "L", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      Utility.signatureToString("DWUUU^Ac2%m(8P", true);
      try { 
        Utility.methodSignatureArgumentTypes("double", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      String string0 = "dstore_3";
      Utility.convertString("dstore_3");
      byte byte0 = (byte)0;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      String string0 = Utility.accessToString(750);
      assertEquals("private protected static synchronized volatile transient interface", string0);
      
      byte byte0 = Utility.typeOfSignature("JzVE~<5EKK]j");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      Utility.fillup("NVhGw??gf", (-994), true, 'a');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-1);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (int) (byte)65);
      try { 
        Utility.methodSignatureReturnType(":;kQQDc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `:;kQQDc'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      Utility.getSignature("WZUU^A2%m(P");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      Utility.compactClassName("WUUU^A]2%m(8P");
      String string0 = "9?2[6K9]o+]/?d%";
      try { 
        Utility.typeOfSignature("9?2[6K9]o+]/?d%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9?2[6K9]o+]/?d%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-88);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("jsr\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("dadd", string0);
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(1262);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload_1", string0);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)44;
      Utility.getSignature("java.lang.dstore_3xprFXOu'F'K8{,X;");
      String string0 = "Qk2S1@S";
      Utility.convertString("Qk2S1@S");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Qk2S1@S", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qk2S1@S'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      Utility.isJavaIdentifierPart('G');
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      try { 
        Utility.methodSignatureReturnType(";?[9v7?t$_gZn", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;?[9v7?t$_gZn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("dmul", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence1);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantLong constantLong0 = new ConstantLong(0L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodType1;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("dmul");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, true);
      assertEquals("isub", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = Utility.decode("laload", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool2, true);
      assertArrayEquals(new byte[] {(byte)108, (byte)97, (byte)108, (byte)111, (byte)97, (byte)100}, byteArray0);
      assertEquals("idiv", string0);
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.compactClassName("];ujDtG/H`v66'Z's`T", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      String string0 = Utility.classOrInterface((-4283));
      assertEquals("interface", string0);
      
      String string1 = Utility.format((-4283), (-363), true, 's');
      assertEquals("-4283", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)16;
      Utility.encode(byteArray0, true);
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = Utility.typeOfSignature("D*q1@a#o d");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)42;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.typeOfSignature("VxhqY50");
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      try { 
        Utility.typeOfSignature("60^a [#k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 60^a [#k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      Utility.accessToString((-1269));
      ConstantFieldref constantFieldref0 = new ConstantFieldref(313, (-1269));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-84);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool1.copy();
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      constantPool3.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool3, true);
      Utility.codeToString(byteArray0, constantPool2, (-3603), (int) (byte) (-84), true);
      Utility.printArray((Object[]) constantArray0);
      try { 
        Utility.methodSignatureToString("if_acmpeq", (String) null, "Zj(,=,`c7CKI{Ina", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_acmpeq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      Utility.accessToString(243);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)65;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("if_icmpgt\t\t#23795", string0);
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      short short0 = Utility.searchOpcode("f5<%i;[EXf}~m#");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-951), 133, false);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      Utility.accessToString((int) (byte) (-1));
      Utility.format((byte) (-1), (byte) (-1), false, '-');
      Utility.accessToString((int) '-', false);
      Utility.fillup(".XwP[U@", 17, false, 'N');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 46, 122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte) (-95);
      byteArray0[8] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      Utility.convertString("5");
      Utility.accessToString((-4283));
      int int0 = (-1315);
      boolean boolean0 = true;
      Utility.format((-1315), (-1315), true, '}');
      String string0 = "4+ZV48C>|YO~^9AnT";
      Utility.getSignature("4+ZV48C>|YO~^9AnT");
      Utility.convertString("ifne");
      // Undeclared exception!
      try { 
        Utility.signatureToString("TNJ.cs[X}SA1P?&", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TNJ.cs[X}SA1P?&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      Utility.accessToString((-1245));
      Utility.convertString("ZsY4yKJhbN@`ve'");
      // Undeclared exception!
      try { 
        Utility.signatureToString("^,a906U{?p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^,a906U{?p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble((byte)51);
      constantDouble0.clone();
      Constant[] constantArray0 = new Constant[15];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantDouble0;
      constantArray0[4] = (Constant) constantDouble0;
      constantArray0[5] = (Constant) constantDouble0;
      constantArray0[6] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-1749), (int) (byte)1, false);
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)42;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType((-2999));
      ConstantMethodType constantMethodType2 = new ConstantMethodType(constantMethodType1);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence1, constantPool1, false);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.methodSignatureReturnType("IDvalid signature: `");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      String string0 = Utility.classOrInterface(267);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool2, true);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)97, 172, byteSequence0, constantPool2);
      try { 
        Utility.methodSignatureToString("ladd", "l\".kWGj@kYF", "3", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ladd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      Utility.accessToString((int) (byte)12);
      String string0 = Utility.format((byte)12, (byte)12, false, '-');
      assertEquals("----------12", string0);
      
      String string1 = Utility.accessToString((int) '-', false);
      assertEquals("public protected static synchronized", string1);
      
      Utility.fillup(".XwP[U@", 17, false, 'F');
      String[] stringArray0 = Constants.OPCODE_NAMES;
      String string2 = Utility.methodSignatureReturnType("FFFFFFFFFF.XwP[U@");
      assertEquals("float", string2);
      
      Utility.accessToString(30, false);
      String string3 = Utility.getSignature("private protected static final");
      assertEquals("Lprivate;", string3);
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      Utility.accessToString(243);
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      // Undeclared exception!
      try { 
        Utility.decode("Hg$2@$@ED*M4Dv", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2@\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      String string0 = "=";
      try { 
        Utility.typeOfSignature("=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      String string0 = Utility.compactClassName("*uDgb", false);
      assertEquals("*uDgb", string0);
      
      boolean boolean0 = Utility.isSet(221, 71);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      String string0 = "Pj,=~X'ZU=_uf$";
      Utility.searchOpcode("Pj,=~X'ZU=_uf$");
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      int int0 = Utility.setBit((-2386), (-2386));
      assertEquals((-2386), int0);
      
      Utility.fillup("p&T$p", 2519, false, '3');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "p&T$p";
      objectArray0[1] = (Object) "p&T$p";
      objectArray0[2] = (Object) "p&T$p";
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      assertEquals("p&T$p, p&T$p, p&T$p", string0);
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[6] = (byte)42;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      Object object0 = constantDouble0.clone();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("kcFb[bY?zkB.'0");
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) object0;
      constantArray0[1] = (Constant) object0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantDouble0;
      constantArray0[4] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 214, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(">4 D9$?jf3C", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantMethodType1;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType1;
      constantArray0[3] = (Constant) constantMethodType1;
      constantArray0[4] = (Constant) constantMethodType0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[5] = (Constant) constantLong0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      Utility.codeToString(byteSequence0, constantPool0, false);
      constantPool1.copy();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-14);
      byteArray1[2] = (byte)71;
      byteArray1[3] = (byte)82;
      byteArray1[4] = (byte)7;
      byteArray1[5] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, (int) (byte) (-14), (int) (byte) (-22));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    nop
         // 2:    dstore_0
         // 3:    dastore
         // 4:    iconst_4
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.decode("NkxUfz+&ou'4vvll", false);
      try { 
        Utility.typeOfSignature("NkxUfz+&ou'4vvll");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NkxUfz+&ou'4vvll
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "LOht2tqSFw:'IPKg";
      stringArray0[1] = "LOht2tqSFw:'IPKg";
      stringArray0[2] = "LOht2tqSFw:'IPKg";
      stringArray0[3] = "LOht2tqSFw:'IPKg";
      stringArray0[4] = "ddiv";
      stringArray0[5] = "LOht2tqSFw:'IPKg";
      stringArray0[6] = "LOht2tqSFw:'IPKg";
      stringArray0[7] = "LOht2tqSFw:'IPKg";
      stringArray0[8] = "LOht2tqSFw:'IPKg";
      Utility.methodTypeToSignature("LOht2tqSFw:'IPKg", stringArray0);
      Utility.compactClassName("LOht2tqSFw:'IPKg", "l2fgoto", true);
      Utility.getSignature("yEW>BM4V?zd*z5*]-p");
      int int0 = (-492);
      Utility.accessToString((-492));
      Utility.isJavaIdentifierPart('.');
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      Utility.convertString("dstore_3");
      String string0 = Utility.accessToString((-4283));
      assertEquals("public protected volatile native interface abstract strictfp annotation enum", string0);
      
      String string1 = Utility.format((-4283), (-4283), true, '}');
      assertEquals("-4283", string1);
      
      String string2 = Utility.convertString("M&YWaU=7f-8X>)");
      assertEquals("M&YWaU=7f-8X>)", string2);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart('}');
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("breakpoint", false);
      String string3 = Utility.codeToString(byteArray0, constantPool0, (-4283), 69);
      assertEquals("0:    fadd\n1:    frem\n2:    lsub\n3:    ladd\n4:    dmul\n5:    irem\n6:    ddiv\n7:    lmul\n8:    fdiv\n9:    ineg\n", string3);
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      String string0 = Utility.accessToString(62, true);
      assertEquals("private protected static final", string0);
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      Utility.accessToString((int) (byte) (-1));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) " (";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum";
      objectArray0[6] = object0;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("YX%Oi^XQ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YX%Oi^XQ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("CONSTANT_Long");
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      Utility.format(3423, 1753, false, 'u');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)12;
      byte byte0 = (byte) (-63);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-75);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2503), (int) (byte) (-63), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ishr
         // 1:    aload_0
         // 2:    lload_2
         // 3:    fconst_1
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      Utility.fillup("annotation", (-1168), true, 'S');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-61);
      Utility.codeToString(byteArray0, constantPool0, (-21), 1115, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      Utility.convertString("dstore_3");
      Utility.accessToString((-4283));
      boolean boolean0 = false;
      Utility.format((-4283), (-4283), false, '}');
      Utility.getSignature("M&YWaU=7f-8X>)");
      Utility.convertString("LM&YWaU=7f-8X>);");
      // Undeclared exception!
      try { 
        Utility.signatureToString("M&YWaU=7f-8X>)", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M&YWaU=7f-8X>)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)42;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble((byte)51);
      byteSequence0.readInt();
      constantDouble0.clone();
      constantDouble0.toString();
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 103, 3707, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      String string0 = Utility.accessToString(560, true);
      assertEquals("final", string0);
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-79), 782, false);
      assertEquals("0:    f2d\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      String string0 = Utility.classOrInterface(231);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(62, 231);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("i2f", string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "short";
      stringArray0[1] = "class";
      stringArray0[2] = "i2f";
      stringArray0[3] = "i2f";
      stringArray0[4] = "i2f";
      stringArray0[5] = "dSih";
      stringArray0[6] = "i2f";
      stringArray0[7] = "class";
      stringArray0[8] = "dSih";
      String string2 = Utility.methodTypeToSignature("dSih", stringArray0);
      assertEquals("(SLclass;Li2f;Li2f;Li2f;LdSih;Li2f;Lclass;LdSih;)LdSih;", string2);
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-66));
      constantDouble0.clone();
      Constant[] constantArray0 = new Constant[16];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)0, 159);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      constantArray0[3] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)18, false);
      try { 
        Utility.typeOfSignature("newarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: newarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = "-k52`iys3p";
      try { 
        Utility.typeOfSignature("-k52`iys3p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -k52`iys3p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
