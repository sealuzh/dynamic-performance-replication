/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 21 23:14:45 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.LocalVariableTypeTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.MethodParameters;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)85;
      byte byte0 = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byte byte1 = (byte)85;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)18;
      byte byte2 = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      byte byte3 = (byte) (-87);
      byteArray0[5] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 32, (-143));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 267, 267);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.getSignature("t;{1lp4.x*");
      try { 
        Utility.methodSignatureReturnType("f-9%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `f-9%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byte byte0 = (byte)110;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)10;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)110;
      byteArray1[1] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 180, (int) (byte)17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.available();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("s<+#Mv-+|<wi.}\bKOf", "s<+#Mv-+|<wi.}\bKOf", false);
      try { 
        Utility.typeOfSignature("s<+#Mv-+|<wi.}\bKOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: s<+#Mv-+|<wi.}\bKOf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-128);
      byteArray1[2] = (byte)91;
      byteArray1[2] = (byte)13;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.available();
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.getSignature("t;{1lp4.x*");
      try { 
        Utility.methodSignatureReturnType("ior", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ior'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[3] = (byte) (-63);
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readByte();
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readByte();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      byte byte0 = Utility.typeOfSignature("Z");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)102;
      byte byte0 = (byte) (-96);
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-122);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, constantPool0, true);
      String[] stringArray0 = Constants.TYPE_NAMES;
      Utility.encode(byteArray0, true);
      Locale.getISOCountries();
      try { 
        Utility.methodTypeToSignature("m", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Xky/,~jc", false);
      Utility.getSignature("Xky/,~jc");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.encode(byteArray0, false);
      Utility.compactClassName("Xky$_$y$7ejc", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[1] = (Constant) constantString0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byteSequence0.mark(112);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-55);
      byteArray1[1] = (byte) (-12);
      byteArray1[2] = (byte)70;
      byteArray1[3] = (byte) (-121);
      byteArray1[4] = (byte)118;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 89, (int) (byte)118);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("\"W;/h>", false);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.readChar();
      byteSequence0.reset();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "V83&Lvm3@RAA<qc@^9";
      // Undeclared exception!
      try { 
        Utility.compactClassName("return", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence2.available();
      Utility.codeToString(byteSequence2, constantPool0, false);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("\"W;/h>", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.readChar();
      byteSequence0.reset();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("Q`$4DNJ_c\u0007h`4");
      Utility.compactClassName("V83&Lvm3@RAA<qc@^9", "istore_0", false);
      Utility.convertString("laload");
      try { 
        Utility.typeOfSignature("pop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: pop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.classOrInterface(1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "class";
      stringArray0[1] = "class";
      stringArray0[2] = "class";
      Utility.methodTypeToSignature("class", stringArray0);
      Utility.printArray((Object[]) stringArray0, true, true);
      Utility.compactClassName("class", "class", true);
      Utility.compactClassName("");
      Utility.fillup("class", (-2669), true, 'f');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-118);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-929), 5730);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)68);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(155, 167);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1084, 1746, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("Q%_L$?e{$", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.readChar();
      byteSequence0.reset();
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-78);
      byteArray0[0] = (byte) (-78);
      Utility.encode(byteArray0, true);
      int int0 = 102;
      Utility.classOrInterface(102);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1, (-1724486124));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2499), 180, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale0 = Locale.CANADA;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte)60;
      byteArray0[8] = (byte)60;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.toHexString(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("a1 3c 8d 3c 8d 3c 8d 3c 3c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `a1 3c 8d 3c 8d 3c 8d 3c 3c'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte) (-92);
      byteArray0[8] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-82);
      byteArray0[2] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.readUnsignedShort();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("freturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: freturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("Q%_L$?e{$", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      int int0 = new Integer((byte) (-74));
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-74);
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte)4;
      byteArray1[5] = (byte) (-74);
      byteArray1[6] = (byte)4;
      byteArray1[7] = (byte) (-74);
      byteArray1[8] = (byte) (-74);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart('|');
      assertFalse(boolean0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertArrayEquals(new byte[] {(byte)81, (byte)37, (byte)95, (byte)76, (byte)0, (byte)101, (byte)123}, byteArray0);
      assertEquals("astore_1", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("istore_2");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("The offset cannot be negative", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The offset cannot be negative
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("ED|V^X?m[x6eTz+H]:f0");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "ED|V^X?m[x6eTz+H]:f0";
      objectArray0[1] = (Object) "[LED|V^X?m;";
      Utility.signatureToString("[LED|V^X?m;", true);
      try { 
        Utility.methodSignatureReturnType("ED|V^X?m[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ED|V^X?m[]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Hu.&");
      Utility.setBit(2875, 2875);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)8;
      byte byte0 = (byte) (-69);
      byteArray0[6] = (byte) (-69);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      byte[] byteArray1 = new byte[15];
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)48;
      byteArray1[3] = (byte)93;
      byteArray1[4] = (byte)48;
      byteArray1[5] = (byte) (-123);
      byteArray1[6] = (byte) (-69);
      byteArray1[7] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Hu.&", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hu.&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.compactClassName("", "", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 710, (int) (byte)81, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      Constant.getComparator();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("~");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence1, constantPool0, true);
      Utility.encode(byteArray0, true);
      byteSequence1.readShort();
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      ConstantPool constantPool1 = constantPool0.copy();
      LocalVariableTable localVariableTable0 = new LocalVariableTable(103, (short)0, localVariableArray0, constantPool1);
      try { 
        Utility.methodSignatureToString("~", "if_icmplt", "BJpm_-05t#^>xC", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)124;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.accessToString((int) (byte) (-102), false);
      Utility.compactClassName("instanceof", "instanceof", false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readFloat();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.accessToString(122, true);
      try { 
        Utility.methodSignatureArgumentTypes("iC9g#7H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iC9g#7H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "Hu/&";
      byte[] byteArray0 = Utility.decode("Hu/&", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        constantPool0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.setBit(59, 216);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.signatureToString("FW04<m<P)dn l^%8[X", false);
      assertEquals("float", string0);
      
      String string1 = Utility.accessToString(2979, false);
      assertEquals("public private synchronized transient native interface strictfp", string1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String[] stringArray0 = Constants.ITEM_NAMES;
      try { 
        Utility.decode("lstore_0", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.getSignature("aload_0");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        byteSequence0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Utility.replace(")-*Z].c`", "java.lang.Long", ")-*Z].c`");
      byte[] byteArray0 = Utility.decode("Invalid signature: `", false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-45);
      byteArray1[1] = (byte)92;
      byteArray1[2] = (byte)113;
      byteArray1[3] = (byte)47;
      byteArray1[4] = (byte)89;
      byteArray1[5] = (byte)35;
      Utility.equals(byteArray1, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)92, (int) (byte)113, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q%_L$?e{$");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = Utility.decode("Q%_L$?e{$", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.available();
      byteSequence1.readUnsignedByte();
      Integer integer0 = new Integer((short)20773);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2149), 1158);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("_gR)9~\"UeaX/", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `_gR)9~\"UeaX/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantFloat constantFloat0 = new ConstantFloat((byte)28);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantDouble constantDouble0 = new ConstantDouble((byte)28);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)28, (byte)28);
      constantInterfaceMethodref0.copy();
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)28, 12);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Unreachable default case reached!", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = Utility.compactClassName("PUz;aqx+:{i|\"QA|A", false);
      assertEquals("PUz;aqx+:{i|\"QA|A", string0);
      
      int int0 = Utility.setBit(170, 170);
      assertEquals(1194, int0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-118);
      byteArray1[1] = (byte) (-118);
      byteArray1[2] = (byte)72;
      byteArray1[3] = (byte) (-118);
      byteArray1[4] = (byte) (-80);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      byteSequence0.readInt();
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (-3389), (int) (byte) (-118), false);
      assertEquals("0:    l2d\n1:    l2d\n2:    dstore_1\n3:    l2d\n4:    areturn\n", string1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedShort();
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      try { 
        byteSequence2.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.isJavaIdentifierPart('V');
      byte[] byteArray0 = new byte[19];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)33;
      byteArray1[1] = (byte) (-124);
      byteArray1[2] = (byte) (-124);
      byteArray1[3] = (byte)111;
      byteArray1[4] = (byte)33;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readShort();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.decode("athrow", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("newarray", "newarray", true);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(1L);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 63, 76, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.compactClassName("PUz;aqx+:{i|\"QA|A", false);
      Utility.setBit(170, 170);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.readInt();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("boolean", "M5S||@Hy2qL[7J1", "PUz;aqx+:{i|\"QA|A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(812);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-63);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, constantPool1, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence3, constantPool0, true);
      try { 
        byteSequence0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.isJavaIdentifierPart('V');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("sR&Yr9}eg^$6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: sR&Yr9}eg^$6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("qHHZ");
      Utility.replace("LqHHZ;", "LqHHZ;", "LqHHZ;");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte) (-7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip(0L);
      Utility.codeToString(byteSequence1, constantPool0, true);
      byteSequence1.skipBytes((byte) (-7));
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.markSupported();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "?OJ[_]8bE8.X", "#P*Q`g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.compactClassName("PUz;aqx+:{i|\"QA|A", false);
      int int0 = new Integer(170);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.accessToString((int) (byte)115, true);
      assertEquals("public private final volatile", string0);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)115;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("9f 73 c3 c3 00 00", string1);
      
      String string2 = Utility.convertString("Il,T7.Ei*X7h~+vQK4");
      assertEquals("Il,T7.Ei*X7h~+vQK4", string2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Utility.compactClassName("PUz;aqx+:{i|\"QA|A", false);
      assertEquals("PUz;aqx+:{i|\"QA|A", string0);
      
      int int0 = Utility.setBit(170, 170);
      assertEquals(1194, int0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.accessToString(1327, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("8a 73 d4 d4 fb 81", string2);
      
      String string3 = Utility.convertString("public private protected static native abstract");
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.classOrInterface(93);
      Utility.fillup("", 93, false, 'd');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-19);
      byteArray0[3] = (byte) (-109);
      byteArray0[0] = (byte) (-85);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-98), (int) (byte) (-37), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = (-794);
      Utility.clearBit(0, 2310);
      byte byte0 = (byte)123;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)119;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("\"@uhFY8Hj>j5 ]", "\"@uhFY8Hj>j5 ]", false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readFloat();
      byteSequence0.markSupported();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.accessToString(122, false);
      try { 
        Utility.methodSignatureArgumentTypes("iC9g#7H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iC9g#7H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.classOrInterface(93);
      Utility.fillup("", 93, false, 'd');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-109);
      byteArray0[0] = (byte) (-85);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("class", "", (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)119;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.toHexString(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.convertString("77 77 27 77 77 77 77 77");
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utility.clearBit(0, (-794));
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        byteSequence0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.isJavaIdentifierPart('J');
      byte byte0 = (byte) (-41);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        byteSequence0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)77, (byte)77);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedShort();
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("ifeq\t\t#19789", "ifeq\t\t#19789", false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      DataInput dataInput0 = null;
      try { 
        DataInputStream.readUTF((DataInput) byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(812);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte)123;
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte)123;
      byteArray1[4] = (byte)123;
      byteArray1[5] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool1 = null;
      byteSequence0.readUnsignedShort();
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        byteSequence0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        byteSequence0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[7] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")\t");
      String string0 = "Q%_L$?e{$";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arraylength");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%_L$?e{$");
      byteArray0[0] = (byte)117;
      byteArray0[3] = (byte)117;
      byteArray0[2] = (byte)50;
      byteArray0[4] = (byte)117;
      byteArray0[4] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 117
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)37;
      byte byte0 = Utility.typeOfSignature("C");
      assertEquals((byte)5, byte0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.accessToString((-1748), true);
      assertEquals("protected static native strictfp synthetic annotation enum", string0);
      
      byteSequence0.readShort();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      String string1 = Utility.compactClassName("iand", true);
      assertEquals("iand", string1);
      
      String string2 = Utility.accessToString((int) (byte)126, true);
      assertEquals("private protected static final volatile", string2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utility.setBit(170, 170);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.skip((byte) (-5));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-56), (int) (byte) (-5), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpeq\t\t#29640
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)57;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 25657. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      ConstantPool constantPool0 = null;
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)80;
      byteArray1[1] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = "ZE.Mf9W&^:~|-D7^";
      try { 
        Utility.methodSignatureArgumentTypes("ZE.Mf9W&^:~|-D7^", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ZE.Mf9W&^:~|-D7^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid signature: ");
      Utility.convertString("'>|VR>(nS%Gp}fxt0");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-68);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureToString("dup_x2", "impdep1", "impdep1", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup_x2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("isub", "byte", false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)100;
      byteArray1[1] = (byte)98;
      byteArray1[2] = (byte)100;
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte)73;
      byteArray1[5] = (byte)98;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 100
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = false;
      Utility.convertString("'>|VR>(nS%Gp}fxt0");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "goto_w");
      Utility.isSet(743, 172);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)118;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)119, (int) (byte)94, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -114
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-103);
      byte byte0 = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), 82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fconst_0
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-121);
      byte byte0 = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      boolean boolean0 = false;
      boolean boolean1 = true;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-68);
      byte byte0 = (byte) (-61);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.isJavaIdentifierPart('`');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-65);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-1);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-3787), (byte) (-42));
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantFieldref0.accept(emptyVisitor0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.printArray((Object[]) constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 188, (int) (byte) (-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "PUz;aqx+:{i|\"QA|A";
      Utility.compactClassName("PUz;aqx+:{i|\"QA|A", false);
      Utility.setBit(170, 170);
      Utility.convertString("PUz;aqx+:{i|\"QA|A");
      byte byte0 = (byte)102;
      ConstantInteger constantInteger0 = new ConstantInteger(658);
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-72);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)102, (byte)102);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 102. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte byte0 = (byte) (-98);
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("nop");
      try { 
        byteSequence0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Xky/N,~jc", false);
      int int0 = 84;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Xky/N,~jc");
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      constantArray0[8] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2426, 84, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-113);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.accessToString((int) (byte)43, false);
      String string0 = "qw";
      Utility.getSignature("qw");
      String string1 = "ifgt";
      String string2 = "(";
      int int0 = 2013;
      LocalVariable[] localVariableArray0 = new LocalVariable[5];
      LocalVariable localVariable0 = null;
      try {
        localVariable0 = new LocalVariable(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[25];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byteSequence0.readUnsignedByte();
      byte[] byteArray1 = Utility.decode("Q6YdB?G@", false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence2, constantPool0, true);
      Utility.classOrInterface(0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 804, 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte) (-70);
      byteArray0[8] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      boolean boolean0 = false;
      Utility.classOrInterface((-1309));
      try { 
        Utility.typeOfSignature("$Pkl$8b$I$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $Pkl$8b$I$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[0] = (byte)34;
      byteArray0[2] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readUnsignedByte();
      byteSequence2.skip((byte)34);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)62;
      byteArray0[0] = (byte)62;
      byte byte1 = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      byte byte2 = (byte) (-57);
      int int0 = 82;
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte) (-98));
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)11, (int) (byte) (-98));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 512;
      Utility.classOrInterface(512);
      String string0 = "org.apache.bcel.classfile.Constant$1";
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Constant$1", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "$l$8$I$";
      // Undeclared exception!
      try { 
        Utility.decode("$l$8$I$", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8$\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.classOrInterface(249);
      String string0 = "nZA";
      try { 
        Utility.typeOfSignature("@H>8Z/}G<ix';V<;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @H>8Z/}G<ix';V<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      Utility.convertString("iload_3");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-68);
      byteArray1[1] = (byte) (-67);
      byteArray1[2] = (byte) (-61);
      byteArray1[3] = (byte) (-67);
      byteArray1[4] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.replace("getfield", "getfield", "getfield");
      byte[] byteArray0 = new byte[4];
      try { 
        Utility.typeOfSignature("/v;@`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /v;@`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utility.compactClassName("Pz;aqx+:{i|\"QA|A", false);
      Utility.setBit(170, 170);
      Utility.convertString("Pz;aqx+:{i|\"QA|A");
      ConstantInteger constantInteger0 = new ConstantInteger(658);
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)102, (byte)102);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.isJavaIdentifierPart('9');
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)102;
      ConstantPool constantPool1 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence1, constantPool1, false);
      try { 
        Utility.methodSignatureArgumentTypes("Pz;aqx+:{i|\"QA|A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Pz;aqx+:{i|\"QA|A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-69);
      byteArray0[1] = (byte)100;
      byte byte0 = (byte)68;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.accessToString((int) (byte) (-69), false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("fstore_1", "byte", false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-4038), 2977, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("fstore_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fstore_1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      ConstantInteger constantInteger0 = new ConstantInteger((-3129));
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)64, (byte)93);
      constantInteger0.clone();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.classOrInterface((-3129));
      assertEquals("interface", string0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence2.mark((-676));
      String string1 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("iflt\t\t#16477", string1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("9b 40 5d 40 5d 40", string2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")\t");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-8);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 192, (int) (byte) (-80), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")\t");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-41);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)13;
      boolean boolean0 = true;
      boolean boolean1 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte)69;
      Utility.encode(byteArray0, false);
      Utility.getSignature("$40$d7$A$I$N$_$8d$FE");
      try { 
        Utility.typeOfSignature("Mj5w_KC-M'7$D@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mj5w_KC-M'7$D@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-73);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence0.skip(0L);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.skipBytes((byte)89);
      byteSequence0.close();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Utility.isJavaIdentifierPart('P');
      byte[] byteArray0 = Utility.decode("Xky/N,~jc", false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.skip((-711L));
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.skipBytes(84);
      byteSequence0.close();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-33);
      byteArray1[1] = (byte)79;
      byteArray1[2] = (byte) (-72);
      byteArray1[3] = (byte) (-10);
      byteArray1[4] = (byte)4;
      byteArray1[5] = (byte) (-87);
      byteArray1[6] = (byte) (-64);
      byteArray1[7] = (byte)126;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (-3652), (int) (byte) (-64), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fload_");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)97;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(1L);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = Utility.replace("boolean", "boolean", "boolean");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)82;
      byteArray0[0] = (byte)103;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1556), (-1556));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool0, true);
      Utility.isJavaIdentifierPart('|');
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("lstore_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lstore_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      byte[] byteArray0 = new byte[3];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)111);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInteger1.clone();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-69);
      byteArray1[1] = (byte) (-69);
      byteArray1[4] = (byte) (-69);
      byteArray1[3] = (byte) (-122);
      byteArray1[4] = (byte) (-122);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.accessToString((int) (byte)0, true);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence3, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47872. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)65;
      byte byte0 = (byte)53;
      byteArray0[2] = (byte)53;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)65);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)126;
      byteArray1[1] = (byte)53;
      byteArray1[2] = (byte)65;
      byteArray1[3] = (byte)53;
      byteArray1[4] = (byte)20;
      byteArray1[5] = (byte)126;
      byteArray1[6] = (byte)126;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.skip(0L);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        byteSequence1.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[25];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byteSequence0.readUnsignedByte();
      byte[] byteArray1 = Utility.decode("Q6YdB?G@", false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedShort();
      String string1 = Utility.codeToString(byteSequence2, constantPool0, true);
      assertEquals("fastore", string1);
      
      String string2 = Utility.classOrInterface(0);
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")\t");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      ConstantInteger constantInteger0 = new ConstantInteger((-3129));
      ConstantInteger constantInteger1 = new ConstantInteger((-3129));
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantInteger1;
      constantArray0[1] = (Constant) constantInteger1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)85, (-3129));
      constantArray0[2] = (Constant) constantNameAndType0;
      constantArray0[3] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInteger1.clone();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.accessToString(161, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence3, (ConstantPool) null, true);
      Utility.accessToString(3085);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "org.apache.bcel.classfile.Utility$1", "castore");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")\t");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      ConstantInteger constantInteger0 = new ConstantInteger((-3129));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantInteger1;
      constantArray0[1] = (Constant) constantInteger1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)64, (-3129));
      constantArray0[2] = (Constant) constantNameAndType0;
      constantArray0[3] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInteger1.clone();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.accessToString(161, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence3, (ConstantPool) null, true);
      Utility.accessToString(3085);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "org.apache.bcel.classfile.Utility$1", "lstore_1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1556), (-1556));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool0, true);
      Utility.isJavaIdentifierPart('|');
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 66
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfMethodSignature(", npairs = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , npairs = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)122;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.skip((byte)122);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1409), 133, true);
      assertEquals("0:    i2l\n1:    d2f\n2:    aaload\n3:    ishr\n", string0);
      
      String string1 = Utility.accessToString(9, false);
      assertEquals("public static", string1);
      
      String string2 = Utility.getSignature("class");
      assertEquals("Lclass;", string2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)37;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte)87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 54, (int) (byte)87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.setBit(4004, 4004);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)97;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)97, 17);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, constantPool0, true);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte)57;
      byteArray1[3] = (byte)57;
      byteArray1[4] = (byte)57;
      byteArray1[5] = (byte) (-60);
      byteArray1[6] = (byte)32;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, constantPool0, false);
      Utility.equals(byteArray1, byteArray1);
      try { 
        Utility.typeOfSignature("_%U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _%U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.setBit(4004, 4004);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)78;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)97, 17);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte)78);
      Utility.codeToString(byteSequence1, constantPool0, false);
      // Undeclared exception!
      try { 
        byteSequence1.read(byteArray0, 17, (int) (byte) (-60));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Utility.decode(")nw", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.decode("4V_9t2[!<0&", false);
      byte[] byteArray1 = new byte[0];
      Utility.toHexString(byteArray1);
      LocalVariable[] localVariableArray0 = new LocalVariable[3];
      LocalVariable localVariable0 = new LocalVariable((-909), (byte)0, (byte)74, (byte)48, (-909), (ConstantPool) null);
      localVariableArray0[0] = localVariable0;
      LocalVariable localVariable1 = new LocalVariable(localVariable0);
      localVariableArray0[1] = localVariable1;
      LocalVariable[] localVariableArray1 = new LocalVariable[8];
      localVariableArray1[0] = localVariable0;
      localVariableArray1[1] = localVariable1;
      localVariableArray1[2] = localVariable1;
      localVariableArray1[3] = localVariable1;
      localVariableArray1[4] = localVariable1;
      localVariableArray1[5] = localVariable0;
      localVariableArray1[6] = localVariable1;
      localVariableArray1[7] = localVariable1;
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(262, (byte)48, localVariableArray1, (ConstantPool) null);
      LocalVariableTypeTable localVariableTypeTable1 = new LocalVariableTypeTable(localVariableTypeTable0);
      localVariableTypeTable1.getLocalVariable((byte)70);
      localVariableArray0[2] = null;
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)48, 190, localVariableArray0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("4V_9t2[!<0&", (String) null, "?qLqP,zuFG ", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4V_9t2[!<0&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)111);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInteger1.clone();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-91);
      byteArray1[1] = (byte) (-91);
      byteArray1[2] = (byte) (-91);
      byteArray1[3] = (byte) (-122);
      byteArray1[4] = (byte) (-122);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.accessToString((int) (byte) (-91), true);
      assertEquals("public protected transient native abstract strictfp synthetic annotation enum", string0);
      
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence3, constantPool0, true);
      String string1 = Utility.accessToString((-1043));
      assertEquals("public protected static synchronized volatile transient native interface strictfp synthetic annotation enum", string1);
      
      String string2 = Utility.replace("nop", "nop", "if_acmpeq\t\t#-23131");
      assertEquals("if_acmpeq\t\t#-23131", string2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.isJavaIdentifierPart('R');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.decode("*N'&Dn%Z>", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.decode("putField", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("putField", "dcmpg", "dcmpg", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putField
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantClass0.setNameIndex(3081);
      ConstantLong constantLong0 = new ConstantLong((byte)83);
      constantLong0.toString();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      byteSequence1.readUnsignedByte();
      byte[] byteArray1 = Utility.decode("CONSTANT_Long[5](bytes = 83)", false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals(28, byteArray1.length);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&875");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &875
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.replace("dcmpg", "9+'K5>A_.~.W|", "9+'K5>A_.~.W|");
      try { 
        Utility.methodSignatureReturnType("dcmpg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dcmpg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), 2469, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-105));
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.skipBytes(4711);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2469, 3, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('s');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)5;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)127, (byte)127);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)5, (byte)127);
      Constant constant0 = constantNameAndType0.copy();
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(59, 93);
      ConstantClass constantClass0 = new ConstantClass((byte)5);
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(constantMethodHandle1);
      Method.getComparator();
      Constant.setComparator((BCELComparator) null);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = constant0;
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool2 = constantPool1.copy();
      Utility.codeToString(byteSequence0, constantPool2, false);
      short short0 = Utility.searchOpcode("l/^2Qe]QLbz_|6");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-101);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(0L);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.skipBytes((byte)103);
      byteSequence0.close();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("dload_3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)83;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.classOrInterface(93);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-63);
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)41;
      byte byte1 = (byte) (-63);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(0L);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Utility.getSignature("interface");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y'Brk@*hC$", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y'Brk@*hC$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      byte[] byteArray0 = Utility.decode("Xky/N,~jc", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Constant[] constantArray1 = new Constant[3];
      constantArray1[0] = (Constant) constantClass0;
      constantArray1[1] = (Constant) constantClass0;
      constantArray1[2] = (Constant) constantClass0;
      constantPool0.setConstantPool(constantArray1);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("lshl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lshl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte byte0 = (byte) (-113);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)44;
      String string0 = "o!R&| .xv|pZ";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("o!R&| .xv|pZ", (String) null, (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.decode("aload_1", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("aload_1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aload_1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Utility.convertString("putfield");
      Locale locale0 = Locale.CANADA;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.decode("\r", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byte byte0 = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.skipBytes((-3010));
      byteSequence0.read();
      byteSequence0.skip(0L);
      Utility.accessToString(191, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(129, (-1034));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantClass0.setNameIndex(91);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      Utility.classOrInterface((byte)60);
      try { 
        Utility.typeOfSignature("17 65 3c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 17 65 3c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantClass constantClass1 = new ConstantClass(byteSequence0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.methodSignatureArgumentTypes("iadd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iadd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Utility.compactClassName("daload");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantClass0.setNameIndex((-1654));
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.classOrInterface((byte)105);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.setBit(4004, 4004);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)78;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)97, 17);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, constantPool0, true);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)78;
      byteArray1[1] = (byte)81;
      byteArray1[2] = (byte)57;
      byteArray1[3] = (byte)57;
      byteArray1[4] = (byte)57;
      byteArray1[5] = (byte) (-60);
      byteArray1[6] = (byte)32;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, constantPool0, false);
      Utility.equals(byteArray1, byteArray1);
      try { 
        Utility.methodSignatureArgumentTypes("~juR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~juR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('P');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("iinc\t\t%143\t98", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.classOrInterface(93);
      String string0 = Utility.fillup("[]", 3764, false, ']');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-109);
      byteArray0[0] = (byte) (-85);
      byteArray0[5] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8.getCachedInstance(string0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-98), (int) (byte) (-37), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes(":E/f{5G", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :E/f{5G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(")nw", false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)48;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray1[3] = (byte) (-5);
      byteArray1[4] = (byte)74;
      byteArray1[5] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.accessToString((int) (byte) (-5), false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("fdiv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fdiv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.classOrInterface(93);
      String string0 = Utility.fillup("[]", 3764, false, ']');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8.getCachedInstance(string0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-98), (int) (byte) (-37), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dup_x1
         // 1:    <illegal opcode>
         // 2:    <illegal opcode>
         // 3:    i2s
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantClass0.setNameIndex((byte)115);
      ConstantLong constantLong0 = new ConstantLong((-1L));
      Constant[] constantArray0 = new Constant[4];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = false;
      Utility.convertString("'>|VR>(nS%Gp}fxt0");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "goto_w");
      Utility.isSet(743, 172);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)118;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)119, (int) (byte)126, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.decode("instanceof", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-97);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      try { 
        Utility.decode("swRlH&Q", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("G`{FZ9>", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G`{FZ9>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-67);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readBoolean();
      constantPool0.copy();
      ConstantPool constantPool1 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      String[] stringArray0 = new String[5];
      stringArray0[0] = ":";
      stringArray0[1] = "![P+8e.[Fi))";
      stringArray0[2] = "![P+8e.[Fi))";
      stringArray0[3] = "![P+8e.[Fi))";
      stringArray0[4] = "areturn";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("![P+8e.[Fi))", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[P+8e.[Fi))
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("lmul");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lmul
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "multianewarray");
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("?#p#VfBOU1[P8B%T*g:");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(531, 531);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      constantPool1.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.methodSignatureArgumentTypes("?#p#VfBOU1[P8B%T*g:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?#p#VfBOU1[P8B%T*g:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Utility.replace("h{", "h{", "h{");
      Utility.convertString("? extends ");
      Object object0 = new Object();
      try { 
        Utility.methodSignatureArgumentTypes("(A'`d5", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `A'`d5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Utility.isJavaIdentifierPart('I');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-98);
      byteArray0[0] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 10, 111);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(")nw", false);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(531);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      constantPool1.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("dload_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("iload\t\t%0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iload\t\t%0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = Utility.replace("getfield", "getfield", "getfield");
      assertEquals("getfield", string0);
      
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = Utility.typeOfSignature("Z]h_w");
      assertEquals((byte)4, byte0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00 00", string1);
      
      Object[] objectArray0 = new Object[0];
      String string2 = Utility.printArray(objectArray0, true, false);
      assertEquals("{}", string2);
      
      String string3 = Utility.compactClassName(", end_pc = ", false);
      assertEquals(", end_pc = ", string3);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte byte0 = Utility.typeOfSignature("BS-iA");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Utility.signatureToString("Illegally nested brackets:");
      String string0 = Utility.methodSignatureReturnType("Ili.J'%D60Zj+}/z");
      assertEquals("int", string0);
      
      String string1 = Utility.fillup("", (-2306), false, 'h');
      assertEquals("", string1);
      
      short short0 = Utility.searchOpcode("~!s]0,cl");
      assertEquals((short) (-1), short0);
      
      String string2 = Utility.format((-113), 162, true, 'h');
      assertEquals("-113hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh", string2);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Utility.decode("J $*]W!\"i*90", false);
      try { 
        Utility.methodSignatureReturnType("5Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `5Z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Utility.decode("$l$8b$I$", false);
      try { 
        Utility.typeOfSignature("$l$8b$I$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Utility.replace("X>/N,~jc", "X>/N,~jc", "X>/N,~jc");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-77);
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-77));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)102;
      byte byte0 = (byte) (-96);
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-122);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Utility.isSet(1892, 1607);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      Utility.encode(byteArray0, false);
      ConstantDouble constantDouble0 = new ConstantDouble(47);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)83;
      byteArray1[1] = (byte)83;
      byteArray1[2] = (byte) (-46);
      byteArray1[3] = (byte)83;
      byteArray1[4] = (byte)83;
      byteArray1[5] = (byte)83;
      byteArray1[6] = (byte)83;
      byteArray1[7] = (byte)84;
      byteArray1[8] = (byte)83;
      Utility.equals(byteArray1, byteArray1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S");
      Utility.accessToString((-1804));
      Utility.accessToString((int) (byte)83, false);
      try { 
        Utility.methodSignatureArgumentTypes("(\"gS_q_-sR", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"gS_q_-sR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = 319;
      int int1 = 255;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-47);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)29, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = Utility.replace("getfield", "getfield", "getfield");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)103;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet((-2648), (-2657));
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte)2, true);
      try { 
        Utility.typeOfMethodSignature("P![=W~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P![=W~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Utility.typeOfSignature("IY(1CG@");
      Utility.typeOfSignature("[\"t(kta%A(\"7#L");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, 256, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Utility.isJavaIdentifierPart('?');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload_1", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String[] stringArray0 = Constants.OPCODE_NAMES;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-77);
      Utility.encode(byteArray0, true);
      Utility.searchOpcode("VFINlZ*-\"}%TWz,Z");
      Utility.encode(byteArray0, true);
      int int0 = 169;
      Utility.format(169, (short) (-1), true, '^');
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Utility.isJavaIdentifierPart('?');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 621, (-1888));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = Utility.getSignature("(T|_|_J0sh/");
      assertEquals("L(T|_|_J0sh/;", string0);
      
      String string1 = Utility.compactClassName("pi(L@elj4 kFU2`e", false);
      boolean boolean0 = Utility.isSet((-2369), 103);
      assertTrue(boolean0);
      
      String string2 = Utility.compactClassName("pi(L@elj4 kFU2`e", "L(T|_|_J0sh/;", false);
      assertTrue(string2.equals((Object)string1));
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)13;
      String string3 = Utility.codeToString(byteArray0, constantPool0, (-1538), (-313));
      assertEquals("0:    fload_2\n1:    irem\n2:    <illegal opcode>\n3:    aload_0\n4:    drem\n5:    lload_2\n6:    fconst_2\n", string3);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.getSignature("(T|_|_J0sh/");
      String string0 = Utility.replace("YIn?J", "YIn?J", "(T|_|_J0sh/");
      Utility.compactClassName("FV", ")", false);
      Utility.signatureToString("FV");
      Utility.isJavaIdentifierPart('8');
      String string1 = Utility.fillup(".#", 3957, true, '8');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")\t");
      try { 
        Utility.typeOfSignature("=|u ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =|u 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.isJavaIdentifierPart('l');
      Utility.compactClassName("Q%_L$?e{$", true);
      try { 
        Utility.decode("Q%_L$?e{$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(199, 74);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.bcel.classfile.Utility");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Utility.typeOfSignature("IY(1CG@");
      Utility.typeOfSignature("[\"t(kta%A(\"7#L");
      try { 
        Utility.decode("$l$8b$I$", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = Utility.format(221, 221, true, '\'');
      assertEquals("221''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''", string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "n4o?oZrTY>");
      boolean boolean0 = Utility.isSet(1176, 1165);
      assertFalse(boolean0);
      
      String string1 = Utility.replace("org.apache.commons.io.filefilter.AbstractFileFilter", "248`./c", "221''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''");
      assertEquals("org.apache.commons.io.filefilter.AbstractFileFilter", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string2 = Utility.accessToString((int) (byte)83);
      assertEquals("public private final volatile", string2);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(75, (-1034));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[2] = (Constant) constantNameAndType0;
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Utility.getSignature("Ly&6H5<g+m5");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("T 1U>.s0", "KOAm~9i@KKR5iya", true);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)31;
      byteArray0[8] = (byte)114;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 615, 187, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 36811. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet((byte)57, (byte)57);
      Utility.accessToString((int) (byte)57);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "public static final synchronized", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("newarray", "newarray", true);
      Utility.convertString("T 1U>.s0");
      Utility.compactClassName("T 1U>.s0", "", true);
      try { 
        Utility.typeOfSignature("T 1\\U>.s0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: T 1\\U>.s0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(75, 843);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[2] = (Constant) constantNameAndType0;
      constantArray0[3] = (Constant) constantNameAndType0;
      constantArray0[4] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)80, 1411, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.compactClassName("daload");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(63, (-1466));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte)125;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)45, 191, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "Ip2{.tfNL";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)40;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.decode("$3e$9e$c4$u", false);
      Utility.format((-311), (byte) (-60), false, '@');
      String string1 = "%qc";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("%qc", "-311", "-311");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %qc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = ")U6";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")U6");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("MFH8", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MFH8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "org.apache.bcel.classfile.Utility$JavaWriter";
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$JavaWriter", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-77), 161, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "daload";
      Utility.compactClassName("daload");
      byte[] byteArray0 = new byte[25];
      byteArray0[9] = (byte) (-87);
      byteArray0[1] = (byte)103;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)89;
      byteArray1[1] = (byte)46;
      byteArray1[2] = (byte) (-94);
      byteArray1[3] = (byte)103;
      byteArray1[4] = (byte)103;
      Constant[] constantArray0 = new Constant[4];
      MockFile mockFile0 = new MockFile("daload");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 111, (int) (byte)46, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Utility.compactClassName("daload");
      byte[] byteArray0 = new byte[25];
      byteArray0[9] = (byte) (-87);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes(" not !ou5~.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  not !ou5~.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(91);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(91, 201);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantClass1;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantNameAndType0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantNameAndType0;
      constantArray0[5] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)88, 91, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 60, 552, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 34, (int) (byte)98, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Utility.signatureToString("CLASSPATH component ");
      Utility.compactClassName("char", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)113;
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)27, (byte) (-95));
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)113, (int) (byte)113, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "";
      Utility.compactClassName("");
      byte[] byteArray0 = Utility.decode("", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)123;
      Utility.isSet(185, 86);
      Utility.accessToString((int) (byte)123);
      Utility.getSignature("public private static final synchronized volatile");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (byte)111, true, 'A');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.compactClassName(", ");
      int int0 = Utility.setBit(170, 170);
      assertEquals(1194, int0);
      
      String string0 = Utility.convertString(", ");
      assertEquals(", ", string0);
      
      ConstantInteger constantInteger0 = new ConstantInteger(658);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantClass0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.fillup(", ", (byte)102, false, 'j');
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-60), 658, true);
      String string2 = Utility.accessToString((int) (byte) (-60), false);
      assertEquals("protected volatile transient native interface abstract strictfp synthetic annotation enum", string2);
      
      String string3 = Utility.getSignature("boolean");
      assertEquals("Z", string3);
      
      String string4 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{null, CONSTANT_Integer[3](bytes = 658), CONSTANT_Class[7](name_index = 50278), CONSTANT_Class[7](name_index = 50278), null, null, null}", string4);
      
      String string5 = Utility.compactClassName("0:    wide\t(wide)\n1:    fsub\n2:    dup_x2\n3:    fsub\n", false);
      assertTrue(string5.equals((Object)string1));
      
      Utility.compactClassName("monitorexit");
      String string6 = Utility.compactClassName("org.apache.bcel.classfile.SimpleElementValue", false);
      assertEquals("org.apache.bcel.classfile.SimpleElementValue", string6);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "interface");
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)93;
      Utility.format((byte)93, 48, false, 'b');
      Utility.compactClassName("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb93", "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb93", false);
      Utility.format((byte)32, 2, true, 'b');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "interface");
      Utility.classOrInterface(0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.isJavaIdentifierPart('?');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "\t\t";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\t\t");
      byte byte0 = (byte)113;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte1 = (byte)65;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-829), (byte)65);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("\t\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(812);
      String string0 = Utility.compactClassName("Hu/&", "Hu/&", true);
      assertEquals("Hu.&", string0);
      
      String string1 = Utility.convertString("Hu/&");
      assertEquals("Hu/&", string1);
      
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      byteSequence1.read();
      byteSequence1.read();
      String string2 = Utility.accessToString((-894), true);
      assertEquals("private transient abstract strictfp synthetic annotation enum", string2);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00 00 00", string3);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      int int0 = Utility.setBit(189, (byte)0);
      assertEquals(189, int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.replace("L4r4", "L4r4", "L4r4");
      byte byte0 = (byte)97;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-76), 632);
      String string0 = "nXY# ;Z";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "L4r4";
      stringArray0[1] = "u{eRMMnU?ctV&N-=";
      Utility.methodTypeToSignature("nXY# ;Z", stringArray0);
      int int0 = 2160;
      // Undeclared exception!
      try { 
        Utility.signatureToString("java.lang.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.getSignature("sc>3kj|-kaXOYUoAd1B");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass(dataInputStream0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[3] = (Constant) constantMethodType0;
      constantArray0[4] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("Byte code error: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.getSignature("sc>3kj|-kaXOYUoAd1B");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 183, (int) (byte) (-97), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(812);
      Utility.compactClassName("Hu/&", "Hu/&", true);
      Utility.convertString("Hu/&");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.read();
      Utility.accessToString(29, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("zJ6 TZM)1$\"g`iGO\"|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: zJ6 TZM)1$\"g`iGO\"|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)37;
      byte byte0 = (byte)87;
      byteArray0[4] = (byte)87;
      ConstantPool constantPool0 = null;
      int int0 = 54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 54, (int) (byte)87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)0;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance(">");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantPool1.constantToString((Constant) constantUtf8_1);
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-1364), 88, true);
      assertEquals("0:    nop\n1:    ddiv\n2:    ddiv\n3:    nop\n4:    idiv\n5:    nop\n", string1);
      
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('(');
      int int0 = Utility.setBit((byte)0, 3180);
      assertEquals(4096, int0);
      
      byte[] byteArray1 = Utility.decode(">", false);
      assertArrayEquals(new byte[] {(byte)62}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "interface");
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)93;
      String string0 = Utility.format((byte)93, 48, false, '/');
      assertEquals("//////////////////////////////////////////////93", string0);
      
      String string1 = Utility.compactClassName("//////////////////////////////////////////////93", "//////////////////////////////////////////////93", false);
      assertEquals("..............................................93", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("jsr_w\t\t#1560281088", string2);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string3 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string3);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(812);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodType0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-63);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      constantPool1.setConstantPool(constantArray0);
      constantPool1.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool2, true);
      try { 
        Utility.methodSignatureArgumentTypes("aaload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aaload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(812);
      Utility.compactClassName("H,u/&", "H,u/&", true);
      Utility.convertString("H,u/&");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)90;
      String string0 = "W@OOVs8h^";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      constantPool1.setConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("IeHs8agQSemZkV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: IeHs8agQSemZkV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "RmR4z";
      // Undeclared exception!
      try { 
        Utility.signatureToString("RmR4z", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RmR4z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)53;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-55);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)36, 85, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-52);
      byteArray0[2] = (byte)77;
      String string0 = Utility.getSignature("jsr_w");
      assertEquals("Ljsr_w;", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.compactClassName("Ljsr_w;", "void", false);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-52), (int) (byte)84);
      assertEquals("0:    <illegal opcode>\n1:    nop\n2:    astore_2\n", string1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Utility.convertString("putfield");
      Locale locale0 = Locale.CANADA;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-67);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-67), (byte) (-67));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48573. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)60;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-618), 2240);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)60;
      byteArray1[2] = (byte)60;
      byteArray1[3] = (byte)108;
      byteArray1[4] = (byte) (-98);
      byteArray1[5] = (byte)60;
      byteArray1[6] = (byte)60;
      byteArray1[7] = (byte)60;
      byteArray1[8] = (byte) (-98);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.read();
      byteSequence1.read();
      Utility.accessToString(2240, false);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("@,T2%K,Q?$Xb#]\"h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @,T2%K,Q?$Xb#]\"h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      Utility.compactClassName("monitorexit");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantClass0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-115), (byte)99);
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("\u0001wz1i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \u0001wz1i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)90;
      int int0 = 2469;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 34, (int) (byte) (-105), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(262);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-94);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-94), 3);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref0;
      constantArray0[4] = (Constant) constantMethodType0;
      constantArray0[5] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      Utility.codeToString(byteSequence0, constantPool2, true);
      try { 
        Utility.typeOfSignature("ops");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ops
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (-296), 5, true);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(262);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-94);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-94), 3);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantMethodType0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      Utility.accessToString(161, true);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.convertString("Xr~%zv?Ewf.");
      Locale locale0 = Locale.CANADA;
      String string1 = Utility.replace("Xr~%zv?Ewf.", "Xr~%zv?Ewf.", "Xr~%zv?Ewf.");
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[0];
      int int0 = 219;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 219, 319);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.convertString("putfield");
      Locale locale0 = Locale.CANADA;
      Utility.replace("eYYe `vl``.$E", "\r", "void");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.accessToString((int) (byte) (-90), false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("invokespecial");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokespecial
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = Utility.compactClassName(", ", false);
      int int0 = Utility.setBit(170, 170);
      assertEquals(1194, int0);
      
      String string1 = Utility.convertString(", ");
      assertTrue(string1.equals((Object)string0));
      
      ConstantInteger constantInteger0 = new ConstantInteger(658);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantClass0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteSequence2, constantPool1, false);
      assertEquals("wide\t(wide)", string2);
      
      String string3 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string3);
      
      String string4 = Utility.compactClassName("checkcast", false);
      assertEquals("checkcast", string4);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Utility.compactClassName(", ", false);
      Utility.setBit(170, 170);
      Utility.convertString(", ");
      ConstantInteger constantInteger0 = new ConstantInteger(658);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)102, (byte)102);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref((byte)102, (byte)102);
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref(constantInterfaceMethodref1);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfSignature("9dTDLNjm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9dTDLNjm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName(", ", false);
      Utility.setBit(170, 170);
      Utility.convertString(", ");
      ConstantInteger constantInteger0 = new ConstantInteger(658);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInteger0.clone();
      int int0 = 50;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)102;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-91), 36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fsub
         // 1:    fsub
         // 2:    fsub
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Utility.compactClassName(", ", false);
      Utility.setBit(170, 170);
      Utility.convertString(", ");
      ConstantInteger constantInteger0 = new ConstantInteger(658);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantInteger0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantArray0[5] = (Constant) constantInteger0;
      constantArray0[6] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byteSequence0.close();
      constantPool0.setConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.methodSignatureArgumentTypes(", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      Utility.searchOpcode("&zU908e0a8(");
      byteArray0[1] = (byte)126;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-73);
      byteArray1[1] = (byte)27;
      byteArray1[2] = (byte) (-73);
      byteArray1[3] = (byte)126;
      byteArray1[4] = (byte) (-74);
      byteArray1[5] = (byte)65;
      byteArray1[6] = (byte) (-74);
      byteArray1[7] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readShort();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)34;
      Utility.encode(byteArray0, true);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)111;
      byteArray1[1] = (byte)111;
      byteArray1[2] = (byte)108;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, constantPool0, true);
      String string0 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-115);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), 1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.signatureToString("IFzDB4:UafroB]YjT", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)107;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.compactClassName("java.lang.$_$A$5c");
      boolean boolean0 = false;
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)107, (byte)107, (LocalVariable[]) null, (ConstantPool) null);
      LocalVariableTable localVariableTable1 = new LocalVariableTable(localVariableTable0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, ":08sI3\"?R", false, localVariableTable1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.replace("L4r4", "L4r4", "L4r4");
      Utility.replace("L4r4", "L4r4", "L4r4");
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("L4r4");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)24;
      byteArray0[8] = (byte)45;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-72), (int) (byte) (-59), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 46893. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.isJavaIdentifierPart('P');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-113);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("d2l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `d2l'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = Utility.replace("Lr4", "Lr4", "Lr4");
      byte byte0 = Utility.typeOfSignature("Lr4");
      assertEquals((byte)14, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('8');
      assertTrue(boolean0);
      
      String string1 = Utility.getSignature("Lr4");
      assertEquals("LLr4;", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[0] = (byte)14;
      byteArray0[0] = (byte)14;
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)14;
      byteArray1[1] = (byte)73;
      byteArray1[2] = (byte)14;
      byteArray0[0] = (byte)73;
      byteArray1[4] = (byte)14;
      byteArray1[5] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string3 = Utility.signatureToString("LLr4;");
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(812);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte) (-36);
      byteArray0[7] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 812, 812, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 49615. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = Utility.convertString("Xr~%zv?Ewf.");
      assertEquals("Xr~%zv?Ewf.", string0);
      
      Locale locale0 = Locale.CANADA;
      Utility.replace("/U*\"", "Xr~%zv?Ewf.", "/U*\"");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)45;
      byteArray1[1] = (byte) (-73);
      byteArray1[2] = (byte) (-73);
      byteArray1[3] = (byte) (-81);
      byteArray1[4] = (byte) (-81);
      byteArray1[5] = (byte) (-81);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      String string1 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(262);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H,u/&");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-94);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-94), 3);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref0;
      constantArray0[4] = (Constant) constantMethodType0;
      constantArray0[5] = (Constant) constantFieldref0;
      constantArray0[6] = (Constant) constantFieldref0;
      constantArray0[7] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 5, 5, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      ConstantPool constantPool0 = null;
      Utility.compactClassName("lconst_0");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "lconst_0";
      Utility.methodTypeToSignature("jn&", stringArray0);
      ConstantUtf8.getInstance("KBib8IyRqYLz'KDJ");
      ConstantInteger constantInteger0 = new ConstantInteger((byte)122);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-219869253), (-194));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.typeOfSignature("jn&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jn&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.replace("L4r4", "L4r4", "L4r4");
      Utility.replace("L4r4", "L4r4", "L4r4");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(20, (byte)113);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureReturnType("GNan#YV|C1@N~#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GNan#YV|C1@N~#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(812);
      Utility.compactClassName("H,u/&", "H,u/&", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = (-1641);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[3] = (Constant) constantMethodType0;
      constantArray0[4] = (Constant) constantMethodType0;
      constantArray0[5] = (Constant) constantMethodType0;
      ConstantLong constantLong0 = new ConstantLong((-2629L));
      constantArray0[6] = (Constant) constantLong0;
      constantArray0[7] = (Constant) constantMethodType0;
      constantArray0[8] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)5, 812, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(812);
      Utility.compactClassName("H,u/&", "H,u/&", true);
      Utility.convertString("H,u/&");
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("H,u/&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H,u/&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Utility.compactClassName("daload");
      byte[] byteArray0 = new byte[25];
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-115);
      byteArray0[5] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes(" not !ou5~.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  not !ou5~.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)60;
      String string0 = "e[Pvyp:;%=}G7Z";
      ClassPath classPath0 = new ClassPath("e[Pvyp:;%=}G7Z");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 60, (int) (byte) (-98), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Integer integer0 = new Integer((-332));
      String string0 = "Ly&6H5<g+m5";
      String string1 = "Qmb4z";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ly&6H5<g+m5", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Ly&6H5<g+m5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), 87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fconst_0
         // 1:    i2d
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)56;
      byte byte0 = (byte)92;
      byteArray0[2] = (byte)92;
      byte byte1 = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("aload_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "jsr_w";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-52);
      byteArray0[2] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byteSequence0.close();
      constantPool1.setConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Utility.isSet(743, 172);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)118;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = Utility.signatureToString("IFzDB4:Ua~roB]YjT", false);
      assertEquals("int", string0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)81;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 162, (int) (byte)103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong((-1L));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.methodSignatureArgumentTypes("dup2_x1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup2_x1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)92;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantLong constantLong0 = new ConstantLong((-663));
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.methodSignatureArgumentTypes("laload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: laload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)122;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)122, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.signatureToString("IFzDB4:UafroB]YjT", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)107;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null);
      byteSequence2.readShort();
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "int";
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence3, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Utility.signatureToString("IFzDB4:Ua~roB]YjT", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)107;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null);
      byteSequence2.readShort();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "int";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) byteSequence0;
      objectArray0[3] = (Object) "dmul";
      Utility.printArray((Object[]) null, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "dmul", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Utility.isJavaIdentifierPart('`');
      String string0 = "\\r";
      Utility.convertString("\r");
      Locale locale0 = Locale.CANADA;
      int int0 = 319;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte)122;
      byteArray0[7] = (byte)28;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 13, 319);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantClass0.setNameIndex((byte)93);
      ConstantLong constantLong0 = new ConstantLong((-1L));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.methodSignatureArgumentTypes("aastore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aastore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.signatureToString("IFzDB4:UafroB]YjT", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)107;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null);
      byteSequence2.readShort();
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "int";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) byteSequence0;
      objectArray0[3] = (Object) "dmul";
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = "if_icmpne";
      try { 
        Utility.methodSignatureArgumentTypes("if_icmpne");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpne
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)37;
      byte byte0 = (byte)87;
      byteArray0[4] = (byte)87;
      ConstantPool constantPool0 = null;
      int int0 = 54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 54, (int) (byte)87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'");
      Utility.compactClassName("'", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      Utility.replace("'", "'", ":D\"R&ht8!u]SHe");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)92;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantClass0.setNameIndex((-663));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantClass0;
      ConstantLong constantLong0 = new ConstantLong((-663));
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.methodSignatureArgumentTypes("dup2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.signatureToString("IFzDB4:Ua~roB]YjT", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)81;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)72;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)122;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byteSequence0.readShort();
      byte[] byteArray1 = new byte[0];
      String string0 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)0;
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals("null, 0, 0", string1);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string2 = Utility.compactClassName("dstore_1", "dstore_1", false);
      assertEquals("dstore_1", string2);
      
      int int0 = Utility.clearBit((-1351), (byte)0);
      assertEquals((-1352), int0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      boolean boolean0 = false;
      int int0 = 319;
      int int1 = 255;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 255, 319);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.clearBit(13, 1395);
      String string0 = Utility.format(1395, 1395, false, ')');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance(string0);
      Utility.signatureToString("TaE@o`Y;P");
      try { 
        Utility.methodSignatureReturnType("aE@o`Y", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aE@o`Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byteSequence0.close();
      constantPool1.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Utility.convertString("putfield");
      Locale locale0 = Locale.CANADA;
      String string0 = "\\r";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-2010), (-1), (LocalVariable[]) null, constantPool1);
      try { 
        Utility.methodSignatureToString("putfield", "if_icmpgt", "putfield", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Utility.isJavaIdentifierPart('P');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte) (-72);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-58), (int) (byte) (-73), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 46979. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(812);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-13);
      ClassPath classPath0 = new ClassPath("?G*xSZz");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte) (-13), false);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("?G*xSZz");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      byte byte0 = (byte)72;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)40, 319);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-124);
      Utility.isJavaIdentifierPart('?');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 669, (int) (byte) (-96), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-52);
      byteArray0[2] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byteSequence0.close();
      constantPool1.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("jsr_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jsr_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte)92;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      int int0 = Utility.setBit((-1193), (-2820));
      assertEquals((-1193), int0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[1] = (Object) (byte)92;
      objectArray0[2] = (Object) (byte)56;
      objectArray0[3] = (Object) (byte) (-87);
      objectArray0[4] = (Object) (byte)92;
      objectArray0[5] = (Object) (byte)92;
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{$l$8b$I$A$A$A$A$A$A$A, 92, 56, -87, 92, 92}", string1);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-58);
      byteArray1[1] = (byte) (-87);
      byteArray1[2] = (byte) (-87);
      byteArray1[3] = (byte)92;
      byteArray1[4] = (byte) (-69);
      byteArray1[5] = (byte) (-58);
      byteArray1[6] = (byte) (-58);
      byteArray1[7] = (byte)92;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantClass0.setNameIndex(58);
      Constant[] constantArray0 = new Constant[3];
      constantClass0.toString();
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPool0.setConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Utility.convertString("putfield");
      Locale locale0 = Locale.CANADA;
      Utility.replace("eYYe `vl``.$E", "\r", "void");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-74);
      byteArray1[1] = (byte) (-90);
      byteArray1[2] = (byte) (-67);
      byteArray1[3] = (byte)84;
      byteArray1[4] = (byte) (-67);
      byteArray1[5] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = "\\r";
      byte byte0 = (byte)117;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)117;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 615, 1560);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.replace("L4r4", "L4r4", "L4r4");
      Utility.replace("L4r4", "L4r4", "L4r4");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("zRm_.=_Euyq>[j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: zRm_.=_Euyq>[j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Utility.signatureToString("IFzDB4:Ua~roB]YjT", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)107;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 162, (int) (byte)107);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Utility.compactClassName("daload");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      byteSequence0.skipBytes((-596));
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String[] stringArray0 = Constants.CONSTANT_NAMES;
      try { 
        Utility.methodSignatureArgumentTypes("daload", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: daload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Utility.signatureToString("IFzDB4:Ua~roB]YjT", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 162, (int) (byte) (-124));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)52;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)39, (byte) (-82));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref0;
      constantArray0[4] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 23, (int) (byte)49, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)78;
      byteArray0[2] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)78, 26);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref0;
      constantArray0[5] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-9), 87, true);
      int int0 = Utility.setBit(55, 151);
      assertEquals(8388663, int0);
      
      String string1 = Utility.compactClassName("0:    nop\n1:    <illegal opcode>\n2:    dload_2\n3:    astore_3\n4:    nop\n", "\tdefault = ", true);
      assertTrue(string1.equals((Object)string0));
      
      Utility.format((byte)0, (byte) (-9), true, '4');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)78, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[0] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[1] = (byte)24;
      ClassPathRepository classPathRepository0 = new ClassPathRepository((ClassPath) null);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-920), (byte)24);
      ConstantString constantString0 = new ConstantString((byte)24);
      constantArray0[1] = (Constant) constantString0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("goto_w");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantPool0.dump(dataOutputStream0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("athrow");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: athrow
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)60;
      String string0 = "e[Pvyp:;%=}G7Z";
      ClassPath classPath0 = new ClassPath("e[Pvyp:;%=}G7Z");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 60, (-2222), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Utility.setBit(4004, 4004);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte)56;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(173, 10);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 23, (int) (byte)78, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Utility.clearBit(101, 101);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ClassPath classPath0 = new ClassPath("J");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)102;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)76, 86, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Utility.clearBit(101, 101);
      Constant[] constantArray0 = new Constant[9];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte) (-115);
      byteArray0[8] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 25657. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Utility.replace("Lr4", "Lr4", "Lr4");
      Utility.typeOfSignature("Lr4");
      Utility.isJavaIdentifierPart('?');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1278), (int) (byte) (-97));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dconst_0
         // 1:    if_icmpeq\t\t#3599
         // 4:    <illegal opcode>
         // 5:    dconst_0
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)118;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)66, (int) (byte)126, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("qHHZ");
      Utility.signatureToString("LqHHZ;", true);
      Utility.convertString("FdmnB(i{nK6+PZ!RYG");
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("}8t|@O>TZV4", "FdmnB(i{nK6+PZ!RYG", "instanceof");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }8t|@O>TZV4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)52;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)39, (byte) (-82));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref0;
      constantArray0[4] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 23, (int) (byte)49, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Utility.accessToString(101);
      Utility.clearBit(101, 101);
      Utility.format(90, 69, false, '-');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      Constant[] constantArray0 = new Constant[8];
      Constant constant0 = constantClass0.copy();
      constantArray0[0] = constant0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      constantArray0[6] = (Constant) constantClass0;
      constantArray0[7] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Utility.setBit(4004, 4004);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      Utility.methodSignatureReturnType("V");
      String string0 = "Yh,z";
      try { 
        Utility.typeOfSignature("Yh,z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yh,z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Utility.compactClassName("daload");
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-115);
      Utility.accessToString((-3543));
      Utility.typeOfSignature("C");
      Utility.convertString("C");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, 194, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)122;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[6] = (byte)95;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString(11);
      assertEquals("public private static", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byte[] byteArray1 = new byte[0];
      String string1 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) (byte) (-70);
      objectArray0[2] = (Object) (byte)124;
      String string2 = Utility.printArray(objectArray0, false, false);
      assertEquals("null, -70, 124", string2);
      
      String string3 = Utility.compactClassName("dstore_1", "dstore_1", false);
      assertEquals("dstore_1", string3);
      
      String string4 = Utility.printArray(objectArray0);
      assertEquals("{null, -70, 124}", string4);
      
      int int0 = Utility.clearBit((-1351), (byte) (-70));
      assertEquals((-67110215), int0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.signatureToString("Byte code error: ", true);
      Utility.convertString("Byte code error: ");
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("byte", "wN-\"pJ95Sd\"(i", "Byte code error: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(812);
      Constant[] constantArray0 = new Constant[13];
      constantArray0[0] = (Constant) constantMethodType0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassPath classPath0 = new ClassPath("VB9Y1Xt[[|9");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      int int0 = 234;
      ConstantClass constantClass0 = new ConstantClass(48);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(48);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 62, 812, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("7}~7-c", "\t\t", true);
      Utility.clearBit(4, (-382));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      ConstantClass constantClass0 = new ConstantClass(4);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1495);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(245, 0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 234, 2678, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 245. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = Utility.getSignature("ED|V^Xm[x6eTz+]:f0");
      assertEquals("[LED|V^Xm;", string0);
      
      ClassPath classPath0 = new ClassPath("[LED|V^Xm;");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-55);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Utility.fillup("[LED|V^Xm;", (byte) (-55), false, '8');
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("12 c9 22 c9", string1);
      
      Utility.compactClassName("monitorexit", false);
      Object[] objectArray0 = new Object[0];
      String string2 = Utility.printArray(objectArray0, false, true);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Utility.compactClassName("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-122);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readBoolean();
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(812);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodType0;
      Utility.accessToString(812);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-63);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 812, (int) (byte) (-63), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = Utility.classOrInterface(1027);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte) (-20);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)10;
      byteArray1[1] = (byte) (-90);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.getSignature("qHHZ");
      assertEquals("LqHHZ;", string0);
      
      String string1 = Utility.signatureToString("LqHHZ;");
      assertEquals("qHHZ", string1);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)102;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      int int0 = Utility.setBit(7, (-537));
      assertEquals(135, int0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("qHHZ");
      Utility.signatureToString("LqHHZ;");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = false;
      Utility.printArray((Object[]) constantArray0, true, false);
      Utility.clearBit(160, 91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(byteSequence0);
      try { 
        constantPool1.constantToString(1059, (byte)32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1059. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(812);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-13);
      ClassPath classPath0 = new ClassPath("?G*xSZz");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[0];
      Utility.encode(byteArray1, true);
      Utility.accessToString(812, true);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = "L4r4";
      Utility.replace("L4r4", "L4r4", "L4r4");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[1] = (byte)24;
      ClassPathRepository classPathRepository0 = new ClassPathRepository((ClassPath) null);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-920), (byte)24);
      ConstantString constantString0 = new ConstantString((byte)24);
      constantArray0[1] = (Constant) constantString0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(599, 2001);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)24, 599, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Utility.compactClassName("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-122);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Utility.methodSignatureReturnType("Vl+jWy%k=fE,", true);
      Utility.signatureToString("VWfd**q", true);
      String string0 = "qHHZ";
      try { 
        Utility.typeOfMethodSignature("*xec1>nN)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *xec1>nN)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantInteger1;
      constantArray0[1] = (Constant) constantInteger1;
      constantArray0[2] = (Constant) constantInteger1;
      constantArray0[3] = (Constant) constantInteger0;
      constantArray0[4] = (Constant) constantInteger1;
      constantArray0[5] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInteger0.clone();
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-2850), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = Utility.compactClassName("daload");
      assertEquals("daload", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-115);
      String string1 = Utility.accessToString((-3543));
      assertEquals("public static synchronized interface synthetic annotation enum", string1);
      
      byte byte0 = Utility.typeOfSignature("C");
      assertEquals((byte)5, byte0);
      
      String string2 = Utility.convertString("C");
      assertEquals("C", string2);
      
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, 194, false);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)34;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-1364), 88, true);
      assertEquals("0:    nop\n1:    ddiv\n2:    lshr\n3:    dstore_2\n4:    idiv\n5:    fload_0\n", string1);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("qHHZ");
      Utility.signatureToString("LqHHZ;");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.methodSignatureArgumentTypes("W4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("dup_x1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup_x1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)52;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)39, (byte) (-82));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref0;
      constantArray0[4] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(3, byteSequence0.getIndex());
      
      String string0 = Utility.getSignature("$c7$f21$ae$d6$ff$t4");
      assertEquals("L$c7$f21$ae$d6$ff$t4;", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = "Dw25w8Oe";
      Utility.signatureToString("Dw25w8Oe", true);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(812);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-13);
      ClassPath classPath0 = new ClassPath("?G*xSZz");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-12), (int) (byte) (-13), false);
      try { 
        Utility.methodSignatureArgumentTypes("?G*xSZz", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?G*xSZz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "ZBx{N:X";
      Utility.signatureToString("ZBx{N:X", true);
      try { 
        Utility.typeOfMethodSignature("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String[] stringArray0 = Constants.TYPE_NAMES;
      Utility.isJavaIdentifierPart(']');
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("=tm[1");
      File file0 = MockFile.createTempFile("=tm[1", "=tm[1", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.TAIWAN;
      Object object0 = new Object();
      Locale locale1 = Locale.KOREAN;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "CONSTANT_Integer", (Object[]) null);
      Utility.printArray(printWriter0, (Object[]) null);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Utility.compactClassName("7ux~ir! ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-32);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 9, (int) (byte)112);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      int int0 = (-724);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      Utility.toHexString(byteArray0);
      String[] stringArray0 = Constants.CONSTANT_NAMES;
      try { 
        Utility.typeOfSignature("2a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)55;
      Utility.accessToString((int) (byte)55);
      try { 
        Utility.typeOfSignature("4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("\nAttribute(s) = ");
      try { 
        Utility.typeOfMethodSignature("LAttribute(s);");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LAttribute(s);
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.signatureToString("JavaClass.debug", false);
      String string0 = "nSqLa|1t/^X%?\"Q";
      try { 
        Utility.typeOfSignature("nSqLa|1t/^X%?\"Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nSqLa|1t/^X%?\"Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("", "", true);
      Utility.convertString("");
      Utility.compactClassName("byte", "m*XN6B=#@md1", true);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)120;
      byteArray0[0] = (byte)120;
      Utility.toHexString(byteArray0);
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      try { 
        Utility.typeOfSignature("78");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 78
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = "K4";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("K4", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "(\"T|_|q_JLsRuh/";
      try { 
        Utility.typeOfMethodSignature("(\"T|_|q_JLsRuh/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (\"T|_|q_JLsRuh/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)95;
      Utility.encode(byteArray0, false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "$A$p$K$z_$A";
      stringArray0[1] = null;
      stringArray0[2] = "$A$p$K$z_$A";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.replace("float", "p'kNIB4", "java.lang., nairs = ");
      assertEquals("float", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('z');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utility.encode(byteArray0, true);
      Utility.classOrInterface((byte)0);
      try { 
        Utility.typeOfSignature("java.lang., nairs = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang., nairs = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = "Lr4";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Lr4", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lr4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      Utility.toHexString(byteArray0);
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      try { 
        Utility.typeOfSignature("5b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Utility.clearBit((-1), (-1));
      try { 
        Utility.typeOfSignature("class_index");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class_index
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Utility.compactClassName("daload");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes(" not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  not found.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Utility.clearBit(512, (-1457));
      String string0 = "Ka5-hUPdulg\",\\sbrk";
      try { 
        Utility.methodSignatureReturnType("Ka5-hUPdulg\",sbrk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ka5-hUPdulg\",sbrk'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "CNqQ}Hso/%";
      Utility.signatureToString("CNqQ}Hso/%", true);
      Utility.typeOfSignature("CNqQ}Hso/%");
      String string1 = "float";
      try { 
        Utility.methodSignatureArgumentTypes("float", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("1O|FvJI{v86,.n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1O|FvJI{v86,.n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = "X>y/N,~jc";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = "Qmbrz";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Qmbrz", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qmbrz'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      short short0 = Utility.searchOpcode("lload");
      assertEquals((short)22, short0);
      
      byte byte0 = Utility.typeOfSignature("T':P~?3~W+Vq");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      String string0 = "[E\\_{kOVV;?ayx?f1";
      try { 
        Utility.methodSignatureArgumentTypes("[E_{kOVV;?ayx?f1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [E_{kOVV;?ayx?f1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Hqv5Bc4{N-W/:PED>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hqv5Bc4{N-W/:PED>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)34;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-1364), 88, true);
      assertEquals("0:    nop\n1:    ddiv\n2:    lshr\n3:    nop\n4:    idiv\n5:    fload_0\n", string1);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "monitorenter";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(\"T|_|q_JLsRuh/", ", nairs = ", "monitorenter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"T|_|q_JLsRuh/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = "3`{3'cIZB";
      try { 
        Utility.typeOfSignature("9KSoVb}oSR0;H[bj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9KSoVb}oSR0;H[bj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Utility.isJavaIdentifierPart('Z');
      Utility.isSet(61, (-1376));
      Utility.isSet(87, 87);
      Utility.format(87, 87, true, 'q');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "87qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq";
      objectArray0[3] = (Object) "87qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq";
      objectArray0[4] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 54, 424);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("(>T|_|q!JLsRuh/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (>T|_|q!JLsRuh/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      try { 
        Utility.methodSignatureReturnType("QA!@EGJ{q9>Te!dMlO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QA!@EGJ{q9>Te!dMlO'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      try { 
        Utility.typeOfSignature("RsLs&K5SUEgv[fGp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RsLs&K5SUEgv[fGp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      char char0 = 'b';
      Utility.format(304, 0, false, 'b');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Utility.equals(byteArray0, byteArray0);
      boolean boolean0 = false;
      Utility.accessToString(0, false);
      Utility.accessToString(3872, false);
      String string0 = "lvhXor22hEFl4";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "lvhXor22hEFl4", "304");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      try { 
        Utility.methodSignatureReturnType("RsLs&K5SUEgv[fGp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RsLs&K5SUEgv[fGp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature(";MTS@s}pYN<:TzVpi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;MTS@s}pYN<:TzVpi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = "F}/S.'K9)B\"|UN=1v{";
      Utility.typeOfSignature("F}/S.'K9)B\"|UN=1v{");
      try { 
        Utility.typeOfMethodSignature("SR.lSq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: SR.lSq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Utility.clearBit(77, 77);
      Utility.compactClassName("Lo;^");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)112;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 65, (int) (byte)83);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("O", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = Utility.format((-680), 1027, true, 'Z');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = "YM3N|Vb8";
      try { 
        Utility.methodSignatureReturnType("YM3N|Vb8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YM3N|Vb8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Utility.typeOfSignature("Iec;hD|Ja1bxVx");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(87);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(47, (byte)10);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 907, 62, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      try { 
        Utility.typeOfSignature("KRj,|gU%!)C3R-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KRj,|gU%!)C3R-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = "+";
      try { 
        Utility.typeOfSignature("+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("O*r[b;bnAt+L~?Kg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O*r[b;bnAt+L~?Kg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = Utility.typeOfSignature("Illegally nested brackets:");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.getSignature("nSqLa|1t/^X%?\"Q D/");
      assertEquals("LnSqLa|1t/^X%?\"Q;", string0);
      
      String string1 = Utility.methodSignatureReturnType("LnSqLa|1t/^X%?\"Q;", false);
      assertEquals("nSqLa|1t.^X%?\"Q", string1);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = "Jw8%Cl]Pr6f`\\uek>";
      byte byte0 = Utility.typeOfSignature(string0);
      assertEquals((byte)11, byte0);
      
      String string1 = Utility.format(41, 41, false, 'T');
      assertEquals("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT41", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)11;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(>T|_|q!JLsRuh/", ", nairs = ", "monitorenter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>T|_|q!JLsRuh/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t<");
      assertEquals("L<;", string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Ue!20]1OED-#/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ue!20]1OED-#/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("newarray", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("%zQ:5\"J@k7A{7`{Mdp", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %zQ:5\"J@k7A{7`{Mdp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object1;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, 162);
      assertEquals("0:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.typeOfSignature("SourceFile: ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("lreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lreturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("A@jFlL`WR^1 7I-d[<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A@jFlL`WR^1 7I-d[<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "Q";
      try { 
        Utility.typeOfSignature("Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("Dont call getValueLong() on a non LONG ElementValue", "Dont call getValueLong() on a non LONG ElementValue", true);
      assertEquals("", string0);
      
      byte byte0 = Utility.typeOfSignature("V@(,o");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("0)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("2B)#<h", (String) null, ", low = ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2B)#<h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "*}eddkz$??gE";
      try { 
        Utility.typeOfSignature("*}eddkz$??gE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }eddkz$??gE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = Utility.typeOfSignature("Invalid byte tag in constant pool: ");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.accessToString(86);
      assertEquals("private protected final volatile", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      boolean boolean0 = Utility.isJavaIdentifierPart('u');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Utility.compactClassName("daload");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes(" not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  not found.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Dont call)getValueLong() on a non LON& ElementValue");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      int int0 = 8;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 8, false, 'F');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "#";
      try { 
        Utility.typeOfSignature("#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("P", string0);
      
      Utility.isJavaIdentifierPart('M');
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Utility.getSignature("impdep2");
      Utility.classOrInterface((-1510));
      try { 
        Utility.methodSignatureReturnType("interface", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = Utility.fillup("java.lang.", (-32), true, '<');
      assertEquals("java.lang.", string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = "%zQ:5\"J@k7A{7`{Mdp";
      try { 
        Utility.typeOfSignature("EKGtF%=5%458X/KPYR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EKGtF%=5%458X/KPYR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      ByteSequence byteSequence0 = null;
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(677);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = "NqQHso/%";
      try { 
        Utility.typeOfSignature("NqQHso/%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NqQHso/%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("U_VM0IxD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U_VM0IxD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Utility.typeOfSignature("[\"t(kta%A\"7#L");
      try { 
        Utility.typeOfSignature("3s`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3s`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[m[VZm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [m[VZm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "9LI/*B,p3 )[EeS\\uqB";
      Utility.compactClassName("D$w+L+r$H6%\"o'etr", string0, true);
      Utility.methodSignatureReturnType("D$w+L+r$H6%\"o'etr");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-74);
      Constant[] constantArray0 = new Constant[5];
      ConstantLong constantLong0 = new ConstantLong(3042L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(46);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-55), 70);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType((byte) (-55));
      constantArray0[3] = (Constant) constantMethodType1;
      Constant constant0 = constantArray0[2].copy();
      constantArray0[4] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-55), 45, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      try { 
        Utility.typeOfSignature("WCC2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WCC2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      try { 
        Utility.typeOfSignature("... (truncated)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ... (truncated)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%zQ:5\"J@k7A{7`{Mdp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %zQ:5\"J@k7A{7`{Mdp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = "PR&;FDtzl.";
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)40;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("PR&;FDtzl.", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PR&;FDtzl.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Utility.typeOfSignature("[\"t(kta%A\"7#L");
      // Undeclared exception!
      try { 
        Utility.signatureToString("[\"t(kta%A\"7#L", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"t(kta%A\"7#L'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = Utility.convertString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "org.apache.bcel.classfile.ElementValuePair";
      String string1 = "_v9.gSVL=5YR]sv\\S";
      LocalVariableTable localVariableTable0 = null;
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.ElementValuePair", "org.apache.bcel.classfile.ElementValuePair", "_v9.gSVL=5YR]svS", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.ElementValuePair
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = "PR&;FDtzl.";
      try { 
        Utility.typeOfSignature("PR&;FDtzl.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PR&;FDtzl.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!W*u+zmt5aDtJ8?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W*u+zmt5aDtJ8?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.classOrInterface(1020);
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Utility.typeOfSignature("![P+8e.[_i))Z:(\"");
      // Undeclared exception!
      try { 
        Utility.signatureToString("![P+8e.[_i))Z:(\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `![P+8e.[_i))Z:(\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      try { 
        Utility.methodSignatureToString("", "rax}0j [n", "", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Utility.typeOfSignature("[\"t(kta%A\"7#L");
      String string0 = Utility.signatureToString("SSq\"", true);
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = Utility.signatureToString("IFzDB4:Ua~roB]YjT", false);
      assertEquals("int", string0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "i`IV2e_wS N(>*4[e";
      stringArray0[1] = "_Q>";
      stringArray0[2] = "_Q>";
      stringArray0[3] = ",qt{Oj>x>";
      stringArray0[4] = "i`IV2e_wS N(>*4[e";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("_Q>", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Utility.getSignature("org.apache.bcel.classfile.RuntimeVisibleAnnotations");
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "float");
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "float";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "float";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "float";
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-50);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$ef$p$K$z_$ce", string0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("ConstantValue");
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("IFzDB4:Ua~roB]YjT");
      assertEquals((byte)10, byte0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.classOrInterface((byte)10);
      assertEquals("class", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) "IFzDB4:Ua~roB]YjT";
      objectArray0[2] = (Object) "class";
      String string1 = Utility.printArray(objectArray0, true, false);
      assertEquals("{class, IFzDB4:Ua~roB]YjT, class}", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " arg");
      boolean boolean0 = Utility.isJavaIdentifierPart('=');
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) " arg";
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals("{null, null,  arg}", string0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-4);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)9);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantString constantString0 = new ConstantString(20000);
      constantArray0[1] = (Constant) constantString0;
      ConstantString constantString1 = new ConstantString(46);
      constantArray0[2] = (Constant) constantString1;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[3] = constant0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)9);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[4] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.printArray((Object[]) constantArray0, false, true);
      assertEquals("\"CONSTANT_Integer[3](bytes = 9)\", \"CONSTANT_String[8](string_index = 20000)\", \"CONSTANT_String[8](string_index = 46)\", \"CONSTANT_Integer[3](bytes = 9)\", \"CONSTANT_Float[4](bytes = 9.0)\"", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      try { 
        Utility.typeOfSignature("G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)95;
      Utility.equals(byteArray0, byteArray0);
      Utility.replace("LcEgE?PcV!", "LcEgE?PcV!", "StackMap");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[]");
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("IFzDB4:Ua~roB]YjT");
      assertEquals((byte)10, byte0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("Types", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Types
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("NqQHso/%", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NqQHso/%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Utility.compactClassName("![P+8e.[_i))", "![P+8e.[_i))", true);
      try { 
        Utility.methodSignatureReturnType("LN?bQAbvJlg^V]3a.P$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LN?bQAbvJlg^V]3a.P$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Utility.signatureToString("Illegally nested brackets:");
      Utility.methodSignatureReturnType("Ili.J'%D60Zj+}/z");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Utility.compactClassName("7}~7-c", "\t\t", true);
      int int0 = Utility.clearBit(4, (-382));
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)34;
      Utility.equals(byteArray0, byteArray0);
      String string0 = Utility.fillup("double", 25, false, '8');
      assertEquals("8888888888888888888double", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("12 23 b9 12 22", string1);
      
      String string2 = Utility.compactClassName("UJjBj`*l-7Q7T$+j", false);
      assertEquals("UJjBj`*l-7Q7T$+j", string2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-71);
      objectArray0[1] = (Object) "UJjBj`*l-7Q7T$+j";
      String string3 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"-71\", \"UJjBj`*l-7Q7T$+j\"}", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Utility.convertString("ED|V^X?m/eTz+H]:f |");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureReturnType("Ly&4Ho<g+5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Ly&4Ho<g+5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Utility.replace("0jlS", "0jlS", "E9,");
      Utility.compactClassName("E9,");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)88);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Vl+jWy%k=fE,", true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "void";
      objectArray0[1] = (Object) "Vl+jWy%k=fE,";
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-25);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)47, (byte) (-87));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureReturnType("Types");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Types
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Utility.signatureToString("J(,{dt<{");
      try { 
        Utility.typeOfSignature("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("+4AYO.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4AYO.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("IFzDB4:Ua~roB]YjT");
      assertEquals((byte)10, byte0);
      
      Utility.signatureToString("IFzDB4:Ua~roB]YjT");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)10;
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte)10;
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (-650), (-650));
      assertEquals("0:    lconst_1\n1:    lconst_1\n2:    lconst_1\n", string0);
      
      int int0 = Utility.clearBit((byte)10, (byte)10);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Utility.replace("wJjH&kj'.V", "wJjH&kj'.V", (String) null);
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Utility.compactClassName("![P+8e.[_i))", "![P+8e.[_i))", true);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String string0 = Utility.getSignature("ED|V^X?m[x6eTz+H]:f0");
      assertEquals("[LED|V^X?m;", string0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Utility.typeOfSignature("[\"t(kta%A\"7#L");
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.getSignature("K F9D");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("X>y/N,~jc", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X>y/N,~jc'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = "[{_4xPrx(";
      try { 
        Utility.methodSignatureReturnType("[{_4xPrx(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{_4xPrx('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Utility.convertString("ED|V^X?m/eTz+H]:f |");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "LnLr9Z", "LnLr9Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 3267, 3267, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Utility.convertString("\n     Method Arguments:");
      Locale locale0 = Locale.CANADA;
      assertEquals("en_CA", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String string0 = Utility.replace("X>/N,~jc", "X>/N,~jc", "X>/N,~jc");
      Locale locale0 = Locale.CANADA;
      String string1 = Utility.convertString("X>/N,~jc");
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[0];
      String string2 = Utility.toHexString(byteArray0);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Utility.convertString("X>/N,~jc");
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, "unCem");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.convertString("Xr~%zv?Ewf.");
      Locale locale0 = Locale.CANADA;
      String string1 = Utility.replace("Xr~%zv?Ewf.", "Xr~%zv?Ewf.", "Xr~%zv?Ewf.");
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_3", string2);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet(48, 48);
      String string0 = "(lS%";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dreturn", "dreturn", "(lS%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 80;
      try { 
        Utility.typeOfMethodSignature("\t<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Utility.typeOfSignature("CONSTANT_InvokeDynamic");
      Utility.accessToString((-1377));
      Utility.replace("CONSTANT_InvokeDynamic", "5kfrevbo04*)REO", "public private protected static final transient interface strictfp synthetic annotation enum");
      Utility.isJavaIdentifierPart('}');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("CONSTANT_InvokeDynamic", "r8j{YIl;Aj,", "areturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: CONSTANT_InvokeDynamic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Utility.setBit(4004, 4004);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte)56;
      Utility.encode(byteArray0, false);
      Utility.accessToString(4004, true);
      try { 
        Utility.methodSignatureArgumentTypes("\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Wy~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wy~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      String string0 = Utility.compactClassName("\"n", false);
      assertEquals("\"n", string0);
      
      String string1 = Utility.accessToString((-2732));
      assertEquals("protected final volatile native abstract synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Utility.accessToString(89, true);
      Utility.setBit(4462, (-1398));
      Utility.accessToString(14, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public static final volatile", "private protected static", "private protected static");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public static final volatile
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String string0 = Utility.signatureToString("IFzDB4:Ua~roB]YjT");
      assertEquals("int", string0);
      
      short short0 = Utility.searchOpcode("int");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Utility.compactClassName("", "", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      int int0 = 0;
      Utility.isJavaIdentifierPart('n');
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Utility.convertString("X>y/N,~jc");
      Utility.compactClassName("X>y/N,~jc");
      Utility.searchOpcode("X>y/N,~jc");
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      int int0 = Utility.clearBit(0, (-794));
      assertEquals(0, int0);
      
      short short0 = Utility.searchOpcode("wide");
      assertEquals((short)196, short0);
      
      byte[] byteArray0 = Utility.decode("tableswitch", false);
      assertEquals(11, byteArray0.length);
      
      String string0 = Utility.methodTypeToSignature("null", (String[]) null);
      assertEquals("()Lnull;", string0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Utility.setBit(873, 244);
      boolean boolean0 = false;
      Utility.compactClassName(", high = ", "2neT0\"U/|/qj", false);
      try { 
        Utility.methodSignatureReturnType("N0wd/", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N0wd/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("IFzDB4:Ua~roB]YjT");
      assertEquals((byte)10, byte0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B4L'71^V'2~Y", true);
      String string0 = Utility.replace("B4L'71^V'2~Y", "j[jY\"fJq", "getstatic");
      assertEquals("B4L'71^V'2~Y", string0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Utility.isJavaIdentifierPart('0');
      try { 
        Utility.typeOfMethodSignature("Gk3@N ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gk3@N 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Utility.isJavaIdentifierPart('T');
      // Undeclared exception!
      try { 
        Utility.signatureToString("Gk3@N ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gk3@N '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String string0 = "X>yN,~jc";
      // Undeclared exception!
      try { 
        Utility.signatureToString("X>yN,~jc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X>yN,~jc'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('`');
      String string0 = Utility.convertString("\r");
      assertEquals("\\r", string0);
      
      Locale locale0 = Locale.CANADA;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte)99;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String string0 = "IFzDB4:Ua,roB]YjT";
      Utility.typeOfSignature("IFzDB4:Ua,roB]YjT");
      String string1 = ",?,{FmIlj+n^u";
      // Undeclared exception!
      try { 
        Utility.signatureToString(",?,{FmIlj+n^u", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `,?,{FmIlj+n^u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Utility.isJavaIdentifierPart('`');
      // Undeclared exception!
      try { 
        Utility.signatureToString("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = Utility.typeOfSignature("LLg:L/ytBn_d2&QJ^C];V");
      assertEquals((byte)14, byte0);
      
      short short0 = Utility.searchOpcode("LLg:L/ytBn_d2&QJ^C];V");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)14;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Utility.clearBit(0, (-794));
      // Undeclared exception!
      try { 
        Utility.signatureToString("E7b&/.Ri9*t:B18", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E7b&/.Ri9*t:B18'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Utility.convertString("X>y/N,~jc");
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Utility.convertString("E$,9'\"Q<(!c@5]N)B");
      String string0 = "N0wd/";
      boolean boolean0 = false;
      Utility.compactClassName("N0wd/", "E$,9'\"Q<(!c@5]N)B", false);
      Utility.isSet(241, 241);
      try { 
        Utility.typeOfSignature("iconst_4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iconst_4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Utility.compactClassName("", "", true);
      Utility.setBit((-332), (-831));
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      String string0 = Utility.convertString("X>y/N,~jc");
      assertEquals("X>y/N,~jc", string0);
      
      boolean boolean0 = Utility.isSet((-351), (-2332));
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)76;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("35 f8 eb 00 4a 4c", string1);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Utility.convertString("E$,9'\"Q<(!c@5]N)B");
      String string0 = Utility.compactClassName("N0wd/", "E$,9'\"Q<(!c@5]N)B", false);
      assertEquals("N0wd.", string0);
      
      String string1 = Utility.methodSignatureReturnType("E$,9'\"Q<(!c@5]N)B", false);
      assertEquals("byte", string1);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      int int0 = 0;
      int int1 = (-778);
      Utility.clearBit(0, (-778));
      Utility.isSet(0, 0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("&3M`aj#M8Y,YDJnG(U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `&3M`aj#M8Y,YDJnG(U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("", "}gVc5pJ8cYs)2", true);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Utility.isJavaIdentifierPart('#');
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      String string0 = "";
      Utility.isJavaIdentifierPart('T');
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = Utility.convertString("java.lang.~X]P-EeKehy#f*,A3");
      assertEquals("java.lang.~X]P-EeKehy#f*,A3", string0);
      
      boolean boolean0 = Utility.isSet((-2525), 150);
      assertTrue(boolean0);
      
      int int0 = Utility.clearBit((-629), 1820);
      assertEquals((-268436085), int0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Utility.typeOfSignature("IFzDB4:Ua,roB]YjT");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.format(32, (-351), true, '/');
      assertEquals("32", string0);
      
      String string1 = Utility.fillup("32", 32, true, '/');
      assertEquals("32//////////////////////////////", string1);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-94);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)93;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String string0 = Utility.convertString("O");
      assertEquals("O", string0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Utility.convertString("X>y/N,~jc");
      boolean boolean0 = true;
      Utility.format((-351), 32, true, '/');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "X>y/N,~jc";
      objectArray0[1] = (Object) "-351////////////////////////////";
      objectArray0[2] = (Object) "X>y/N,~jc";
      objectArray0[3] = (Object) "-351////////////////////////////";
      objectArray0[4] = (Object) "X>y/N,~jc";
      objectArray0[5] = (Object) "-351////////////////////////////";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 97
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      boolean boolean0 = Utility.isSet(2558, (byte)93);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)93;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) (byte)93;
      objectArray0[5] = (Object) (byte)0;
      objectArray0[6] = (Object) (byte)0;
      String string0 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string0);
      assertEquals("\"0\", \"93\", \"0\", \"0\", \"93\", \"0\", \"0\"", string0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("&0spAExX;@", "", "H,u/&H,u.&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &0spAExX;@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Utility.compactClassName("", "}gVc5pJ8cYs)2", true);
      boolean boolean0 = true;
      Utility.format(586, 586, true, 'R');
      try { 
        Utility.methodSignatureReturnType("java.lang.\t(wide)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Utility.convertString("X>y/N,~jc");
      int int0 = (-1490);
      int int1 = 1984;
      Utility.setBit(1984, (-351));
      try { 
        Utility.typeOfSignature("X>y/N,~jc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X>y/N,~jc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      String string0 = Utility.compactClassName("", "}gVc5pJ8cYs)2", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      boolean boolean1 = Utility.isSet((byte)0, (byte)0);
      assertFalse(boolean1 == boolean0);
      
      String string1 = Utility.accessToString((int) (byte)0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("i`IV2e_wS N(>*4[e", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `i`IV2e_wS N(>*4[e'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      byteSequence0.markSupported();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      try { 
        Utility.methodSignatureReturnType("t(X$B*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `t(X$B*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "org.apache.bcel.classfile.StackMapType", " [");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Utility.compactClassName("", "}gVc5pJ8cYs)2", true);
      Utility.getSignature("int");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "I";
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "}gVc5pJ8cYs)2";
      objectArray0[4] = (Object) "int";
      Utility.printArray(objectArray0, true);
      String string0 = Utility.compactClassName("}gVc5pJ8cYs)2");
      assertEquals("}gVc5pJ8cYs)2", string0);
      
      String string1 = Utility.getSignature("sD{:3s!");
      assertEquals("LsD{:3s!;", string1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-128);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("H5u c!}&", "H5u c!}&", true);
      assertEquals("", string0);
      
      String string1 = Utility.format((byte) (-46), (byte)60, true, '3');
      assertEquals("-46333333333333333333333333333333333333333333333333333333333", string1);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      String string0 = Utility.accessToString((int) '9');
      assertEquals("public static final synchronized", string0);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      int int0 = (-778);
      Utility.clearBit((-778), 121);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      String string0 = Utility.compactClassName("", "}gVc5pJ8cYs)2", true);
      assertEquals("", string0);
      
      boolean boolean0 = Utility.isSet(241, 221);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      int int0 = Utility.setBit(873, (-1490));
      assertEquals(17257, int0);
      
      String string0 = Utility.format((-1490), 118, true, '\u0090');
      assertEquals("-1490\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090\u0090", string0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      String string0 = Utility.compactClassName("", "}gVc5pJ8cYs)2", true);
      assertEquals("", string0);
      
      String string1 = Utility.fillup("}gVc5pJ8cYs)2", 7, false, '%');
      assertEquals("}gVc5pJ8cYs)2", string1);
      
      String string2 = Utility.accessToString(117, true);
      assertEquals("public protected final volatile", string2);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      String string0 = Utility.format((byte)0, 3, false, 'b');
      assertEquals("bb0", string0);
      
      String string1 = Utility.compactClassName(";", "java.lang.~X]P-EeKehy#f*,A3", false);
      assertEquals(";", string1);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      char char0 = 'Q';
      Utility.isJavaIdentifierPart('Q');
      String string0 = ", high = ";
      Utility.convertString(", high = ");
      try { 
        Utility.decode(", high = ", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Utility.compactClassName(", ", false);
      Utility.setBit(170, 170);
      Utility.convertString(", ");
      ConstantInteger constantInteger0 = new ConstantInteger(658);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInteger0.clone();
      int int0 = 50;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)102;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-96), 36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fsub
         // 1:    fsub
         // 2:    i2f
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Utility.compactClassName("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)96;
      byte byte0 = (byte) (-127);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-122);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)96);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInteger1.clone();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-950), 50);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iaload
         // 1:    dstore\t\t%96
         // 3:    lor
         // 4:    fsub
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      String[] stringArray0 = Constants.ITEM_NAMES;
      Utility.compactClassName("X>y/Nk~jA", false);
      boolean boolean0 = false;
      Utility.accessToString((-803), false);
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Utility.compactClassName("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-122);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)96);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInteger1.clone();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)96, 50);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Utility.compactClassName(", ", false);
      int int0 = Utility.setBit(170, 170);
      assertEquals(1194, int0);
      
      String string0 = Utility.convertString(", ");
      String string1 = Utility.compactClassName(", ");
      assertTrue(string1.equals((Object)string0));
      
      Utility.compactClassName("-");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-";
      stringArray0[1] = "-";
      stringArray0[2] = "-";
      stringArray0[3] = ", ";
      stringArray0[4] = "-";
      int int1 = Utility.clearBit(170, 170);
      assertEquals(170, int1);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Utility.methodSignatureReturnType("Zs1j[U-");
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "boolean";
      objectArray0[2] = (Object) "Zs1j[U-";
      objectArray0[3] = (Object) "boolean";
      Utility.printArray(objectArray0);
      String string0 = "";
      // Undeclared exception!
      Utility.replace("", "", ", high = ");
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      
      String string1 = Utility.format(223, 223, false, ':');
      assertEquals("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::223", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-44);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string2);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Utility.compactClassName("", "}gVc5pJ8cYs)2", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "/", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Utility.setBit((-1005), 216);
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("IFzDB4:Ua,roB]YjT", (String[]) null);
      Utility.isJavaIdentifierPart('T');
      Utility.printArray((Object[]) null);
      String string0 = "M2\"*?tJ:";
      try { 
        Utility.typeOfMethodSignature("M2\"*?tJ:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M2\"*?tJ:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      int int0 = 11;
      Utility.accessToString(11, true);
      byte[] byteArray0 = null;
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      String string0 = Utility.compactClassName("SU/*mpgH^AK", false);
      assertEquals("SU.*mpgH^AK", string0);
      
      Utility.compactClassName("SU.*mpgH^AK", "", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte) (-94);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      String string0 = "X>y/N,~jc";
      try { 
        Utility.methodSignatureArgumentTypes("X>y/N,~jc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X>y/N,~jc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "r", "void", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Utility.compactClassName("%O\"6TEe<x=");
      Utility.compactClassName("%O\"6TEe<x=", "%O\"6TEe<x=", false);
      Utility.format((-4553), (-4553), false, '?');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)0;
      byte byte0 = (byte) (-84);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      int int0 = 0;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -60
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      String string0 = "";
      Utility.replace("", "N", "");
      try { 
        Utility.typeOfMethodSignature("`G?z*V[&fhqS[#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: `G?z*V[&fhqS[#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("\t\t#", false);
      String string0 = "if_icmpeq";
      boolean boolean0 = false;
      Utility.fillup("if_icmpeq", 0, false, 'd');
      MockPrintStream mockPrintStream0 = new MockPrintStream("if_icmpeq");
      Object[] objectArray0 = new Object[1];
      mockPrintStream0.println();
      mockPrintStream0.println(0L);
      objectArray0[0] = (Object) "if_icmpeq";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      Utility.printArray(objectArray0, false, false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "if_icmpeq";
      stringArray0[1] = "if_icmpeq";
      stringArray0[2] = "\t\t#";
      Utility.methodTypeToSignature("\t\t#", stringArray0);
      Utility.getSignature("(Lif_icmpeq;Lif_icmpeq;L#;)L#;");
      String string1 = "org.apache.bcel.classfile.Attribute";
      String string2 = "l2f";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("ofB7V?RJYtVd4yP");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1020), (-2158));
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable(0, 0, byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Utility.convertString("E$,9'\"Q<(!c@5]N)B");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("E$,9'\"Q<(!c@5]N)B", ")22", "q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E$,9'\"Q<(!c@5]N)B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-121);
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("H,u/&", "H,u/&", true);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Utility.compactClassName(", ", false);
      int int0 = Utility.setBit(170, 170);
      assertEquals(1194, int0);
      
      String string0 = Utility.convertString(", ");
      String string1 = Utility.compactClassName(", ");
      assertTrue(string1.equals((Object)string0));
      
      Utility.compactClassName("-");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-";
      stringArray0[1] = "-";
      stringArray0[2] = "-";
      stringArray0[3] = ", ";
      stringArray0[4] = "-";
      String string2 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L-;L-;L-;L,;L-;)L;", string2);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Utility.compactClassName("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-122);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)96);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInteger1.clone();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-950), 50);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iaload
         // 1:    dstore\t\t%96
         // 3:    lor
         // 4:    fsub
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      Utility.compactClassName("", true);
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      int int0 = (-778);
      Utility.clearBit(0, (-778));
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0);
      String string0 = "`PW";
      try { 
        Utility.methodSignatureArgumentTypes("`PW", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: `PW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, 162);
      assertEquals("0:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Utility.accessToString(0, false);
      String string0 = "sD{:3s!";
      Utility.getSignature("sD{:3s!");
      String string1 = "y *Fnm^M+Z2N=2Wh";
      boolean boolean0 = true;
      int int0 = 1455;
      int int1 = 59;
      int int2 = 0;
      int int3 = 67;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-75);
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-68);
      CodeException[] codeExceptionArray0 = new CodeException[2];
      int int4 = 1780;
      CodeException codeException0 = new CodeException((byte) (-68), (-2000), 59, 1780);
      codeExceptionArray0[0] = codeException0;
      int int5 = 0;
      int int6 = 0;
      CodeException codeException1 = new CodeException(0, 0, 0, 0);
      codeExceptionArray0[1] = codeException1;
      Attribute[] attributeArray0 = new Attribute[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      MethodParameters methodParameters0 = null;
      try {
        methodParameters0 = new MethodParameters((byte) (-68), 59, byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Utility.clearBit(1872, (-2682));
      String string0 = "SGs|HiT;%=";
      try { 
        Utility.typeOfMethodSignature("SGs|HiT;%=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: SGs|HiT;%=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Utility.methodTypeToSignature("tDqn'`", (String[]) null);
      String string0 = "";
      String string1 = "interface";
      boolean boolean0 = false;
      int int0 = 30;
      LocalVariable[] localVariableArray0 = new LocalVariable[5];
      int int1 = 227;
      int int2 = 200;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "tDqn'`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"tDqn'`\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      String string0 = "";
      Utility.methodTypeToSignature("", (String[]) null);
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false);
      byte[] byteArray0 = new byte[0];
      File file0 = MockFile.createTempFile("()L;", (String) null);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      String string0 = "yORfTh(BUWzK;1tQO9";
      Utility.compactClassName("yORfTh(BUWzK;1tQO9");
      Utility.compactClassName("r*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 63
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Utility.getSignature("");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L;", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
