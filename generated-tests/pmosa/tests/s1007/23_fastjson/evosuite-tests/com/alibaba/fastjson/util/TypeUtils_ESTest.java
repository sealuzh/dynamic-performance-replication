/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 08:22:19 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.File;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.nio.CharBuffer;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.TreeMap;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.IntUnaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.isPath(class0);
      java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat> identityHashMap0 = new java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat>();
      TypeUtils.decapitalize("A}7u)$9B?");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("A}7u)$9B?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : A}7u)$9B?
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Short> class0 = Short.class;
      TypeUtils.getSerializeFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.isHibernateInitialized(class0);
      JSONObject jSONObject0 = new JSONObject();
      Class<Date> class1 = Date.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.sql.Date
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("8", "Ljava.awt.Point");
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      identityHashMap0.merge("+wSBBWpF 8M", "+wSBBWpF 8M", biFunction0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      Class<OptionalCodec> class1 = OptionalCodec.class;
      String string0 = null;
      Class<NumberFormat> class2 = NumberFormat.class;
      String string1 = "C$|rQ!?MN%W=";
      Field[] fieldArray0 = new Field[7];
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.serializer.BigIntegerCodec", concurrentHashMap0);
      fieldArray0[0] = null;
      ParserConfig.getFieldFromCache("C$|rQ!?MN%W=", concurrentHashMap0);
      fieldArray0[1] = null;
      ParserConfig.getFieldFromCache("+wSBBWpF 8M", concurrentHashMap0);
      fieldArray0[2] = null;
      String string2 = "f,U;A*{3<a$d@";
      Map<String, Field> map0 = null;
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("f,U;A*{3<a$d@", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap1 = new LinkedHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) linkedHashMap0, (Map<String, Field>) linkedHashMap1, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TypeUtils.isHibernateInitialized((Object) null);
      Class<IllegalThreadStateException> class0 = IllegalThreadStateException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) null, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils typeUtils0 = new TypeUtils();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      Locale.getISOCountries();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      String string0 = TypeUtils.decapitalize("}NULL");
      assertEquals("}NULL", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      TypeUtils.getClass((Type) class0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(timeUnit0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Hashtable<IndexOutOfBoundsException, Date> hashtable0 = new Hashtable<IndexOutOfBoundsException, Date>();
      java.util.IdentityHashMap<IndexOutOfBoundsException, Date> identityHashMap0 = new java.util.IdentityHashMap<IndexOutOfBoundsException, Date>(hashtable0);
      Class<Character> class0 = Character.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) identityHashMap0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. char
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.isHibernateInitialized(class0);
      TypeUtils.getRawClass(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 2);
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) sQLTransactionRollbackException0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<SQLDataException> class0 = SQLDataException.class;
      TypeUtils.getParserFeatures(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) classLoader0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TreeMap<SimpleDateFormat, DecimalFormat> treeMap0 = new TreeMap<SimpleDateFormat, DecimalFormat>();
      TypeUtils.isGenericParamType((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols> weakHashMap0 = new WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols>();
      Set<SQLIntegrityConstraintViolationException> set0 = weakHashMap0.keySet();
      weakHashMap0.containsValue(set0);
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) weakHashMap0, class0);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      InternalError internalError0 = new InternalError("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("sVc);>3iuZ)|z? -", "sVc);>3iuZ)|z? -", 26);
      Locale locale0 = Locale.GERMANY;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      weakHashMap0.put(sQLIntegrityConstraintViolationException0, decimalFormatSymbols0);
      Type type0 = TypeUtils.getCollectionItemType(class1);
      TypeUtils.getCollectionItemClass(type0);
      TypeUtils.castToInt("");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : class java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(numberDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.parser.deserializer.NumberDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<MockDateFormat> class0 = MockDateFormat.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceEntriesToLong((-1034L), toLongFunction0, 2731L, longBinaryOperator0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      Class<?> class1 = TypeUtils.loadClass("Ljava.lang.AutoCloseable", classLoader0, false);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Point", (ClassLoader) aSMClassLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.decapitalize("-*ld[/326Q~q");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      String string0 = TypeUtils.decapitalize("L<g`njmot%}K");
      assertEquals("l<g`njmot%}K", string0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      String string0 = "scanLong";
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "scanLong", fieldArray0);
      TypeUtils.getKoltinConstructorParameters(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getCollectionItemType(class0);
      int int0 = (-2);
      LinkageError linkageError0 = new LinkageError();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Ljava.awt.Rectangle", "scanLong", (-2), linkageError0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTimeoutException0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.RuntimeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TreeMap<MockDate, BreakIterator> treeMap0 = new TreeMap<MockDate, BreakIterator>();
      Class<LinkageError> class0 = LinkageError.class;
      LinkageError linkageError0 = TypeUtils.castToJavaBean((Object) treeMap0, class0);
      assertNull(linkageError0.getMessage());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils.unwrapOptional(class1);
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class1, "+)ZyH;e`S2Nq,3M7", fieldArray0);
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class2);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      Class<Properties> class1 = null;
      TypeUtils.getKoltinConstructorParameters((Class) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.util.Properties
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(treeMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertEquals(1, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<OptionalCodec> class0 = OptionalCodec.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, map0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger();
      atomicInteger0.getAndDecrement();
      IntUnaryOperator intUnaryOperator0 = mock(IntUnaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intUnaryOperator0).applyAsInt(anyInt());
      atomicInteger0.updateAndGet(intUnaryOperator0);
      atomicInteger0.lazySet((-715));
      TypeUtils.castToByte(atomicInteger0);
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(16);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      weakHashMap0.put("not support awt class : ", (String) null);
      weakHashMap0.entrySet();
      weakHashMap0.replaceAll(biFunction0);
      weakHashMap0.put((String) null, "not support awt class : ");
      boolean boolean0 = false;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, false);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.awt.ImageCapabilities
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      TypeUtils.decapitalize("getMetaClass");
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertEquals(1, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      boolean boolean0 = TypeUtils.isKotlin(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class0, map0, false);
      TypeUtils.isProxy(class0);
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      Class<String> class2 = String.class;
      Class<MockThaiBuddhistDate> class3 = MockThaiBuddhistDate.class;
      Class<BigInteger> class4 = BigInteger.class;
      String string0 = "Ljava.awt.Color";
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class4, "Ljava.awt.Color", fieldArray0);
      FieldInfo fieldInfo0 = new FieldInfo("Y$i", class2, class3, class3, (Field) null, 2084, (-2462), 2084);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(fieldInfo0.name_chars, (-872), parserConfig0, 2084);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      Collection collection0 = new Vector<Long>();
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      boolean boolean1 = TypeUtils.isProxy(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("Ljava.util.concurrent.ConcurrentSkipListSet", "");
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      weakHashMap0.computeIfAbsent((String) null, function0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, true, propertyNamingStrategy0);
      TypeUtils.getSerializeFeatures(class0);
      Class<BufferCapabilities> class1 = BufferCapabilities.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<PropertyProcessableDeserializer>[] classArray0 = (Class<PropertyProcessableDeserializer>[]) Array.newInstance(Class.class, 7);
      Class<PropertyProcessableDeserializer> class2 = PropertyProcessableDeserializer.class;
      classArray0[0] = class2;
      Class<PropertyProcessableDeserializer> class3 = PropertyProcessableDeserializer.class;
      classArray0[1] = class3;
      Class<PropertyProcessableDeserializer> class4 = PropertyProcessableDeserializer.class;
      classArray0[2] = class4;
      Class<PropertyProcessableDeserializer> class5 = PropertyProcessableDeserializer.class;
      classArray0[3] = class5;
      Class<PropertyProcessableDeserializer> class6 = PropertyProcessableDeserializer.class;
      classArray0[4] = class6;
      Class<PropertyProcessableDeserializer> class7 = PropertyProcessableDeserializer.class;
      classArray0[5] = class7;
      Class<PropertyProcessableDeserializer> class8 = PropertyProcessableDeserializer.class;
      classArray0[6] = class8;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      parserConfig0.clearDeserializers();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.BufferCapabilities
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.isGenericParamType(class0);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      Class<IndexOutOfBoundsException> class1 = IndexOutOfBoundsException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Short short0 = new Short((short)28);
      Short.toUnsignedInt((short)28);
      TypeUtils.castToDate(short0);
      LinkedHashMap<String, SQLNonTransientException> linkedHashMap0 = new LinkedHashMap<String, SQLNonTransientException>();
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>(linkedHashMap0);
      JSONObject jSONObject0 = new JSONObject((short)28, true);
      weakHashMap0.put("*GD1jH(8A$W[IW~~+~!", jSONObject0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap0, class0, parserConfig0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = File.separator;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<Double> class0 = Double.TYPE;
      long long0 = TypeUtils.fnv1a_64_lower("/");
      assertEquals((-5808620644828345858L), long0);
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertEquals(1041, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("writeDirect");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(noSuchMethodException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NoSuchMethodException: writeDirect
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = TypeUtils.fnv1a_64_lower("has");
      assertEquals(3699728092784203075L, long0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Double> class0 = Double.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isProxy(class0);
      boolean boolean1 = TypeUtils.isGenericParamType(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(illegalAccessError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.IllegalAccessError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("NULL", classLoader0);
      TypeUtils.getGenericParamType((Type) null);
      boolean boolean0 = TypeUtils.isNumber("9$f0hW{0s_ EB;V4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("F", classLoader0, true);
      TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils.castToSqlDate((Object) null);
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("F", (Class<?>) null, 55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. F
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.compatibleWithJavaBean = true;
      Class<TimeUnit> class0 = TimeUnit.class;
      parserConfig0.createJavaBeanDeserializer(class0, class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = TypeUtils.isNumber("fastjson.parser.autoTypeSupport");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      TypeUtils.isProxy(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, false);
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = File.separator;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.castToBigInteger((Object) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put((String) null, "kotlin.ranges.CharRange");
      identityHashMap0.put((String) null, (String) null);
      identityHashMap0.put("L", "zM2ux]7)p5");
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0);
      TypeUtils.toLocale("Ljava.util.concurrent.ConcurrentSkipListSet");
      Class<MockJapaneseDate> class2 = MockJapaneseDate.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      Class<String> class3 = String.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(classLoader0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"sun.mis\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.isPath(class0);
      java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat> identityHashMap0 = new java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat>();
      TypeUtils.getKoltinConstructorParameters(class0);
      Locale locale0 = TypeUtils.toLocale("WriteBigDecimalAsPlain");
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Method> class0 = Method.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("className");
      stackOverflowError0.printStackTrace((PrintWriter) mockPrintWriter0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(stackOverflowError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.lang.StackOverflowError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      Class<?> class1 = javaBeanSerializer0.getType();
      TypeUtils.unwrapOptional(class1);
      Class<Byte> class2 = Byte.class;
      TypeUtils.getParserFeatures(class2);
      Class<BreakIterator> class3 = BreakIterator.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class3);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-29);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<JobAttributes> class0 = JobAttributes.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ToLongFunction<String> toLongFunction0 = (ToLongFunction<String>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceValuesToLong(5923L, toLongFunction0, (-823L), longBinaryOperator0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      String string0 = "CVQ:<\\sE!6)cm%7";
      JSON.DEFFAULT_DATE_FORMAT = "CVQ:<sE!6)cm%7";
      Class<Object> class1 = Object.class;
      TypeUtils.isKotlin(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(typeUtils0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"c\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<StringIndexOutOfBoundsException> class0 = StringIndexOutOfBoundsException.class;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      Class<Long> class1 = Long.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(noSuchMethodError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.NoSuchMethodError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      TypeUtils.isProxy(class0);
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.isPath(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.lang.NoSuchMethodError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      Class<JSONPDeserializer> class1 = JSONPDeserializer.class;
      TypeUtils.isGenericParamType(class1);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TypeUtils.clearClassMapping();
      boolean boolean0 = TypeUtils.isNumber("Ljava.awt.Point");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<Short> class0 = Short.TYPE;
      TypeUtils.getClass((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class0, map0, false);
      TypeUtils.isProxy(class0);
      Class<String> class1 = String.class;
      Class<MockThaiBuddhistDate> class2 = MockThaiBuddhistDate.class;
      TypeUtils.loadClass("@^@ =HvM,S ", (ClassLoader) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class2, class1);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Y$i", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      Class<Short> class0 = Short.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("6d`ty4&", classLoader0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("6d`ty4&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 6d`ty4&
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(treeMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      classLoader1.getParent();
      TypeUtils.loadClass("length", classLoader1, false);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) null;
      typeArray0[2] = (Type) null;
      typeArray0[3] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[3]);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@999c6caf
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols> weakHashMap0 = new WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols>();
      weakHashMap0.keySet();
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) weakHashMap0, class0);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      InternalError internalError0 = new InternalError("");
      Class<IllegalStateException> class2 = IllegalStateException.class;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("sVc);>3iuZ)|z? -", "sVc);>3iuZ)|z? -", 26);
      Locale locale0 = Locale.GERMANY;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      weakHashMap0.put(sQLIntegrityConstraintViolationException0, decimalFormatSymbols0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("j", classLoader0);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class1;
      Type type0 = TypeUtils.unwrapOptional(typeArray0[0]);
      typeArray0[1] = type0;
      typeArray0[2] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      ParserConfig parserConfig0 = ParserConfig.global;
      java.util.IdentityHashMap<Timestamp, MockThaiBuddhistDate> identityHashMap0 = new java.util.IdentityHashMap<Timestamp, MockThaiBuddhistDate>();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      Type[] typeArray1 = new Type[9];
      typeArray1[0] = (Type) null;
      typeArray1[1] = (Type) class2;
      typeArray1[2] = (Type) null;
      typeArray1[3] = type0;
      typeArray1[4] = type0;
      typeArray1[5] = (Type) class1;
      typeArray1[6] = (Type) null;
      typeArray1[7] = (Type) parameterizedTypeImpl0;
      typeArray1[8] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray1, typeArray0[1], typeArray1[6]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (ParameterizedType) parameterizedTypeImpl1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@ce5280f4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      boolean boolean0 = TypeUtils.isHibernateInitialized(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat> identityHashMap0 = new java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat>();
      TreeMap<SimpleDateFormat, DecimalFormat> treeMap0 = new TreeMap<SimpleDateFormat, DecimalFormat>();
      identityHashMap0.putAll(treeMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("o", (ClassLoader) aSMClassLoader0, true);
      LocalTime localTime0 = MockLocalTime.now();
      Time time0 = Time.valueOf(localTime0);
      boolean boolean0 = TypeUtils.isHibernateInitialized(time0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TreeMap<MockDate, BreakIterator> treeMap0 = new TreeMap<MockDate, BreakIterator>();
      treeMap0.descendingKeySet();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat> identityHashMap0 = new java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat>();
      TreeMap<SimpleDateFormat, DecimalFormat> treeMap0 = new TreeMap<SimpleDateFormat, DecimalFormat>();
      identityHashMap0.putAll(treeMap0);
      Locale locale0 = Locale.ITALIAN;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Ljava.util.concurrent.ConcurrentSkipListSet";
      stringArray0[1] = "Ljava.util.concurrent.ConcurrentSkipListSet";
      stringArray0[2] = "Ljava.util.concurrent.ConcurrentSkipListSet";
      stringArray0[3] = "Ljava.util.concurrent.ConcurrentSkipListSet";
      stringArray0[4] = "Ljava.util.concurrent.ConcurrentSkipListSet";
      stringArray0[5] = "Ljava.util.concurrent.ConcurrentSkipListSet";
      stringArray0[6] = "Ljava.util.concurrent.ConcurrentSkipListSet";
      stringArray0[7] = "Ljava.util.concurrent.ConcurrentSkipListSet";
      stringArray0[8] = "Ljava.util.concurrent.ConcurrentSkipListSet";
      dateFormatSymbols0.setEras(stringArray0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "";
      TypeUtils.fnv1a_64_lower("");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<NumberFormat> class0 = NumberFormat.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      String string0 = TypeUtils.castToString(class0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      TreeMap<SimpleDateFormat, DecimalFormat> treeMap0 = new TreeMap<SimpleDateFormat, DecimalFormat>();
      java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat> identityHashMap0 = new java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat>();
      identityHashMap0.putAll(treeMap0);
      TypeUtils.castToShort((Object) null);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      String string0 = TypeUtils.castToString(mockMinguoDate0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat> identityHashMap0 = new java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat>();
      TreeMap<SimpleDateFormat, DecimalFormat> treeMap0 = new TreeMap<SimpleDateFormat, DecimalFormat>();
      identityHashMap0.putAll(treeMap0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)47;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      TypeUtils.castToByte(bigDecimal0);
      Type type1 = TypeUtils.getCollectionItemType(type0);
      TypeUtils.isGenericParamType(type1);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols> weakHashMap0 = new WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols>();
      weakHashMap0.keySet();
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) weakHashMap0, class0);
      TypeUtils.getRawClass(class0);
      InternalError internalError0 = new InternalError("");
      Class<IllegalStateException> class1 = IllegalStateException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("sVc);>3iuZ)|z? -", "sVc);>3iuZ)|z? -", 26);
      Locale locale0 = Locale.GERMANY;
      sQLIntegrityConstraintViolationException0.getStackTrace();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TypeUtils.getCollectionItemType(class1);
      TypeUtils.isGenericParamType(class1);
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(numberDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.NumberDeserializer@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [S", class1.toString());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("F", classLoader0, true);
      TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.getGenericParamType((Type) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava.awt.Point");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"F\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat> identityHashMap0 = new java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat>();
      int int0 = 19;
      Point point0 = new Point();
      Point point1 = new Point(point0);
      point1.setLocation(19, 2058);
      point1.translate(0, 4);
      point0.translate(2062, 19);
      Double double0 = new Double(249.75960179);
      TypeUtils.castToTimestamp(double0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("Ljava.awt.Font");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(noSuchMethodException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.NoSuchMethodException: Ljava.awt.Font
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TypeUtils.loadClass("istoGMTString");
      LinkedHashMap<Jdk8DateCodec, SQLTimeoutException> linkedHashMap0 = new LinkedHashMap<Jdk8DateCodec, SQLTimeoutException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat> identityHashMap0 = new java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat>();
      Class<Point> class0 = Point.class;
      TypeUtils.isProxy(class0);
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : F
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      HashMap<RenderingHints.Key, Float> hashMap0 = new LinkedHashMap<RenderingHints.Key, Float>();
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"F\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("F", classLoader0, true);
      java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat> identityHashMap0 = new java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat>();
      HashMap<SimpleDateFormat, DecimalFormat> hashMap0 = new HashMap<SimpleDateFormat, DecimalFormat>();
      identityHashMap0.putAll(hashMap0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<InstantiationException> class0 = InstantiationException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"F\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(aSMDeserializerFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Double double0 = new Double(3225.0);
      Double.min((-1099.846677071425), (-293.375849));
      Double.isFinite((-1099.846677071425));
      TypeUtils.castToBoolean(double0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.castToShort((Object) null);
      TypeUtils.castToDouble((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      TypeUtils.castToShort((Object) null);
      Double double0 = new Double(0.0);
      TypeUtils.castToBoolean(double0);
      SecurityException securityException0 = new SecurityException();
      Class<Short> class1 = Short.class;
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) securityException0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(fileSystemHandling0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.testdata.FileSystemHandling@17cd51c6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.isPath(class0);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      String[] stringArray0 = ParserConfig.DENYS;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      TypeUtils.getGenericParamType(class0);
      TypeUtils.castToSqlDate((Object) null);
      Class<JSONPDeserializer> class1 = JSONPDeserializer.class;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.InternalError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<MockJapaneseDate> class1 = MockJapaneseDate.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      ParserConfig parserConfig0 = new ParserConfig();
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Vn$N[f[h@[HX[*", outOfMemoryError0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        sQLInvalidAuthorizationSpecException0.initCause(outOfMemoryError0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.lang.OutOfMemoryError
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TypeUtils.decapitalize("Wr->@YTzmal");
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("Ljava.lang.AutoCloseable");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(noClassDefFoundError0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.castToBigDecimal((Object) null);
      Type[] typeArray0 = new Type[7];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass((String) null, classLoader1, false);
      typeArray0[0] = (Type) null;
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      typeArray0[1] = null;
      TypeUtils.unwrapOptional((Type) null);
      typeArray0[2] = null;
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.decapitalize(";Ljava/lang/reflect/Type;Ljava/lang/Object;)V");
      Locale locale0 = Locale.US;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(dateFormatSymbols0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.isPath(class0);
      Class<Byte> class1 = Byte.class;
      TypeUtils.isPath(class1);
      java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat> identityHashMap0 = new java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat>();
      LinkedHashMap<MockSimpleDateFormat, DecimalFormat> linkedHashMap0 = new LinkedHashMap<MockSimpleDateFormat, DecimalFormat>();
      assertTrue(linkedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("osi", "osi", sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("osi", sQLNonTransientException0);
      MockFile mockFile0 = new MockFile("osi", "osi");
      MockFile mockFile1 = new MockFile(mockFile0, "osi");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      sQLSyntaxErrorException1.printStackTrace((PrintWriter) mockPrintWriter0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLSyntaxErrorException1, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.JSONPDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.getSerializeFeatures(class0);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("can not cast to long, value : ");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalMonitorStateException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Constructor<MockGregorianCalendar>[] constructorArray0 = (Constructor<MockGregorianCalendar>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      boolean boolean0 = TypeUtils.isHibernateInitialized(class0);
      assertTrue(boolean0);
      
      long long0 = TypeUtils.fnv1a_64("=");
      assertEquals((-5808605251665550904L), long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.fnv1a_64(";S!FrH7aY\"LhVv`TU");
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ";S!FrH7aY\"LhVv`TU", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.JSONPDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "java.lang.LinkageError", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.LinkageError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("[");
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "longValue", 2369L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.setClassAssertionStatus((String) null, true);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("longValue", classLoader0);
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext((Class<?>) null, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "zjJm.=\\eV\\{X-*l";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zjJm.=eV{X-*l");
      Class<Integer> class0 = Integer.TYPE;
      TypeUtils.getGenericParamType(class0);
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "zjJm.=eV{X-*l", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : zjJm.=eV{X-*l
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("fastjson.parser.autoTypeAccept");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fastjson.parser.autoTypeAccept\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.isPath(class0);
      java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat> identityHashMap0 = new java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedHashMap<MockSimpleDateFormat, DecimalFormat> linkedHashMap0 = new LinkedHashMap<MockSimpleDateFormat, DecimalFormat>();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      linkedHashMap0.replace(mockSimpleDateFormat0, decimalFormat0, decimalFormat0);
      identityHashMap0.putAll(linkedHashMap0);
      TypeUtils.toLocale("#nnQ-vSR>");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      String string0 = TypeUtils.decapitalize("L<g`njmot%2+}K");
      assertEquals("l<g`njmot%2+}K", string0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals(16385, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      System.setCurrentTimeMillis(2410L);
      TypeUtils.isNumber("(C)F");
      TypeUtils.getGenericParamType(class0);
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Class<Rectangle> class2 = Rectangle.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(serializeBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertEquals(3, list0.size());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("0/!Yc>n{J{Ky/c`", classLoader1);
      long long0 = TypeUtils.fnv1a_64("0/!Yc>n{J{Ky/c`");
      assertEquals(2436266352660141991L, long0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      TypeUtils.getCollectionItemType(type0);
      System.setCurrentTimeMillis((-4837536971810737970L));
      TypeUtils.castToChar((Object) null);
      TypeUtils.getClass(type0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Class<?> class0 = TypeUtils.getClass((Type) genericArrayType0);
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TypeUtils.decapitalize("in");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : in
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.decapitalize((String) null);
      TypeUtils.loadClass((String) null);
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("-9223372036854775808");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TypeUtils.decapitalize("Z`m{mFj~DjD");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("Hijc?1OV|6Sc7ol<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : Hijc?1OV|6Sc7ol<
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TypeUtils.fnv1a_64("has");
      Class<Object> class0 = Object.class;
      Class<NoSuchMethodError> class1 = NoSuchMethodError.class;
      FieldInfo fieldInfo0 = new FieldInfo("has", class0, class1, class1, (Field) null, 1554, 41, 41);
      fieldInfo0.getDeclaredClass();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "has", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.loadClass("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "()", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, type0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("java.lang.LinkageError");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) locale0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TypeUtils.isProxy(class0);
      TypeUtils.fnv1a_64_lower("J");
      TypeUtils.getRawClass(class0);
      Class<AtomicInteger> class1 = AtomicInteger.class;
      TypeUtils.castToJavaBean((Object) "", class1);
      Class<?> class2 = TypeUtils.getClassFromMapping("yyyy-MM-dd'T'HH:mm:ss.SSSXXX");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TypeUtils.decapitalize("Z`m{mFj~DjD");
      Class<Short> class0 = Short.TYPE;
      TypeUtils.getSerializeFeatures(class0);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("B");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalAccessError0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.IllegalAccessError: B
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.clearClassMapping();
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.toLocale("Of'/5GPTxx");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class0 = TypeUtils.getClass(type0);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      TypeUtils.isGenericParamType(class1);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("Of'/5GPTxx", "Of'/5GPTxx");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.castToLong((Object) null);
      TypeUtils typeUtils0 = new TypeUtils();
      Class<InternalError> class2 = InternalError.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("YfX`)od", classLoader0, false);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("`q~W~b|+@A87I", hashMap0);
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo((String) null, class2, class2, (Type) null, (Field) null, (byte)9, 46, (byte)9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ThreadGroup threadGroup0 = new ThreadGroup("java.lang.Class");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "gettoString");
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup1, thread0, "-=#+:6Tb=<~F", (-4455L));
      MockThread mockThread1 = new MockThread(threadGroup1, mockThread0);
      MockThread mockThread2 = new MockThread(mockThread1, "-=#+:6Tb=<~F");
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      mockThread2.setUncaughtExceptionHandler(threadGroup0);
      Class<?> class1 = TypeUtils.loadClass("java.lang.Class", classLoader0, true);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(311);
      Class<Collator> class0 = Collator.class;
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
      Class<Boolean> class1 = Boolean.class;
      TypeUtils.isPath(class1);
      JSONObject jSONObject1 = jSONObject0.fluentRemove(parserConfig0);
      Class<JavaBeanDeserializer> class2 = JavaBeanDeserializer.class;
      jSONObject1.getObject("1.2.46", class2);
      TypeUtils.isHibernateInitialized(jSONObject1);
      ThreadGroup threadGroup0 = null;
      try {
        threadGroup0 = new ThreadGroup((ThreadGroup) null, "@type");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.ThreadGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.parser.ParserConfig@6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.isPath(class0);
      TypeUtils.getCollectionItemClass(class0);
      Integer integer0 = new Integer(1102);
      Integer.getInteger("fastjson.parser.autoTypeSupport", 53);
      Date date0 = TypeUtils.castToSqlDate(integer0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = File.separator;
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("Onr}E(B7C0Qbu6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Onr}E(B7C0Qbu6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "Ljava.util.concurrent.ConcurrentSkipListSet";
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("Ljava.util.concurrent.ConcurrentSkipListSet");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljava.util.concurrent.ConcurrentSkipListSet
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L";
      stringArray0[1] = "cause";
      stringArray0[2] = "xW";
      stringArray0[3] = "%>b";
      stringArray0[4] = "Z#a";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      try { 
        javaBeanSerializer0.getFieldValuesMap("cause");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("c'RS!{Y}&+pV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : c'RS!{Y}&+pV
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<DataTruncation> class0 = DataTruncation.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "getParameters", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.DataTruncation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      Class<?> class1 = javaBeanSerializer0.getType();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-16);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.unwrapOptional(class1);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      TypeUtils.clearClassMapping();
      Insets insets0 = new Insets(3, 1866, 1423, (-49987981));
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints(1423, (-752), 1423, 3, 1423, 1423, 3, (-752), insets0, 3502, (-1813315248));
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.awt.GridBagConstraints@55b77b5e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Short short0 = new Short((short)4202);
      TypeUtils.castToSqlTime(short0);
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) short0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Properties properties0 = new Properties();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      String[] stringArray0 = new String[5];
      stringArray0[4] = "toS";
      stringArray0[1] = "isfloatValue";
      stringArray0[2] = "clazz is null";
      stringArray0[3] = "by";
      stringArray0[4] = "S&'7s(T";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      javaBeanSerializer0.addFilter(simplePropertyPreFilter0);
      Class<?> class1 = javaBeanSerializer0.getType();
      TypeUtils.unwrapOptional(class1);
      Class<?> class2 = TypeUtils.getClassFromMapping("clazz is null");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Properties properties0 = new Properties();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      TypeUtils.isHibernateInitialized(arrayList0);
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      Float float0 = new Float((double) 0);
      boolean boolean0 = TypeUtils.isHibernateInitialized(float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Character> class1 = Character.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.parser.ParserConfig@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      TypeUtils.getCollectionItemClass(type0);
      Class<NumberFormatException> class0 = NumberFormatException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Boolean> class1 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = File.pathSeparator;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalThreadStateException0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.IllegalThreadStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = File.separator;
      ClassLoader.getSystemClassLoader();
      Class<Double> class0 = Double.TYPE;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "/", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = File.separator;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<Double> class0 = Double.TYPE;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "/", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("r=iM+R");
      assertFalse(boolean0);
      
      Locale locale0 = TypeUtils.toLocale("]_zZ1Z:t\" B");
      assertEquals("]_ZZ1Z:T\" B", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TypeUtils.toLocale("'_<3G[f.Wr4yE");
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(59);
      linkedHashSet0.add(integer0);
      String string0 = TypeUtils.castToString(linkedHashSet0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = File.separator;
      Character character0 = TypeUtils.castToChar("/");
      assertEquals('/', (char)character0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = File.separator;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "/", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = File.separator;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.loadClass("/");
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchMethodException0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"@type\":\"java.lang.NoSuchMethodException\",\"stackTrace\":[{\"className\":\"sun.reflect.GeneratedConstructorAccessor61\",\"lineNumber\":-1,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"sun.reflect.DelegatingConstructorAccessorImpl\",\"fileName\":\"DelegatingConstructorAccessorImpl.java\",\"lineNumber\":45,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"java.lang.reflect.Constructor\",\"fileName\":\"Constructor.java\",\"lineNumber\":423,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.ConstructorStatement$1\",\"fileName\":\"ConstructorStatement.java\",\"lineNumber\":233,\"methodName\":\"execute\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.AbstractStatement\",\"fileName\":\"AbstractStatement.java\",\"lineNumber\":169,\"methodName\":\"exceptionHandler\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.ConstructorStatement\",\"fileName\":\"ConstructorStatement.java\",\"lineNumber\":188,\"methodName\":\"execute\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":307,\"methodName\":\"executeStatements\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":213,\"methodName\":\"call\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":55,\"methodName\":\"call\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.FutureTask\",\"fileName\":\"FutureTask.java\",\"lineNumber\":266,\"methodName\":\"run\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.ThreadPoolExecutor\",\"fileName\":\"ThreadPoolExecutor.java\",\"lineNumber\":1142,\"methodName\":\"runWorker\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.ThreadPoolExecutor$Worker\",\"fileName\":\"ThreadPoolExecutor.java\",\"lineNumber\":617,\"methodName\":\"run\",\"nativeMethod\":false},{\"className\":\"java.lang.Thread\",\"fileName\":\"Thread.java\",\"lineNumber\":745,\"methodName\":\"run\",\"nativeMethod\":false}]}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Double> class0 = Double.class;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class1 = TypeUtils.loadClass("[I");
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      ParserConfig parserConfig0 = new ParserConfig(false);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache(", fieldName : ", weakHashMap0);
      NoSuchMethodException noSuchMethodException1 = new NoSuchMethodException();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchMethodException1, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : [I
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.loadClass("[I");
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      ParserConfig parserConfig0 = new ParserConfig(false);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache(", fieldName : ", weakHashMap0);
      NoSuchMethodException noSuchMethodException1 = new NoSuchMethodException();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : [I
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      System.setCurrentTimeMillis(231L);
      TypeUtils typeUtils0 = new TypeUtils();
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("|+PZ%-9>G", classLoader0);
      Class<Annotation> class0 = Annotation.class;
      Class<NoSuchFieldException> class1 = NoSuchFieldException.class;
      TypeUtils.getAnnotation((Class<?>) class1, class0);
      TypeUtils.isGenericParamType(class1);
      TreeMap<Jdk8DateCodec, PropertyNamingStrategy> treeMap0 = new TreeMap<Jdk8DateCodec, PropertyNamingStrategy>();
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(treeMap0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = File.separator;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B");
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
