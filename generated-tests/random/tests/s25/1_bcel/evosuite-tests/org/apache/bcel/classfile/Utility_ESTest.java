/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 10:14:22 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.accessToString((-853));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "public private static synchronized transient abstract strictfp synthetic annotation enum");
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)117;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte) (-37);
      byte byte0 = (byte)42;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte)38;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 11, (int) (byte)38, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.fillup("lshr", 5268, false, ')');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-55);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((byte) (-109));
      constantArray0[0] = (Constant) constantString0;
      ConstantFloat constantFloat0 = new ConstantFloat(2774.815F);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-55), 5268);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmplt\t\t#1721
         // 3:    ifge\t\t#-14186
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("K2jpzM[8q]|u.]zswI", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[8q]|u.]zswI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.setBit((-108), (-108));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte)4;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 638, (int) (byte) (-44), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte) (-48);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 170, (int) (byte) (-48), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)83;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-106), (int) (byte)9);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 708, (int) (byte)9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte)123;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)103, (int) (byte)74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t\t");
      int int0 = (-3129);
      Utility.format(84, (-3129), false, 'm');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, true);
      try { 
        Utility.typeOfSignature("84");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 84
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = Utility.compactClassName("Illegal type: ", false);
      assertEquals("Illegal type: ", string0);
      
      String string1 = Utility.accessToString(252);
      assertEquals("protected static final synchronized volatile transient", string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("8d", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("f2d", string3);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = Utility.accessToString(117, true);
      assertEquals("public protected final volatile", string0);
      
      String string1 = Utility.fillup("public protected final volatile", 117, true, 'Z');
      assertEquals("public protected final volatileZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte) (-27);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2f", string2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.EmptyVisitor";
      Utility.convertString("org.apache.bcel.classfile.EmptyVisitor");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)103;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte) (-125);
      byte byte0 = (byte) (-8);
      byteArray0[7] = (byte) (-8);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)69, (int) (byte) (-8), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "@n(-!GmGq\"";
      try { 
        Utility.typeOfSignature("@n(-!GmGq\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @n(-!GmGq\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "if_acmpne";
      stringArray0[1] = "if_acmpne";
      stringArray0[2] = "TSkvdh;gb";
      stringArray0[3] = "if_acmpne";
      stringArray0[4] = "fload_2";
      stringArray0[5] = "if_acmpne";
      Utility.methodTypeToSignature("if_acmpne", stringArray0);
      Utility.methodSignatureReturnType("TSkvdh;gb");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureArgumentTypes("Invalid signature: ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 250, (-1082));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte) (-42);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.clearBit((byte)1, (byte) (-42));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = Utility.fillup("ogdEqS|0:q\"Y", (-1491), true, 'n');
      assertEquals("ogdEqS|0:q\"Y", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("istore\t\t%233", string1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.setBit((-555), (-555));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("", false);
      Utility.classOrInterface((-555));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)66;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-73), 1382);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    istore_2
         // 1:    fstore_2
         // 2:    <illegal opcode>
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "~o*jX}IsXWhrJL@";
      boolean boolean0 = false;
      Utility.compactClassName("~o*jX}IsXWhrJL@", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-4);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 20, 220);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.format(1234, 64, true, 'x');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("1234xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "5O)Iy", "iload\t\t%135", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1234xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(16, 16);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "dreturn";
      char char0 = 'x';
      Utility.fillup("dreturn", 6, false, 'x');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)46;
      Utility.encode(byteArray0, true);
      Utility.decode("athrow", false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3271, 2360, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utility.isJavaIdentifierPart('@');
      Utility.accessToString(201, false);
      Utility.accessToString(123);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)39;
      byteArray0[8] = (byte)47;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-55), (int) (byte)57, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(D$_&IJY", ";BeTq~TiAI{$>}#lq", "(D$_&IJY", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$_&IJY'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("P", true);
      assertEquals("P", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-52);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("P");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-84), (byte) (-52));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ireturn", string1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.compactClassName("TPK");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)46;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)46;
      byte byte1 = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[0] = (byte)40;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-64);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.isSet((-2260), (-2260));
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@6,}ruCCra");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-407), (int) (byte) (-28));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dload_2
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)28;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)124;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[7] = (byte)104;
      byteArray0[8] = (byte)73;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)124, (int) (byte)77, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)98;
      byte byte0 = (byte) (-106);
      byteArray0[3] = (byte) (-106);
      byte byte1 = (byte) (-42);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)7;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 88, (int) (byte)7, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "V";
      boolean boolean0 = true;
      Utility.compactClassName("V", true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) fileSystemHandling0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "V";
      objectArray0[3] = (Object) "V";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "V";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)108, 53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "Z/6J+(}Z!#~05";
      Utility.typeOfSignature("Z/6J+(}Z!#~05");
      Utility.methodSignatureReturnType("Z/6J+(}Z!#~05", false);
      Utility.fillup("boolean", (byte)4, false, 'z');
      Utility.isJavaIdentifierPart('{');
      String string1 = "U";
      // Undeclared exception!
      try { 
        Utility.signatureToString("U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('=');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-109));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(918, (byte)69);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("double");
      constantArray0[2] = (Constant) constantUtf8_0;
      Constant constant0 = constantMethodType1.copy();
      constantArray0[3] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ifnull\t\t#-27835", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-119);
      byte byte0 = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1208), 66, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    l2f
         // 1:    lushr
         // 2:    l2f
         // 3:    lconst_0
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char char0 = '[';
      Utility.format(115, 115, true, '[');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, 4, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("ubfL|'$7Y?!u", stringArray0);
      Utility.methodSignatureToString("()LubfL|'$7Y?!u;", "ubfL|'$7Y?!u", "()LubfL|'$7Y?!u;", false);
      Utility.methodSignatureArgumentTypes("()LubfL|'$7Y?!u;", false);
      Utility.compactClassName("()LubfL|'$7Y?!u;");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte)75;
      byteArray0[8] = (byte)91;
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)94;
      byteArray0[4] = (byte) (-30);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[5] = (byte)102;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)40;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)40, 83, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)72;
      Constant[] constantArray0 = new Constant[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "float");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 918, (int) (byte)45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString(1882, false);
      String string0 = Utility.fillup("<", 1882, true, '.');
      Utility.isJavaIdentifierPart('.');
      Utility.replace("<", string0, string0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte) (-105);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 0, 771, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-26);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)45, (-2648), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.isJavaIdentifierPart('U');
      Utility.clearBit(87, 87);
      Utility.isJavaIdentifierPart('U');
      String string0 = "impdep2";
      boolean boolean0 = false;
      Utility.fillup("impdep2", 87, false, 'n');
      Utility.compactClassName("nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnimpdep2", "impdep2", false);
      try { 
        Utility.typeOfSignature("HN=hc)y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HN=hc)y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.accessToString(13, true);
      Utility.compactClassName("public protected static", "public protected static", false);
      Utility.compactClassName("public protected static");
      Utility.replace("public protected static", ">p7Up", "public protected static");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)50;
      Constant[] constantArray0 = new Constant[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 247, (int) (byte)86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      String string0 = "StackMap(";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "StackMap(");
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)53;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)53, (int) (byte) (-55), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.accessToString((-1067));
      Utility.setBit((-1067), (-1067));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte)98;
      Utility.toHexString(byteArray0);
      Utility.encode(byteArray0, false);
      Utility.typeOfSignature("JG'ICk9Y:s");
      Utility.encode(byteArray0, false);
      Utility.isJavaIdentifierPart('L');
      Utility.format(1872, (byte) (-104), true, 'L');
      MockFile mockFile0 = new MockFile("1872");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte)98;
      objectArray0[2] = (Object) (byte)120;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "R5hY";
      try { 
        Utility.typeOfSignature("R5hY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R5hY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "|:$%+nn!";
      try { 
        Utility.decode("|:$%+nn!", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = Utility.compactClassName("TPK");
      assertEquals("TPK", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iand", string1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = (byte) (-70);
      byteArray0[0] = (byte) (-70);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8(8O\"2PE dE)JG");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), (int) (byte) (-70), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)72;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)1;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (int) (byte) (-103));
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("\t<", "\t<");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \t<
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "UD";
      try { 
        Utility.typeOfSignature("UD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte) (-5);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("rX;");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-3593), (byte)5);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1, 1585);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-37), 32, true);
      assertEquals("0:    <illegal opcode>\n1:    dadd\n2:    dneg\n3:    dup\n4:    iconst_4\n5:    iconst_2\n6:    ldiv\n7:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "char");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("StackMap", false);
      Utility.getSignature("StackMap");
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (-526), (-526));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    aastore\n1:    ineg\n2:    ladd\n3:    dadd\n4:    dmul\n5:    astore_2\n6:    ladd\n7:    irem\n", "L=3wSHe;V", "\t\t#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    aastore
         // 1:    ineg
         // 2:    ladd
         // 3:    dadd
         // 4:    dmul
         // 5:    astore_2
         // 6:    ladd
         // 7:    irem
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)49;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)68, (-3119), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jsr");
      Utility.compactClassName("jsr", "jsr", false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "jsr";
      stringArray0[1] = "jsr";
      stringArray0[2] = "jsr";
      stringArray0[3] = "jsr";
      stringArray0[4] = "jsr";
      String string0 = Utility.methodTypeToSignature("jsr", stringArray0);
      assertEquals("(Ljsr;Ljsr;Ljsr;Ljsr;Ljsr;)Ljsr;", string0);
      
      String string1 = Utility.fillup("FZ5C#UxF<n}cb^cl}", 25, false, 'B');
      assertEquals("BBBBBBBBFZ5C#UxF<n}cb^cl}", string1);
      
      byte byte0 = Utility.typeOfSignature("BBBBBBBBFZ5C#UxF<n}cb^cl}");
      assertEquals((byte)8, byte0);
      
      short short0 = Utility.searchOpcode("BBBBBBBBFZ5C#UxF<n}cb^cl}");
      assertEquals((short) (-1), short0);
      
      String string2 = Utility.compactClassName("jsr", "BBBBBBBBFZ5C#UxF<n}cb^cl}", false);
      assertEquals("jsr", string2);
      
      String string3 = Utility.printArray((Object[]) stringArray0, false);
      assertEquals("jsr, jsr, jsr, jsr, jsr", string3);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = Utility.fillup("\t\t%", (-2), false, 'v');
      assertEquals("\t\t%", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("baload", string1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("OVwJ8`g>Rc-", false);
      assertEquals(11, byteArray0.length);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)44;
      byteArray1[1] = (byte) (-30);
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte) (-111);
      byteArray1[4] = (byte)53;
      byteArray1[5] = (byte)39;
      byteArray1[6] = (byte) (-119);
      byteArray1[7] = (byte)69;
      byteArray1[8] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[5];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-30), (byte) (-119));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType((-717));
      constantArray0[3] = (Constant) constantMethodType1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance(".class");
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("l2f", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "(J~bc/iDE/']8";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(J~bc/iDE/']8", "luD/", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `~bc/iDE/']8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-124);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 79, (int) (byte)3, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("return");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("class", "org.apache.bcel.generic.Type$1", "pOOXi'L`UiW&,T");
      Utility.clearBit(160, (-1521));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-7);
      Constant[] constantArray0 = new Constant[4];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-61));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2621, 178);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-61), (byte)123);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[2] = (Constant) constantNameAndType1;
      ConstantFloat constantFloat2 = new ConstantFloat(constantFloat1);
      constantArray0[3] = (Constant) constantFloat2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1763, 160, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)55;
      byteArray0[8] = (byte)90;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), (int) (byte)55);
      assertEquals("0:    dstore\t\t%194\n2:    iconst_5\n3:    <illegal opcode>\n4:    lload_2\n5:    astore_1\n6:    fconst_2\n7:    lstore\t\t%90\n", string0);
      
      String string1 = Utility.format(11, (byte) (-17), true, ';');
      assertEquals("11", string1);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)57;
      byteArray1[1] = (byte)55;
      byteArray1[2] = (byte)55;
      byteArray1[3] = (byte)76;
      byteArray1[4] = (byte)57;
      byteArray1[5] = (byte)32;
      byteArray1[6] = (byte)13;
      byteArray1[7] = (byte)13;
      byteArray1[8] = (byte)76;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)67;
      ConstantPool constantPool0 = null;
      int int0 = 16384;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16384, (-1632), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The FilenameFilter must not be null");
      Utility.setBit((-2005641947), (-2058));
      try { 
        Utility.typeOfSignature("*!:W&MH&y%T4+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :W&MH&y%T4+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "\\\\";
      int int0 = 8;
      Utility.fillup("\\", 8, true, '9');
      String string1 = "7oNb;'";
      Utility.fillup("7oNb;'", 8, false, '9');
      int int1 = 59;
      Utility.classOrInterface(59);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "997oNb;'";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "\\999999";
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.typeOfSignature("E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "=jpnDF7#w";
      try { 
        Utility.typeOfSignature("=jpnDF7#w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =jpnDF7#w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)72;
      byte byte0 = (byte) (-75);
      byteArray0[8] = (byte) (-75);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)120;
      byteArray0[8] = (byte) (-116);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)123, 746, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.replace("]y>/gu]y>.gu", "]y>/gu]y>.gu", "java.lang.Unreachable default case reached!");
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.clearBit(97, 47);
      Utility.typeOfSignature("C@J4Qh}FF`OSaHEzX{`");
      MockFile mockFile0 = new MockFile("float");
      mockFile0.toURL();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "invokevirtual";
      Utility.replace("invokespecial", "invokespecial", "invokevirtual");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)77;
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = new Constant[0];
      byteSequence0.mark((byte) (-72));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "return";
      boolean boolean0 = false;
      Utility.fillup("return", 293, false, 'n');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-25);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)50;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)57, (int) (byte)9, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.accessToString((-1577));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, (int) (byte)86, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)16;
      Constant[] constantArray0 = new Constant[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantInteger constantInteger0 = new ConstantInteger(dataInputStream0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-71));
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)59, (int) (byte)59, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 15166. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.getSignature(", npairs = ");
      String string0 = "dreturn";
      boolean boolean0 = false;
      Utility.compactClassName("dreturn", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte) (-127);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 512, (int) (byte)79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-81), (int) (byte) (-81));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte) (-59);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1547, (int) (byte)35);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 8996. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal opcode>");
      short short0 = Utility.searchOpcode("zK0uRM(V]z#|");
      assertEquals((short) (-1), short0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "sl7A`75392='/L2";
      stringArray0[1] = "int";
      stringArray0[2] = "zK0uRM(V]z#|";
      stringArray0[3] = "sl7A`75392='/L2";
      stringArray0[4] = "zK0uRM(V]z#|";
      String string0 = Utility.methodTypeToSignature("sl7A`75392='/L2", stringArray0);
      assertEquals("(Lsl7A`75392='/L2;ILzK0uRM(V]z#|;Lsl7A`75392='/L2;LzK0uRM(V]z#|;)Lsl7A`75392='/L2;", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte)100;
      byteArray0[8] = (byte) (-7);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)2, (-2139), true);
      assertEquals("3:    iconst_4\n4:    iaload\n5:    aload_1\n6:    aaload\n7:    isub\n8:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "v~ZY#f4$cxW";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.decode("v~ZY#f4$cxW", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"cx\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)47;
      byte byte0 = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte) (-16);
      byteArray0[8] = (byte)56;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 75);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantLong constantLong0 = new ConstantLong((-2924L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-102), (int) (byte)56, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iastore
         // 1:    laload
         // 2:    lstore_1
         // 3:    astore_0
         // 4:    dstore\t\t%154
         // 6:    iastore
         // 7:    <illegal opcode>
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)59;
      byte byte0 = (byte) (-114);
      byteArray0[7] = (byte) (-114);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 20, 260);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)49;
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-65);
      byte byte1 = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-64);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)106, (int) (byte)106, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-117);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("f2i", string1);
      
      boolean boolean0 = Utility.isSet((-927), (byte) (-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.format(57, 1024, true, '2');
      Utility.getSignature(string0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.readUnsignedByte();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "htad");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-107);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-688), (int) (byte)91);
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      Utility.accessToString(69, true);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("zJ=/L34H$E;R");
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    astore_2\n1:    castore\n2:    dup_x2\n3:    fcmpl\n", "zJ=/L34H$E;R", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.searchOpcode("double");
      Utility.format((short) (-1), (short) (-1), false, 'W');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)66;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, (int) (byte)90, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-24));
      constantArray0[2] = (Constant) constantInteger0;
      ConstantInteger constantInteger1 = new ConstantInteger((byte)115);
      constantArray0[3] = (Constant) constantInteger1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(37, (byte)116);
      constantArray0[4] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utility.convertString("ZgbI!");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte)12;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)12, (int) (byte) (-123));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)120;
      byteArray0[8] = (byte) (-116);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)123, 746, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "impdep2");
      Utility.convertString("impdep2");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6148, (int) (byte)54, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("o$S&?s X@d6Q1", "]kNA+7nH<7=/@sc8McN", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte) (-101));
      byteSequence0.read();
      byteSequence0.skip((byte) (-77));
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true);
      Utility.compactClassName("{java.lang.Object@70a0904f, java.lang.Object@4559f2cb, java.lang.Object@51cbe42b, java.lang.Object@181422e4, java.lang.Object@6cc2fb41, java.lang.Object@660793b8, java.lang.Object@6863c9ef}", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)105;
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)105);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1679), (-1616));
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)83, 117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utility.isJavaIdentifierPart('-');
      Utility.setBit(5195, (-1809));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-95);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 899, (-626), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true, true);
      String string0 = "Invalid method signature: ";
      Utility.signatureToString("Invalid method signature: ", true);
      char char0 = '';
      Utility.isJavaIdentifierPart('');
      try { 
        Utility.typeOfSignature(",#7GoI+mul/#9Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,#7GoI+mul/#9Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte) (-127);
      byteArray0[8] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 48, (int) (byte) (-16), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = (-482);
      Utility.accessToString((-482), false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "private protected static final interface abstract strictfp synthetic annotation enum";
      stringArray0[1] = "8rukx[x]'";
      Utility.methodTypeToSignature("8rukx[x]'", stringArray0);
      Utility.decode("8rukx[x]'", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("8rukx[x]'", ")Nj2$Z[vu\u0007", "(Lprivate;[L8rukx;)[L8rukx;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8rukx[x]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte)35);
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("fload_1", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "jsr_w";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "jsr_w";
      Utility.methodTypeToSignature("jsr_w", stringArray0);
      Utility.printArray((Object[]) stringArray0);
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.convertString("jsr_w");
      Utility.printArray((Object[]) stringArray0);
      Utility.printArray((Object[]) stringArray0);
      Utility.searchOpcode("4#y\"7)x#SL1.C6");
      String string1 = "ACC_SUPER flag\t\t";
      try { 
        Utility.typeOfSignature("ACC_SUPER flag\t\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ACC_SUPER flag\t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)46;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)46;
      byte byte1 = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)40;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-64);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.isSet((-2260), (-2260));
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@6,}ruCCra");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-407), (int) (byte) (-28));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iaload
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte)95;
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-99));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)95, 532);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)42, 520);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.isSet(868, (-2592));
      String string0 = "Nub0,HeO5H40y!n__h";
      try { 
        Utility.typeOfSignature("Nub0,HeO5H40y!n__h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Nub0,HeO5H40y!n__h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "SI>s4UL";
      Utility.typeOfSignature("SI>s4UL");
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 776, (-1154));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("lf");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "lf", (Object[]) null);
      Utility.printArray(printStream0, (Object[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, 782);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Utility.accessToString(2371);
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.typeOfSignature("75u(#XkOTl8t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 75u(#XkOTl8t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t(wide)");
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)43;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.searchOpcode("fstore");
      Utility.format((byte)89, (byte)5, false, '`');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-128);
      objectArray0[1] = (Object) "\t(wide)";
      objectArray0[2] = (Object) (byte)111;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "\t(wide)";
      objectArray0[5] = (Object) "```89";
      Utility.printArray(objectArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-128), (int) (byte)5);
      Utility.printArray(objectArray0);
      Utility.setBit(36, (byte)89);
      try { 
        Utility.methodSignatureReturnType("0:    dup\n1:    ior\n2:    iconst_2\n3:    ddiv\n4:    aload_1\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    dup
         // 1:    ior
         // 2:    iconst_2
         // 3:    ddiv
         // 4:    aload_1
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.typeOfSignature("V");
      String string0 = "9h+Si_-Z&\"F=p%";
      String string1 = "0`/(OP(R%";
      String string2 = "WRL?1)~(E";
      boolean boolean0 = true;
      int int0 = 6;
      Attribute[] attributeArray0 = new Attribute[3];
      DataInput dataInput0 = null;
      Constant[] constantArray0 = new Constant[9];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)12);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1621014229), 1);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\t\t%";
      Utility.methodTypeToSignature("\t\t%", stringArray0);
      Utility.searchOpcode("\t\t%");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("(L%;)L%;");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-61));
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.format((byte)35, 2032, true, 'F');
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) string0, (-193), (-1788));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)5;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)5, (int) (byte)119);
      String string0 = "8,";
      boolean boolean0 = true;
      int int0 = 41;
      int int1 = (-2484);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("5:    iconst_1\n6:    iconst_2\n", "m!(dDBZ}\"aj&H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"m!(dDBZ}\"aj&H\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = Utility.accessToString(1479);
      assertEquals("public private protected volatile transient native abstract", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-42);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fload_2", string1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "2LlGklVg";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[4];
      String string1 = "072*#[O5_Y:[{GE";
      stringArray0[0] = "072*#[O5_Y:[{GE";
      stringArray0[1] = "2LlGklVg";
      stringArray0[2] = "2LlGklVg";
      stringArray0[3] = "2LlGklVg";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("2LlGklVg", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[O5_Y:[{GE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(2692);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 34, 2692, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-69), (-2208));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-43);
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((-419.322977));
      constantArray0[0] = (Constant) constantDouble0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-43), (byte)90);
      constantArray0[3] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 173, 218, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 54561. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte) (-127);
      byteArray0[8] = (byte) (-114);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 48, (int) (byte)6, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Fum-n!nd}*j");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.fillup("Fum-n!nd}*j", (-3212), false, 'C');
      Utility.searchOpcode("Fum-n!nd}*j");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Fum-n!nd}*j";
      stringArray0[1] = "Fum-n!nd}*j";
      Utility.methodTypeToSignature("Fum-n!nd}*j", stringArray0);
      Utility.typeOfSignature("Fum-n!nd}*j");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      Utility.toHexString(byteArray0);
      Utility.toHexString(byteArray0);
      Utility.fillup("Fum-n!nd}*j", 41, true, 'C');
      try { 
        Utility.methodSignatureArgumentTypes("Fum-n!nd}*j", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Fum-n!nd}*j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)40;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)40, 122, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)8;
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((-419.322977));
      constantArray0[0] = (Constant) constantDouble0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantLong constantLong0 = new ConstantLong((byte)33);
      constantArray0[2] = (Constant) constantLong0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-43), (byte)90);
      constantArray0[3] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 173, 218, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "X$woZN[||vbE.S~";
      try { 
        Utility.decode("X$woZN[||vbE.S~", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.convertString("null");
      boolean boolean0 = true;
      Utility.compactClassName("W5rm`", "nVaw0~droLGTjPF6H", true);
      Utility.accessToString(186);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-57);
      byteArray0[0] = (byte) (-57);
      byte byte1 = (byte) (-10);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)63;
      byte byte2 = (byte) (-56);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte) (-70);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-165), (int) (byte) (-56), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ifnonnull\t\t#-2497
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Utility.accessToString(64, true);
      String string0 = "M!\"AyR$";
      boolean boolean0 = false;
      Utility.decode("M!\"AyR$", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("volatile", "M!\"AyR$", "M!\"AyR$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: volatile
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)59;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)96;
      byteArray1[1] = (byte)44;
      byteArray1[2] = (byte)44;
      byteArray1[3] = (byte)59;
      byteArray1[4] = (byte)59;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray1, constantPool0, (-2733), 253, true);
      assertEquals("0:    iadd\n1:    aload_2\n2:    aload_2\n3:    istore_0\n4:    istore_0\n", string1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Utility.format(47, (-1226), true, '_');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)110;
      byteArray0[8] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 86, 2129);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = Utility.accessToString((-1662));
      assertEquals("private transient native strictfp synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-110);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-110), (int) (byte) (-110), false);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1003), (int) (byte) (-110), false);
      assertEquals("0:    i2c\n", string1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)24;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)61, 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Utility.clearBit(32, (-1107));
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.printArray(objectArray0, true);
      Utility.compactClassName("{java.lang.Object@4440af3b, java.lang.Object@7febfa03, java.lang.Object@2fb5bf4d, java.lang.Object@5d43330f}", "", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-24);
      Utility.toHexString(byteArray0);
      String string0 = "dreturn";
      try { 
        Utility.methodSignatureArgumentTypes("dreturn", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "#|u!w}5@<AS@dJG:";
      try { 
        Utility.typeOfSignature("#|u!w}5@<AS@dJG:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #|u!w}5@<AS@dJG:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Utility.setBit(455, 831);
      Utility.classOrInterface(831);
      Utility.convertString("astore_1");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)23;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)23);
      constantArray0[0] = (Constant) constantMethodType0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Dd?[=|");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)23, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte)13;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2048, (int) (byte)13, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)97;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2046), 22);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.isJavaIdentifierPart('M');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0:    lshr\n1:    lconst_1\n2:    astore_1\n3:    fadd\n4:    jsr\t\t#21605\n");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "0:    lshr\n1:    lconst_1\n2:    astore_1\n3:    fadd\n4:    jsr\t\t#21605\n";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) (byte)76;
      objectArray0[4] = (Object) null;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.typeOfSignature("TFm\"{61W");
      Utility.classOrInterface(8);
      Utility.searchOpcode("TFm\"{61W");
      Utility.compactClassName("1}<");
      Utility.isSet(8, 8);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "1}<";
      stringArray0[1] = "class";
      stringArray0[2] = "TFm\"{61W";
      stringArray0[3] = "1}<";
      stringArray0[4] = "class";
      stringArray0[5] = "1}<";
      stringArray0[6] = "1}<";
      stringArray0[7] = "TFm\"{61W";
      stringArray0[8] = "class";
      Utility.methodTypeToSignature("TFm\"{61W", stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "r]%$a9_X";
      Utility.searchOpcode("r]%$a9_X");
      String string1 = "E:QN";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("E:QN", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E:QN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte) (-25);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2588, 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "FJf4";
      Utility.methodSignatureReturnType("FJf4");
      String string1 = "<init>";
      String string2 = ":";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("<init>", "float", ":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <init>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = "4";
      try { 
        Utility.typeOfSignature("4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "W=tccv120A1x4o(5-";
      Utility.convertString("W=tccv120A1x4o(5-");
      String string1 = "YdR)L<8\"\"@]q@>-";
      try { 
        Utility.methodSignatureReturnType("YdR)L<8\"\"@]q@>-", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<8\"\"@]q@>-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.fillup("]9 Cr{", 187, false, 'v');
      Utility.compactClassName("breakpoint", false);
      byte[] byteArray0 = Utility.decode("vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv]9 Cr{", false);
      Utility.isJavaIdentifierPart('v');
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, 180, 187);
      MockFile mockFile0 = new MockFile("LK-;V", "vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv]9 Cr{");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "!TJ{z/hXq");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // !TJ{z/hXq
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)83;
      byte byte0 = (byte)74;
      byteArray0[7] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[z`Wawq{<3");
      assertEquals((byte)13, byte0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.signatureToString("Byte code error: ", true);
      assertEquals("byte", string0);
      
      String string1 = Utility.compactClassName("[z`Wawq{<3", "[z`Wawq{<3", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "Me.Nx86$'";
      try { 
        Utility.typeOfSignature("Me.Nx86$'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Me.Nx86$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      try { 
        Utility.typeOfSignature("66s^|)U;R%|T:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 66s^|)U;R%|T:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.compactClassName("\t\t%");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)15;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)15, (int) (byte)15, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P<?gwvG{Sc#[_E?4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P<?gwvG{Sc#[_E?4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Utility.setBit(13, 13);
      Utility.setBit(13, 8205);
      try { 
        Utility.typeOfSignature(".jar");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .jar
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byte byte0 = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.encode(byteArray0, false);
      Utility.isSet((-27), (byte)59);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("$3b$88");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $3b$88
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Utility.accessToString(74);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)22;
      Utility.toHexString(byteArray0);
      Utility.clearBit((byte)4, 74);
      try { 
        Utility.typeOfSignature("3zV2Rg[?AG2+\u0006Vd~a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3zV2Rg[?AG2+\u0006Vd~a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "wide";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wide");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = "+";
      try { 
        Utility.typeOfSignature("+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-73);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("9c b7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9c b7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "&U*d5Su(f";
      try { 
        Utility.typeOfSignature("&U*d5Su(f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &U*d5Su(f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-16);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 10131. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte) (-25);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2588, 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Utility.getSignature("cqGpZf");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "LcqGpZf;";
      objectArray0[1] = (Object) "LcqGpZf;";
      objectArray0[2] = (Object) "cqGpZf";
      objectArray0[3] = (Object) "LcqGpZf;";
      Utility.printArray(objectArray0);
      Utility.convertString(" entries\n");
      int int0 = 16;
      Utility.clearBit(16, 16);
      String string0 = "f2l";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.decode("f2l", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Utility.format(47, (-1226), true, '_');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)110;
      byteArray0[8] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 86, 2129);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "'H6Gh~ka+7=#i";
      try { 
        Utility.typeOfSignature("'H6Gh~ka+7=#i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'H6Gh~ka+7=#i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)102;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-81), (int) (byte) (-81));
      assertEquals("0:    aload_0\n1:    return\n2:    dup2_x2\n3:    dreturn\n4:    <illegal opcode>\n5:    fsub\n", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_0", string1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "|bq{AA`+fX(";
      Utility.getSignature("|bq{AA`+fX(");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "|bq{AA`+fX(";
      objectArray0[1] = (Object) "|bq{AA`+fX(";
      objectArray0[2] = (Object) "L|bq{AA`+fX(;";
      objectArray0[3] = (Object) "|bq{AA`+fX(";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "L|bq{AA`+fX(;";
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-58);
      byte byte0 = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-67);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 241, 49, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = Utility.classOrInterface(66);
      assertEquals("class", string0);
      
      short short0 = Utility.searchOpcode("class");
      assertEquals((short) (-1), short0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = Utility.format((-981), 388, false, '[');
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[-981", string1);
      
      boolean boolean0 = Utility.isSet(66, 66);
      assertFalse(boolean0);
      
      String string2 = Utility.compactClassName(">\t");
      assertEquals(">\t", string2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte) (-27);
      byteArray0[8] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string3 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("land", string3);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = Utility.isSet(3430, (-3671));
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-98);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("53 9e", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("53 9e");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("fstore_1");
      constantArray0[1] = (Constant) constantUtf8_2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("aastore", string1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "OcM|zM";
      // Undeclared exception!
      try { 
        Utility.signatureToString("OcM|zM", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OcM|zM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = Utility.setBit(255, 480);
      assertEquals(255, int0);
      
      String string0 = Utility.getSignature("{'x5");
      assertEquals("L{'x5;", string0);
      
      String string1 = Utility.compactClassName("b]J<`V|fw[.0;");
      assertEquals("b]J<`V|fw[.0;", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iaload", string2);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "[z0#*Wi>y-Kt/Sgs'";
      stringArray0[1] = "[z0#*Wi>y-Kt/Sgs'";
      stringArray0[2] = "[z0#*Wi>y-Kt/Sgs'";
      stringArray0[3] = "[z0#*Wi>y-Kt/Sgs'";
      stringArray0[4] = "[z0#*Wi>y-Kt/Sgs'";
      stringArray0[5] = "[z0#*Wi>y-Kt/Sgs'";
      stringArray0[6] = "void";
      stringArray0[7] = "[z0#*Wi>y-Kt/Sgs'";
      stringArray0[8] = "[z0#*Wi>y-Kt/Sgs'";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[z0#*Wi>y-Kt/Sgs'", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [z0#*Wi>y-Kt/Sgs'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('e');
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      try { 
        Utility.typeOfSignature(")av?F4=hB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )av?F4=hB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Deprecated";
      Utility.methodTypeToSignature("Deprecated", stringArray0);
      Utility.methodSignatureToString("(LDeprecated;)LDeprecated;", "Deprecated", "Deprecated", false);
      Utility.accessToString(2001, false);
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(LDeprecated;)LDeprecated;", false);
      Utility.compactClassName("9x");
      Utility.printArray((Object[]) stringArray1);
      Utility.methodTypeToSignature("PMGClass(", stringArray1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("RE_hgCR8Zt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RE_hgCR8Zt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("O4y ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O4y 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      short short0 = Utility.searchOpcode("Object");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-10);
      byteArray0[8] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)112;
      byteArray0[0] = (byte)92;
      byteArray0[4] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 81, 1910, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("/ofI8q4#?2U-/jL&n0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /ofI8q4#?2U-/jL&n0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "2(\"g@x1i\"E";
      Utility.searchOpcode("2(\"g@x1i\"E");
      try { 
        Utility.typeOfSignature("2(\"g@x1i\"E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2(\"g@x1i\"E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      try { 
        Utility.typeOfSignature("K?e[vL*5Ql!S)=WgZ\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K?e[vL*5Ql!S)=WgZ\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L:;V";
      stringArray0[1] = "L:;V";
      stringArray0[2] = "L:;V";
      stringArray0[3] = "L:;V";
      stringArray0[4] = "L:;V";
      Utility.methodTypeToSignature("L:;V", stringArray0);
      Utility.replace("laload", "aaload", "L:;V");
      Utility.printArray((Object[]) stringArray0, true);
      Utility.methodSignatureReturnType("Class must not be null", true);
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.fillup("dload_1", 152, false, '&');
      String string0 = Utility.accessToString(152);
      assertEquals("static final transient", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "dload_1";
      objectArray0[1] = (Object) "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&dload_1";
      objectArray0[2] = (Object) "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&dload_1";
      objectArray0[3] = (Object) "dload_1";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"dload_1\", \"&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&dload_1\", \"&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&dload_1\", \"dload_1\"", string1);
      
      String string2 = Utility.replace("SUjpa:\"@@QSsfJ", "\")", "SimpleElementValue class does not know how to stringify type ");
      assertEquals("SUjpa:\"@@QSsfJ", string2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-22);
      byteArray0[8] = (byte) (-126);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-22), 103);
      constantArray0[0] = (Constant) constantFieldref0;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string3 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-94), 172);
      assertEquals("0:    if_icmpge\t\t#-26456\n3:    dload_1\n4:    fconst_2\n5:    lshr\n6:    lconst_0\n7:    <illegal opcode>\n8:    ixor\n", string3);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Utility.methodSignatureReturnType("[V?R2R3e}{vsH");
      Utility.classOrInterface(16);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "[V?R2R3e}{vsH";
      objectArray0[1] = (Object) "[V?R2R3e}{vsH";
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "[V?R2R3e}{vsH";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Utility.replace("Cache hit ", "Cache hit ", "O$");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)63;
      byteArray0[0] = (byte)63;
      byte byte1 = (byte)91;
      byteArray0[1] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      int int0 = 1392;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)63, 1392);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 250, (-1082));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Utility.getSignature(" ");
      Utility.clearBit(198, 198);
      boolean boolean0 = true;
      Utility.fillup("L;", (-4168), true, 'p');
      String string0 = "org.apache.bcel.classfile.Utility$1";
      Utility.fillup("org.apache.bcel.classfile.Utility$1", 198, true, 'p');
      boolean boolean1 = true;
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.signatureToString("Z_Y{!voZ,o", false);
      try { 
        Utility.methodSignatureArgumentTypes("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.compactClassName("K@'H`~K_;<{/eT'");
      String string0 = "dreturn";
      Utility.compactClassName("K@'H`~K_;<{/eT'", "dreturn", true);
      try { 
        Utility.methodSignatureReturnType("K@'H`~K_;<{.eT'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K@'H`~K_;<{.eT''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-25);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.markSupported();
      byteSequence0.readChar();
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.isJavaIdentifierPart('~');
      Utility.convertString("ddiv");
      Utility.getSignature("ddiv");
      String string0 = Utility.format((byte)85, 6, true, 'h');
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)63;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1994), (int) (byte)74, true);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    bipush\t\t74\n4:    <illegal opcode>\n5:    lstore_0\n", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte) (-51);
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) (byte)63;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Utility.printArray(objectArray0, true, true);
      String string1 = Utility.classOrInterface((byte)16);
      assertEquals("class", string1);
      
      String string2 = Utility.replace("InnerClasses(", "InnerClasses(", "$.;AD&1Ef,G");
      assertEquals("$.;AD&1Ef,G", string2);
      
      int int0 = Utility.setBit(10, (-3878));
      assertEquals(67108874, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-60);
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-40);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String string0 = "faload";
      String string1 = "ON1S";
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-91);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 79, (int) (byte)3, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = Utility.classOrInterface(2903);
      assertEquals("interface", string0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lneg");
      Utility.signatureToString("Lm+e;V", true);
      String string1 = Utility.compactClassName("p{^", "4\"]", true);
      assertEquals("p{^", string1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = "5";
      try { 
        Utility.typeOfSignature("5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("ubfL|'$7Y?!u", stringArray0);
      Utility.printArray((Object[]) null, false, false);
      Utility.methodSignatureArgumentTypes("()LubfL|'$7Y?!u;", false);
      String string1 = Utility.compactClassName("()LubfL|'$7Y?!u;");
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte)75;
      byteArray0[8] = (byte)91;
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$feTF8$a8$H$84K$5b", string2);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Utility.setBit(5, 251);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a]L`I;pTa975G*6f#HN");
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0, true, true);
      Utility.accessToString(3, true);
      Utility.convertString("{java.lang.Object@1f8ba870, java.lang.Object@484a4d37, java.lang.Object@78ee309a, java.lang.Object@62696b82, java.lang.Object@20e39797, java.lang.Object@3a5a5549, java.lang.Object@33b9d878, java.lang.Object@1a2580f6, java.lang.Object@26c6f30a}");
      Utility.compactClassName("Illegally nested brackets:");
      try { 
        Utility.typeOfSignature("1/CIq'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1/CIq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Utility.format(263, 263, false, 'L');
      try { 
        Utility.methodSignatureReturnType("LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL263");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL263
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, true);
      Utility.clearBit((-1368), 79);
      Utility.setBit(79, 79);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 322, (-2566));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.isSet((-2267), (-2267));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2\"f#kq!:_-$rh:g3c>s");
      String string0 = "(";
      Utility.getSignature("(");
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, (int) (byte)16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.typeOfSignature("DA(YHP+U^e^_X<U1}U");
      Utility.methodSignatureReturnType("DA(YHP+U^e^_X<U1}U");
      Utility.fillup("DA(YHP+U^e^_X<U1}U", (byte)7, true, '\\');
      Utility.getSignature("DA(YHP+U^e^_X<U1}U");
      Utility.fillup("$", 59, true, '\\');
      Utility.isSet(59, (-905));
      try { 
        Utility.methodSignatureArgumentTypes("$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.accessToString((-514));
      Utility.accessToString(249);
      // Undeclared exception!
      try { 
        Utility.signatureToString("NCtA<Qx1M}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NCtA<Qx1M}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 81, 1910, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-52);
      byte byte0 = (byte) (-104);
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)82, (-1846));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "iand";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iand");
      try { 
        Utility.methodSignatureReturnType("HPqA{+Eev");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HPqA{+Eev'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "QFVf&Py%I=!<SuUH&";
      try { 
        Utility.typeOfSignature("QFVf&Py%I=!<SuUH&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QFVf&Py%I=!<SuUH&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)38;
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-74);
      byte byte1 = (byte)18;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte)111;
      byteArray0[8] = (byte) (-38);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)111, 2101, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 4862. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "P[svY3s}T]\"Zn;C~6";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("P[svY3s}T]\"Zn;C~6", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P[svY3s}T]\"Zn;C~6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Utility.setBit(26666, 26666);
      String string0 = "2*b#dBc_J.";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string1 = "java.lang.invokestatic";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "2*b#dBc_J.", "java.lang.invokestatic");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)22;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)74, 1303, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      short short0 = Utility.searchOpcode("X7n:3h,e^1s");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.format(120, 169, false, '@');
      assertEquals("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@120", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "X7n:3h,e^1s";
      objectArray0[1] = (Object) "X7n:3h,e^1s";
      objectArray0[2] = (Object) "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@120";
      objectArray0[3] = (Object) "X7n:3h,e^1s";
      objectArray0[4] = (Object) "X7n:3h,e^1s";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@120";
      objectArray0[7] = (Object) "X7n:3h,e^1s";
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      
      String string2 = Utility.getSignature("\n     Method Arguments:");
      assertEquals("LMethod;", string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)16;
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("65 3b 02 47 1f aa 10", string3);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Utility.setBit(84, 43);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-36);
      byteArray0[7] = (byte) (-8);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)30, 68, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = 102;
      Utility.accessToString(102, false);
      try { 
        Utility.methodSignatureReturnType("Qk{=B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qk{=B'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = "<";
      boolean boolean0 = false;
      Utility.decode("<", false);
      String string1 = "?pC[\"sXj";
      try { 
        Utility.typeOfSignature("?pC[\"sXj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?pC[\"sXj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "1]b&";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1]b&");
      String string1 = ", max_locals = ";
      Utility.getSignature(", max_locals = ");
      String string2 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.accessToString(1565);
      Utility.compactClassName("1]b&");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)40;
      Utility.toHexString(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)40, (int) (byte)120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.compactClassName("boolean", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-111);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-111);
      byteArray1[1] = (byte) (-111);
      byteArray1[2] = (byte) (-111);
      Utility.equals(byteArray0, byteArray1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte) (-111);
      objectArray0[1] = (Object) (byte)118;
      objectArray0[2] = (Object) "boolean";
      objectArray0[3] = (Object) (byte)118;
      objectArray0[4] = (Object) "boolean";
      objectArray0[5] = (Object) (byte)118;
      objectArray0[6] = (Object) (byte) (-111);
      objectArray0[7] = (Object) (byte) (-111);
      Utility.printArray(objectArray0);
      Constant[] constantArray0 = new Constant[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      try { 
        ConstantUtf8.getInstance((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "if_icmplt";
      Utility.compactClassName("if_icmplt");
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.convertString("[91j+{50`!xhAS");
      String string0 = "!X~B$(t^\"?e@W";
      try { 
        Utility.typeOfSignature("!X~B$(t^\"?e@W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X~B$(t^\"?e@W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.compactClassName("-", "-", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-111);
      byteArray0[8] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("ifnonnull\t\t#23267", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Utility.methodSignatureReturnType("D_{X,Al!*7j");
      Utility.convertString("D_{X,Al!*7j");
      Utility.compactClassName("D_{X,Al!*7j", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-42);
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte)35;
      Utility.encode(byteArray0, false);
      Utility.clearBit(2690, (byte) (-110));
      Utility.compactClassName("MDL");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("MDL", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MDL'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.methodSignatureReturnType("SYSTEM", false);
      Utility.signatureToString("SYSTEM");
      boolean boolean0 = Utility.isSet((-1596), (-1596));
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "lreturn";
      stringArray0[1] = "short";
      stringArray0[2] = "short";
      stringArray0[3] = "short";
      String string0 = Utility.methodTypeToSignature("short", stringArray0);
      assertEquals("(Llreturn;SSS)S", string0);
      
      String string1 = Utility.compactClassName("f-/V&-]#");
      assertEquals("f-.V&-]#", string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)82;
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-98473200), (byte)82);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1596), (-1596));
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(128, (-98473200));
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantClass constantClass0 = new ConstantClass((byte)0);
      constantArray0[3] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteArray0, constantPool1, (-2516), (-2516), false);
      assertEquals("0:    iconst_0\n1:    nop\n2:    dastore\n", string2);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte)76;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-101);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)8;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("03 37 58 96 08");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 03 37 58 96 08
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      short short0 = Utility.searchOpcode("[]");
      assertEquals((short) (-1), short0);
      
      byte byte0 = Utility.typeOfSignature("I,EGHp7:\"[yM");
      assertEquals((byte)10, byte0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = Utility.decode("org.apache.bcel.classfile.RuntimeInvisibleParameterAnnotations", false);
      assertEquals(62, byteArray1.length);
      
      short short0 = Utility.searchOpcode("q;-i^");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.convertString("nr+0H7T%'+.Zy:9(.\"");
      assertEquals("nr+0H7T%\\'+.Zy:9(.\\\"", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('0');
      assertTrue(boolean0);
      
      String string1 = Utility.methodSignatureReturnType("[Cq", true);
      assertEquals("char[]", string1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = Utility.format((-1774), 14, false, ';');
      Utility.format((-1774), (-1487), false, '\\');
      String string1 = Utility.convertString(";;;;;;;;;-1774");
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-81);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)3, (int) (byte)72);
      assertEquals("3:    dreturn\n", string2);
      
      Utility.fillup(";;;;;;;;;-1774", (byte) (-81), false, ';');
      Utility.replace(";;;;;;;;;-1774", "M_>T/g", ";;;;;;;;;-1774");
      String string3 = Utility.format(3194, (byte)81, false, '\'');
      assertEquals("'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''3194", string3);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "dreturn";
      Utility.compactClassName("dreturn", true);
      Utility.fillup(")\t", 8, true, 'G');
      String[] stringArray0 = new String[7];
      stringArray0[0] = "getstatic";
      stringArray0[1] = ")\t";
      stringArray0[2] = ")\tGGGGGG";
      stringArray0[3] = "getstatic";
      stringArray0[4] = "dreturn";
      stringArray0[5] = ")\tGGGGGG";
      stringArray0[6] = "dreturn";
      Utility.methodTypeToSignature("getstatic", stringArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte) (-67);
      byte byte0 = (byte) (-68);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte) (-47);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      int int0 = 41;
      int int1 = (-1389);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 49
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.printArray((Object[]) null, true);
      Utility.accessToString((-607), true);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("X_cHSH", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X_cHSH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("new", false);
      try { 
        Utility.typeOfSignature("%KCJ7ddbhav!V?K'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %KCJ7ddbhav!V?K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dmul");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.signatureToString("Dont call getValueChar() on a non CHAR ElementValue");
      try { 
        Utility.typeOfSignature("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.accessToString(33, true);
      try { 
        Utility.methodSignatureReturnType("lshr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lshr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "I%&e_7VLe\"g27M#.";
      Utility.methodSignatureReturnType("I%&e_7VLe\"g27M#.", true);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "char");
      byte byte0 = (byte) (-66);
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-47);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-81), (int) (byte) (-47));
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "/,ZudqNEDDCW", "0:    arraylength\n1:    dreturn\n2:    fcmpl\n3:    lload\t\t%209\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fstore\t\t%162", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = "YCF2mG,?yJO";
      try { 
        Utility.typeOfSignature("YCF2mG,?yJO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YCF2mG,?yJO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J\"ne$uvmD9>*7u");
      Utility.isJavaIdentifierPart('+');
      Utility.signatureToString("J\"ne$uvmD9>*7u");
      try { 
        Utility.methodSignatureReturnType("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `long'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = "Yg-loT";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("Yg-loT", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yg-loT'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      Utility.printArray(objectArray0, false);
      Utility.printArray(objectArray0, false);
      Utility.printArray(objectArray0, true);
      String string0 = "L,_i,+4xX</m0";
      // Undeclared exception!
      try { 
        Utility.signatureToString("L,_i,+4xX</m0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L,_i,+4xX</m0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("<<E[u");
      boolean boolean0 = false;
      Utility.compactClassName("<<E[u", false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<<E[u";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("<<E[u", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.convertString("Eo3?-Jfl&pLXhNM");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte)12;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)12, (int) (byte) (-123));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.replace("\"Tz8", "\"Tz8", "%_:]r|V%g Hh|dn0");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)58;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      mockPrintStream0.print((float) (byte)58);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "%_:]r|V%g Hh|dn0";
      objectArray0[1] = (Object) "%_:]r|V%g Hh|dn0";
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      byteArrayOutputStream0.close();
      objectArray0[2] = (Object) "\"Tz8";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      try { 
        Utility.typeOfSignature("\"Tz8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"Tz8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.typeOfSignature("L<illegal;V");
      Utility.compactClassName("|lc (f?K", "9$#", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("transient", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `transient'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n\t\tthrows ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[1];
      int int0 = 100;
      mockFileOutputStream0.write(100);
      mockFileOutputStream0.flush();
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      try { 
        Utility.methodSignatureReturnType("z9kFh$7u|.uBB)G5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "void";
      stringArray0[1] = "anewarray";
      stringArray0[2] = "void";
      stringArray0[3] = "impdep1";
      stringArray0[4] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format((-1900), (-1900), false, 'w');
      String string0 = "]y>/gu";
      Utility.compactClassName("]y>/gu", "]y>/gu", true);
      OutputStream outputStream0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0, false, false);
      Utility.format(1519, 100, false, 'C');
      Utility.classOrInterface(100);
      Utility.signatureToString("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC1519");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)3;
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("?>...", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "m+e BQd~;r}4ptg";
      stringArray0[1] = "m+e BQd~;r}4ptg";
      stringArray0[2] = "m+e BQd~;r}4ptg";
      stringArray0[3] = "m+e BQd~;r}4ptg";
      stringArray0[4] = "m+e BQd~;r}4ptg";
      stringArray0[5] = "m+e BQd~;r}4ptg";
      stringArray0[6] = "m+e BQd~;r}4ptg";
      String string0 = Utility.methodTypeToSignature("m+e BQd~;r}4ptg", stringArray0);
      assertEquals("(Lm+e;Lm+e;Lm+e;Lm+e;Lm+e;Lm+e;Lm+e;)Lm+e;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte) (-2);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("52 04 67 7a 6e ee 64 fe", string1);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.compactClassName("%H[=C#Vmz[B", "ifnonnull", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 855);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) bufferedOutputStream0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) bufferedOutputStream0;
      objectArray0[3] = (Object) pipedOutputStream0;
      objectArray0[4] = (Object) "ifnonnull";
      pipedInputStream0.mark(90);
      PrintWriter printWriter0 = mockPrintWriter0.printf("ifnonnull", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertEquals(195, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "r$>u:";
      boolean boolean0 = false;
      Utility.decode("r$>u:", false);
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Bn");
      Utility.signatureToString("Bn", false);
      Utility.getSignature("byte");
      Utility.replace("byte", "B", "B");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      Utility.compactClassName("byte", true);
      try { 
        Utility.decode("byte", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "W+|U'IMC?eRg\"t\\";
      try { 
        Utility.methodSignatureReturnType("W+|U'IMC?eRg\"t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W+|U'IMC?eRg\"t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = "if_icmplt";
      Utility.compactClassName("if_icmplt");
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.compactClassName(">2D1=?J~e", "zt!9=fh", true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "zt!9=fh";
      objectArray0[1] = (Object) "zt!9=fh";
      objectArray0[2] = (Object) "zt!9=fh";
      objectArray0[3] = (Object) "zt!9=fh";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ">2D1=?J~e";
      Utility.printArray(objectArray0, true);
      int int0 = (-1837);
      Utility.clearBit((-1837), (-1837));
      Utility.accessToString((-1837));
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = null;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.searchOpcode(">%Y;T9|cn('");
      String string0 = ":interface";
      try { 
        Utility.methodSignatureReturnType(":interface", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `:interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      char char0 = ' ';
      Utility.isJavaIdentifierPart(' ');
      Utility.compactClassName("KXQ@AF");
      Utility.fillup("L=4FeFtRlf6\"]i>%+x;L=4FeFtRlf6\"]i>%+x;", 2036, false, ' ');
      Utility.classOrInterface(2036);
      byte[] byteArray0 = null;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      try { 
        Utility.typeOfSignature("GS\"/sbL.:oR^hRAHxQ1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GS\"/sbL.:oR^hRAHxQ1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = Utility.accessToString(1155);
      assertEquals("public private transient abstract", string0);
      
      String string1 = Utility.accessToString(14);
      assertEquals("private protected static", string1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = Utility.getSignature("=4FeFtRlf6\"]i>%+x");
      assertEquals("L=4FeFtRlf6\"]i>%+x;", string0);
      
      String string1 = Utility.compactClassName("L=4FeFtRlf6\"]i>%+x;", "L=4FeFtRlf6\"]i>%+x;", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString(1603, true);
      Utility.compactClassName("public private volatile abstract", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "public private volatile abstract";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "public private volatile abstract";
      stringArray0[5] = null;
      stringArray0[6] = "public private volatile abstract";
      stringArray0[7] = "public private volatile abstract";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature(":Xb}l2|1|j(", (String[]) null);
      assertEquals("()L:Xb}l2|1|j(;", string0);
      
      String string1 = Utility.compactClassName("long", false);
      assertEquals("long", string1);
      
      boolean boolean0 = Utility.isSet(1778, 97);
      assertTrue(boolean0);
      
      String string2 = Utility.classOrInterface((-177));
      assertEquals("interface", string2);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) ":Xb}l2|1|j(";
      objectArray0[1] = (Object) ":Xb}l2|1|j(";
      objectArray0[2] = (Object) ":Xb}l2|1|j(";
      objectArray0[3] = (Object) "long";
      objectArray0[4] = (Object) "interface";
      String string3 = Utility.printArray(objectArray0, true);
      assertNotNull(string3);
      assertEquals("{:Xb}l2|1|j(, :Xb}l2|1|j(, :Xb}l2|1|j(, long, interface}", string3);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = "]\"{)S8D0dn5Y4AjL%\"e";
      boolean boolean0 = false;
      Utility.compactClassName("]\"{)S8D0dn5Y4AjL%\"e", "]\"{)S8D0dn5Y4AjL%\"e", false);
      String string1 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("bastore", "", "bastore", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: bastore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "r!wK)pt'l;yAr2OSnR");
      String string0 = Utility.compactClassName("*oI7l$jJbgl)F@");
      assertEquals("*oI7l$jJbgl)F@", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('S');
      boolean boolean1 = Utility.isSet(3734, 3734);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = Utility.isSet(3734, (-1107587045));
      assertFalse(boolean2);
      
      String string1 = Utility.signatureToString("IS)DMZ@UMar_s<Pw", true);
      assertEquals("int", string1);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)2;
      Utility.toHexString(byteArray0);
      Utility.toHexString(byteArray0);
      Utility.classOrInterface((byte) (-115));
      File file0 = MockFile.createTempFile("UNKNOWN (", "interface");
      try { 
        MockFile.createTempFile("0d 8d 28 0b 02 25 02", "interface", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.decode("3SAayEV?hN", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("null, null, null, null, null, null, null, null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Utility.compactClassName("istore_1");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "istore_1";
      objectArray0[1] = (Object) "istore_1";
      objectArray0[2] = (Object) "istore_1";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)68;
      Utility.toHexString(byteArray0);
      Utility.classOrInterface((byte)66);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("8Tv4:W`Sm)Fy", "8Tv4:W`Sm)Fy", "\"F,\"F_", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8Tv4:W`Sm)Fy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "org.apache.bcel.classfile.ConstantInvokeDynamic", "org.apache.bcel.classfile.ConstantInvokeDynamic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Utility.setBit(233, 233);
      String string0 = "\t\t<";
      Utility.classOrInterface(745);
      Utility.clearBit(6525, (-111));
      try { 
        Utility.typeOfMethodSignature("ifgt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifgt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("\t\t#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t\t#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Utility.setBit(233, 233);
      boolean boolean0 = true;
      LocalVariableTable localVariableTable0 = null;
      try { 
        Utility.methodSignatureToString("ifgt", "3K~", "\t\t<", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifgt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)67;
      byte byte0 = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      Utility.toHexString(byteArray0);
      Utility.encode(byteArray0, true);
      Utility.format(824, 824, true, '(');
      Utility.compactClassNametrue);
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-62), (byte)67);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantLong constantLong0 = new ConstantLong((-2281L));
      constantArray0[2] = (Constant) constantLong0;
      ConstantInteger constantInteger0 = new ConstantInteger(224);
      constantArray0[3] = (Constant) constantInteger0;
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[4] = (Constant) constantLong1;
      ConstantNameAndType constantNameAndType2 = null;
      try {
        constantNameAndType2 = new ConstantNameAndType(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = "~te~*vCgZ,cm>bmnCTa";
      // Undeclared exception!
      try { 
        Utility.signatureToString("~te~*vCgZ,cm>bmnCTa", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `~te~*vCgZ,cm>bmnCTa'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Utility.isJavaIdentifierPart('!');
      String string0 = "athrow";
      Utility.searchOpcode("athrow");
      Utility.isSet((short)191, (short)191);
      // Undeclared exception!
      try { 
        Utility.signatureToString("92ENYj$H_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `92ENYj$H_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)77;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "f8e";
      stringArray0[1] = "f8e";
      Utility.methodTypeToSignature("f8e", stringArray0);
      Utility.printArray((Object[]) stringArray0);
      try { 
        Utility.methodSignatureReturnType("f8e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `f8e'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Utility.setBit(986, 928);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "TwHEVe'qfkQb4";
      Utility.convertString("TwHEVe'qfkQb4");
      try { 
        Utility.methodSignatureReturnType("TwHEVe'qfkQb4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TwHEVe'qfkQb4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-71);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.signatureToString("SimpleElementValue class does not know how to stringify type ");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.decode("?eNyA0$0~e]'@", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0~\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = "m~Bt/";
      try { 
        Utility.typeOfSignature("m~Bt/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: m~Bt/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Utility.replace("pK$5XU=\"u%{<", "4*kHp#EU1Z}Q[Bv1t", "{K~");
      ByteSequence byteSequence0 = null;
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 250, (-1082));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = "if_icmple";
      try { 
        Utility.methodSignatureArgumentTypes("if_icmple");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmple
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
