/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 00:22:06 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.derby.catalog.UUID;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.rowio.RowOutputTextQuoted;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0001\u00D8\u0002\uFFFF\u0001\u00D9\u000B\uFFFF\u0001\u00D7\u0001\u00DA");
      Integer integer0 = RawTransaction.ABORT;
      SQLUtil.parseColumnTypeAndSize("call=");
      SQLUtil.removeComments("call=");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("call=", true, "update", "into");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      String string1 = SQLUtil.constraintName(dBCheckConstraint0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLUtil.isQuery("select into");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setRowId(int, RwId)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(421, "ROWIDSCAN");
      Integer integer0 = new Integer((-2013700047));
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.toUnsignedString((-2013700047));
      Integer.compare(42, 42);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ROWIDSCAN", defaultDBTable0, dBDataType0, integer1);
      defaultDBColumn0.setVersionColumn(true);
      SQLUtil.renderColumn(defaultDBColumn0);
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBDataType.getInstance(98, "drop indexlessthanstringfromparameter");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      pipedWriter0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (double) 98;
      streamTokenizer0.slashSlashComments(false);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("98", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.parseColumnTypeAndSize(", but is: ");
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      SQLUtil.parseColumnTypeAndSize(", but is: ");
      SQLUtil.mutatesStructure("exec");
      SQLUtil.isProcedureCall("RDB$FILTERS");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("Xmc7D");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, " = ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setRowId(int, RowId)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, " = ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("org.apache.derby.impl.sql.execute.SavepointConstantAction");
      stringBuilder1.append("QAUF");
      SQLUtil.normalize("j*J4,b!M#e1yW", false);
      DBCatalog dBCatalog0 = new DBCatalog("j*J4,b!M#e1yW");
      DBSchema dBSchema0 = new DBSchema("zSeuv~7;DT&)N|M!,", dBCatalog0);
      SQLUtil.isDML("org.apache.derby.impl.sql.execute.SavepointConstantAction");
      SQLUtil.isDML("select");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "create materialized viewfsc`i3]dsg]e^";
      stringArray0[1] = "create materialized viewfsc`i3]dsg]e^";
      stringArray0[2] = "select";
      SQLUtil.leftJoin("}Gu$F)OuOmEh}Vg", stringArray0, "j * J4, b ! M # e1yW", "", stringArray0);
      String string0 = " as ";
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(1192);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1192, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.toString();
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((String) null);
      dBForeignKeyConstraint0.columnReferencedBy(stringArray0[0]);
      StringBuilder stringBuilder1 = stringBuilder0.append((String) null);
      dBForeignKeyConstraint0.setDoc("FOREIGN KEY (, ) REFERENCES null(, )");
      stringBuilder1.append(false);
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance(674, "]>hvn`orz");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\u0001\u0094", defaultDBTable0, 522, "IOException in isc_service_detach");
      boolean boolean0 = arrayList0.add((DBColumn) defaultDBColumn0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("\u0001\u0094", defaultDBTable0, dBDataType0, integer2, integer1);
      arrayList0.add((DBColumn) defaultDBColumn1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      boolean boolean1 = SQLUtil.isQuery("create unique index");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "dscb]71");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[1] = "org.apache.derby.impl.sql.execute.SavepointConstantAction";
      stringArray0[2] = "org.apache.derby.impl.sql.execute.SavepointConstantAction";
      stringArray0[3] = "dscb]71";
      stringArray0[4] = "org.apache.derby.impl.sql.execute.SavepointConstantAction";
      stringArray0[5] = "//";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.apache.derby.impl.sql.execute.SavepointConstantAction", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.join("inner", "", stringArray0, ".*", "Ic~", stringArray0);
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.leftJoin("dscb]71", stringArray0, "select intodefault", "dscb]71", stringArray0);
      String string1 = SQLUtil.renderColumnListWithTableName("execalter materialized view", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = SQLUtil.removeComments("!a&Le\u0003bVOz>]");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.isQuery("!a&Le\u0003bVOz>]");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "!a&Le\u0003bVOz>]");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!a&Le\u0003bVOz>]");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("!a&Le\u0003bVOz>]", defaultDBTable0, 249, "!a&Le\u0003bVOz>]");
      TableContainer tableContainer0 = new TableContainer("!a&Le\u0003bVOz>]", defaultDBTable0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("!a&Le\u0003bVOz>]", (DBSchema) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "!a&Le\u0003bVOz>]", true, stringArray0);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable("!a&Le\u0003bVOz>] !A&LE\u0003BVOZ>] NULL", (DBSchema) null);
      String string1 = SQLUtil.renderQuery(defaultDBTable2, stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.toString();
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((String) null);
      StringBuilder stringBuilder1 = stringBuilder0.append("l&+qrn,^#q}=");
      dBForeignKeyConstraint0.setDoc("FOREIGN KEY (, ) REFERENCES null(, )");
      stringBuilder1.append(false);
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      String string0 = "ALTER TABLE ";
      SQLUtil.removeComments("ALTER TABLE ");
      stringBuilder0.append((CharSequence) stringArray0[0]);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "ALTER TABLE ", "ROWIDSCAN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isDDL("delete");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      defaultDBTable0.getPrimaryKeyConstraint();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("executeu=l+wfu", 34);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DataStore dataStore0 = new DataStore("");
      StringBuilder stringBuilder0 = new StringBuilder();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setDoc("D");
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      dBForeignKeyConstraint0.setDoc("cVWv8oBci7j7");
      SQLUtil.addRequiredCondition("delete", stringBuilder1);
      StringBuilder stringBuilder2 = new StringBuilder();
      SQLUtil.addOptionalCondition("PVP_A4cH0r", stringBuilder0);
      SQLUtil.mutatesDataOrStructure("");
      String string0 = SQLUtil.renderColumnListWithTableName("D", stringArray0);
      assertEquals("D.null", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      Boolean boolean0 = new Boolean("l0KEJ)yA'vqa}JGks");
      SQLUtil.normalize("42XAG", false);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      TableContainer tableContainer0 = new TableContainer("QR>21:S6'.5)F@");
      tableContainer0.getTable("O<)");
      DBDataType dBDataType0 = DBDataType.getInstance((-2), "yU&Oqs/[");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("42XAG", defaultDBTable0, dBDataType0, integer1, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("2|0:KPFh;v5g>w8\":Iy", (DBTable) null, dBDataType0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      SQLUtil.removeComments("$X(g5Yf%d#xL");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "$X(g5Yf%d#xL";
      stringArray0[1] = "l0KEJ)yA'vqa}JGks";
      stringArray0[2] = "O<)";
      stringArray0[3] = "-Bvn01W?\"rJ";
      stringArray0[4] = "42XAG";
      SQLUtil.renderColumnListWithTableName("org.firebirdsql.jdbc.field.FBCachedBlobField", stringArray0);
      SQLUtil.innerJoin((String) null, stringArray0, "l)-+?]f!adZ|Oa~_qj", "zG#?DLg-CA1KMDZ}", stringArray0);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      DBSchema dBSchema0 = new DBSchema("select@ry%r1s~{m");
      dBSchema0.getTriggers();
      defaultDBTable0.setSchema(dBSchema0);
      SQLUtil.parseColumnTypeAndSize("delete=e#mg");
      StringBuilder stringBuilder1 = new StringBuilder();
      System.setCurrentTimeMillis(199L);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.parseColumnTypeAndSize("left");
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      SQLUtil.parseColumnTypeAndSize("s, jNFO1&^rM^6mgf:");
      String string0 = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "create materialized view");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      stringBuilder1.append((-4145.366));
      String string1 = "1_fuA@ G^(p\"=PHh&c";
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("1_fuA@ G^(p\"=PHh&c", false, defaultDBTable0, "s, jNFO1&^rM^6mgf:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Syntax error after s
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create unique index_t#ztw^y";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create unique index_t#ztw^y", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.toString();
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append("l&+qrn,^#q}=");
      dBForeignKeyConstraint0.setDoc("l&+qrn,^#q}=");
      stringBuilder0.append(false);
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance(674, "\u0001\u0094");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("l&+qrn,^#q}=", defaultDBTable0, dBDataType0, integer0, integer1);
      arrayList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      boolean boolean0 = SQLUtil.isQuery("create unique index");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isProcedureCall("");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)75;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream1 = new DynamicByteArrayOutputStream(dynamicByteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dynamicByteArrayOutputStream1, true);
      Locale locale0 = Locale.US;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "}I{I\"{", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) nameSpec0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) dynamicByteArrayOutputStream1;
      objectArray0[5] = (Object) (byte)75;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) (byte)0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "^+z4G}vhf'k5", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "}I{I\"{";
      stringArray0[1] = "alter indexdelete";
      stringArray0[2] = "}I{I\"{";
      stringArray0[3] = "";
      stringArray0[4] = "^+z4G}vhf'k5";
      stringArray0[5] = "";
      stringArray0[6] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter indexdelete", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("deletecolumn_type smallint", stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1);
      assertEquals("deletecolumn_type smallintCONSTRAINT \"alter indexdelete\" ", stringBuilder1.toString());
      assertEquals("deletecolumn_type smallintCONSTRAINT \"alter indexdelete\" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isDDL("delete");
      defaultDBTable0.getPrimaryKeyConstraint();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("executeu=l+wfu", 34);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DataStore dataStore0 = new DataStore("");
      StringBuilder stringBuilder0 = new StringBuilder();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setDoc("D");
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("3-@CxUB", stringBuilder1);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      SQLUtil.renderColumnListWithTableName("truncate", stringArray0);
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.renderColumnListWithTableName("delete", stringArray0);
      StringBuilder stringBuilder3 = SQLUtil.addRequiredCondition("SELECT * FROM null WHERE null = null", stringBuilder2);
      assertSame(stringBuilder2, stringBuilder3);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create unique index_t#ztw^y";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create unique index_t#ztw^y", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      dBForeignKeyConstraint0.setDoc("l&+qrn,^#q}=");
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("create unique index_t#ztw^y", stringBuilder1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder2, nameSpec0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      SQLUtil.renderColumnListWithTableName("selecttruncateb_s5(v$u5&l]", stringArray0);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", true, defaultDBTable1, stringArray0, defaultDBTable1, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      TableContainer tableContainer0 = new TableContainer("select", defaultDBTable0);
      SQLUtil.normalize("l&+qrn,^#q}=", false);
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isQuery("select into!5xxcyltso2}mo:");
      String string0 = SQLUtil.normalize("J*/e6&=", true);
      assertEquals("J */ e6 & =", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("vV{h8)SG<.&\"40_E", defaultDBTable0, 1771, "org.databene.jdbacl.SQLUtil");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBCatalog dBCatalog0 = new DBCatalog();
      String string1 = SQLUtil.ownerDotComponent(dBColumnArray0[0]);
      assertEquals("null.vV{h8)SG<.&\"40_E", string1);
      
      DBCatalog dBCatalog1 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog1);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("org.databene.jdbacl.SQLUtil", dBSchema0);
      Integer integer0 = new Integer(1771);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.databene.jdbacl.SQLUtil";
      stringArray0[1] = "org.databene.jdbacl.SQLUtil";
      stringArray0[2] = "create materialized viewdfh/m;c!0";
      stringArray0[3] = "null.vV{h8)SG<.&\"40_E";
      stringArray0[4] = null;
      TableContainer tableContainer0 = new TableContainer("J */ e6 & =", dBSchema0);
      SQLUtil.normalize("", false);
      SQLUtil.isDML(":49");
      boolean boolean1 = SQLUtil.isDML(" DEFAULT ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).getName();
      doReturn((CompositeDBObject) null).when(compositeDBObject0).getOwner();
      SQLUtil.typeAndName(defaultDBTable0);
      ErrorMessages errorMessages0 = new ErrorMessages();
      SQLUtil.mutatesDataOrStructure("table null");
      DBDataType.getInstance(32, "table null");
      SQLUtil.ownerDotComponent(compositeDBObject0);
      SQLUtil.parseColumnTypeAndSize("\u0002\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D\n%\u0001\uFFFF\u0005%\u0001\u01AD\u0002\uFFFF\u0003%\u0001\u01B1\u0002%\u0001\uFFFF\u0003%\u0001\u01B7\u0001%\u0002\uFFFF\u0001\u01B9\u0001%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001\u01BD\u0001\uFFFF\u0001\u01BE\u0001\uFFFF\u0002%\u0001\u01C1\u0001%\u0001\uFFFF\u0002%\u0001\u01C5\u0001%\u0001\uFFFF\u0002%\u0001\u01C9\u0001\uFFFF\u0001%\u0001\u01CB\u0001\u01CC\u0003%\u0001\u01D0\u0001%\u0001\u01D2\u0006%\u0001\uFFFF\u0002%\u0001\u01DB\u0001\uFFFF\u0001\u01DC\u0001\u01DD\u0002%\u0001\u01E0\u0001\uFFFF\u0001%\u0001\uFFFF\u0001\u01E2\u0001%\u0001\u01E4\u0002\uFFFF\u0002%\u0001\uFFFF\u0003%\u0001\uFFFF\u0003%\u0001\uFFFF\u0001%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001\u01F1\u0001\uFFFF\u0001%\u0001\u01F3\u0001%\u0001\u01F5\u0004%\u0003\uFFFF\u0001%\u0001\u01FB\u0001\uFFFF\u0001\u01FC\u0001\uFFFF\u0001%\u0001\uFFFF\u0001\u01FE\u0001%\u0001\u0200\u0001\u0201\u0002%\u0001\u0204\u0004%\u0001\u020A\u0001\uFFFF\u0001\u020B\u0001\uFFFF\u0001%\u0001\uFFFF\u0002%\u0001\u020F\u0002%\u0002\uFFFF\u0001\u0213\u0001\uFFFF\u0001\u0214\u0002\uFFFF\u0001\u0215\u0001\u0216\u0001\uFFFF\u0003%\u0001\u021A\u0001\u021B\u0002\uFFFF\u0001\u021C\u0001\u021D\u0001\u021E\u0001\uFFFF\u0001\u021F\u0001%\u0001\u0221\u0004\uFFFF\u0001\u0222\u0001%\u0001\u0224\u0006\uFFFF\u0001%\u0002\uFFFF\u0001\u0226\u0001\uFFFF\u0001\u0228\u0001\uFFFF\u0001\u0229\u0002\uFFFF");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable2 = new DefaultDBTable("7.3");
      // Undeclared exception!
      try { 
        defaultDBTable1.getProvider((-132));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "update";
      stringArray0[1] = "#9yu*hn.m_Hf:snEgN";
      stringArray0[2] = "#9yu*hn.m_Hf:snEgN";
      stringArray0[3] = "#9yu*hn.m_Hf:snEgN";
      stringArray0[4] = "#9yu*hn.m_Hf:snEgN";
      stringArray0[5] = "B_S5(v$u5&l]";
      SQLUtil.join("#9yu*hn.m_Hf:snEgN", "update", stringArray0, "#9yu*hn.m_Hf:snEgN", "(", stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "table null";
      stringArray1[1] = "B_S5(v$u5&l]";
      stringArray1[2] = "[^+";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Cp", true, defaultDBTable0, stringArray1, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      RowOutputTextQuoted rowOutputTextQuoted0 = new RowOutputTextQuoted("[^+", ", ", ", ", true, "DMw|=rxph*N|\"hY");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputTextQuoted0, true);
      Locale locale0 = Locale.forLanguageTag("[^+");
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "BGSq", (Object[]) stringArray1);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      ErrorMessages errorMessages0 = new ErrorMessages();
      SQLUtil.mutatesDataOrStructure("B_S5(v$u5&l]");
      String[] stringArray2 = new String[6];
      stringArray2[0] = "drop table@pwb(orn0l.phge7'v";
      stringArray2[1] = "drop table@pwb(orn0l.phge7'v";
      stringArray2[2] = "table null";
      stringArray2[3] = "B_S5(v$u5&l]";
      stringArray2[4] = "drop table@pwb(orn0l.phge7'v";
      stringArray2[5] = "table null";
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumns(stringArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'drop table@pwb(orn0l.phge7'v' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "I";
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("I", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "Q?lU%_7w";
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("Q?lU%_7w", (String) null, ",E2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).getName();
      doReturn((String) null).when(compositeDBObject0).getObjectType();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ROWIDSCAN");
      DBDataType.getInstance(45, "ROWIDSCAN");
      DataStore dataStore0 = new DataStore("TIMESTAMP");
      VirtualFile virtualFile0 = new VirtualFile("inner", dataStore0);
      VirtualFile virtualFile1 = new VirtualFile("TIMESTAMP", dataStore0);
      OutputStream outputStream0 = virtualFile1.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "TIMESTAMP");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("ROWIDSCAN");
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      SQLUtil.typeAndName(compositeDBObject0);
      ErrorMessages errorMessages0 = new ErrorMessages();
      // Undeclared exception!
      try { 
        errorMessages0.getNClob("TIMESTAMP");
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
         //
         // Method org/apache/derby/diag/ErrorMessages.getNClob(Ljava/lang/String;)Ljava/sql/NClob; is abstract
         //
         verifyException("org.apache.derby.diag.ErrorMessages", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPackage dBPackage0 = new DBPackage(".", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure("truncateb_s5(v$u5&l]", dBPackage0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      dBPackage0.setObjectId("constraint");
      dBPackage0.isIdentical((DBObject) null);
      dBProcedure0.setObjectId("&8S:dK!-CQ+aKCytwuF");
      DBSchema dBSchema0 = new DBSchema("3a2.=8XrSWs9ZisJ7");
      SQLUtil.ownerDotComponent(dBSchema0);
      SQLUtil.normalize("truncateb_s5(v$u5&l]", true);
      SQLUtil.ownerDotComponent(dBPackage0);
      SQLUtil.parseColumnTypeAndSize("~|:4Ki#6JLCC");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("truncateb_s5(v$u5&l]");
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(1367);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1367, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(199);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("alter materialized view", dBCatalog0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "alter materialized view");
      dBSchema0.getTable("Ag6L~");
      String[] stringArray0 = new String[12];
      stringArray0[0] = "UC^*d%_oY-[i4U-r{s";
      stringArray0[1] = "create table";
      stringArray0[2] = null;
      DBSchema dBSchema1 = new DBSchema(stringArray0[2], dBCatalog0);
      dBCatalog0.isIdentical(dBSchema1);
      stringArray0[3] = null;
      stringArray0[4] = "UC^*d%_oY-[i4U-r{s";
      stringArray0[5] = "Ag6L~";
      stringArray0[6] = "Ag6L~";
      stringArray0[7] = "k*>h]ZF].";
      stringArray0[8] = "UC^*d%_oY-[i4U-r{s";
      SQLUtil.leftJoin((String) null, stringArray0, "DATE", "Q<IK~stDL3+eVC *", stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = "42X86";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("42X86");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "42X86");
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.parseColumnTypeAndSize(", but is: ");
      Boolean boolean0 = new Boolean("z?vvj");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "u=L+WFu", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-18);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      SQLUtil.normalize("XSDAJ.S", false);
      SQLUtil.isDML("XSDAJ.S");
      SQLUtil.isProcedureCall("u=L+WFu");
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(48);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      // Undeclared exception!
      try { 
        stringBuilder2.insert((int) (byte) (-112), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -112
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.parseColumnTypeAndSize(", but is: ");
      Boolean boolean0 = new Boolean("z?vvj");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "u=L+WFu", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      DataStore dataStore0 = new DataStore("drop table");
      DataStore dataStore1 = new DataStore("z?vvj");
      VirtualFile virtualFile0 = new VirtualFile("Cannot find parameter with the specified position.", dataStore1);
      VirtualFile virtualFile1 = new VirtualFile((String) null, dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, false);
      mockPrintWriter0.append((CharSequence) "drop table");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String string0 = "callf37x*;zud:%eskx";
      SQLUtil.renderValue("callf37x*;zud:%eskx");
      dBPrimaryKeyConstraint0.toString();
      DBUniqueConstraint dBUniqueConstraint0 = null;
      try {
        dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) null, (String) null, false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "e3C*\"Kd-fntNtZ]*";
      stringArray0[1] = "create unique indexdscb]71.s";
      stringArray0[3] = "@p";
      stringArray0[4] = "e3C*\"Kd-fntNtZ]*";
      stringArray0[5] = "e3C*\"Kd-fntNtZ]*";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("e3C*\"Kd-fntNtZ]*", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("z~MH[D0z:&", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("z~MH[D0z:&CONSTRAINT e3C*\"Kd-fntNtZ]* ", stringBuilder0.toString());
      
      TableContainer tableContainer0 = new TableContainer("e3C*\"Kd-fntNtZ]*", defaultDBTable0);
      boolean boolean0 = SQLUtil.isDML("@p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      PipedReader pipedReader0 = new PipedReader(2419);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer1);
      assertEquals("- 0", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "- 0";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "into";
      stringArray0[4] = "- 0";
      stringArray0[5] = "- 0";
      stringArray0[6] = null;
      String string1 = SQLUtil.join((String) null, "- 0", stringArray0, stringArray0[1], "- 0", stringArray0);
      assertEquals("null as - 0 on - 0.- 0 = - 0.- 0 and - 0.null = - 0.null and - 0.null = - 0.null and - 0.into = - 0.into and - 0.- 0 = - 0.- 0 and - 0.- 0 = - 0.- 0 and - 0.null = - 0.null", string1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isQuery("select into!5xxcyltso2}mo:");
      SQLUtil.parseColumnTypeAndSize("select into!5xxcyltso2}mo:");
      SQLUtil.typeAndName(defaultDBTable0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "create table(humdl9t1}a'a[ 3";
      stringArray0[1] = "select into!5xxcyltso2}mo:";
      stringArray0[2] = "select into!5xxcyltso2}mo:";
      stringArray0[3] = "";
      stringArray0[4] = "select into!5xxcyltso2}mo:";
      stringArray0[5] = "";
      stringArray0[6] = "select into!5xxcyltso2}mo:";
      stringArray0[7] = "table null";
      String[] stringArray1 = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", true, defaultDBTable0, stringArray0, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      SQLUtil.isQuery("_@~f/*iLHJ?`G");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(199);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "Gdjb3c7X`FZ1g!|", "_p");
      dBCheckConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      SQLUtil.addRequiredCondition("- 0", stringBuilder1);
      assertEquals("- 0", stringBuilder1.toString());
      assertEquals("- 0", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLUtil.renderColumnListWithTableName("left", stringArray0);
      SQLUtil.removeComments("left.null, left.null");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("left.null, left.null");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "rename", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("left.null, left.null", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "left", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, )", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("SQRT(-1)", stringArray0);
      String string1 = SQLUtil.removeComments("SQRT(-1)");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      byte[] byteArray0 = new byte[3];
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table null", string0);
      
      PipedReader pipedReader0 = new PipedReader(1630);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = true;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "~_I2<KXxK");
      String[] stringArray0 = new String[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.ownerDotComponent(defaultDBTable1);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "null", 0, 0);
      StringWriter stringWriter2 = stringWriter1.append('u');
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "null");
      stringWriter3.getBuffer();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.renderValue(stringWriter0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "null", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable1.getUniqueConstraint("unull");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "left";
      stringArray0[1] = "left";
      SQLUtil.leftJoin("left", stringArray0, "left", "left", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = "\"+On)p:";
      SQLUtil.normalize("\"+On)p:", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("O_");
      // Undeclared exception!
      try { 
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.parseColumnTypeAndSize(", but is: ");
      Boolean boolean0 = new Boolean("z?vvj");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "u=L+WFu", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)85;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("`>wYzB", stringBuilder0);
      SQLUtil.normalize("u=L+WFu", true);
      SQLUtil.isProcedureCall("z?vvj");
      SQLUtil.isProcedureCall("u=L+WFu");
      StringBuilder stringBuilder2 = stringBuilder0.appendCodePoint(757);
      StringBuilder stringBuilder3 = stringBuilder0.reverse();
      stringBuilder3.append((CharSequence) stringBuilder1);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder2);
      System.setCurrentTimeMillis((-1832L));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(", but is: ", defaultDBTable0, 3030, "execute");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder3);
      assertEquals("\u02F5BzYw>`\u02F5BzYw>`CONSTRAINT u=L+WFu EXECUTE", stringBuilder0.toString());
      assertEquals("\u02F5BzYw>`\u02F5BzYw>`CONSTRAINT u=L+WFu EXECUTE", stringBuilder3.toString());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Vj6#pmR/E)fL/O:RR=");
      SQLUtil.isProcedureCall("Vj6#pmR/E)fL/O:RR=");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T8-.1", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "T8-.1";
      dBSchema0.setOwner(defaultDBTable0);
      DBTrigger dBTrigger0 = new DBTrigger("org.hsqldb.Library.trim", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      stringArray0[1] = "Vj6#pmR/E)fL/O:RR=";
      DBTrigger dBTrigger1 = new DBTrigger("create materialized view", dBSchema0);
      DataStore dataStore0 = new DataStore("Vj6#pmR/E)fL/O:RR=");
      VirtualFile virtualFile0 = new VirtualFile("create materialized view", dataStore0);
      DataStore dataStore1 = new DataStore("T8-.1");
      VirtualFile virtualFile1 = new VirtualFile("d_2H", dataStore1);
      VirtualFile virtualFile2 = new VirtualFile("TablePrivilege", dataStore0);
      OutputStream outputStream0 = virtualFile2.getOutputStream();
      defaultDBTable0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, true);
      DBDataType dBDataType0 = DBDataType.getInstance((-1756), "FSC`i3]DSG]E^");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("T8-.1", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setDefaultValue("update");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" or ", 7);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.mutatesDataOrStructure("FSC`i3]DSG]E^");
      SQLUtil.leftJoin(" ptn[T@4L/", stringArray0, "T8-.1", "T8-.1", stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte) (-86);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DBPackage dBPackage0 = new DBPackage("", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure("", dBPackage0);
      dBProcedure0.setObjectId("Q~/]g+J/<Ehhm/");
      dBPackage0.setObjectId("exec");
      dBPackage0.isIdentical((DBObject) null);
      dBProcedure0.setObjectId("");
      SQLUtil.ownerDotComponent(dBPackage0);
      SQLUtil.normalize("Q~/]g+J/<Ehhm/", false);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("exec");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      SQLUtil.isQuery("null.null, null.null");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(42, threadPoolExecutor_DiscardPolicy0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)4;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "org.h2.value.ValueTimestamp");
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule((Runnable) mockThread0, (long) 42, timeUnit0);
      SQLUtil.renderValue(scheduledFuture0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("select intocreate unique index;|bqdho&{gu_:!zw|z", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getForeignKeys((UUID) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string0 = SQLUtil.join("", "", stringArray0, "", "", stringArray0);
      SQLUtil.innerJoin("", stringArray0, "deleteselect into", " as  on . = . and . = . and . = . and . = . and . = . and . = .", stringArray0);
      SQLUtil.mutatesStructure("}M,YlwF4X");
      String[] stringArray1 = new String[7];
      stringArray1[0] = "";
      stringArray1[1] = "deleteselect into as  as  on . = . and . = . and . = . and . = . and . = . and . = . on . =  as  on . = . and . = . and . = . and . = . and . = . and . = .. and . =  as  on . = . and . = . and . = . and . = . and . = . and . = .. and . =  as  on . = . and . = . and . = . and . = . and . = . and . = .. and . =  as  on . = . and . = . and . = . and . = . and . = . and . = .. and . =  as  on . = . and . = . and . = . and . = . and . = . and . = .. and . =  as  on . = . and . = . and . = . and . = . and . = . and . = ..";
      stringArray1[2] = "'CONSTRAINTS'";
      stringArray1[3] = "deleteselect into as  as  on . = . and . = . and . = . and . = . and . = . and . = . on . =  as  on . = . and . = . and . = . and . = . and . = . and . = .. and . =  as  on . = . and . = . and . = . and . = . and . = . and . = .. and . =  as  on . = . and . = . and . = . and . = . and . = . and . = .. and . =  as  on . = . and . = . and . = . and . = . and . = . and . = .. and . =  as  on . = . and . = . and . = . and . = . and . = . and . = .. and . =  as  on . = . and . = . and . = . and . = . and . = . and . = ..";
      stringArray1[4] = " as  on . = . and . = . and . = . and . = . and . = . and . = .";
      stringArray1[5] = "";
      stringArray1[6] = "deleteselect into as  as  on . = . and . = . and . = . and . = . and . = . and . = . on . =  as  on . = . and . = . and . = . and . = . and . = . and . = .. and . =  as  on . = . and . = . and . = . and . = . and . = . and . = .. and . =  as  on . = . and . = . and . = . and . = . and . = . and . = .. and . =  as  on . = . and . = . and . = . and . = . and . = . and . = .. and . =  as  on . = . and . = . and . = . and . = . and . = . and . = .. and . =  as  on . = . and . = . and . = . and . = . and . = . and . = ..";
      String string1 = SQLUtil.innerJoin("'CONSTRAINTS'", stringArray1, "", "x ]nvs8", stringArray1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "!0o0gXZ");
      SQLUtil.addRequiredCondition("!0o0gXZ", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("2}XG[%;??%", defaultDBTable0);
      tableContainer0.getSchema();
      defaultDBTable0.getUniqueConstraint((String[]) null);
      DBPackage dBPackage0 = new DBPackage("!0o0gXZ", (DBSchema) null);
      SQLUtil.normalize("select into", true);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create table", defaultDBTable0, (-2029370422), "call!0o0gxz");
      defaultDBColumn0.setDefaultValue((String) null);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" or ", 7);
      defaultDBColumn0.getNotNullConstraint();
      defaultDBColumn0.setNotNullConstraint((DBNotNullConstraint) null);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.mutatesDataOrStructure("select into");
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("setBoolean(String,boolean)", (String[]) null, "setBoolean(String,boolean)", "call!0o0gxz", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("exec", (DBTable) null, 130, "rename");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance(373, "rename");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("XSCB1.S", (DBTable) null, dBDataType0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("rename", (DBTable) null, dBDataType0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("exec", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      SQLUtil.renderColumnNames(dBColumnArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      VersionNumber versionNumber0 = VersionNumber.valueOf("tlxRsiq?~^cx)Vo");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("rename", "z", versionNumber0);
      defaultDatabase0.getTable("z", false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = " NOT NULL";
      stringArray0[1] = "exec, XSCB1.S, rename, exec";
      stringArray0[2] = "rename";
      stringArray0[3] = "tlxRsiq?~^cx)Vo";
      stringArray0[4] = "\"?";
      Integer integer1 = new Integer(373);
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType0, (Integer) null);
      SQLUtil.renderColumn(defaultDBColumn3);
      System.setCurrentTimeMillis(373);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.ownerDotComponent(defaultDBTable0);
      DataStore dataStore0 = new DataStore((String) null);
      VirtualFile virtualFile0 = new VirtualFile("null", dataStore0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "null";
      stringArray0[1] = null;
      stringArray0[2] = "5d[,5:->{nBXh*n2NB";
      stringArray0[3] = stringArray0[1];
      stringArray0[4] = "null";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "5d[,5:->{nBXh*n2NB", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "5d[,5:->{nBXh*n2NB");
      stringBuilder0.appendCodePoint(1054);
      DBDataType dBDataType0 = DBDataType.getInstance(1012, "a/2>D;$;ZC]V{`f9");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.h2.value.Transfer$1", defaultDBTable1, dBDataType0, (Integer) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize(stringArray0[3], false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("eVj6#pmR/E)fO:RR=");
      SQLUtil.isProcedureCall("eVj6#pmR/E)fO:RR=");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null, dBSchema0);
      dBSchema0.setOwner(defaultDBTable0);
      String string0 = "create materialized view";
      DBTrigger dBTrigger0 = new DBTrigger("create materialized view", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create materialized view", false, defaultDBTable1, (String[]) null, defaultDBTable1, (String[]) null);
      dBForeignKeyConstraint0.isIdentical(dBTrigger0);
      String string1 = "+";
      // Undeclared exception!
      try { 
        SQLUtil.join("+", "eVj6#pmR/E)fO:RR=", (String[]) null, "create materialized view", (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("eVj6#pmR/E)fO:RR=");
      SQLUtil.isProcedureCall("eVj6#pmR/E)fO:RR=");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T8-.1", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "T8-.1";
      dBSchema0.setOwner(defaultDBTable0);
      stringArray0[1] = "eVj6#pmR/E)fO:RR=";
      DBTrigger dBTrigger0 = new DBTrigger("create materialized view", dBSchema0);
      DataStore dataStore0 = new DataStore("eVj6#pmR/E)fO:RR=");
      VirtualFile virtualFile0 = new VirtualFile("create materialized view", dataStore0);
      DataStore dataStore1 = new DataStore("T8-.1");
      VirtualFile virtualFile1 = new VirtualFile("d_2H", dataStore1);
      VirtualFile virtualFile2 = new VirtualFile("TablePrivilege", dataStore0);
      OutputStream outputStream0 = virtualFile2.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(outputStream0);
      mockPrintWriter1.append((CharSequence) "}i2`XVzfyr}:%j2yJG");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter1);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String string0 = SQLUtil.renderValue(virtualFile1);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Ag@6<h*<l", true, stringArray0);
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.ownerDotComponent(defaultDBTable0);
      DataStore dataStore0 = new DataStore((String) null);
      VirtualFile virtualFile0 = new VirtualFile("null", dataStore0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "null";
      stringArray0[1] = null;
      stringArray0[2] = "5d[,5:->{nBXh*n2NB";
      stringArray0[3] = "null";
      stringArray0[4] = "null";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "5d[,5:->{nBXh*n2NB", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "5d[,5:->{nBXh*n2NB");
      stringBuilder0.appendCodePoint(1054);
      SQLUtil.removeComments(";tbe:c($KU");
      stringBuilder0.append((CharSequence) ";tbe:c($KU");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("5d[,5:->{nBXh*n2NB\u041E;tbe:c($KUCONSTRAINT 5d[,5:->{nBXh*n2NB ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("eVj6#pmR/E)fO:RR=");
      SQLUtil.isProcedureCall("eVj6#pmR/E)fO:RR=");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T8-.1", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "T8-.1";
      dBSchema0.setOwner(defaultDBTable0);
      stringArray0[1] = "eVj6#pmR/E)fO:RR=";
      DBTrigger dBTrigger0 = new DBTrigger("create materialized view", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      stringArray0[2] = "eVj6#pmR/E)fO:RR=";
      stringArray0[3] = "T8-.1";
      stringArray0[4] = "T8-.1";
      stringArray0[5] = "eVj6#pmR/E)fO:RR=";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("T8-.1", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.isIdentical(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.removeComments("T8-.1");
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      dBForeignKeyConstraint0.setName("Unknown constraint type: ");
      SQLUtil.ownerDotComponent(defaultDBTable0);
      String string0 = "<lg;<.";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "eVj6#pmR/E)fO:RR=";
      stringArray1[1] = "+";
      stringArray1[2] = "CONSTRAINT T8-.1 FOREIGN KEY (T8-.1, eVj6#pmR/E)fO:RR=, eVj6#pmR/E)fO:RR=, T8-.1, T8-.1, eVj6#pmR/E)fO:RR=) REFERENCES T8-.1(T8-.1, eVj6#pmR/E)fO:RR=, eVj6#pmR/E)fO:RR=, T8-.1, T8-.1, eVj6#pmR/E)fO:RR=)";
      stringArray1[3] = "eVj6#pmR/E)fO:RR=";
      SQLUtil.join("<lg;<.", "T8-.1", stringArray1, "g~p{W?X*^!oz+H_", "+", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = 990;
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt(990);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 990
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "!0o0gXZ");
      SQLUtil.addRequiredCondition("!0o0gXZ", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("2}XG[%;??%", defaultDBTable0);
      tableContainer0.getSchema();
      defaultDBTable0.getUniqueConstraint((String[]) null);
      DBPackage dBPackage0 = new DBPackage("!0o0gXZ", (DBSchema) null);
      SQLUtil.normalize("select into", true);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create table", defaultDBTable0, (-2029370422), "call!0o0gxz");
      defaultDBColumn0.toString();
      defaultDBColumn0.setDefaultValue((String) null);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" or ", 7);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.mutatesDataOrStructure("create table : CALL!0O0GXZ");
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("setBoolean(String,boolean)", (String[]) null, "setBoolean(String,boolean)", "call!0o0gxz", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("create unique index");
      defaultDBTable0.toString();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create unique index", false, stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "XH,w6[aCnq8$;G$", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.parseColumnTypeAndSize("select");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("select");
      dBCatalog0.addSchema(dBSchema0);
      SQLUtil.typeAndName(dBCatalog0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "select";
      stringArray0[1] = "catalog null";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "catalog null", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "select");
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(1054);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) "catalog null");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder2);
      assertEquals("select\u041Ecatalog nullCONSTRAINT \"catalog null\" ", stringBuilder2.toString());
      assertEquals("select\u041Ecatalog nullCONSTRAINT \"catalog null\" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("\u0001\u00EB", defaultDBTable0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\u0001\u00EB");
      tableContainer0.getSchema();
      SQLUtil.parseColumnTypeAndSize("\u0001\u00EB");
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = " for table ";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " for table ");
      SQLUtil.removeComments(" for table ");
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition(" for table ", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("\u0001I\u00EB");
      DBSchema dBSchema0 = new DBSchema("\u0001I\u00EB");
      tableContainer0.toString();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " REFERENCES ", true, stringArray0);
      String string1 = SQLUtil.substituteMarkers("\u0001I\u00EB", "~T6qZ:=q,HyI", dBPrimaryKeyConstraint0);
      String string2 = SQLUtil.ownerDotComponent(tableContainer0);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.parseColumnTypeAndSize(", but is: ");
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      SQLUtil.mutatesDataOrStructure("catalog null");
      System.setCurrentTimeMillis((-2753L));
      String string0 = SQLUtil.renderValue(dBCatalog0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = ">8FFGIZZ";
      SQLUtil.normalize(">8FFGIZZ", false);
      DBColumn dBColumn0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isQuery("select into!5xxcyltso2}mo:");
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isQuery("select into!5xxcyltso2}mo:");
      SQLUtil.normalize("J*/e6&=", true);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("vV{h8)SG<.&\"40_E", defaultDBTable0, 1771, "org.databene.jdbacl.SQLUtil");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = "~~yP@S7HTQ0gD~H'A$^";
      DBDataType dBDataType0 = DBDataType.getInstance(1503, "create unique index");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("~~yP@S7HTQ0gD~H'A$^", defaultDBTable0, dBDataType0, integer0, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("umuwf!", defaultDBTable1, dBDataType0, integer1, integer2);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("select into!5xxcylt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'select into!5xxcylt' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("createuniqu", defaultDBTable0, (-1778), "createuniqu");
      defaultDBColumn0.setNotNullConstraint((DBNotNullConstraint) null);
      TableContainer tableContainer0 = new TableContainer("createuniqu");
      tableContainer0.toString();
      defaultDBColumn0.setDefaultValue("drop materialized view");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("createuniqu CREATEUNIQU DEFAULT drop materialized view NULL", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("create unique index");
      defaultDBTable0.toString();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create unique index", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      DataStore dataStore0 = new DataStore((String) null);
      VirtualFile virtualFile0 = new VirtualFile("null", dataStore0);
      VirtualFile virtualFile1 = new VirtualFile("}i2`XVzfyr}:%j2yJG", dataStore0);
      OutputStream outputStream0 = virtualFile1.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "null");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String string1 = SQLUtil.renderValue(integer0);
      assertEquals("3", string1);
      
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "/uE7U%*10xFA&DcLX", false, stringArray0);
      String string2 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT /uE7U%*10xFA&DcLX ", string2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.renderValue((Object) null);
      String string0 = "org.apache.derby.impl.store.access.btree.index.B2I_v10_2";
      String string1 = "$R)j:i";
      VersionNumber versionNumber0 = VersionNumber.valueOf("$R)j:i");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("~Yoj$[", "aD Zp", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema("~Yoj$[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '~Yoj$['
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.ownerDotComponent(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      DataStore dataStore0 = new DataStore("");
      VirtualFile virtualFile0 = new VirtualFile("", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "null");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("rename", defaultDBTable0);
      TableContainer tableContainer1 = new TableContainer("create");
      tableContainer1.getSchema();
      SQLUtil.isQuery("rename");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.join("!5xXCylTSo2}Mo:", "!5xXCylTSo2}Mo:", stringArray0, (String) null, "create unique index", stringArray0);
      SQLUtil.isDML("!5xXCylTSo2}Mo:");
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = (-50725501);
      stringBuilder0.append((float) (-50725501));
      SQLUtil.parseColumnTypeAndSize("!5xXCylTSo2}Mo: join null as create unique index on !5xXCylTSo2}Mo:.null = create unique index.null and !5xXCylTSo2}Mo:.null = create unique index.null and !5xXCylTSo2}Mo:.null = create unique index.null");
      String string0 = "42Z24";
      DBUniqueIndex dBUniqueIndex0 = null;
      try {
        dBUniqueIndex0 = new DBUniqueIndex("+9", false, (DBUniqueConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("//5'ujrc(4v6", compositeDBObject0);
      TableContainer tableContainer1 = new TableContainer("call", tableContainer0);
      tableContainer1.getSchema();
      boolean boolean0 = SQLUtil.isProcedureCall("call");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("2}XG[%;??%", defaultDBTable0);
      tableContainer0.getSchema();
      DBPackage dBPackage0 = new DBPackage("//", (DBSchema) null);
      DBPackage dBPackage1 = new DBPackage("//", (DBSchema) null);
      dBPackage1.setName("`$<95j%;cd");
      DBProcedure dBProcedure0 = new DBProcedure("1024", dBPackage1);
      SQLUtil.removeComments("`$<95j%;cd");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4|Ba~'=Qq=xsC[Wb");
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "&^.P)";
      stringArray0[1] = "&^.P)";
      stringArray0[2] = "&^.P)";
      stringArray0[3] = "&^.P)";
      defaultDBTable0.getIndex("&^.P)");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "&^.P)", true, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      defaultDBTable0.getForeignKeyConstraints();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("setBytes(String,byte)", 423);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(0.0F);
      SQLUtil.removeComments("s0q41&kavwW");
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "!0o0gXZ");
      StringBuilder stringBuilder1 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("2}XG[%;??%", defaultDBTable0);
      tableContainer0.getSchema();
      defaultDBTable0.getUniqueConstraint((String[]) null);
      DBPackage dBPackage0 = new DBPackage("!0o0gXZ", (DBSchema) null);
      String string0 = SQLUtil.normalize("select into", true);
      assertEquals("select into", string0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create table", defaultDBTable0, (-2029370422), "call!0o0gxz");
      defaultDBColumn0.toString();
      defaultDBColumn0.setDefaultValue((String) null);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CALL!0O0GXZ", string1);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create table : CALL!0O0GXZ");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      String string2 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLUtil.isDDL("updateByte(");
      SQLUtil.isDML("updateByte(");
      SQLUtil.isQuery("updateByte(");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "updateByte(";
      stringArray0[1] = "updateByte(";
      stringArray0[2] = "updateByte(";
      stringArray0[3] = "updateByte(";
      SQLUtil.renderColumnListWithTableName("updateByte(", stringArray0);
      String string0 = "='LCO-<";
      String string1 = "Q%|";
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("Q%|", "Q%|", (VersionNumber) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBCatalog dBCatalog0 = new DBCatalog("='LCO-<", defaultDatabase0);
      dBCatalog0.getTable((String) null, false);
      defaultDatabase0.setUser((String) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "CLOB";
      SQLUtil.join("CLOB", "!5xXCylTSo2}Mo:", stringArray0, "create unique index", "&HJ&fzL5OSr", stringArray0);
      SQLUtil.isDML("create unique index");
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(0.0F);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getForeignKeyConstraints();
      String string0 = "`$<95j%;cd";
      TableContainer tableContainer0 = new TableContainer("`$<95j%;cd", defaultDBTable0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("setBytes(String,byte)", 423);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2}XG[%;??%");
      SQLUtil.parseColumnTypeAndSize("2}XG[%;??%");
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("`$<95j%;cd", defaultDBTable0);
      tableContainer0.getSchema();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "w]Z+z2F];f ?", true, (String[]) null);
      defaultDBTable0.getForeignKeyConstraints();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("};SPtswFI'1,qxG_So", (String[]) null, "2#9LLX`>P9=ij'Gcr", "Eh|A", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("qRX4|)x(N+");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("qRX4|)x(N+");
      defaultDBTable1.getPrimaryKeyConstraint();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      SQLUtil.parseColumnTypeAndSize("update`$<95j%");
      SQLUtil.parseColumnTypeAndSize("JquIY^M$a@a <~SaTD|");
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(defaultDBTable1);
      assertNotNull(string0);
      assertEquals("table qRX4|)x(N+", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("`$<95j%;cd", defaultDBTable0);
      tableContainer0.getSchema();
      tableContainer0.getSchema();
      DBPackage dBPackage0 = new DBPackage("2}XG[%;??%", (DBSchema) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`$<95j%;cd");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('4');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "2}XG[%;??%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("`$<95j%;cd", defaultDBTable0);
      DBSchema dBSchema0 = new DBSchema("drop table");
      DBPackage dBPackage0 = new DBPackage("`$<95j%;cd", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("9fd8y@j", dBPackage0);
      dBProcedure0.setObjectId("drop table");
      SQLUtil.removeComments(">pAvT7");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "drop table";
      stringArray0[1] = ":~U3W~eC7ow!%naR";
      stringArray0[2] = "2}XG[%;??%";
      stringArray0[3] = ">pAvT7";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "reults", true, stringArray0);
      dBPrimaryKeyConstraint0.equals(">pAvT7");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable(":n4ugISX;:2{5B40");
      defaultDBTable1.addReferrer(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT reults PRIMARY KEY (drop table, :~U3W~eC7ow!%naR, 2}XG[%;??%, >pAvT7)", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l}.&B00P>2dV8";
      stringArray0[1] = "Blob in auto-commit mode is read-only.";
      stringArray0[2] = "Z[Y0^";
      stringArray0[3] = "xSUUX7";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Character character0 = Character.valueOf('^');
      Character.compare('#', '#');
      SQLUtil.renderValue(character0);
      SQLUtil.renderValue("Z[Y0^");
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "setMaxRows");
      SQLUtil.addRequiredCondition("setMaxRows", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      MockFileWriter mockFileWriter0 = new MockFileWriter("*+;_z9");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" l:");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(" l:");
      String[] stringArray1 = new String[1];
      stringArray1[0] = "&HJofzL5OSr";
      SQLUtil.join(" l:", " l:", stringArray1, "!5xXCylTSo2}Mo:", " l:", stringArray0);
      SQLUtil.addOptionalCondition("truncate[u", stringBuilder0);
      assertEquals("setMaxRows and setMaxRows or truncate[u", stringBuilder0.toString());
      
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray1, stringArray0);
      assertEquals("SELECT * FROM null WHERE &HJofzL5OSr = null", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.addReferrer((DBTable) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("CLOB");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Stored Prepared Statement Name: \n\t";
      stringArray0[1] = "CLOB";
      stringArray0[2] = "CLOB";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("CLOB", false, defaultDBTable1, (String[]) null, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null(Stored Prepared Statement Name: \n\t, CLOB, CLOB)", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Can't cancel a previously cancelled EventHandle";
      stringArray0[1] = ";|bqDHo&{Gu_:!zw|z";
      stringArray0[2] = "Can't cancel a previously cancelled EventHandle";
      boolean boolean0 = SQLUtil.isQuery("ntckbS[r");
      assertFalse(boolean0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.parseColumnTypeAndSize("I\"c0s?[:riu')dXbIw");
      SQLUtil.parseColumnTypeAndSize(";|bqDHo&{Gu_:!zw|z");
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSequences();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Can't cancel a previously cancelled EventHandle";
      stringArray0[1] = ";|bqDHo&{Guz_:*zw|z";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execclob");
      defaultDBTable0.getPrimaryKeyConstraint();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      defaultDBTable0.addReferrer(defaultDBTable1);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "ki";
      stringArray1[1] = "execclob";
      stringArray1[2] = "+Bn))wZ1_|1?Z}Y";
      stringArray1[3] = "execclob";
      stringArray1[4] = ";|bqDHo&{Guz_:*zw|z";
      stringArray1[5] = "execclob";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "execclob", true, stringArray1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT execclob UNIQUE (ki, execclob, +Bn))wZ1_|1?Z}Y, execclob, ;|bqDHo&{Guz_:*zw|z, execclob)", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("qRX4|)x(N+");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, (-1528354796), "callclob");
      defaultDBColumn0.toString();
      defaultDBColumn0.setDefaultValue("AMA&fi3[._+");
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ki");
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TableContainer tableContainer0 = new TableContainer("c065801d-0103-0e39-b8e7-00000010f010", compositeDBObject0);
      tableContainer0.getSchema();
      DBPackage dBPackage0 = new DBPackage("gz[", (DBSchema) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dSCB]1.S");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create unique index_t#ztw^y";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create unique index_t#ztw^y", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("l&+qrn,^#q}=", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = ')';
      charArray0[2] = '=';
      charArray0[3] = 'r';
      charArray0[4] = '^';
      charArray0[5] = 'V';
      charArray0[6] = '}';
      charArray0[7] = 'G';
      int int0 = 2147483645;
      // Undeclared exception!
      try { 
        stringBuilder2.append(charArray0, 2147483645, (-3434));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DBObject dBObject0 = null;
      SQLUtil.typeAndName((DBObject) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string0 = " WHERE ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " WHERE ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable1, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "CLOB";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("token ", defaultDBTable0, 75, "rename*rmx");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "drop materialized viewl&+qrn,^#q}=vb`v4");
      TableContainer tableContainer0 = new TableContainer("HSQLDB.DEFAULT_TABLE_TYPE", defaultDBTable0);
      SQLUtil.ownerDotComponent(tableContainer0);
      SQLUtil.parseColumnTypeAndSize("create tablerename*rmx");
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      TableContainer tableContainer0 = new TableContainer("dSCB]1.S");
      tableContainer0.getTable("rename");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("S)r7=y!", (DBTable) null, (-18647801), "rename*rmx");
      DBDataType dBDataType0 = DBDataType.getInstance(1772, "@bCr?Bo{\"_2>Ln");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = defaultDBColumn1.toString();
      assertEquals(" : @BCR?BO{\"_2>LN(2,2)", string0);
      
      defaultDBColumn1.setDefaultValue("dSCB]1.S");
      SQLUtil.removeComments("S)r7=y!");
      boolean boolean0 = SQLUtil.isDDL(",X3ELsB@<");
      assertFalse(boolean0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("S)r7=y!", string1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.substituteMarkers("dSCB]1.S", "dSCB]1.S", (Object) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execute");
      defaultDBTable0.getPrimaryKeyConstraint();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable0.addReferrer(defaultDBTable1);
      DBDataType dBDataType0 = DBDataType.getInstance((-3350), "@@hLD40r5006:.i^c");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("!Hq", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.toString();
      defaultDBColumn0.setDefaultValue("l&+QRn,^#Q}=vB`V4");
      SQLUtil.removeComments("!Hq : @@HLD40R5006:.I^C(2)");
      SQLUtil.isDDL("l&+QRn,^#Q}=vB`V4");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "CLOB";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("token ", defaultDBTable0, 75, "rename*rmx");
      String string0 = defaultDBColumn0.toString();
      assertEquals("token  : RENAME*RMX", string0);
      
      defaultDBColumn0.setDefaultValue("AMA&fi3[._+");
      SQLUtil.removeComments("qRX4|)x(N+");
      boolean boolean0 = SQLUtil.isDDL("rename*rmx");
      assertTrue(boolean0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("null.token ", string1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("qRX4|)x(N+");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "qRX4|)x(N+";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("token ", defaultDBTable0, 75, "renme*rmx");
      SQLUtil.removeComments("renme*rmx");
      defaultDBColumn0.setDefaultValue("qRX4|)x(N+");
      SQLUtil.isDDL("renme*rmx");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "setMaxRows");
      SQLUtil.isDDL(";|bqDHo&{Gu_:!zw|z");
      boolean boolean0 = SQLUtil.isQuery("!kKi{g'}");
      assertFalse(boolean0);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-5450), "Q!zx]Np=");
      boolean boolean1 = SQLUtil.isProcedureCall("<Xh%H0U,UA6di(P");
      boolean boolean2 = SQLUtil.isDDL("!kKi{g'}");
      assertTrue(boolean2 == boolean1);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("create unique index*rmx", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Q!zx]Np=", dBSchema0);
      Integer integer0 = new Integer((-5450));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("setMaxRows", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("setMaxRows Q!ZX]NP=(-5450) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("qRX4|)x(N+");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "CLOB";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("ki");
      defaultDBTable1.getPrimaryKeyConstraint();
      defaultDBTable0.addReferrer(defaultDBTable1);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "CLOB", false, stringArray0);
      dBUniqueConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 75, "CXTOv)$");
      int int0 = (-1455008948);
      StringBuilder stringBuilder0 = new StringBuilder(4);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(75, (-1777));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 75
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("YC@2hL");
      defaultDBTable1.getPrimaryKeyConstraint();
      defaultDBTable1.addReferrer(defaultDBTable0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "RH(a5U Em", false, (String[]) null);
      defaultDBTable1.getForeignKeyConstraints();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"RH(a5U Em\" UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "";
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.substituteMarkers("dSCB]1.S", "dSCB]1.S", (Object) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execute");
      defaultDBTable0.getPrimaryKeyConstraint();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable0.addReferrer(defaultDBTable1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      defaultDBTable0.getUniqueConstraint(stringArray0);
      int int0 = 5;
      StringBuilder stringBuilder0 = new StringBuilder(5);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition(string0, stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-1455008948), (CharSequence) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1455008948
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "!0o0gXZ");
      SQLUtil.addRequiredCondition("!0o0gXZ", stringBuilder0);
      assertEquals("!0o0gXZ and !0o0gXZ", stringBuilder0.toString());
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("2}XG[%;??%", defaultDBTable0);
      tableContainer0.getSchema();
      defaultDBTable0.getUniqueConstraint((String[]) null);
      DBPackage dBPackage0 = new DBPackage("!0o0gXZ", (DBSchema) null);
      SQLUtil.normalize("select into", true);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create table", defaultDBTable0, (-2029370422), "call!0o0gxz");
      defaultDBColumn0.toString();
      defaultDBColumn0.setDefaultValue((String) null);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create table : CALL!0O0GXZ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Character character0 = new Character('<');
      SQLUtil.substituteMarkers("update", "XSCB1.S", character0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update");
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.addReferrer((DBTable) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`&ebnB;qc|z'<iN& `");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("org.h2.tools.Csv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'org.h2.tools.Csv' not found in table 'update'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("etMaxRow", stringBuilder0);
      assertEquals("etMaxRow", stringBuilder0.toString());
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("`$<95j%;cd", defaultDBTable0);
      tableContainer0.getSchema();
      DBPackage dBPackage0 = new DBPackage("2}XG[%;??%", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure("2}XG[%;??%", dBPackage0);
      dBProcedure0.setObjectId("9fd8y@j");
      SQLUtil.removeComments("`$<95j%;cd");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "`$<95j%;cd";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ":~U3W~eC7ow!%naR", false, stringArray0);
      dBPrimaryKeyConstraint0.equals("`$<95j%;cd");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("`$<95j%;cd");
      defaultDBTable0.addReferrer(defaultDBTable1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (`$<95j%;cd)", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[15] = "wRMx";
      stringArray0[2] = "wRMx";
      stringArray0[3] = "wRMx";
      stringArray0[4] = "wRMx";
      stringArray0[5] = "<lg;<.h^e";
      stringArray0[6] = "wRMx";
      stringArray0[7] = "wRMx";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("wRMx");
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.addReferrer(defaultDBTable0);
      String string0 = SQLUtil.join("truncate", (String) null, stringArray0, "wRMx", (String) null, stringArray0);
      assertEquals("truncate join wRMx as null on null.null = null.null and null.null = null.null and null.wRMx = null.wRMx and null.wRMx = null.wRMx and null.wRMx = null.wRMx and null.<lg;<.h^e = null.<lg;<.h^e and null.wRMx = null.wRMx and null.wRMx = null.wRMx and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.wRMx = null.wRMx", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("qRX4|)x(N+");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "CLOB";
      stringArray0[1] = ";|bqDHo&{Gu_:!zw|z";
      stringArray0[2] = "CLOB";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CLOB", true, stringArray0);
      DBColumn dBColumn0 = null;
      SQLUtil.isQuery("executeclob");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("njzyVi2h*nOn{(Sn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: njzyVi2h*nOn{(Sn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "*+;_z9";
      String[] stringArray0 = new String[3];
      MockFileWriter mockFileWriter0 = new MockFileWriter("*+;_z9");
      String string1 = " l:";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" l:");
      SQLUtil.isQuery(" P WHERE ");
      String string2 = null;
      Boolean boolean0 = new Boolean((String) null);
      SQLUtil.isQuery("+?wG");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "*+;_z9";
      String[] stringArray0 = new String[3];
      MockFileWriter mockFileWriter0 = new MockFileWriter("*+;_z9");
      String string1 = " l:";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" l:");
      SQLUtil.isQuery(" P WHERE ");
      String string2 = null;
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "\u0000", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = SQLUtil.substituteMarkers("XSCB1.S", "", integer0);
      assertEquals("2X2S2C2B212.2S2", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ki");
      MockFileWriter mockFileWriter0 = new MockFileWriter("0SVQcr0qN7ypvDe9S");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select intom:fg62)");
      mockPrintWriter0.print(0.0F);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("4Q-f }tmn^7K3_");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("4Q-f }tmn^7K3_", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.removeForeignKeyConstraint(dBForeignKeyConstraint0);
      SQLUtil.join("4Q-f }tmn^7K3_", "xekk1m(9{r", stringArray0, "call", "4Q-f }tmn^7K3_", stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog("");
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      dBSchema0.getDatabase();
      DBCatalog dBCatalog1 = new DBCatalog((String) null, (Database) null);
      dBCatalog1.setDatabase((Database) null);
      // Undeclared exception!
      try { 
        dBCatalog1.getTable("call");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'call'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLUtil.substituteMarkers("m:Fg62)", "%A:U;7P_m.od", "setMaxRows");
      SQLUtil.parseColumnTypeAndSize("setMaxRows");
      SQLUtil.mutatesStructure("Ub@fv");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "m:Fg62)";
      stringArray0[1] = ":i~z)";
      stringArray0[2] = "m:Fg62)";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "m:Fg62)", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter materialized view", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      defaultDBTable0.addReferrer(dBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("m:Fg62)");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[15] = "?=V|M?j*9jPES:-a";
      stringArray0[2] = "?=V|M?j*9jPES:-a";
      stringArray0[3] = "?=V|M?j*9jPES:-a";
      stringArray0[4] = "?=V|M?j*9jPES:-a";
      stringArray0[5] = "<lg;<.h^e";
      stringArray0[6] = "?=V|M?j*9jPES:-a";
      stringArray0[7] = "?=V|M?j*9jPES:-a";
      String string0 = SQLUtil.innerJoin("select", stringArray0, "XCL32.S", "", stringArray0);
      assertEquals("XCL32.S as  on select.null = .null and select.null = .null and select.?=V|M?j*9jPES:-a = .?=V|M?j*9jPES:-a and select.?=V|M?j*9jPES:-a = .?=V|M?j*9jPES:-a and select.?=V|M?j*9jPES:-a = .?=V|M?j*9jPES:-a and select.<lg;<.h^e = .<lg;<.h^e and select.?=V|M?j*9jPES:-a = .?=V|M?j*9jPES:-a and select.?=V|M?j*9jPES:-a = .?=V|M?j*9jPES:-a and select.null = .null and select.null = .null and select.null = .null and select.null = .null and select.null = .null and select.null = .null and select.null = .null and select.?=V|M?j*9jPES:-a = .?=V|M?j*9jPES:-a", string0);
      
      String[] stringArray1 = new String[5];
      stringArray1[0] = "XCL32.S as  on select.null = .null and select.null = .null and select.?=V|M?j*9jPES:-a = .?=V|M?j*9jPES:-a and select.?=V|M?j*9jPES:-a = .?=V|M?j*9jPES:-a and select.?=V|M?j*9jPES:-a = .?=V|M?j*9jPES:-a and select.<lg;<.h^e = .<lg;<.h^e and select.?=V|M?j*9jPES:-a = .?=V|M?j*9jPES:-a and select.?=V|M?j*9jPES:-a = .?=V|M?j*9jPES:-a and select.null = .null and select.null = .null and select.null = .null and select.null = .null and select.null = .null and select.null = .null and select.null = .null and select.?=V|M?j*9jPES:-a = .?=V|M?j*9jPES:-a";
      stringArray1[1] = "?=V|M?j*9jPES:-a";
      stringArray1[2] = "<lg;<.h^e";
      stringArray1[3] = "select";
      stringArray1[4] = "select";
      String string1 = SQLUtil.renderColumnListWithTableName("", stringArray1);
      assertEquals(".XCL32.S as  on select.null = .null and select.null = .null and select.?=V|M?j*9jPES:-a = .?=V|M?j*9jPES:-a and select.?=V|M?j*9jPES:-a = .?=V|M?j*9jPES:-a and select.?=V|M?j*9jPES:-a = .?=V|M?j*9jPES:-a and select.<lg;<.h^e = .<lg;<.h^e and select.?=V|M?j*9jPES:-a = .?=V|M?j*9jPES:-a and select.?=V|M?j*9jPES:-a = .?=V|M?j*9jPES:-a and select.null = .null and select.null = .null and select.null = .null and select.null = .null and select.null = .null and select.null = .null and select.null = .null and select.?=V|M?j*9jPES:-a = .?=V|M?j*9jPES:-a, .?=V|M?j*9jPES:-a, .<lg;<.h^e, .select, .select", string1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("qRX4|)x3N9");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "qRX4|)x3N9";
      stringArray0[1] = ";|bqDHo&{Gu_:!zw|z";
      stringArray0[2] = ";|bqDHo&{Gu_:!zw|z";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CLOB", false, stringArray0);
      dBPrimaryKeyConstraint0.equals("qRX4|)x3N9");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(";|bqDHo&{Gu_:!zw|z", defaultDBTable0, 129, "qRX4|)x3N9");
      defaultDBColumn0.toString();
      defaultDBColumn0.setDefaultValue("njzyVi2h*nOn{(Sn");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "setMaxRows");
      String string0 = "ub@f";
      SQLUtil.addRequiredCondition("ub@f", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("2}XG[%;??%", defaultDBTable0);
      tableContainer0.getSchema();
      DBPackage dBPackage0 = new DBPackage("))}#n~e%b(*|", (DBSchema) null);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "setMaxRows";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "setMaxRows");
      StringBuilder stringBuilder1 = new StringBuilder();
      String string1 = "&{[HMw+76<7";
      SQLUtil.addOptionalCondition("&{[HMw+76<7", stringBuilder0);
      String string2 = "execute";
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String string3 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("setMaxRows");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("exec", (DBTable) null, 130, "rename");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance(373, "rename");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("XSCB1.S", (DBTable) null, dBDataType0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("rename", (DBTable) null, dBDataType0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("exec", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      SQLUtil.renderColumnNames(dBColumnArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("", stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("rename", (String[]) null, "exec", "setBinaryStream(String, InputStream)", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = "wB-Fu$0NQS^R|^7h";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("call", (DBTable) null, (-79948057), "wB-Fu$0NQS^R|^7h");
      defaultDBColumn0.toString();
      defaultDBColumn0.setDefaultValue("=e#mg");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      boolean boolean0 = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "WB-FU$0NQS^R|^7H";
      SQLUtil.normalize("42Z39.U", true);
      SQLUtil.leftJoin("org.apache.derby.impl.sql.execute.SavepointConstantAction", stringArray0, "org.apache.derby.impl.sql.execute.SavepointConstantAction", "call : WB-FU$0NQS^R|^7H", stringArray0);
      TableContainer tableContainer0 = new TableContainer("42Z39.U");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("42Z39.U", (DBSchema) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '42Z39.U' has no foreign key with the columns (WB-FU$0NQS^R|^7H, , , , , , , , )
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("qRX4|)x(N+");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "CLOB";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("ki");
      defaultDBTable1.getPrimaryKeyConstraint();
      defaultDBTable0.addReferrer(defaultDBTable1);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "CLOB", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT CLOB UNIQUE (CLOB, , )", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("eVj6#pmR/E)fO:RR=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T8-.1");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T8-.1", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "T8-.1";
      dBSchema0.setOwner(defaultDBTable0);
      stringArray0[1] = "eVj6#pmR/E)fO:RR=";
      DBTrigger dBTrigger0 = new DBTrigger("create materialized view", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      stringArray0[2] = "T8-.1";
      stringArray0[3] = "T8-.1";
      stringArray0[4] = "T8-.1";
      stringArray0[5] = "eVj6#pmR/E)fO:RR=";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("T8-.1", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.isIdentical(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT T8-.1 FOREIGN KEY (T8-.1, eVj6#pmR/E)fO:RR=, T8-.1, T8-.1, T8-.1, eVj6#pmR/E)fO:RR=) REFERENCES T8-.1(T8-.1, eVj6#pmR/E)fO:RR=, T8-.1, T8-.1, T8-.1, eVj6#pmR/E)fO:RR=)", string0);
      
      String string1 = SQLUtil.join("T8-.1", "+", stringArray0, "T8-.1", (String) null, stringArray0);
      assertEquals("T8-.1 join T8-.1 as null on +.T8-.1 = null.T8-.1 and +.eVj6#pmR/E)fO:RR= = null.eVj6#pmR/E)fO:RR= and +.T8-.1 = null.T8-.1 and +.T8-.1 = null.T8-.1 and +.T8-.1 = null.T8-.1 and +.eVj6#pmR/E)fO:RR= = null.eVj6#pmR/E)fO:RR=", string1);
      
      SQLUtil.removeComments("CONSTRAINT T8-.1 FOREIGN KEY (T8-.1, eVj6#pmR/E)fO:RR=, T8-.1, T8-.1, T8-.1, eVj6#pmR/E)fO:RR=) REFERENCES T8-.1(T8-.1, eVj6#pmR/E)fO:RR=, T8-.1, T8-.1, T8-.1, eVj6#pmR/E)fO:RR=)");
      String string2 = SQLUtil.renderColumnListWithTableName("=?", stringArray0);
      assertEquals("=?.T8-.1, =?.eVj6#pmR/E)fO:RR=, =?.T8-.1, =?.T8-.1, =?.T8-.1, =?.eVj6#pmR/E)fO:RR=", string2);
      
      dBForeignKeyConstraint0.setName("Unknown constraint type: ");
      String string3 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("eVj6#pmR/E)fO:RR=.T8-.1", string3);
      
      String[] stringArray1 = new String[4];
      stringArray1[0] = "CONSTRAINT T8-.1 FOREIGN KEY (T8-.1, eVj6#pmR/E)fO:RR=, T8-.1, T8-.1, T8-.1, eVj6#pmR/E)fO:RR=) REFERENCES T8-.1(T8-.1, eVj6#pmR/E)fO:RR=, T8-.1, T8-.1, T8-.1, eVj6#pmR/E)fO:RR=)";
      stringArray1[1] = "+";
      stringArray1[2] = "T8-.1 join T8-.1 as null on +.T8-.1 = null.T8-.1 and +.eVj6#pmR/E)fO:RR= = null.eVj6#pmR/E)fO:RR= and +.T8-.1 = null.T8-.1 and +.T8-.1 = null.T8-.1 and +.T8-.1 = null.T8-.1 and +.eVj6#pmR/E)fO:RR= = null.eVj6#pmR/E)fO:RR=";
      stringArray1[3] = "eVj6#pmR/E)fO:RR=";
      String string4 = SQLUtil.join("<lg;<.", "T8-.1", stringArray1, "g~p{W?X*^!oz+H_", "+", stringArray0);
      assertEquals("<lg;<. join g~p{W?X*^!oz+H_ as + on T8-.1.CONSTRAINT T8-.1 FOREIGN KEY (T8-.1, eVj6#pmR/E)fO:RR=, T8-.1, T8-.1, T8-.1, eVj6#pmR/E)fO:RR=) REFERENCES T8-.1(T8-.1, eVj6#pmR/E)fO:RR=, T8-.1, T8-.1, T8-.1, eVj6#pmR/E)fO:RR=) = +.T8-.1 and T8-.1.+ = +.eVj6#pmR/E)fO:RR= and T8-.1.T8-.1 join T8-.1 as null on +.T8-.1 = null.T8-.1 and +.eVj6#pmR/E)fO:RR= = null.eVj6#pmR/E)fO:RR= and +.T8-.1 = null.T8-.1 and +.T8-.1 = null.T8-.1 and +.T8-.1 = null.T8-.1 and +.eVj6#pmR/E)fO:RR= = null.eVj6#pmR/E)fO:RR= = +.T8-.1 and T8-.1.eVj6#pmR/E)fO:RR= = +.T8-.1", string4);
      
      String string5 = SQLUtil.leftJoin("<lg;<.", stringArray1, (String) null, "T8-.1", stringArray0);
      assertEquals("left join null as T8-.1 on <lg;<..CONSTRAINT T8-.1 FOREIGN KEY (T8-.1, eVj6#pmR/E)fO:RR=, T8-.1, T8-.1, T8-.1, eVj6#pmR/E)fO:RR=) REFERENCES T8-.1(T8-.1, eVj6#pmR/E)fO:RR=, T8-.1, T8-.1, T8-.1, eVj6#pmR/E)fO:RR=) = T8-.1.T8-.1 and <lg;<..+ = T8-.1.eVj6#pmR/E)fO:RR= and <lg;<..T8-.1 join T8-.1 as null on +.T8-.1 = null.T8-.1 and +.eVj6#pmR/E)fO:RR= = null.eVj6#pmR/E)fO:RR= and +.T8-.1 = null.T8-.1 and +.T8-.1 = null.T8-.1 and +.T8-.1 = null.T8-.1 and +.eVj6#pmR/E)fO:RR= = null.eVj6#pmR/E)fO:RR= = T8-.1.T8-.1 and <lg;<..eVj6#pmR/E)fO:RR= = T8-.1.T8-.1", string5);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.substituteMarkers("XSCB1.S", "", integer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ki");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "ki";
      stringArray0[2] = "2X2S2C2B212.2S2";
      stringArray0[3] = "XSCB1.S";
      stringArray0[4] = "ki";
      stringArray0[5] = "ki";
      stringArray0[6] = "XSCB1.S";
      stringArray0[7] = "ki";
      SQLUtil.renderColumnListWithTableName("2X2S2C2B212.2S2", stringArray0);
      SQLUtil.removeComments("ki");
      SQLUtil.isQuery("select");
      Object object0 = new Object();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "XSCB1.S", true, stringArray0);
      SQLUtil.substituteMarkers("yGTie _AUGP", "2X2S2C2B212.2S2., 2X2S2C2B212.2S2.ki, 2X2S2C2B212.2S2.2X2S2C2B212.2S2, 2X2S2C2B212.2S2.XSCB1.S, 2X2S2C2B212.2S2.ki, 2X2S2C2B212.2S2.ki, 2X2S2C2B212.2S2.XSCB1.S, 2X2S2C2B212.2S2.ki", dBPrimaryKeyConstraint0);
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      SQLUtil.addRequiredCondition("V~+z%u_:+bN", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "call";
      stringArray0[1] = "V~+z%u_:+bN";
      stringArray0[2] = "";
      stringArray0[3] = "*+;_z9";
      stringArray0[4] = "*+;_z9";
      stringArray0[5] = "This is the cheapest plan so far.";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (call, V~+z%u_:+bN, , *+;_z9, *+;_z9, This is the cheapest plan so far.)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("m:Fg62)", "%A:U;7P_m.od", "setMaxRows");
      assertEquals("m:Fg62)", string0);
      
      SQLUtil.parseColumnTypeAndSize("setMaxRows");
      Boolean boolean0 = SQLUtil.mutatesStructure("Ub@fv");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "m:Fg62)";
      stringArray0[1] = ":i~z)";
      stringArray0[2] = "m:Fg62)";
      String string1 = SQLUtil.innerJoin("drop index", stringArray0, (String) null, ">[vr:6u]", stringArray0);
      assertEquals("null as >[vr:6u] on drop index.m:Fg62) = >[vr:6u].m:Fg62) and drop index.:i~z) = >[vr:6u].:i~z) and drop index.m:Fg62) = >[vr:6u].m:Fg62)", string1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "wRMx";
      stringArray0[2] = "wRMx";
      stringArray0[3] = "wRMx";
      stringArray0[4] = "wRMx";
      stringArray0[5] = "<lg;<.h^e";
      stringArray0[6] = "wRMx";
      stringArray0[7] = "wRMx";
      SQLUtil.renderColumnListWithTableName("wRMx", stringArray0);
      SQLUtil.removeComments("wRMx.null, wRMx.wRMx, wRMx.wRMx, wRMx.wRMx, wRMx.wRMx, wRMx.<lg;<.h^e, wRMx.wRMx, wRMx.wRMx");
      SQLUtil.isQuery("<lg;<.h^e");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "wRMx", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("h2.sortNullsHigh", stringBuilder0);
      int int0 = 59;
      // Undeclared exception!
      try { 
        stringBuilder1.insert(59, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 59
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "wRMx";
      stringArray0[1] = "wRMx";
      stringArray0[2] = "wRMx";
      SQLUtil.parseColumnTypeAndSize("jH");
      SQLUtil.mutatesStructure("create unique index");
      SQLUtil.innerJoin((String) null, stringArray0, "?;", "/*", stringArray0);
      DBColumn dBColumn0 = null;
      StringBuilder stringBuilder0 = new StringBuilder("wRMx");
      char char0 = '4';
      StringBuilder stringBuilder1 = stringBuilder0.append('4');
      StringBuilder stringBuilder2 = stringBuilder1.append("wRMx");
      int int0 = (-267466123);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-267466123), "create unique index");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -267466123
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("qRX4|)x(N+");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "CLOB";
      stringArray0[1] = ";|bqDHo&{Gu_:!zw|z";
      stringArray0[2] = "CLOB";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CLOB", false, stringArray0);
      dBPrimaryKeyConstraint0.equals("CLOB");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn(";|bqDHo&{Gu_:!zw|z", defaultDBTable0, 129, "qRX4|)x(N+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: qRX4|)x(N+
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DBPackage dBPackage0 = new DBPackage("Q~/]g+J/<Ehhm/", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure((String) null, dBPackage0);
      dBProcedure0.setObjectId("Q~/]g+J/<Ehhm/");
      SQLUtil.ownerDotComponent(dBProcedure0);
      SQLUtil.normalize("=|emy/~?N", true);
      StringBuilder stringBuilder0 = new StringBuilder("");
      SQLUtil.addOptionalCondition("", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[0] = "drop table";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (drop table, )
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "setMaxRows");
      SQLUtil.addRequiredCondition("setMaxRows", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("`$<95j%;cd", defaultDBTable0);
      tableContainer0.getSchema();
      DBPackage dBPackage0 = new DBPackage("2}XG[%;??%", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure("2}XG[%;??%", dBPackage0);
      dBProcedure0.setObjectId("9fd8y@j");
      SQLUtil.ownerDotComponent(dBProcedure0);
      boolean boolean0 = true;
      String string0 = "create table";
      SQLUtil.normalize("create table", true);
      String[] stringArray0 = new String[0];
      SQLUtil.leftJoin("2}XG[%;??%.2}XG[%;??%", stringArray0, "@eTO6GM2~f", "=|emy/~?N", stringArray0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns ()
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "setMaxRows");
      SQLUtil.addRequiredCondition("setMaxRows", stringBuilder0);
      SQLUtil.parseColumnTypeAndSize("setMaxRows");
      SQLUtil.mutatesStructure("67,N\"2B");
      String[] stringArray0 = new String[9];
      stringArray0[0] = ":i~z)";
      stringArray0[1] = " on ";
      stringArray0[2] = "57P02";
      stringArray0[3] = "F1j>dh@9%Zc";
      stringArray0[4] = ":i~z)";
      stringArray0[5] = " on ";
      stringArray0[6] = "57P02";
      stringArray0[7] = "e$Q";
      stringArray0[8] = "h+MP<dF-4~";
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, "57P02", "+\"$_`]2B=mvM92", stringArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("qRX4|)x(N+");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "CLOB";
      stringArray0[1] = ";|bqDHo&{Gu_:!zw|z";
      stringArray0[2] = "CLOB";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CLOB", true, stringArray0);
      dBPrimaryKeyConstraint0.equals("CLOB");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.isQuery("");
      DBDataType dBDataType0 = DBDataType.getInstance(48, "*/");
      Integer integer0 = new Integer(44);
      Integer integer1 = RawTransaction.COMMIT;
      Integer.getInteger("updateh2.sortnullshigh", integer1);
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLUtil.removeComments("org.apache.derby.iapi.sql.dictionary.AliasDescriptor");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "T";
      stringArray0[1] = "org.apache.derby.iapi.sql.dictionary.AliasDescriptor";
      stringArray0[2] = "org.apache.derby.iapi.sql.dictionary.AliasDescriptor";
      stringArray0[3] = "org.apache.derby.iapi.sql.dictionary.AliasDescriptor";
      stringArray0[4] = "org.apache.derby.iapi.sql.dictionary.AliasDescriptor";
      stringArray0[5] = "org.apache.derby.iapi.sql.dictionary.AliasDescriptor";
      stringArray0[6] = "org.apache.derby.iapi.sql.dictionary.AliasDescriptor";
      stringArray0[7] = "org.apache.derby.iapi.sql.dictionary.AliasDescriptor";
      stringArray0[8] = "org.apache.derby.iapi.sql.dictionary.AliasDescriptor";
      String string0 = null;
      SQLUtil.leftJoin("org.apache.derby.iapi.sql.dictionary.AliasDescriptor", stringArray0, "org.apache.derby.iapi.sql.dictionary.AliasDescriptor", (String) null, stringArray0);
      String string1 = "";
      DBCatalog dBCatalog0 = new DBCatalog();
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("org.apache.derby.iapi.sql.dictionary.AliasDescriptor");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'org.apache.derby.iapi.sql.dictionary.AliasDescriptor'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "setMaxRows");
      stringBuilder0.append(0.0F);
      SQLUtil.addRequiredCondition("setMaxRows", stringBuilder0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "setMaxRows";
      stringArray0[1] = "setMaxRows";
      stringArray0[2] = "KAC";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "*+;_z9", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("KAC", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("KAC", dBTable0, 0, "");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "setMaxRows");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("setMaxRows", defaultDBTable0, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn1);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("setMaxRows");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.substituteMarkers("XSCB1.S", "", integer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ki");
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.addReferrer((DBTable) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(",");
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'G';
      stringBuilder0.insert(0, charArray0);
      DBSchema dBSchema0 = new DBSchema("X/F;kRPrLxj-cjqA");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",", dBSchema0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("$\"['I_NBl@TrX");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      mockPrintWriter0.print('e');
      mockPrintWriter0.append('G');
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(",");
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[5];
      stringArray1[0] = "tt[c{RDT.:{3";
      stringArray1[1] = "SELECT * FROM ";
      stringArray1[2] = "";
      stringArray1[3] = ",";
      stringArray1[4] = "";
      SQLUtil.leftJoin("tt[c{RDT.:{3", stringArray0, " on ", "deleteh2.sortnullshigh", stringArray1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("}G(P.Bw+Aw'\"5#");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = " on ";
      stringArray0[2] = "'Up\"#7,^1I0m";
      stringArray0[3] = "";
      stringArray0[4] = "'Up\"#7,^1I0m";
      stringArray0[5] = "'Up\"#7,^1I0m";
      stringArray0[6] = " on ";
      stringArray0[7] = "";
      stringArray0[8] = "";
      String string0 = SQLUtil.leftJoin("'Up\"#7,^1I0m", stringArray0, "$u9#>f]=Piv0A)AD%-L", "'Up\"#7,^1I0m", stringArray0);
      assertEquals("left join $u9#>f]=Piv0A)AD%-L as 'Up\"#7,^1I0m on 'Up\"#7,^1I0m.null = 'Up\"#7,^1I0m.null and 'Up\"#7,^1I0m. on  = 'Up\"#7,^1I0m. on  and 'Up\"#7,^1I0m.'Up\"#7,^1I0m = 'Up\"#7,^1I0m.'Up\"#7,^1I0m and 'Up\"#7,^1I0m. = 'Up\"#7,^1I0m. and 'Up\"#7,^1I0m.'Up\"#7,^1I0m = 'Up\"#7,^1I0m.'Up\"#7,^1I0m and 'Up\"#7,^1I0m.'Up\"#7,^1I0m = 'Up\"#7,^1I0m.'Up\"#7,^1I0m and 'Up\"#7,^1I0m. on  = 'Up\"#7,^1I0m. on  and 'Up\"#7,^1I0m. = 'Up\"#7,^1I0m. and 'Up\"#7,^1I0m. = 'Up\"#7,^1I0m.", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLUtil.mutatesStructure("");
      SQLUtil.removeComments("");
      Boolean.logicalAnd(true, false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      DBPackage dBPackage0 = new DBPackage("0*|", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure("select intocan't set negative fetch size.", dBPackage0);
      dBProcedure0.toString();
      dBProcedure0.setObjectId("';W[%:z");
      SQLUtil.ownerDotComponent(dBProcedure0);
      SQLUtil.normalize("update", true);
      SQLUtil.isDML("");
      SQLUtil.renderColumnListWithTableName("update", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter index", (DBSchema) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("XSAM4.S", defaultDBTable0, (-1), "0*|.select intocan't set negative fetch size.");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.renderValue(integer0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("XSAM4.S", true, defaultDBTable0, "o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("qRX4|)x(N+");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "CLOB";
      stringArray0[1] = ";|bqDHo&{Gu_:!zw|z";
      stringArray0[2] = "CLOB";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CLOB", false, stringArray0);
      dBPrimaryKeyConstraint0.equals("CLOB");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.isQuery("");
      DBDataType dBDataType0 = DBDataType.getInstance(48, "*/");
      Integer integer0 = new Integer(44);
      Integer integer1 = RawTransaction.COMMIT;
      Integer.getInteger("updateh2.sortnullshigh", integer1);
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer1, integer3);
      defaultDBColumn0.getForeignKeyConstraint();
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec1, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "wRMx";
      stringArray0[1] = "wRMx";
      stringArray0[2] = "wRMx";
      stringArray0[3] = "wRMx";
      stringArray0[4] = "wRMx";
      stringArray0[5] = "<lg;<.h^e";
      stringArray0[6] = "wRMx";
      stringArray0[7] = "wRMx";
      SQLUtil.renderColumnListWithTableName("wRMx", stringArray0);
      SQLUtil.isDML("h2.sortNullsHigh");
      SQLUtil.removeComments("wRMx.wRMx, wRMx.wRMx, wRMx.wRMx, wRMx.wRMx, wRMx.wRMx, wRMx.<lg;<.h^e, wRMx.wRMx, wRMx.wRMx");
      SQLUtil.isQuery("<lg;<.h^e");
      Object object0 = new Object();
      SQLUtil.substituteMarkers("wRMx", "0(($b=W:^$*\"VmJig4Q", object0);
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      SQLUtil.innerJoin("", stringArray0, ":YvDj", (String) null, stringArray0);
      String string0 = "";
      SQLUtil.isDML("");
      SQLUtil.isDML(")");
      SQLUtil.renderColumnNames(stringArray0);
      String string1 = " server could not be started. Possible cause: another server is already running on ";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("M?h^5s/(Vq1");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      SQLUtil.removeComments("");
      Boolean.logicalAnd(true, false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) boolean0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.removeComments("3`~-j2g\"rU");
      String string0 = "5xK,oU";
      DBCatalog dBCatalog0 = new DBCatalog();
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("5xK,oU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '5xK,oU'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "obV.4)^e";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "obV.4)^e";
      SQLUtil.join("obV.4)^e", "obV.4)^e", stringArray0, "", "", stringArray0);
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("qRX4|)x(N+");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "CLOB";
      stringArray0[1] = ";|bqDHo&{Gu_:!zw|z";
      stringArray0[2] = "CLOB";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CLOB", false, stringArray0);
      dBPrimaryKeyConstraint0.equals("CLOB");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.isQuery("");
      SQLUtil.mutatesStructure("getInsertResultSet");
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      String string0 = SQLUtil.leftJoin("", stringArray0, "'Up\"#7,^1I0m", " on ", stringArray0);
      assertEquals("left join 'Up\"#7,^1I0m as  on  on . =  on . and . =  on . and . =  on . and . =  on . and . =  on . and . =  on . and . =  on . and . =  on . and . =  on .", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "vlu5ErB)Z1C-#'V";
      SQLUtil.normalize("vlu5ErB)Z1C-#'V", false);
      String string1 = "d*]OSluqb1!?0.";
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("vlu5ErB) Z1C - # 'V'", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("d*]OSluqb1!?0.", (DBSchema) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "d*]OSluqb1!?0.";
      stringArray0[1] = "vlu5ErB)Z1C-#'V";
      stringArray0[2] = "vlu5ErB)Z1C-#'V";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'd*]OSluqb1!?0.' has no foreign key with the columns (d*]OSluqb1!?0., vlu5ErB)Z1C-#'V, vlu5ErB)Z1C-#'V)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DBPackage dBPackage0 = new DBPackage("", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure("", dBPackage0);
      dBPackage0.setObjectId("exec");
      dBPackage0.isIdentical((DBObject) null);
      dBProcedure0.setObjectId("");
      SQLUtil.ownerDotComponent(dBPackage0);
      String string0 = SQLUtil.normalize("Q~/]g+J/<Ehhm/", false);
      assertEquals("Q ~ / ] g + J / < Ehhm /", string0);
      
      boolean boolean0 = SQLUtil.isDML("alter indexinto");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "truncatecallbinary_float";
      stringArray0[1] = "truncatecallbinary_float";
      SQLUtil.isQuery("DROP VIEW");
      SQLUtil.normalize("--", false);
      StringBuilder stringBuilder0 = new StringBuilder();
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("truncatecallbinary_float");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create unique index_t#ztw^y";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create unique index_t#ztw^y", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      dBForeignKeyConstraint0.setDoc("l&+qrn,^#q}=");
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("create unique index_t#ztw^y", stringBuilder1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder2, nameSpec0);
      TableContainer tableContainer0 = new TableContainer("l&+qrn,^#q}=", defaultDBTable0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "create unique index_t#ztw^y";
      stringArray1[1] = "l&+qrn,^#q}=";
      DBForeignKeyConstraint dBForeignKeyConstraint1 = new DBForeignKeyConstraint(" on ", true, defaultDBTable0, stringArray1, defaultDBTable0, stringArray1);
      dBForeignKeyConstraint1.isIdentical(defaultDBTable0);
      TableContainer tableContainer1 = new TableContainer("*=4^)VQ$?QVa%pF", defaultDBTable0);
      SQLUtil.normalize("*=4^)VQ$?QVa%pF", true);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint1);
      String string1 = SQLUtil.removeComments("l56;+UHQap}?r`]2g9");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create unique index_t#ztw^y";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create unique index_t#ztw^y", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("l&+qrn,^#q}=", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      assertEquals("l&+qrn,^#q}=CONSTRAINT \"create unique index_t#ztw^y\" ", stringBuilder1.toString());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      TableContainer tableContainer0 = new TableContainer("create unique index_t#ztw^y", defaultDBTable0);
      SQLUtil.normalize("l&+qrn,^#q}=", false);
      boolean boolean0 = SQLUtil.isDML("create unique index_t#ztw^y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "%A:U;7P_m.od", "%A:U;7P_m.od");
      SQLUtil.parseColumnTypeAndSize("UROWID");
      SQLUtil.mutatesStructure("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "UROWID";
      stringArray0[1] = ":i~z)";
      stringArray0[2] = "%A:U;7P_m.od";
      stringArray0[3] = "F1j>dh@9%Zc";
      stringArray0[4] = "";
      String string1 = SQLUtil.innerJoin("", stringArray0, "UROWID", "e$Q", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "~!XmHQMI";
      stringArray0[1] = "a}K$|q)i)NN{";
      stringArray0[2] = "left";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(~!XmHQMI, a}K$|q)i)NN{, left)", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "";
      SQLUtil.isDDL("");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "setMaxRows");
      SQLUtil.addRequiredCondition("setMaxRows", stringBuilder0);
      assertEquals("setMaxRows and setMaxRows", stringBuilder0.toString());
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "KAC";
      stringArray0[1] = "setMaxRows";
      stringArray0[2] = "KAC";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "*+;_z9", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("KAC", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("KAC", dBTable0, 0, "");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "";
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String string1 = "";
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '' not found in table ''
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DBPackage dBPackage0 = new DBPackage("Q~/]g+J/<Ehhm/", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure((String) null, dBPackage0);
      dBProcedure0.setObjectId("Q~/]g+J/<Ehhm/");
      String string0 = SQLUtil.ownerDotComponent(dBProcedure0);
      assertEquals("Q~/]g+J/<Ehhm/.null", string0);
      
      String string1 = SQLUtil.normalize("=|emy/~?N", true);
      assertEquals("= | emy / ~ ? N", string1);
      
      boolean boolean0 = SQLUtil.isDML("9fd8Y@J");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "hM7-S_E2ej]Se&JC";
      SQLUtil.leftJoin("", stringArray0, "", "hM7-S_E2ej]Se&JC", stringArray0);
      SQLUtil.isDML("=E#Mg");
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint((DBTable) null, "KFIXk61X", false, "left join  as hM7-S_E2ej]Se&JC on . = hM7-S_E2ej]Se&JC. and . = hM7-S_E2ej]Se&JC. and .hM7-S_E2ej]Se&JC = hM7-S_E2ej]Se&JC.hM7-S_E2ej]Se&JC");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // owner is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique index");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 75, "CXTOv)$");
      String string0 = defaultDBColumn0.toString();
      assertEquals(" : CXTOV)$", string0);
      
      defaultDBColumn0.setDefaultValue("njzyVi2h*[nOn{(Sn");
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.join("", "Y", stringArray0, "xaHS4L", "!5xXCylTSo2}Mo:", stringArray0);
      assertEquals("xaHS4L as !5xXCylTSo2}Mo: on ", string1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[0];
      String string1 = null;
      SQLUtil.innerJoin("", stringArray0, "", (String) null, stringArray0);
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("columnPos", compositeDBObject0);
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuilder0.append(stringBuffer0);
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("67,n\"2", (String[]) null, "", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "h";
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("h", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("ROWIDSCAN", defaultDBTable0);
      tableContainer0.getSchema();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("([F9)jk6)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[F9\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("call", (DBTable) null, (-79948057), "wb-Fu$0NQS^R|^7h");
      defaultDBColumn0.toString();
      defaultDBColumn0.setDefaultValue("=e#mg");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("WB-FU$0NQS^R|^7H", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SQLUtil.isProcedureCall("PAGES INT");
      String string0 = "";
      SQLUtil.parseColumnTypeAndSize("");
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("constraint", compositeDBObject0);
      tableContainer0.getTable("PAGES INT");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "PAGES INT";
      stringArray0[1] = "constraint";
      stringArray0[2] = "";
      stringArray0[3] = "constraint";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "PAGES INT";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "F'-&P8'b!a8TPo", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SQLUtil.isDDL("resultSetHoldability");
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable("resultSetHoldability", false);
      DBDataType dBDataType0 = DBDataType.getInstance(0, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0);
      // Undeclared exception!
      try { 
        defaultDBColumn0.getForeignKeyConstraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBSequence dBSequence0 = new DBSequence("", "", "");
      SQLUtil.ownerDotComponent(dBSequence0);
      String string0 = "{<GVF[GqK)D3HB";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{<GVF[GqK)D3HB");
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = ",";
      StringBuilder stringBuilder0 = new StringBuilder(",");
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'G';
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, charArray0);
      StringBuilder stringBuilder2 = stringBuilder1.append(false);
      StringBuilder stringBuilder3 = SQLUtil.addRequiredCondition(",", stringBuilder2);
      SQLUtil.addRequiredCondition(",", stringBuilder3);
      String string1 = "X/F;kRPrLxj-cjqA";
      DBSchema dBSchema0 = new DBSchema("X/F;kRPrLxj-cjqA");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",", dBSchema0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(1686);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1686, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "into";
      SQLUtil.mutatesDataOrStructure("into");
      String string1 = "]p!V@'^vTodDw?8]";
      boolean boolean0 = false;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "into";
      stringArray0[1] = "into";
      stringArray0[2] = "]p!V@'^vTodDw?8]";
      stringArray0[3] = "]p!V@'^vTodDw?8]";
      // Undeclared exception!
      try { 
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }
}
