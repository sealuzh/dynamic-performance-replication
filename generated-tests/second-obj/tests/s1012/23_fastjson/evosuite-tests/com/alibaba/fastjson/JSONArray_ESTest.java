/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:31:46 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.TypeUtils;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, mockThaiBuddhistDate0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll(3089, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentClear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(129);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 129, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q8!;H$");
      JSONArray jSONArray0 = new JSONArray(144);
      // Undeclared exception!
      try { 
        jSONArray0.getDate(144);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 144, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      int int0 = (-5);
      jSONArray0.size();
      LinkedList<PropertyNamingStrategy> linkedList0 = new LinkedList<PropertyNamingStrategy>();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(35);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 35, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getLong(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, mockThaiBuddhistDate0);
      jSONArray1.fluentAddAll(3089, (Collection<?>) jSONArray0);
      jSONArray1.getTimestamp(35);
      assertEquals(6180, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.addAll(124, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 124, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-18), mockThaiBuddhistDate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, propertyNamingStrategy0);
      Integer integer0 = new Integer(35);
      jSONArray0.lastIndexOf(integer0);
      TypeUtils.castToDate((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.getByte(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!y/z={Z30v%w=.n`7,");
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) mockMinguoDate0);
      // Undeclared exception!
      try { 
        jSONArray1.getString(1588);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1588, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, mockThaiBuddhistDate0);
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@1717b8d6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONArray0.remove((Object) mockHijrahDate0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(35);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 35, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3064);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSONArray0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) jSONArray0;
      objectArray0[3] = (Object) jSONArray0;
      objectArray0[4] = (Object) jSONArray0;
      objectArray0[5] = (Object) jSONArray0;
      objectArray0[6] = (Object) jSONArray0;
      Object[] objectArray1 = jSONArray0.toArray(objectArray0);
      assertSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, propertyNamingStrategy0);
      jSONArray1.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(35);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 35, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      JSONArray jSONArray4 = jSONArray3.fluentRemove((Object) jSONArray0);
      jSONArray4.clear();
      assertTrue(jSONArray4.equals((Object)jSONArray0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) " pu!^T6@'(P]0cHHKDF");
      JSONArray jSONArray0 = new JSONArray(1602);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger(1602);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1602, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3090, jSONObject0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray1.getIntValue(35);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(3090);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray1.indexOf(jSONArray0);
      boolean boolean0 = jSONArray1.add((Object) "1.2.46");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.iterator();
      // Undeclared exception!
      try { 
        jSONArray0.getShort(35);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 35, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockDate mockDate0 = new MockDate(35, 3089, 3089, 3089, 35);
      int int0 = Opcodes.DUP;
      jSONArray0.getRelatedArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(3089, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.iterator();
      boolean boolean0 = jSONArray1.addAll((Collection<?>) jSONArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(632);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      JSONArray jSONArray3 = jSONArray1.fluentRemoveAll(jSONArray2);
      jSONArray3.set(632, jSONArray0);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        jSONArray2.getObject(35, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 35, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3090, jSONObject0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[5];
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter0;
      jSONArray1.getShortValue(35);
      jSONArray0.getByte(3089);
      jSONArray1.clone();
      assertEquals(3091, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONArray0.fluentSet(3090, jSONObject0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[5];
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter0;
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      String[] stringArray0 = new String[3];
      stringArray0[1] = "@type";
      stringArray0[2] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<JSONPath.Operator> class1 = JSONPath.Operator.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. com.alibaba.fastjson.JSONPath$Operator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      List<PropertyNamingStrategy> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(list0);
      JSONArray jSONArray3 = jSONArray2.fluentRemove((Object) list0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      int int0 = jSONArray3.indexOf(mockMinguoDate0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 3090;
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Object object0 = new Object();
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      // Undeclared exception!
      try { 
        jSONArray2.getShortValue(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.Object@e8282e2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3090, jSONObject0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.getBooleanValue(3089);
      jSONArray1.iterator();
      assertEquals(3091, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.add(35, (Object) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 35, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(1632);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1632, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONArray0.fluentSet(3089, jSONObject0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(181);
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9,$iUhzYH1&*(v`l");
      jSONArray0.add((Object) listIterator0);
      LinkedHashSet<PascalNameFilter> linkedHashSet0 = new LinkedHashSet<PascalNameFilter>();
      jSONArray0.removeAll(linkedHashSet0);
      jSONArray0.contains((Object) null);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      linkedHashSet0.add(pascalNameFilter0);
      linkedHashSet0.add(pascalNameFilter0);
      // Undeclared exception!
      try { 
        jSONArray0.set((-2404), linkedHashSet0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      pascalNameFilter0.process(jSONArray0, "@type", jSONArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "@type");
      // Undeclared exception!
      try { 
        jSONArray1.getBigDecimal(1028);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1028, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3090, jSONObject0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.getByteValue(35);
      jSONArray1.fluentRemove((Object) jSONObject0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray1.iterator();
      long long0 = new Integer(3089);
      jSONArray0.clone();
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList(3042, (-2027));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(3042) > toIndex(-2027)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(35);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3090, jSONObject0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray1.fluentRemove((Object) jSONObject0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray1.iterator();
      jSONArray1.getLongValue(35);
      jSONArray0.clone();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(181);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9,$iUhzYH1&*(v`l");
      LinkedHashSet<PascalNameFilter> linkedHashSet0 = new LinkedHashSet<PascalNameFilter>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      jSONArray0.contains((Object) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9,$iUhzYH1&*(v`l");
      linkedHashSet0.add(pascalNameFilter0);
      // Undeclared exception!
      try { 
        jSONArray0.set((-2404), linkedHashSet0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3090, jSONObject0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONObject0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray1.iterator();
      jSONArray0.clone();
      jSONArray0.getJSONObject(3089);
      jSONArray0.listIterator(377);
      jSONArray2.getDoubleValue(35);
      jSONArray1.toArray();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      pascalNameFilter1.process((Object) null, "g,|`-", (Object) null);
      Object object0 = new Object();
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      Object object1 = new Object();
      jSONArray1.listIterator();
      jSONArray0.isEmpty();
      jSONArray0.getDate(3046);
      jSONArray1.size();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray2 = jSONArray1.fluentSet(106, mockJapaneseDate0);
      jSONArray0.fluentAdd((Object) jSONArray2);
      jSONArray0.getIntValue(3087);
      // Undeclared exception!
      try { 
        jSONArray0.getLong(3090);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"mockedClassName\":\"java.time.chrono.JapaneseDate\"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate2 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate3 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate4 = new MockThaiBuddhistDate();
      jSONArray1.hashCode();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-1103));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONArray0.fluentSet(35, jSONObject0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(35);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, propertyNamingStrategy0);
      JSONArray jSONArray2 = new JSONArray(35);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "1.2.46";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray3 = jSONArray0.fluentRemove((Object) jSONArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      JSONObject jSONObject0 = new JSONObject();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      BiFunction<Object, Object, MockHijrahDate> biFunction0 = (BiFunction<Object, Object, MockHijrahDate>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray3.getLongValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : KebabCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.setComponentType((Type) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(121, (Object) "(|;(3=pP:ov6vk");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 121, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONArray0.fluentSet((-1), jSONObject0);
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[2] = "1.2.46";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      JSONObject jSONObject0 = new JSONObject();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      BiFunction<Object, Object, MockHijrahDate> biFunction0 = (BiFunction<Object, Object, MockHijrahDate>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      jSONArray0.setRelatedArray(jSONArray0);
      int int0 = 3054;
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(3063, (Object) jSONObject1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3063, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, object0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONArray");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) mockThaiBuddhistDate0, serializerFeatureArray0);
      jSONArray0.getJSONObject(959);
      JSON.toJSONBytes((Object) null, 35, serializerFeatureArray0);
      jSONArray1.getBoolean(0);
      jSONArray0.listIterator(0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.Object@4ebc3fd9
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray(3089);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Integer integer0 = new Integer(952);
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate2 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate3 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate4 = new MockThaiBuddhistDate();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray0.remove(947);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 947, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, jSONObject0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray1.getIntValue(35);
      jSONArray0.getByte(35);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(8232);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8232, Size: 3090
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray0.getBoolean(0);
      jSONArray1.listIterator(3073);
      jSONArray0.getDoubleValue(3073);
      jSONArray0.containsAll(jSONArray1);
      Class<String> class0 = String.class;
      jSONArray1.getObject(1545, class0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, propertyNamingStrategy0);
      int int0 = 153;
      JSONArray jSONArray2 = new JSONArray(153);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      Integer integer0 = new Integer((-1345));
      JSONArray jSONArray3 = jSONArray1.fluentSet(3089, "1.2.46");
      jSONArray0.getJSONArray(527);
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      JSONArray jSONArray4 = jSONArray3.fluentRemove((Object) simplePropertyPreFilter0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray1.iterator();
      // Undeclared exception!
      try { 
        jSONArray4.getFloatValue(3089);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONObject0.getDouble("@type");
      jSONObject0.getBoolean("@type");
      JSONArray jSONArray2 = new JSONArray(3089);
      jSONArray1.getJSONObject(35);
      jSONArray0.listIterator(3089);
      jSONArray0.getComponentType();
      jSONArray1.getObject(3089, (Type) null);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Integer integer0 = new Integer(952);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("8m", "@type");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // @type
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      jSONObject0.getDouble("@type");
      jSONArray0.getBoolean(3089);
      jSONArray1.listIterator(35);
      jSONArray0.getDoubleValue(3089);
      JSONArray jSONArray2 = new JSONArray(3089);
      jSONArray1.getJSONObject(35);
      jSONArray0.getComponentType();
      jSONArray1.getObject(3089, (Type) null);
      JSONArray jSONArray3 = new JSONArray(3089);
      Integer integer0 = new Integer(3089);
      jSONArray1.getBigInteger(164);
      jSONArray2.containsAll(jSONArray1);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray3.contains(serializerFeature0);
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      jSONArray1.getFloatValue(35);
      jSONArray2.indexOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONArray0.fluentSet(35, jSONObject0);
      jSONObject0.getBoolean("@type");
      JSONArray jSONArray2 = new JSONArray(3089);
      jSONArray1.getJSONObject(35);
      jSONArray1.listIterator();
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray1.getObject(3089, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 36
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(4252, propertyNamingStrategy0);
      JSONArray jSONArray2 = new JSONArray(3043);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@type";
      stringArray0[1] = "@type";
      stringArray0[2] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray3 = jSONArray2.fluentSet(79, jSONArray1);
      jSONArray3.getJSONArray(79);
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      JSONArray jSONArray4 = jSONArray0.fluentAdd((Object) "");
      JSONArray jSONArray5 = jSONArray4.fluentRemove((Object) "");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray5.iterator();
      // Undeclared exception!
      try { 
        jSONArray3.getFloatValue(153);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 153, Size: 80
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      JSONObject jSONObject0 = new JSONObject();
      jSONArray0.fluentSet(3089, (Object) null);
      Integer integer0 = new Integer((-664));
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      jSONObject0.getBoolean("@type");
      JSONArray jSONArray2 = new JSONArray(3089);
      jSONArray0.getJSONObject(3079);
      jSONArray2.listIterator();
      jSONArray0.getComponentType();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = aSMClassLoader0.loadClass("java.awt.Font");
      jSONArray1.getObject(31, (Type) class0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Integer integer1 = new Integer(3072);
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate2 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate3 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate4 = new MockThaiBuddhistDate();
      int int0 = 1162;
      jSONArray0.getFloatValue(0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(3089);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }
}
