/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:38:07 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Member;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Exception while looking for class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exception while looking for class '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.compactClassName("CONSTANT_Integer");
      Utility.isSet(2535, 18);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "CONSTANT_Integer";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("CONSTANT_Integer", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      short short0 = Utility.searchOpcode("ishr");
      assertEquals((short)122, short0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.setBit(91, 91);
      String string0 = Constants.ILLEGAL_TYPE;
      try { 
        Utility.methodSignatureReturnType("<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal type>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(">}@[*s1DcNIB/P!>", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[*s1DcNIB/P!>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = Utility.methodTypeToSignature("}F%y_l", stringArray0);
      assertEquals("(L;)L}F%y_l;", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('`');
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("V", false);
      assertArrayEquals(new byte[] {(byte)86}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = Utility.format((-4303), (-4303), true, '&');
      assertEquals("-4303", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = Utility.format(42, 42, false, 'J');
      assertEquals("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ42", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utility.convertString("8tP]KHJO+.q3BhM(Iy");
      try { 
        Utility.typeOfSignature("8tP]KHJO+.q3BhM(Iy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8tP]KHJO+.q3BhM(Iy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      try { 
        Utility.typeOfSignature("d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('2');
      // Undeclared exception!
      try { 
        Utility.signatureToString("long", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `long'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.compactClassName("$A$A", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('|');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"_|c+:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"_|c+:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)65;
      byteArray1[2] = (byte)60;
      byteArray1[3] = (byte)60;
      byteArray1[4] = (byte)6;
      byteArray1[5] = (byte)60;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String[] stringArray0 = new String[0];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00", string0);
      
      short short0 = Utility.searchOpcode("00");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = Utility.replace("oOmj|!E0F", ",q~@.k}*@/5. sC7mPF", ")");
      assertEquals("oOmj|!E0F", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("12", string1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-125);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("monitorenter", "monitorenter", "ljCVUT7ViPHHq@Yli", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorenter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[4] = (Object) null;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)103;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$f7g", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.getSignature(",|1ujVYu<}{5pXX]S1u");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("L,|1ujVYu<}{5pXX]S1u;");
      try { 
        Utility.methodSignatureReturnType("L,|1ujVYu<}{5pXX]S1u;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L,|1ujVYu<}{5pXX]S1u;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte byte0 = ElementValue.ANNOTATION;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      // Undeclared exception!
      try { 
        Utility.signatureToString("L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("Vw?z}*", (String[]) null);
      assertEquals("()LVw?z}*;", string0);
      
      String string1 = Constants.ILLEGAL_OPCODE;
      String string2 = Constants.ILLEGAL_TYPE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LZW;V");
      String string3 = Utility.methodSignatureReturnType("()LVw?z}*;");
      assertEquals("Vw?z}*", string3);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = Utility.clearBit(153, 153);
      assertEquals(153, int0);
      
      String string0 = Utility.accessToString(679, true);
      assertEquals("public private protected transient", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = new Object();
      Utility.printArray((Object[]) null);
      Utility.compactClassName("");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Utility.getSignature(",|1ujVYu<}{5pX]S1u");
      Utility.convertString("L,|1ujVYu<}{5pX]S1u;");
      int int0 = 1855;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(124, 1485);
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("[R7fByB", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R7fByB'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)38;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("$A$s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A$s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      String string0 = Utility.replace("newarray", "newarray", "impdep2");
      assertEquals("impdep2", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string1 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string1);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.SC_EXTERNALIZABLE;
      Utility.convertString("k~Bwx");
      ConstantInteger constantInteger0 = new ConstantInteger(3639);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Jfh6j}MT[?CI~4AZ");
      String string0 = Utility.replace("Jfh6j}MT[?CI~4AZ", "compiler version\t", "Jfh6j}MT[?CI~4AZ");
      assertEquals("Jfh6j}MT[?CI~4AZ", string0);
      
      String string1 = Utility.compactClassName("?lmW<g#u]r26f", "N94!:B't}(0hDxS*j", true);
      assertEquals("?lmW<g#u]r26f", string1);
      
      byte byte0 = Utility.typeOfSignature("Jfh6j}MT[?CI~4AZ");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.clearBit((-2217), (-2217));
      try { 
        Utility.methodSignatureArgumentTypes("1Du|8kY)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1Du|8kY)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.replace("multianewarray", "org.apache.bcel.generic.Type", "X!=:zHx");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("multianewarray");
      Object object0 = new Object();
      Object object1 = new Object();
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "short";
      Utility.methodTypeToSignature("short", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "X!=:zHx";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("X!=:zHx", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X!=:zHx'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("%[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = Pattern.MULTILINE;
      // Undeclared exception!
      try { 
        Utility.decode("9$8)3C_*t}s3}T~7", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8)\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("P[},CU^1lOstBs", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P[},CU^1lOstBs'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.isJavaIdentifierPart('C');
      Utility.convertString("2%8` _<anfgM#v");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "getstatic", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Constants.CONSTRUCTOR_NAME;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string1 = Utility.getSignature("java.lang.I7nvalid signature: ");
      assertEquals("Ljava/lang/I7nvalid;", string1);
      
      byte byte0 = Utility.typeOfSignature("Ljava/lang/I7nvalid;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.typeOfSignature("Integer");
      try { 
        Utility.methodSignatureArgumentTypes("8tP]KHJO+.q3BhM(Iy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8tP]KHJO+.q3BhM(Iy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-118);
      String string1 = Constants.ILLEGAL_OPCODE;
      Utility.convertString("C]`H'noO5cJyC,Esxz");
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.getSignature(",|1ujVYu<}{5pX]S1u");
      Utility.typeOfSignature("L,|1ujVYu<}{5pX]S1u;");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfMethodSignature(",|1ujVYu<}{5pX]S1u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,|1ujVYu<}{5pX]S1u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[9];
      try { 
        Utility.typeOfSignature("<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal type>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.convertString(">\t");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!XY|L)')");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XY|L)')
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "!2X8c`')";
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("!2X8c`')");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2X8c`')
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Vw?z}*", false);
      assertEquals("void", string0);
      
      boolean boolean0 = Utility.isSet(439, 439);
      assertFalse(boolean0);
      
      String string1 = Utility.getSignature("AV]ifKnGCKspEr_C~Qt");
      assertEquals("LAV]ifKnGCKspEr_C~Qt;", string1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 0;
      Utility.setBit(0, 0);
      byte byte0 = Constants.ATTR_ANNOTATION_DEFAULT;
      byte[] byteArray0 = new byte[1];
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utility.searchOpcode("short");
      Utility.compactClassName("W_yfJi61c3.o4", "/*N}Hn]Un\">;%e", false);
      Utility.clearBit(4456, (-805));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/*N}Hn]Un\">;%e";
      stringArray0[1] = "W_yfJi61c3.o4";
      stringArray0[2] = "/*N}Hn]Un\">;%e";
      Object object0 = new Object();
      String string0 = null;
      try { 
        Utility.typeOfSignature("W_yfJi61c3.o4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W_yfJi61c3.o4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      try { 
        Utility.typeOfSignature("NtL,Lpt)PC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NtL,Lpt)PC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Constants.ILLEGAL_OPCODE;
      try { 
        Utility.typeOfSignature("R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.getSignature(":");
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "EZxV%gZ}^Pd";
      try { 
        Utility.typeOfSignature("EZxV%gZ}^Pd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EZxV%gZ}^Pd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utility.getSignature(",|1ujVYu<}{5pX]S1u");
      Utility.convertString("L,|1ujVYu<}{5pX]S1u;");
      Utility.typeOfSignature("Dont call getValueShort() on a non SHORT ElementValue");
      // Undeclared exception!
      try { 
        Signature.translate("Dont call getValueShort() on a non SHORT ElementValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal signature: Dont call getValueShort() on a non SHORT ElementValue read D
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.getSignature("\t(wide)");
      // Undeclared exception!
      try { 
        Utility.signatureToString("\t(wide)", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t(wide)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "fr~uj5'Tpv$dWFm";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.decode("fr~uj5'Tpv$dWFm", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"dW\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = ")\t";
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[22];
      byteArray0[16] = (byte) (-107);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        Utility.signatureToString("WfW|g ;\"7cKM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WfW|g ;\"7cKM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CONSTANT_Integer");
      assertEquals((byte)5, byte0);
      
      String string0 = Utility.compactClassName("CONSTANT_Integer");
      assertEquals("CONSTANT_Integer", string0);
      
      boolean boolean0 = Utility.isSet(2535, (-456));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.methodTypeToSignature("Vw?z}*", (String[]) null);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Utility.methodSignatureToString("()LVw?z}*;", "Vw?z}*", "Vw?z}*");
      byte byte0 = (byte)25;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)25;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)25;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",^S=Zqupe/ef9p(&ly");
      try { 
        Utility.typeOfSignature(",^S=Zqupe/ef9p(&ly");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,^S=Zqupe/ef9p(&ly
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "(]=p=zw1_EWG";
      try { 
        Utility.typeOfSignature("(]=p=zw1_EWG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (]=p=zw1_EWG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.signatureToString("S");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.signatureToString("Zw*[eGubN`Q1kk");
      int int0 = Member.DECLARED;
      String string0 = "5nk";
      try { 
        Utility.typeOfSignature("5nk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5nk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid method signature: ", true);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "EZx.5V%gZ}^Pd";
      String string1 = "K:3X:Sg/[kHM";
      try { 
        Utility.methodSignatureReturnType("K:3X:Sg/[kHM", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K:3X:Sg/[kHM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Constants.ILLEGAL_TYPE;
      String string1 = Constants.ILLEGAL_OPCODE;
      String string2 = "H9&d";
      try { 
        Utility.typeOfSignature("H9&d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H9&d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string0);
      
      String string1 = Utility.classOrInterface((byte)91);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-36);
      String string0 = Utility.compactClassName(")zPTx\"[oK", "'", true);
      assertEquals(")zPTx\"[oK", string0);
      
      int int0 = Pattern.MULTILINE;
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")zPTx\"[oK";
      stringArray0[1] = ")zPTx\"[oK";
      stringArray0[0] = ")zPTx\"[oK";
      stringArray0[3] = "'";
      byte[] byteArray1 = Utility.decode(")zPTx\"[oK", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertArrayEquals(new byte[] {(byte)41, (byte)122, (byte)80, (byte)84, (byte)120, (byte)34, (byte)91, (byte)111, (byte)75}, byteArray1);
      assertEquals("dload_3", string1);
      
      String string2 = Utility.classOrInterface((byte) (-36));
      assertEquals("interface", string2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2d", string0);
      
      String string1 = Utility.classOrInterface(155);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Utility.getSignature(":");
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-40);
      try { 
        Utility.typeOfSignature("K<1/tG2PZ.6l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K<1/tG2PZ.6l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[8];
      String string0 = Constants.ILLEGAL_OPCODE;
      try { 
        Utility.typeOfSignature("+0OB>8cu1S'WW,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0OB>8cu1S'WW,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)30;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(46, (byte)30);
      constantMethodHandle0.toString();
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantLong constantLong0 = new ConstantLong(46);
      Utility.getSignature("CONSTANT_MethodHandle[15](reference_kind = 46, reference_index = 30)");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_YO\"P'";
      stringArray0[1] = "[LCONSTANT_MethodHandle;";
      stringArray0[2] = "CONSTANT_MethodHandle[15](reference_kind = 46, reference_index = 30)";
      stringArray0[3] = "java.lang.";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("java.lang.", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [LCONSTANT_MethodHandle;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.getSignature(",|1ujVYu<}{5pX]S1u");
      Utility.convertString("L,|1ujVYu<}{5pX]S1u;");
      String string0 = "YiG;BIb";
      // Undeclared exception!
      try { 
        Utility.signatureToString("YiG;BIb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YiG;BIb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      short short0 = Constants.ICONST_4;
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("NTK^eV>", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NTK^eV>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.searchOpcode("short");
      Utility.clearBit(4456, (-805));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/*NNHn]Un\">'%e";
      stringArray0[2] = "/*NNHn]Un\">'%e";
      stringArray0[3] = "short";
      stringArray0[4] = "short";
      Utility.isSet(4456, 124);
      String string0 = Constants.ILLEGAL_OPCODE;
      String string1 = "0";
      try { 
        Utility.typeOfSignature("/*NNHn]Un\">'%e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /*NNHn]Un\">'%e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[22];
      byteArray0[16] = (byte) (-107);
      int int0 = 2661;
      String string0 = Constants.CONSTRUCTOR_NAME;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(682L);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-107));
      Utility.typeOfSignature("[j ZK}6 6$8\\");
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) byteArray0;
      Utility.printArray(objectArray0, true, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{null, [B@258c90a4, null, [B@258c90a4}";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("{null, [B@258c90a4, null, [B@258c90a4}", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[B@258c90a4, null, [B@258c90a4}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ivali StackMap frme_ype");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1aa5VR6)la%IMKol5");
      String string0 = "6fH";
      try { 
        Utility.typeOfSignature("6fH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6fH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.clearBit(65, 65);
      String[] stringArray0 = new String[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodTypeToSignature("In-alid sig{ature: ", (String[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Object[] objectArray0 = new Object[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      objectArray0[3] = (Object) "<illegal type>";
      stringArray0[0] = stringArray0[0];
      objectArray0[6] = (Object) "<illegal type>";
      Utility.signatureToString("In-alid sig{ature: ");
      Utility.replace("Invalid signature: ", "()LIn-alid;", "In-alid sig{ature: ");
      try { 
        Utility.typeOfSignature("3>svi/C _,]We0f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3>svi/C _,]We0f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = Utility.getSignature(",|1ujVYu<}{5pX]S1u");
      String string1 = Utility.convertString("L,|1ujVYu<}{5pX]S1u;");
      assertTrue(string1.equals((Object)string0));
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dup_x2", string2);
      
      String string3 = Utility.compactClassName("NtL,Lpt)PC");
      assertEquals("NtL,Lpt)PC", string3);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "'";
      byte[] byteArray0 = new byte[3];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Utility.searchOpcode("short");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)49;
      Utility.isSet((byte)49, (short) (-1));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)49, (int) (byte)49);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.convertString("c@|~XD*s#R6'}#>7y%");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "c@|~XD*s#R6'}#>7y%";
      stringArray0[2] = "<illegal opcode>";
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-62);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 102, 853);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte)13;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4238, 188);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "short";
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[5];
      stringArray0[2] = "short";
      ConstantPool constantPool0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte byte0 = (byte)81;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1719304391), (int) (byte)81);
      String string1 = "3";
      // Undeclared exception!
      try { 
        Utility.signatureToString("3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lload\t\t%22", string0);
      
      String string1 = Utility.compactClassName("wide", "w J", true);
      assertEquals("wide", string1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      String string1 = Constants.CONSTRUCTOR_NAME;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      byteArray0[2] = (byte)16;
      Utility.compactClassName("<illegal type>");
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-69), (int) (byte)16, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<init>");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("areturn", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: areturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.convertString("c@|~XD*s#R6'}#>7y%");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "c@|~XD*s#R6'}#>7y%";
      stringArray0[1] = "<illegal opcode>";
      stringArray0[2] = "<illegal opcode>";
      stringArray0[3] = "<illegal opcode>";
      stringArray0[4] = "c@|~XD*s#R6'}#>7y%";
      stringArray0[5] = "c@|~XD*s#R6'}#>7y%";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-119);
      byteArray0[3] = (byte) (-62);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), (int) (byte) (-69));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("!o", "c@|~XD*s#R6'}#>7y%", " not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: !o
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "1";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1");
      String string1 = "#\\Sg>U#Cfg|d/4xE&\\";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#Sg>U#Cfg|d/4xE&");
      try { 
        Utility.typeOfSignature("#Sg>U#Cfg|d/4xE&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #Sg>U#Cfg|d/4xE&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-14));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = Utility.printArray((Object[]) null, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte) (-73));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-85);
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)51;
      int int0 = Pattern.MULTILINE;
      byte[] byteArray1 = Utility.decode("x", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      short short0 = Constants.DRETURN;
      String string0 = Utility.compactClassName("W_yfJi61c3.o4", "/*N}Hn]Un\">;%e", false);
      assertEquals("W_yfJi61c3.o4", string0);
      
      int int0 = Utility.clearBit(4456, (-812));
      assertEquals(4456, int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/*N}Hn]Un\">;%e";
      stringArray0[1] = "W_yfJi61c3.o4";
      stringArray0[2] = "/*N}Hn]Un\">;%e";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iastore", string1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        Utility.typeOfSignature("QUw3>-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QUw3>-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)109, (byte)109);
      try { 
        Utility.methodSignatureReturnType("MD\"&MRigz`&$xek_", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MD\"&MRigz`&$xek_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = Utility.compactClassName("Invalid St=ckap arame_type", "Invalid St=ckap arame_type", true);
      assertEquals("", string0);
      
      int int0 = Pattern.MULTILINE;
      byte[] byteArray0 = Utility.decode("Invalid St=ckap arame_type", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("idiv", string1);
      
      String string2 = Utility.classOrInterface(8);
      assertEquals("class", string2);
      
      String string3 = Utility.compactClassName("\t");
      assertEquals("\t", string3);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 70, 198);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.convertString("Invalid signature: ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2996, 212);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)39;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-751), 32);
      assertEquals("0:    nop\n1:    dload_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M6~>8t:1)<j");
      byte byte0 = ObjectStreamConstants.TC_CLASSDESC;
      Utility.clearBit(229, 229);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 197, 955);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CONSTANT_Integer");
      assertEquals((byte)5, byte0);
      
      byte[] byteArray0 = Utility.decode("CONSTANT_Integer", false);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-74);
      byteArray0[0] = (byte) (-74);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (int) (byte) (-74));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.clearBit(4456, (-805));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1);
      // Undeclared exception!
      try { 
        Utility.signatureToString(":/mV=B[4", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `:/mV=B[4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-44);
      byteArray0[7] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String[] stringArray0 = new String[2];
      Object object0 = new Object();
      Utility.printArray((Object[]) stringArray0, true, false);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("rd?Dm}6v[", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("Invalid signature: `", "Invalid signature: `", true);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte) (-58);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 22, 2759);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = ",|1ujVYu<}{5pX]S1u";
      Utility.isSet((-6), (byte)33);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)33;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3383, 1791);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Utility.searchOpcode("short");
      Utility.convertString("W_yfJi61c3.o4");
      Utility.clearBit((short) (-1), (-399));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short) (-1), (int) (short) (-1));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "tableswitch";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) byteArray0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "tableswitch";
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfMethodSignature("M>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.getSignature(",|1ujVYu<}{5pX]S1u");
      Utility.convertString("L,|1ujVYu<}{5pX]S1u;");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byte byte0 = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-63));
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-688));
      Utility.typeOfSignature("TEyTC-rW#1oDXumz0");
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)123, (int) (byte) (-57));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = Utility.isSet(2397, (byte)107);
      assertTrue(boolean0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1185), 180);
      assertEquals("0:    fstore_3\n1:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[1] = (byte) (-54);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)83;
      byteArray0[6] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)80, (int) (byte)83);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      short short0 = Constants.PUTFIELD;
      Utility.compactClassName("W_yfJi61c3.o4", "/*N}HnUn\">;%e", false);
      Utility.clearBit(4456, (-812));
      String[] stringArray0 = new String[5];
      stringArray0[2] = "/*N}HnUn\">;%e";
      stringArray0[1] = "W_yfJi61c3.o4";
      stringArray0[2] = "/*N}HnUn\">;%e";
      stringArray0[3] = "W_yfJi61c3.o4";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-507), (int) (short)181);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dup2_x2
         // 1:    istore\t\t%29
         // 3:    astore_3
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)97;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3725), 202);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "PD";
      try { 
        Utility.typeOfSignature("PD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = Utility.convertString("8tP]KHJO+.q3BhM(Iy");
      assertEquals("8tP]KHJO+.q3BhM(Iy", string0);
      
      byte[] byteArray0 = Utility.decode("{$:0pSFdxa^", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, 5, 11, false);
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)48, (byte)112, (byte)83, (byte)70, (byte)100, (byte)120, (byte)97, (byte)94}, byteArray0);
      assertEquals("5:    fstore_3\n6:    isub\n7:    ishl\n8:    ladd\n9:    dup2_x2\n", string1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("UvsX`NZ~O0%Ubu]q+c2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UvsX`NZ~O0%Ubu]q+c2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Utility.typeOfSignature("CONSTANT_Integer");
      Utility.signatureToString("CONSTANT_Integer", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      Utility.toHexString(byteArray0);
      String[] stringArray0 = new String[9];
      stringArray0[7] = "05";
      stringArray0[8] = "CONSTANT_Integer";
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte byte0 = ElementValue.ANNOTATION;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)63;
      byteArray0[3] = (byte)64;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte) (-44);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 91, (int) (byte)64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = ":";
      Utility.getSignature(":");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)0;
      byteArray0[4] = (byte) (-38);
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)0;
      String string1 = ">\t";
      Utility.convertString(">\t");
      Utility.isSet((byte)110, (byte)0);
      Utility.classOrInterface((byte) (-40));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 40, (int) (byte) (-40));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) byteArray0;
      objectArray0[3] = (Object) byteArray0;
      Utility.printArray(objectArray0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('^');
      Utility.convertString("char");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.signatureToString("[B@134bb422, [B@134bb422, [B@134bb422, [B@134bb422");
      Utility.searchOpcode("[B@134bb422, [B@134bb422, [B@134bb422, [B@134bb422");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("byte[]", "bbY6`^_,u16F[Xt$H[", "{}]I", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte[]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = Utility.signatureToString("Inalid sgnatur: ");
      assertEquals("int", string0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = Utility.signatureToString("Byte code error: ");
      assertEquals("byte", string1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("\"ae@", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2198, 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      int int0 = Pattern.UNICODE_CASE;
      byte[] byteArray0 = Utility.decode("invokeinterface", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 64, 5, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[2] = "Invalid St=ckap arame_type";
      byte byte0 = Utility.typeOfSignature("Invalid St=ckap arame_type");
      assertEquals((byte)10, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('3');
      assertTrue(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("J1wA*$[~F\"V%e$}Z", false);
      assertEquals("long", string0);
      
      int int0 = Utility.clearBit((byte) (-121), (-388));
      assertEquals((-268435577), int0);
      
      int int1 = Utility.clearBit(65, 334);
      assertEquals(65, int1);
      
      String string1 = Utility.compactClassName(" ");
      assertEquals(" ", string1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Utility.searchOpcode("short");
      Utility.compactClassName("W_yfJi61c3.o4", "short", false);
      Utility.clearBit((short) (-1), (-399));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "tableswitch";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[3] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "short";
      String[] stringArray0 = new String[5];
      stringArray0[2] = "short";
      stringArray0[3] = "short";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)8;
      byteArray0[7] = (byte)119;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)30, (int) (byte) (-76));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-110);
      byteArray1[1] = (byte)40;
      byteArray1[2] = (byte) (-76);
      byteArray1[3] = (byte) (-126);
      byteArray1[4] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 97, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"%q*zvZ2OttEb][4");
      byte[] byteArray0 = Utility.decode("L*c;V", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2198, 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)125;
      Utility.codeToString(byteArray0, constantPool1, (-1758), 54);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XfuDW,-ja;,uGY@_n");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      Locale.lookup(linkedList0, linkedHashSet0);
      mockPrintWriter0.format((Locale) null, "XfuDW,-ja;,uGY@_n", (Object[]) constantArray0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) constantArray0);
      try { 
        Utility.typeOfSignature("XfuDW,-ja;,uGY@_n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XfuDW,-ja;,uGY@_n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.signatureToString("S");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.classOrInterface((byte)54);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(76);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 41, (int) (byte)54);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Utility.methodTypeToSignature("Vw?z}*", (String[]) null);
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.typeOfSignature("Vw?z}*");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)12, 219);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.getSignature(",|1ujVYu<}{5pX]S1u");
      Utility.convertString("L,|1ujVYu<}{5pX]S1u;");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool1);
      Utility.isSet((byte)73, (byte)73);
      Utility.compactClassName("dstore_2", false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 338, 338);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "T0y;*>$IL7";
      byte[] byteArray0 = Utility.decode("T0y;*>$IL7", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteArray0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) byteSequence0;
      Utility.compactClassName("T0y;*>$IL7");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2113, 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.searchOpcode("short");
      Utility.compactClassName("W_yfJi61c3.o4", "Invalid signature: ", false);
      Utility.clearBit(45, (-399));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "tableswitch";
      stringArray0[1] = ")\t";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)125;
      try { 
        Utility.typeOfSignature("U)=:U0NqbWVS%5vNc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U)=:U0NqbWVS%5vNc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)43;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-102), 256);
      Utility.searchOpcode("Vw?z}*");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.replace("0:    ifne\t\t#-25958\n3:    ifne\t\t#-25955\n6:    aload_1\n", "newarray", "?>...");
      MockURI.URI("return");
      MockFile mockFile0 = new MockFile("null");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"null\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte byte0 = (byte)25;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, (int) (byte)46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-85);
      byteArray0[1] = (byte)51;
      boolean boolean0 = false;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) byteArray0;
      Utility.isSet(67, (byte)51);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-363), 2);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("`{Q6O?M8S$!D,", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("java.lang.CONSTANT_Integer");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 53, (int) (byte) (-84));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "8tP]KHJO+.q3BhM(Iy";
      Utility.convertString("8tP]KHJO+.q3BhM(Iy");
      byte[] byteArray0 = Utility.decode("8tP]KHJO+.q3BhM(Iy", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.isSet(680, (-2856));
      int int0 = (-1091);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1912, (-1091));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.convertString("S]_-HE/G");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0);
      Utility.isSet(157, (byte)87);
      Utility.compactClassName("ifnull", true);
      try { 
        Utility.typeOfSignature("}dK3L{#dp!ZmH`p<:3!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }dK3L{#dp!ZmH`p<:3!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), (int) (byte)75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    astore_0
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)65;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)80;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-52), (int) (byte) (-52));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte byte0 = Constants.ATTR_EXCEPTIONS;
      byte[] byteArray0 = Utility.decode(",|1ujVYu<}{5pX]S1u", false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",|1ujVYu<}{5pX]S1u");
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)33, 98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      Utility.encode(byteArray0, false);
      Utility.decode("$b7$b7", false);
      String string0 = Constants.CONSTRUCTOR_NAME;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(16);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"'Jhq");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)104;
      byteArray1[1] = (byte) (-73);
      byteArray1[2] = (byte) (-73);
      byteArray1[3] = (byte) (-73);
      byteArray1[4] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 197, 2510, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-110);
      byteArray1[1] = (byte)3;
      byteArray1[2] = (byte) (-105);
      byteArray1[3] = (byte) (-126);
      byteArray1[4] = (byte)30;
      String string0 = "1=pGt";
      try { 
        Utility.typeOfSignature("1=pGt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1=pGt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.classOrInterface(1454);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "class";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) "PMGClass";
      objectArray0[4] = (Object) "PMGClass";
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("PMGClass", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      Utility.signatureToString("Dont call getValueChar() on a non CHAR ElementValue", true);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      try { 
        Utility.typeOfSignature("O$#kdcGcS&Z?zW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O$#kdcGcS&Z?zW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.classOrInterface(155);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-94);
      byteArray0[4] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)53, (-2467));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.convertString("Invalid signature: ");
      Utility.clearBit(45, 45);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Invalid signature: ";
      Utility.methodTypeToSignature("Invalid signature: ", stringArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4712, (int) (byte)36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = " )_dVs>X,<N#EgQ";
      Utility.convertString("Q");
      int int0 = Pattern.LITERAL;
      int int1 = Pattern.UNICODE_CASE;
      ConstantPool constantPool0 = null;
      int int2 = (-225);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)29;
      byteArray0[2] = (byte)123;
      byteArray0[2] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-225), (int) (byte) (-93));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iload_3
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-78);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), (int) (byte) (-93));
      Utility.isSet((byte) (-78), (byte) (-93));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("F,|", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      int int0 = 5;
      byteSequence0.close();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5, 5, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte byte0 = ElementValue.ANNOTATION;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-91);
      ConstantString constantString0 = new ConstantString((-1148));
      ConstantString constantString1 = new ConstantString((byte)25);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray1[0] = (byte)37;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)25, 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-59);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(224, 102);
      String string0 = "L~RA-c";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L~RA-c");
      byte[] byteArray1 = Utility.decode("L~RA-c", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 4186, 102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantLong constantLong0 = new ConstantLong((byte) (-123));
      String string0 = "float";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "float");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)92;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)92, 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "R}A3My\"s%^8F7";
      Utility.convertString("R}A3My\"s%^8F7");
      byte[] byteArray0 = Utility.decode("R}A3My\"s%^8F7", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5, 11, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 5:    lshl
         // 6:    fload_0
         // 7:    drem
         // 8:    fload_3
         // 9:    dup2_x2
         // 10:   fstore\t\t%70
         // 12:   
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Constants.ATTR_EXCEPTIONS;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "%[";
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 56, (int) (byte)3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byte byte0 = (byte)30;
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        MockURI.URI("lload_0", "lload_0", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 5: lload_0:lload_0
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9 k/lv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9 k/lv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte byte0 = (byte)30;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)33;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 171, (int) (byte)124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)53;
      byteArray0[6] = (byte)53;
      Utility.getSignature("1.l??Yh!uM2{#gd'L L");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object object0 = new Object();
      try { 
        Utility.methodSignatureArgumentTypes(">5bm#lr", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >5bm#lr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = "shorz";
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "shorz";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("CQXXo%S;nMCeb{}2y");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)62, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)88;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)88;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-52), (int) (byte) (-52));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      byteArray0[7] = (byte)88;
      byte byte0 = (byte)62;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-52);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit(200, 8);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.signatureToString("Qj3-po7#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qj3-po7#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "YOO|$nd";
      try { 
        Utility.typeOfSignature("YOO|$nd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YOO|$nd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Utility.replace("oOmj|!E0F", "oOmj|!E0F", ")");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      Utility.toHexString(byteArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")";
      stringArray0[1] = "12";
      stringArray0[2] = ")";
      stringArray0[3] = "\nAnnotation(s):\n";
      Utility.methodTypeToSignature("12", stringArray0);
      Utility.isJavaIdentifierPart(')');
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-104);
      byteArray0[0] = (byte) (-104);
      byteArray0[0] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2693, 2693);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = (byte) (-71);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-71);
      byteArray0[3] = (byte)50;
      byteArray0[0] = (byte)16;
      byteArray0[6] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1024, (int) (byte)16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("-7@mbLxt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -7@mbLxt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[7];
      int int0 = (-998);
      ConstantInteger constantInteger0 = new ConstantInteger((-998));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantLong constantLong0 = new ConstantLong((-998));
      constantArray0[1] = (Constant) constantLong0;
      ClassPath classPath0 = new ClassPath("%UcoL1CAp");
      ClassPath classPath1 = new ClassPath(classPath0, "%UcoL1CAp");
      try { 
        classPath1.getInputStream("`1]", "%UcoL1CAp");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Couldn't find: `1]%UcoL1CAp
         //
         verifyException("org.apache.bcel.util.ClassPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = ElementValue.ANNOTATION;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-118);
      byteArray0[2] = (byte)64;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 7, (int) (byte) (-84));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("1]r", stringArray0);
      Utility.classOrInterface(810);
      int int0 = 213;
      Utility.accessToString(213, false);
      String string0 = "Invalid";
      Utility.compactClassName("()L1]r;", "Invalid", false);
      Utility.classOrInterface(810);
      Utility.methodSignatureArgumentTypes("()L1]r;", false);
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("iload_2", true);
      // Undeclared exception!
      try { 
        Charset.forName("public protected final volatile transient");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // public protected final volatile transient
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)14;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "lrem";
      stringArray0[1] = "lrem";
      stringArray0[2] = "lrem";
      stringArray0[3] = "lrem";
      stringArray0[4] = "lrem";
      stringArray0[5] = "lrem";
      stringArray0[6] = "lrem";
      Utility.methodTypeToSignature("lrem", stringArray0);
      Object object0 = new Object();
      Utility.printArray((Object[]) stringArray0, false, false);
      Utility.typeOfSignature("LocalVariableTypeTable");
      Utility.format((byte)103, (-3202), false, '-');
      Utility.printArray((Object[]) stringArray0, false);
      Utility.methodSignatureArgumentTypes("(Llrem;Llrem;Llrem;Llrem;Llrem;Llrem;Llrem;)Llrem;");
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[5];
      stringArray0[2] = "short";
      stringArray0[3] = "short";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2290), 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "athrow");
      Utility.signatureToString("S");
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = (byte) (-87);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "short";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[1] = (Object) "athrow";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "short";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) byteArray0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = object0;
      Utility.printArray(objectArray0, true, false);
      String string0 = "\"?";
      Utility.replace("*5{", "9 .", "\"?");
      try { 
        Utility.typeOfSignature("*5{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.convertString("Invalid signature: ");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Invalid signature: ";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5466, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-79), 51);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore\t\t%57
         // 2:    dstore\t\t%57
         // 4:    dload\t\t%0
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte byte0 = ElementValue.ANNOTATION;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)64, (-2727));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-889), 2785);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("0:    nop\n1:    i2d\n", stringArray0);
      Utility.methodTypeToSignature(")`NaxhAT5^'5HvWO)3", stringArray0);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("G-f7xW]Enr3Q=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G-f7xW]Enr3Q=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.compactClassName("O$#kdFGS&Z?zB", "O$#kdFGS&Z?zB", true);
      byte[] byteArray0 = Utility.decode("O$#kdFGS&Z?zB", false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Utility.getSignature("");
      Utility.compactClassName(" (", "1YahS8", true);
      Utility.methodTypeToSignature("oD,;?l2ho", (String[]) null);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2970), 45);
      ConstantString constantString0 = new ConstantString((-2970));
      constantString0.copy();
      constantString0.copy();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(7, 45);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(4406);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (-2970), 4406);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-107);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 70, 198);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-85);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) byteArray0;
      int int0 = 2720;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 2720);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("Vw?z}*", (String[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      byteArray0[1] = (byte)70;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1734, 3109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 54, (-1527));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "O$#kdFGS&Z?zB";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("O$#kdFGS&Z?zB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O$#kdFGS&Z?zB'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "short";
      Utility.searchOpcode("short");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.clearBit((-1192), (byte)46);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 82, 82);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -67
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.replace("'", "double", "\t\t#");
      Utility.clearBit(153, 153);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-106);
      byteArray0[1] = (byte)23;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6");
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)90;
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(16, (byte)23);
      constantMethodref0.toString();
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(7);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 153, 201);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 236, 188);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-102);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-102), 198);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Utility.isSet((byte)107, 546);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)38;
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte)38;
      int int0 = 5;
      Utility.codeToString(byteArray0, (ConstantPool) null, 5, (-1077));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) byteArray0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")\t");
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Utility.signatureToString(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `)\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-59);
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) fileSystemHandling0;
      Utility.printArray(objectArray0, true, true);
      Utility.typeOfSignature("FxL");
      Utility.classOrInterface((byte) (-59));
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-110);
      byteArray1[2] = (byte) (-76);
      byteArray1[3] = (byte) (-126);
      byteArray1[4] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 97, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[20];
      byteArray0[6] = (byte)117;
      byteArray0[19] = (byte)62;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte) (-92);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteArray0, (ConstantPool) null, (-697), (int) (byte)51);
      Utility.accessToString((int) (byte) (-118));
      Utility.setBit(183, 3403);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = " arg";
      stringArray0[1] = "Lu#[iEo\"@<A<'IO3";
      stringArray0[2] = "long";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-64);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 74, (-380));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)89;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-110);
      byteArray1[1] = (byte) (-110);
      byteArray1[3] = (byte)73;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1618), 69);
      try { 
        Utility.methodSignatureReturnType("0:    f2i\n1:    dup\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    f2i
         // 1:    dup
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BIv[t<:BY0l\"3/le-iNI");
      Utility.typeOfSignature("BIv[t<:BY0l\"3/le-iNI");
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-107);
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pattern.quote("5cf");
      try { 
        Utility.typeOfSignature("7ui~7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7ui~7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-116);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-116), (int) (byte) (-116));
      Utility.convertString("0:    nop\n1:    f2l\n2:    nop\n3:    nop\n");
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-65));
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[0] = (byte) (-84);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 34, (int) (byte)78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.convertString("<illegal type>");
      byte[] byteArray0 = new byte[11];
      byteArray0[3] = (byte)46;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-63);
      byteArray0[5] = (byte) (-67);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 41, (int) (byte) (-67));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, (int) (byte)34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-116);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[2] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), (-1077));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    f2l
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)20;
      byteArray1[2] = (byte)52;
      byteArray1[3] = (byte)20;
      byte byte0 = (byte)30;
      byteArray1[4] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (-349), (-349));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "short";
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[5];
      stringArray0[2] = "short";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)59;
      byte byte0 = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-45);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Utility.isSet((byte) (-96), 18);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2856), 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.signatureToString("S");
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "short";
      stringArray0[1] = "S";
      stringArray0[2] = "S";
      stringArray0[3] = "short";
      stringArray0[4] = "S";
      stringArray0[5] = "S";
      stringArray0[6] = "short";
      stringArray0[7] = "void";
      stringArray0[8] = "S";
      try { 
        Utility.methodTypeToSignature("S", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)42;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-79);
      byteArray1[2] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.compactClassName("boolean", "/qSc=n7A4'", true);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte) (-126);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, (int) (byte) (-126));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "|AO}$V";
      byte[] byteArray0 = Utility.decode("|AO}$V", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "freturn");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 192, 674);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.replace("<illegal type>", "<illegal type>", "<illegal type>");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)127, (int) (byte)39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)22;
      byteArray1[1] = (byte)68;
      byteArray1[2] = (byte)68;
      byteArray1[3] = (byte)22;
      byteArray1[4] = (byte)22;
      byteArray1[5] = (byte) (-100);
      byteArray1[6] = (byte)22;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)68, (int) (byte) (-76));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-120);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 70, (-2108));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.searchOpcode("short");
      Utility.clearBit(4456, (-805));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)35;
      Utility.encode(byteArray0, false);
      MockFile mockFile0 = new MockFile("short");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 50, (int) (byte)97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.compactClassName("ntho=?lT#rPWr(", "ntho=?lT#rPWr(", true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = Utility.decode("ntho=?lT#rPWr(", false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Utility.getSignature("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      int int0 = 1454;
      int int1 = 3651;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1454, 3651);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.convertString("S]_-HE/G");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("ifnull", true);
      Utility.toHexString(byteArray0);
      Utility.typeOfSignature("S]_-HE/G");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "Hwx*t,155cylle\"";
      try { 
        Utility.methodSignatureReturnType("Hwx*t,155cylle\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hwx*t,155cylle\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, (int) (byte)34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(byteSequence0);
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 538, 189);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-83);
      byteArray0[1] = (byte) (-78);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 163, 182);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[14];
      byteArray0[10] = (byte) (-105);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 70, (-2108));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = "dup2_x1";
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("dup2_x1", stringArray0);
      Utility.compactClassName("ifeq");
      Utility.convertString("()Ldup2_x1;");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)124;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 177, 176, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte) (-88);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-88), (-2426));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Object[] objectArray0 = null;
      Object object0 = new Object();
      Utility.printArray((Object[]) null, true, true);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.getSignature("<init>");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-123);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, 1281);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.replace("<illegal type>", "<illegal type>", "<illegal type>");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)92;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-55), (byte) (-123));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantLong constantLong0 = new ConstantLong(1L);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)92, (-132));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.accessToString(134);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Utility.getSignature("&2|H*a?$in{0|hl");
      Utility.methodSignatureReturnType("F-F@");
      byte byte0 = (byte) (-79);
      byte byte1 = (byte)24;
      byte[] byteArray0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-77), (-1225));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte byte0 = ElementValue.ANNOTATION;
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("M9V1oF*$CE'(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M9V1oF*$CE'(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 103, (int) (byte)85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)28;
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, 110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.clearBit((byte)54, 3759);
      Utility.isSet(54, 61);
      String string1 = Constants.ILLEGAL_OPCODE;
      String string2 = "A83QsD=7>BT";
      try { 
        Utility.typeOfSignature("A83QsD=7>BT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A83QsD=7>BT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte byte0 = (byte) (-78);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), (int) (byte) (-111));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-94);
      byteArray0[4] = (byte) (-72);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-72);
      byteArray0[5] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2188, (int) (byte) (-94));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.convertString("RX9CSm");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)48, 57);
      Constant constant0 = constantMethodHandle0.copy();
      constantArray0[0] = constant0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)54);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 12342. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      Pattern.quote("<illegal opcode>");
      Utility.accessToString(102);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-94);
      Utility.equals(byteArray1, byteArray0);
      try { 
        Utility.methodSignatureReturnType("Q<illegal opcode>E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q<illegal opcode>E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      String string1 = Constants.CONSTRUCTOR_NAME;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = (byte) (-71);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 222, (int) (byte)16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte)98;
      byteArray0[8] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 201, (int) (byte)24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[22];
      byteArray0[16] = (byte) (-107);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-107), 79);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   fcmpl\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n");
      String string0 = "G\\'ar";
      String string1 = "Te_n'";
      Locale locale0 = new Locale("G'ar", "G'ar", "Te_n'");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureReturnType("G'ar");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G'ar'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.compactClassName("\\");
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-112);
      byteArray0[7] = (byte) (-112);
      byteArray0[8] = (byte)124;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1458, (int) (byte)124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-116);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[2] = (byte) (-82);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-82), (-1077));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:", "ui$P%,c_,\"4)sCG", "2<cA(;]MoR+", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-83);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3099), 5);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-108);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-108));
      try { 
        Utility.methodSignatureArgumentTypes("0:    nop\n1:    aconst_null\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    lcmp\n5:    lcmp\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    aconst_null
         // 2:    <illegal opcode>
         // 3:    <illegal opcode>
         // 4:    lcmp
         // 5:    lcmp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      String string1 = Constants.ILLEGAL_OPCODE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(10, 10);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-96);
      byteArray0[0] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(0L);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 136, 986);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      String string1 = Constants.CONSTRUCTOR_NAME;
      ConstantPool constantPool0 = null;
      Utility.compactClassName("u");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-112);
      Utility.compactClassName("java.lang.BIv[t<:BY0l\"3.le-iNI");
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1509), (int) (byte) (-101));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("d._vCts8;BtYM", "java.lang.BIv[t<:BY0l\"3.le-iNI", "short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: d._vCts8;BtYM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      // Undeclared exception!
      try { 
        Utility.signatureToString("Tyh?9^` B3xUEn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Tyh?9^` B3xUEn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte byte0 = ElementValue.ANNOTATION;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte) (-85);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte)64;
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, (int) (byte)64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip(0L);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1666));
      try { 
        Utility.typeOfSignature("4KF<?x'b^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4KF<?x'b^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet((byte)46, (byte)46);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("=Hq}5:BNJ_n*}>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =Hq}5:BNJ_n*}>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.replace("boolean", "-`n&aD`:xNq81scFA", "boolean");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-48);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 179, (-2188));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte byte0 = ElementValue.ANNOTATION;
      byte[] byteArray0 = Utility.decode("U$", false);
      Utility.compactClassName("EnjR");
      ConstantPool constantPool0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = (-584);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-79), (-584));
      byte[] byteArray1 = Utility.decode("e", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Object object0 = new Object();
      Utility.compactClassName("G];mRkroO");
      int int1 = 136;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 224, 136);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      byteArray0[6] = (byte) (-71);
      byteArray0[3] = (byte) (-71);
      byteArray0[0] = (byte)23;
      byteArray0[6] = (byte) (-71);
      Utility.replace("L,a@A36/jNB)", "getstatic", "<illegal type>");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 97, (-544));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-127);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "'";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 252, (int) (byte) (-84));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-81);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1752, 1555);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-61);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-61), (int) (byte) (-128));
      Utility.searchOpcode("Zl\"QyI4|H^kQcf");
      Object object0 = new Object();
      Utility.replace("'", "JN\",i5PuHMe9_k#uf4", "vwus/Lsv");
      Utility.decode("Gu,>${CO|o9YhS!Hz", false);
      String string1 = "\"!|}E";
      try { 
        Utility.methodSignatureReturnType("\"!|}E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"!|}E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Constants.CONSTRUCTOR_NAME;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Utility.printArray((Object[]) null, false, true);
      Utility.searchOpcode("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)25, 168);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Utility.setBit((-1956020828), (-1956020828));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte) (-4);
      Constant[] constantArray0 = new Constant[5];
      ConstantFloat constantFloat0 = new ConstantFloat((-3477.9788F));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantInteger constantInteger0 = new ConstantInteger(dataInputStream0);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1915484589), (-1232));
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-4), (byte) (-4));
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 125, 73, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = "FBV)`";
      Utility.getSignature("FBV)`");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-109);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), 2736);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)92, (byte) (-55));
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantMethodHandle0.accept(emptyVisitor0);
      constantMethodHandle0.toString();
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantLong constantLong0 = new ConstantLong((byte) (-55));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)92;
      Utility.encode(byteArray0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\t\t%");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-55));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      int int0 = Pattern.COMMENTS;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(n!Q", "(n!Q", "\t\t%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `n!Q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-64), (int) (byte) (-64));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
