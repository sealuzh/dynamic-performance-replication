/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 18:31:44 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.URI;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('c');
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("The list of prefixes must not be null", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The list of prefixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "impQepG";
      Utility.getSignature("impQepG");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-55));
      constantArray0[1] = (Constant) constantInteger0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantClass constantClass0 = new ConstantClass((byte) (-59));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[3] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 43726. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(".H$!IL1Qcn4\")", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.skip(0L);
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("-M/x()35=Jsmix%e");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(46, 46);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1761), (-1761));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      int int0 = 1661;
      Utility.setBit(180, (-2037));
      try { 
        Utility.typeOfSignature("ireturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ireturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("4~MA=[2M^U,o", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[2M^U,o
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-59);
      byteArray0[7] = (byte)71;
      byteArray0[2] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-59), (byte)71);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 39. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = Utility.replace("impQepG", "impQepG", "impQepG");
      assertEquals("impQepG", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "impQepG";
      objectArray0[1] = (Object) "impQepG";
      objectArray0[2] = (Object) "impQepG";
      objectArray0[3] = (Object) "impQepG";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"impQepG\", \"impQepG\", \"impQepG\", \"impQepG\"}", string1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('6');
      assertTrue(boolean0);
      
      String string0 = Utility.methodTypeToSignature("F\"G}V5y+x-vZiQ", (String[]) null);
      assertEquals("()LF\"G}V5y+x-vZiQ;", string0);
      
      Utility.signatureToString("F\"G}V5y+x-vZiQ");
      byte byte0 = Utility.typeOfMethodSignature("()LF\"G}V5y+x-vZiQ;");
      assertEquals((byte)14, byte0);
      
      int int0 = Utility.clearBit(1667, 96);
      assertEquals(1666, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("StackMap");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.getSignature("g:{zZ\"85e7sS'Tb+");
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3, 2056);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[r*:/'m");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@_hPpK{Z -o&x<|9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @_hPpK{Z -o&x<|9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)20;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?>...");
      Utility.compactClassName("Cj(`v]I_s!${p", true);
      byte[] byteArray1 = new byte[0];
      Utility.equals(byteArray1, byteArray1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.isJavaIdentifierPart('L');
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~bG");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)7;
      String string0 = Utility.compactClassName("FULL", false);
      assertEquals("FULL", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";lY9mma7QAvKDZG@0";
      stringArray0[1] = "~bG";
      stringArray0[2] = "FULL";
      Utility.methodTypeToSignature("FULL", stringArray0);
      byte[] byteArray1 = Utility.decode("FULL", false);
      assertArrayEquals(new byte[] {(byte)70, (byte)85, (byte)76, (byte)76}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(";zfQ={DOWQJ!H", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readDouble();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("pop", string0);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-105);
      byteArray1[1] = (byte)84;
      byteArray1[2] = (byte)76;
      byteArray1[3] = (byte) (-74);
      String string1 = Utility.toHexString(byteArray1);
      assertEquals("97 54 4c b6", string1);
      
      Object[] objectArray0 = new Object[0];
      String string2 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.io.Serializable");
      String string0 = Utility.compactClassName("z`am3uO.NL|eIP", "", true);
      assertEquals("z`am3uO.NL|eIP", string0);
      
      String string1 = Utility.accessToString(733, true);
      assertEquals("public protected static final volatile transient", string1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(BtkZaa-,9[+Kf-<", "(BtkZaa-,9[+Kf-<", "(BtkZaa-,9[+Kf-<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `tkZaa-,9[+Kf-<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = Utility.format(1076, (-737), false, 'C');
      assertEquals("1076", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte)60;
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2386, (-1171));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantString constantString0 = new ConstantString((byte)53);
      constantArray0[1] = (Constant) constantString0;
      String string0 = Utility.methodTypeToSignature("CHOP ", (String[]) null);
      assertEquals("()LCHOP;", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "()LCHOP;";
      objectArray0[1] = (Object) "()LCHOP;";
      objectArray0[2] = (Object) (byte)54;
      String string1 = Utility.signatureToString("CHOP ");
      assertEquals("char", string1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "R@-TIvI");
      Utility.isJavaIdentifierPart('.');
      Utility.setBit((-153), (-153));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("checkcast", "R@-TIvI", "Kjg_Ixi2_;Dbr>A.(i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: checkcast
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('6');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-72);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)53;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("ee 03 84 b8 00 07 00 35", string2);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Kr?*\"Uhc{}9/YW>m", false);
      Utility.classOrInterface(59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1753, 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-65);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-65), 167);
      assertEquals("0:    athrow\n", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-100), (int) (byte) (-100));
      assertEquals("0:    ifge\t\t#-25600\n3:    nop\n", string0);
      
      String string1 = Utility.convertString("0:    ifge\t\t#-25600\n3:    nop\n");
      assertEquals("0:    ifge\t\t#-25600\\n3:    nop\\n", string1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(65, 65);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("V", false);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.classOrInterface(102);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("", "class", true);
      Utility.searchOpcode("class");
      Utility.getSignature("?dZrv|M*-W");
      byte[] byteArray0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L?dZrv|M*-W;");
      Utility.accessToString(102, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("):\n");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "?dZrv|M*-W";
      objectArray0[3] = (Object) "?dZrv|M*-W";
      objectArray0[4] = (Object) "?dZrv|M*-W";
      objectArray0[5] = (Object) "class";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('!');
      Utility.convertString("\b");
      String string0 = ")sagfe\\Ea?";
      String string1 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")");
      // Undeclared exception!
      try { 
        Utility.replace("org.apache.bcel.classfile.Utility$1", (String) null, "char");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte) (-123);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 5, 2773, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48261. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("goto_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `goto_w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("LocalVariableTable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariableTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("2y8L|\u0003", (String[]) null);
      assertEquals("()L2y8L|\u0003;", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-59), (byte)71);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 18196. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char char0 = '6';
      Utility.isJavaIdentifierPart('6');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-72);
      Utility.setBit(239, (byte) (-72));
      try { 
        Utility.methodSignatureArgumentTypes("hR>p", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: hR>p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-113);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-113), (-1114));
      assertEquals("0:    d2l\n", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.classOrInterface(102);
      String string0 = "";
      boolean boolean0 = true;
      Utility.compactClassName("", "class", true);
      Utility.searchOpcode("class");
      Utility.getSignature("?dZrv|M*-W");
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (short) (-1), (int) (short) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-59);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)81;
      byteArray1[1] = (byte)81;
      byteArray1[2] = (byte) (-47);
      byteArray1[3] = (byte) (-111);
      Utility.encode(byteArray1, false);
      Utility.decode("QQ$d1$91", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("QQ$d1$91", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QQ$d1$91'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      short short0 = Utility.searchOpcode("impdep2");
      assertEquals((short)255, short0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)9;
      Utility.encode(byteArray0, false);
      Utility.decode("$ff$_$k$J", false);
      String string0 = Utility.compactClassName("impdep2", false);
      assertEquals("impdep2", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("[$kQ?p%AyLpuY", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals(12, byteArray0.length);
      assertEquals("dup_x2", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = Utility.clearBit((-481), (-4576));
      assertEquals((-482), int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("|0gU1-nDe3^d%Cj$,@", false);
      assertEquals(17, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("|0gU1-nDe3^d%Cj$,@", "float", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(155, 552);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[1] = (byte)6;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteSequence0.markSupported();
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)6, (int) (byte)6, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.classOrInterface(1186);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)37;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)37, (int) (byte)37);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('6');
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface((-307));
      assertEquals("interface", string0);
      
      byte[] byteArray0 = Utility.decode("interface", false);
      String string1 = Utility.getSignature("byte");
      assertEquals("B", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)110, (byte)116, (byte)101, (byte)114, (byte)102, (byte)97, (byte)99, (byte)101}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      int int0 = 1403;
      Utility.format('6', 1403, true, 'N');
      try { 
        Utility.typeOfSignature("3r2~(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3r2~(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.signatureToString("Sensitive", false);
      String string0 = Utility.replace("X3>ff*U/Od0zD5#yV>p", "Sensitive", "short");
      assertEquals("X3>ff*U/Od0zD5#yV>p", string0);
      
      int int0 = Utility.setBit((byte)0, (byte)54);
      assertEquals(4194304, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)26, (int) (byte) (-128));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = Utility.getSignature("\t");
      assertEquals("L;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      Utility.compactClassName("\t", "\t", true);
      try { 
        Utility.typeOfSignature("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(200, false);
      try { 
        Utility.typeOfSignature("static volatile transient");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: static volatile transient
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-59);
      byteArray0[7] = (byte)71;
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)20, (byte)71);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      constantLong0.toString();
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lookupswitch", "lookupswitch", "lookupswitch", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lookupswitch
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.close();
      String string0 = Utility.codeToString(byteSequence2, constantPool0, false);
      assertEquals("d2l", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Object[] objectArray0 = new Object[1];
      String string0 = Utility.format(75, 1366, true, '-');
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `n'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("The list of prefixes must not be null", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantInteger constantInteger0 = new ConstantInteger((-149));
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1254, (-3026));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-62);
      byteArray1[1] = (byte) (-70);
      byteArray1[2] = (byte) (-119);
      byteArray1[3] = (byte) (-119);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("l2f", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)68;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-263), (int) (byte)95);
      assertEquals("0:    swap\n1:    swap\n2:    <illegal opcode>\n3:    impdep2\n4:    fstore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("V", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("V", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("sastore", string1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("]yib/j9%zN@.^qoZ)", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 152, 152);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-59);
      String string0 = Utility.format(2599, (byte)71, false, '^');
      assertEquals("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^2599", string0);
      
      byte byte0 = Utility.typeOfSignature("DyMe*Vhn.'@dZv&4");
      assertEquals((byte)7, byte0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "DyMe*Vhn.'@dZv&4";
      objectArray0[1] = (Object) (byte) (-59);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(1025);
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.compactClassName("Byte code error: ", "org.apache.bcel.classfile.Utility$JavaWriter", true);
      assertEquals("Byte code error: ", string1);
      
      byte byte1 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(1693, false);
      try { 
        Utility.typeOfMethodSignature("public protected static final transient interface abstract");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public protected static final transient interface abstract
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("C58lfJ4g8", stringArray0);
      Utility.methodSignatureArgumentTypes("()LC58lfJ4g8;", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1253, (byte)51);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("C58lfJ4g8", stringArray0);
      String string0 = Utility.methodTypeToSignature("LineNumber(", stringArray0);
      assertEquals("()LLineNumber(;", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      Utility.getSignature("?dZrv|M*-W");
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-18);
      byteArray1[1] = (byte) (-18);
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-18), (int) (byte) (-18));
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-69);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("bb", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-69), (int) (byte) (-69));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2c", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(".H$!IL1Qcn4\")", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 46, 90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)44, (int) (byte)44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("istore\t\t%163", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte) (-58);
      byteArray0[8] = (byte) (-58);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = Utility.getSignature("\t");
      assertEquals("L;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byte byte0 = Utility.typeOfSignature("L;");
      assertEquals((byte)14, byte0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      boolean boolean0 = Utility.isSet((byte)0, (byte)14);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit(2980, 3755);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-69);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-69), (int) (byte) (-69));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, false);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.accessToString(196);
      assertEquals("protected volatile transient", string0);
      
      byte[] byteArray0 = Utility.decode("protected volatile transient", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(196, 2736);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      byteSequence0.close();
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong1;
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("irem", string1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      try { 
        Utility.methodSignatureToString("LineNumber(", "LineNumber(", "LineNumber(", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LineNumber(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)38;
      String string0 = Utility.accessToString((-632));
      assertEquals("static transient native abstract strictfp synthetic annotation enum", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-632), 97);
      assertEquals("0:    arraylength\n1:    freturn\n2:    dload_0\n3:    nop\n4:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Utility.classOrInterface(189);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)37;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-5), 3215);
      assertEquals("0:    lload_1\n1:    fload_3\n", string1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utility.getSignature("\t");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature(".H$!IL1Qcn4\"m)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .H$!IL1Qcn4\"m)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("1$V$P8K91\"91MQ(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1$V$P8K91\"91MQ(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "L;";
      String string1 = Utility.signatureToString("L;", true);
      assertEquals("", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)123;
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$d4$M$5b$f4$S$7b", string2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        Utility.typeOfSignature("R@-TIvI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R@-TIvI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-59);
      byteArray0[7] = (byte)71;
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)20, (byte)71);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodHandle0;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "class", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString((-1138));
      Utility.isSet((-1138), (-659));
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(201, (-731));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      byteArray0[7] = (byte) (-6);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)33;
      byteArray0[5] = (byte) (-25);
      byteArray0[7] = (byte)66;
      byteArray0[7] = (byte)110;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)66, (int) (byte) (-25), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        Utility.typeOfSignature("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Oj9hR##KADm/Q`>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Oj9hR##KADm/Q`>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.compactClassName("{RJV0a;&56[\"44rW", false);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Utility.decode("double", false);
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)97;
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("OP;!WK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OP;!WK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("R@-TIvI", false);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      byte byte0 = Utility.typeOfSignature("TLnADtAoMG");
      assertEquals((byte)14, byte0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("52 40 2d 54 49 76 49", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dastore", string2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("UTLl Z>Q01.wg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UTLl Z>Q01.wg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, true);
      assertEquals("ifle\t\t#-24930", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = Utility.getSignature("M>t-lli{rI");
      assertEquals("LM>t-lli{rI;", string0);
      
      byte byte0 = Utility.typeOfSignature("LM>t-lli{rI;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("R@-TIvI", false);
      String string0 = Utility.getSignature("R@-TIvI");
      assertEquals("LR@-TIvI;", string0);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)84;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)82, (byte)64, (byte)45, (byte)84, (byte)73, (byte)118, (byte)73}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-61));
      Utility.getSignature("Q.\"(>0c>L");
      Utility.compactClassName("LQ/\"(>0c>L;", "LQ/\"(>0c>L;", false);
      try { 
        Utility.typeOfSignature("Q.\"(>0c>L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q.\"(>0c>L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Duy0tp`R]< H$Rq-zgn");
      assertEquals((byte)7, byte0);
      
      String string0 = Utility.convertString("G^w_A9u*x]D{$_.+!r&");
      assertEquals("G^w_A9u*x]D{$_.+!r&", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte) (-99);
      byteArray0[8] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("if_icmpne\t\t#-21753", string1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.classOrInterface((-275));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iand", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Utility.typeOfSignature("F*J-,S:fnBq&qgcv");
      Utility.isJavaIdentifierPart('h');
      // Undeclared exception!
      try { 
        Utility.signatureToString("instanceof", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `instanceof'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.classOrInterface(2698);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lxor", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("@_hPpK{Z/ -o&x<|9", false);
      Utility.encode(byteArray0, false);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(";zfQ={DOWQJ!H", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("istore_0", string0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("ishr", string1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      Utility.decode("", false);
      Utility.isJavaIdentifierPart('^');
      Utility.accessToString((int) (byte) (-18));
      Utility.decode("private protected static synchronized volatile transient native interface abstract strictfp synthetic annotation enum", false);
      Utility.compactClassName("", false);
      Utility.format((byte) (-18), 2523, false, '\'');
      Constant[] constantArray0 = new Constant[9];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1268, (-3328));
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger(2523);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-3328), (byte) (-18));
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantLong constantLong0 = new ConstantLong((byte) (-18));
      constantArray0[6] = (Constant) constantLong0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("");
      constantArray0[7] = (Constant) constantUtf8_1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1268, (-2030));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[8] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-59), (byte) (-59));
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool0);
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = Utility.compactClassName("new");
      assertEquals("new", string0);
      
      int int0 = Utility.clearBit(2353, 2353);
      assertEquals(2353, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "R@-TIvI";
      try { 
        Utility.methodSignatureReturnType("R@-TIvI", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R@-TIvI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(637, 637);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantLong constantLong0 = new ConstantLong(637);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref0;
      constantArray0[4] = (Constant) constantFieldref0;
      constantArray0[5] = (Constant) constantFieldref0;
      constantArray0[6] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-105);
      constantPool0.toString();
      byteArray0[2] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aload\t\t%151", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)2;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte) (-116);
      byteArray0[8] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(159);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Invalid Stack map table tag: ", false);
      String string0 = Utility.classOrInterface((-135));
      Utility.codeToString(byteArray0, (ConstantPool) null, (-135), (-135));
      String string1 = Utility.compactClassName("Invalid Stack map table tag: ", "impQepG", true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte) (-94);
      byteArray0[8] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<i^a`ED>=d:_J_;V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `i^a`ED>=d:_J_;V'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "m .k";
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = Utility.getSignature("g:{zZ\"85e7sS'Tb+");
      assertEquals("Lg:{zZ\"85e7sS'Tb+;", string0);
      
      String string1 = Utility.classOrInterface(461);
      assertEquals("class", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)92;
      byteArray0[3] = (byte)3;
      String string2 = Utility.accessToString(81, false);
      assertEquals("public final volatile", string2);
      
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, (int) (byte)92);
      assertEquals("5:    nop\n6:    nop\n7:    nop\n", string3);
      
      Utility.accessToString((int) (byte)92, false);
      String string4 = Utility.format((byte)92, 215, false, ',');
      assertEquals(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,92", string4);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte) (-112);
      byteArray0[8] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("bipush\t\t-92", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("byte", (String[]) null);
      assertEquals("()B", string0);
      
      String string1 = Utility.compactClassName(".H$!IL1Qcn4\"m)", false);
      assertEquals(".H$!IL1Qcn4\"m)", string1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Utility.typeOfSignature("Illegally nested brackets:");
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9,&WI7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9,&WI7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.getSignature("\t");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)44;
      Utility.methodSignatureReturnType("L;", true);
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(180, 195);
      constantFieldref0.copy();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.signatureToString("Sensitive", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)10;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.accessToString((int) (byte)0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 170, 170);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "?>...";
      String string1 = "\t\t";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("?>...", "\t\t", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "V";
      Utility.decode("V", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)69;
      byteArray0[8] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 38, (int) (byte)47, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = Utility.replace("impdep2", "impdep2", "impdep2");
      assertEquals("impdep2", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(200, false);
      Utility.fillup("static volatile transient", 200, false, 'I');
      Utility.typeOfSignature("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIstatic volatile transient");
      Utility.printArray((Object[]) null, false, false);
      Utility.convertString("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIstatic volatile transient");
      int int0 = 490;
      int int1 = 340;
      Utility.setBit(490, 340);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[]", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-1171));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.format((-1171), (-1171), true, 'W');
      try { 
        Utility.typeOfSignature("-1171");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -1171
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)90;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)9, (int) (byte)90, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)46;
      Utility.convertString("\b");
      Utility.replace("\b", ")sagfeEa?", ")sagfeEa?");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "\b";
      stringArray0[2] = "m";
      stringArray0[3] = "\b";
      stringArray0[4] = "\b";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("fL'p$^33jTH;[OPHss", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[OPHss
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(155, 552);
      constantInvokeDynamic0.setNameAndTypeIndex(155);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-99);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 180, 163, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('6');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("null", string0);
      
      String string1 = Utility.accessToString((-4036));
      assertEquals("protected static final synchronized synthetic annotation enum", string1);
      
      String string2 = Utility.methodSignatureReturnType("Byte code error: ");
      assertEquals("byte", string2);
      
      String string3 = Utility.format(73, (-3125), false, '6');
      assertEquals("73", string3);
      
      Utility.fillup(">bj\"n5K_3L", 2233, true, '6');
      short short0 = Utility.searchOpcode("\tdefault = ");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Utility.accessToString(200);
      Utility.fillup("static volatile transient", 200, false, 'I');
      Utility.typeOfSignature("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIstatic volatile transient");
      Utility.printArray((Object[]) null, false, false);
      Utility.convertString("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIstatic volatile transient");
      Utility.convertString("Uk6Lsxj|X=6Cp*`2");
      Utility.replace("static volatile transient", "Nz_L#uV", "Invalid signature: ");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "static volatile transient";
      stringArray0[1] = null;
      stringArray0[2] = "m";
      stringArray0[3] = "\b";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("CC=", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 189;
      Utility.classOrInterface(189);
      Utility.isJavaIdentifierPart('d');
      Utility.signatureToString("V");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-20);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Kr?*\"Uhc{}9/YW>m", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Kr?*\"Uhc{}9/YW>m'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.io.Serializable");
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-99);
      byteArray0[7] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString(">", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2737, 68);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.readBoolean();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.methodSignatureArgumentTypes("dstore_1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dstore_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~bG");
      Utility.classOrInterface(65536);
      Utility.decode("class", false);
      String string0 = "Type of ConstValue invalid: ";
      Utility.getSignature("Type of ConstValue invalid: ");
      String string1 = "m\\Iw~";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "mIw~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)30;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("68 0a 1e", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.compactClassName("imul", "r#]>_ymmew", false);
      assertEquals("imul", string1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.classOrInterface(189);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "V";
      stringArray0[1] = "putfield";
      stringArray0[2] = "putfield";
      stringArray0[3] = "putfield";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)64;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 576, (int) (byte) (-60), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("getfield", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-90);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("if_acmpne\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Utility.setBit(171, 171);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.getSignature("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Utility.getSignature("g:{zZ\"85e7sS'Tb+");
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3, 2056);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "o1nDUAId{]=t|o";
      stringArray0[1] = "Lg:{zZ\"85e7sS'Tb+;";
      stringArray0[2] = "o1nDUAId{]=t|o";
      stringArray0[3] = "g:{zZ\"85e7sS'Tb+";
      Utility.methodTypeToSignature("o1nDUAId{]=t|o", stringArray0);
      try { 
        Utility.typeOfSignature("@_hPpK{Z -o&x<|9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @_hPpK{Z -o&x<|9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "\"#5T%@S)}R<A~t";
      boolean boolean0 = true;
      // Undeclared exception!
      Utility.fillup("\"#5T%@S)}R<A~t", 16384, true, '~');
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(63, 63);
      byte[] byteArray0 = Utility.decode("P,j43=o.iRJc~<&&'n", false);
      String string0 = Utility.classOrInterface((-1663));
      assertEquals("class", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-866), 144);
      assertEquals("0:    lastore\n1:    aload_2\n2:    fmul\n3:    caload\n4:    baload\n5:    istore_2\n6:    ddiv\n7:    iaload\n8:    lmul\n9:    dastore\n10:   dstore_3\n11:   dadd\n12:   iand\n13:   istore_1\n14:   dload_0\n15:   dload_0\n16:   dload_1\n17:   fdiv\n", string1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utility.accessToString(250);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.fillup("private static final synchronized volatile transient", 250, true, '0');
      try { 
        Utility.typeOfSignature("9&WI7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9&WI7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~bG");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("C58lfJ4g8", stringArray0);
      assertEquals("()LC58lfJ4g8;", string0);
      
      Utility.methodSignatureArgumentTypes("()LC58lfJ4g8;", false);
      int int0 = Utility.setBit(98, 125);
      assertEquals(536871010, int0);
      
      String string1 = Utility.signatureToString("L)sagfeEa?;V");
      assertEquals(")sagfeEa?", string1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = (-648);
      Utility.clearBit((-648), (-648));
      Utility.isJavaIdentifierPart('@');
      try { 
        Utility.methodSignatureReturnType("z^Y1[p3hN=(_ZwXz P", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `z^Y1[p3hN=(_ZwXz P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("c4 c4 00 00 00 00 00 00 00 00 00 00 00 00", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("wide\t(wide)", string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "wide\t(wide)";
      stringArray0[1] = "wide\t(wide)";
      stringArray0[2] = "wide\t(wide)";
      stringArray0[3] = "c4 c4 00 00 00 00 00 00 00 00 00 00 00 00";
      stringArray0[4] = "wide\t(wide)";
      stringArray0[5] = "wide\t(wide)";
      stringArray0[6] = "c4 c4 00 00 00 00 00 00 00 00 00 00 00 00";
      stringArray0[7] = "wide\t(wide)";
      String string2 = Utility.methodTypeToSignature("wide\t(wide)", stringArray0);
      assertEquals("(Lwide;Lwide;Lwide;Lc4;Lwide;Lwide;Lc4;Lwide;)Lwide;", string2);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-114);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-114);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte) (-114));
      assertEquals("0:    nop\n1:    lrem\n2:    d2i\n", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Utility.isJavaIdentifierPart('<');
      Utility.isJavaIdentifierPart('e');
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('I');
      Object[] objectArray0 = new Object[1];
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("null", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-18);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-18), 4, false);
      assertEquals("0:    <illegal opcode>\n1:    nop\n2:    nop\n3:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.classOrInterface((-14));
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        Utility.decode("cUnc k$0i", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0i\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("u>S>,>x3U", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantLong constantLong0 = new ConstantLong(117);
      Constant.setComparator((BCELComparator) null);
      constantLong0.copy();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_3", string0);
      
      short short0 = Utility.searchOpcode("<illegal opcode>");
      assertEquals((short)203, short0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 180;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(180, 180);
      try { 
        Utility.methodSignatureReturnType("NaY-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NaY-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 1403;
      String string0 = Utility.format('+', 1403, true, 'V');
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Utility.fillup("ret", 260, true, 'X');
      MockFile mockFile0 = new MockFile(",i#3Z{");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) ",i#3Z{";
      objectArray0[2] = (Object) "ret";
      objectArray0[3] = (Object) "ret";
      objectArray0[4] = (Object) mockPrintWriter1;
      objectArray0[5] = (Object) mockPrintWriter1;
      objectArray0[6] = (Object) "retXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter1.printf((Locale) null, "ret", objectArray0);
      Utility.printArray(printWriter0, (Object[]) null);
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.accessToString(196);
      assertEquals("protected volatile transient", string0);
      
      byte[] byteArray0 = Utility.decode("protected volatile transient", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(196, 2736);
      ConstantInteger constantInteger0 = new ConstantInteger(196);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2736, 39);
      constantInteger0.clone();
      ConstantString constantString0 = new ConstantString(151);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInteger0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      String string1 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("ddiv", string1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-3026), (-3026));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence3, constantPool0, false);
      assertEquals("ifnull\t\t#-28416", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString((-1138), true);
      Utility.isSet((-1138), (-659));
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Xah)C{bNd~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xah)C{bNd~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Utility.isJavaIdentifierPart('v');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 187, (int) (byte) (-73));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(".H$!IL1Qcn4\")", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.skip(0L);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = (ConstantLong)constantLong0.copy();
      assertEquals(5188227362324570990L, constantLong1.getBytes());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("'", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.getSignature("");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "L;";
      String string0 = Utility.signatureToString("L;", true);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte) (-18);
      byteArray0[8] = (byte) (-18);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString(1257);
      Utility.methodSignatureReturnType("Byte code error: ");
      Utility.replace("#", "5_vM/*", "invokespecial");
      String string0 = "dreturn";
      try { 
        Utility.methodSignatureArgumentTypes("dreturn", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = Utility.compactClassName("GNeF]!/?icA.#HM>", "GNeF]!/?icA.#HM>", true);
      assertEquals("GNeF]!.?icA.#HM>", string0);
      
      byte[] byteArray0 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-107);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-3493), (-395), true);
      assertEquals("0:    daload\n1:    fcmpl\n", string1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = Utility.classOrInterface(189);
      assertEquals("class", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "V";
      stringArray0[1] = "putfield";
      stringArray0[2] = "putfield";
      stringArray0[3] = "putfield";
      stringArray0[4] = "class";
      stringArray0[5] = "class";
      String string1 = Utility.methodTypeToSignature("putfield", stringArray0);
      assertEquals("(LV;Lputfield;Lputfield;Lputfield;Lclass;Lclass;)Lputfield;", string1);
      
      Utility.classOrInterface(3294);
      int int0 = Utility.clearBit(7, 189);
      assertEquals(7, int0);
      
      String string2 = Utility.compactClassName("\t<", "putfield", true);
      assertEquals("\t<", string2);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('h');
      assertTrue(boolean0);
      
      Utility.signatureToString("V", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte) (-59);
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("7d 02 c4 01 92 b9 5d c5", string3);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-59);
      String string0 = Utility.format(2599, (byte)71, false, 'N');
      assertEquals("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN2599", string0);
      
      byte byte0 = Utility.typeOfSignature("DyMe*Vhn.'@dZv&4");
      assertEquals((byte)7, byte0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "DyMe*Vhn.'@dZv&4";
      objectArray0[1] = (Object) (byte) (-59);
      objectArray0[2] = (Object) "DyMe*Vhn.'@dZv&4";
      objectArray0[3] = (Object) (byte) (-59);
      objectArray0[4] = (Object) (byte) (-59);
      objectArray0[5] = (Object) "DyMe*Vhn.'@dZv&4";
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals("DyMe*Vhn.'@dZv&4, -59, DyMe*Vhn.'@dZv&4, -59, -59, DyMe*Vhn.'@dZv&4", string1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload\t\t%170", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)126;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte) (-1);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), (-1171), true);
      assertEquals("0:    dload_2\n1:    <illegal opcode>\n2:    dcmpl\n3:    aload_2\n4:    iand\n5:    nop\n6:    fconst_1\n7:    impdep2\n", string0);
      
      String string1 = Utility.getSignature("0:    dload_2\n1:    <illegal opcode>\n2:    dcmpl\n3:    aload_2\n4:    iand\n5:    nop\n6:    fconst_1\n7:    impdep2\n");
      assertEquals("L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Duy0tp`R]< H$Rq-zgn");
      assertEquals((byte)7, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('h');
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("Duy0tp`R]< H$Rq-zgn", "Duy0tp`R]< H$Rq-zgn", true);
      assertEquals("", string0);
      
      String string1 = Utility.convertString("M|_!V/e\".$,;2=&WC");
      assertEquals("M|_!V/e\\\".$,;2=&WC", string1);
      
      String string2 = Utility.accessToString((int) (byte)7);
      assertEquals("public private protected", string2);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Utility.classOrInterface(189);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("8j5pm", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-59);
      byteArray1[1] = (byte)115;
      byteArray1[2] = (byte) (-59);
      byteArray1[3] = (byte) (-59);
      byteArray1[4] = (byte) (-59);
      byteArray1[5] = (byte) (-59);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, false);
      assertEquals("fstore\t\t%106", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('6');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)53;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      try { 
        Utility.methodSignatureArgumentTypes("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      try { 
        Utility.typeOfSignature("PQ6_K+~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PQ6_K+~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("C58lfJ4g8", stringArray0);
      Utility.methodSignatureArgumentTypes("()LC58lfJ4g8;", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte) (-60);
      byteArray0[8] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1), (byte) (-2));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)114);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2TY@(bwdE");
      byte[] byteArray0 = Utility.decode("]yib/j9%zN@.^qoZ)", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(17, byteArray0.length);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(155, 552);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-99);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("if_acmpeq\t\t#-2983", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)71, 1138);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      Constant constant0 = constantLong0.copy();
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)20;
      byteArray1[1] = (byte)71;
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = constant0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantLong1;
      constantArray0[3] = (Constant) constantLong0;
      constantArray0[4] = constant0;
      constantArray0[5] = (Constant) constantLong0;
      constantArray0[6] = constant0;
      constantArray0[7] = constant0;
      constantPool0.setConstantPool(constantArray0);
      byteArray1[2] = (byte)20;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("WI7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WI7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("ovGQ%b>s4i'@6|8", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ovGQ%b>s4i'@6|8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("R@-TIvI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R@-TIvI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(169, 169);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      Constant[] constantArray1 = new Constant[9];
      constantArray1[0] = (Constant) constantInvokeDynamic0;
      constantArray1[1] = (Constant) constantInvokeDynamic0;
      constantArray1[2] = (Constant) constantInvokeDynamic0;
      constantArray1[3] = (Constant) constantInvokeDynamic0;
      constantArray1[4] = (Constant) constantInvokeDynamic0;
      constantArray1[5] = (Constant) constantInvokeDynamic0;
      constantArray1[6] = (Constant) constantInvokeDynamic0;
      constantArray1[7] = (Constant) constantInvokeDynamic0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray1[8] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.classOrInterface((-14));
      byte[] byteArray0 = new byte[6];
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)18;
      byteArray1[1] = (byte)18;
      byteArray1[2] = (byte)18;
      byteArray1[3] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2i", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)40;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2249), 287);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 178, (-795), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "~bG";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~bG");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", (String) null, "~bG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "Y,E21VzP*uw";
      Utility.convertString("Y,E21VzP*uw");
      try { 
        Utility.typeOfSignature("Y,E21VzP*uw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y,E21VzP*uw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "uO|4EVnM>[d}#4k}";
      Utility.searchOpcode("uO|4EVnM>[d}#4k}");
      // Undeclared exception!
      try { 
        Utility.getSignature("uO|4EVnM>[d}#4k}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[d}#4k}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-93);
      byteArray0[8] = (byte)0;
      byteArray0[8] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)0, (byte) (-93));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      byteSequence0.close();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2328);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      constantLong1.dump(dataOutputStream0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureToString("double", "fstore_0", "double", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("k[<}'9p", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dmul", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte) (-18);
      byteArray0[1] = (byte)3;
      Utility.encode(byteArray0, false);
      Object[] objectArray1 = new Object[4];
      Object object0 = new Object();
      objectArray1[0] = object0;
      objectArray1[1] = (Object) (byte)3;
      objectArray1[2] = (Object) (byte)0;
      objectArray1[3] = (Object) "";
      Utility.printArray(objectArray1, false);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 270, 270);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte) (-119);
      byteArray0[8] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("fload_1", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\t");
      byte[] byteArray0 = Utility.decode("]yib/j9%zN@.^qoZ)", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("laload", string0);
      assertEquals(17, byteArray0.length);
      
      String string1 = Utility.replace("]$=G(3", "<!%0", "]yib/j9%zN@.^qoZ)");
      assertEquals("]$=G(3", string1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Utility.compactClassName("ireturn");
      Utility.isSet((-1), 159);
      Utility.compactClassName("ireturn", "ireturn", false);
      int int0 = 2623;
      Utility.setBit(2623, 2623);
      Utility.convertString("ireturn");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(")^cx)4g)mXHOc!/NCj%", (String) null, "if_icmplt", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )^cx)4g)mXHOc!/NCj%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-59);
      byteArray0[7] = (byte)71;
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)20, (byte)71);
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-59);
      byteArray1[1] = (byte) (-59);
      byteArray1[2] = (byte)20;
      byteArray1[3] = (byte)71;
      byteArray1[4] = (byte) (-59);
      byteArray1[5] = (byte)71;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Utility.getSignature("Sensitive");
      Utility.compactClassName("LSensitive;", "Sensitive", true);
      try { 
        Utility.typeOfSignature("+7A1?jm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7A1?jm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Utility.signatureToString("Sensitive", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-93);
      byteArray0[8] = (byte)0;
      byteArray0[8] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)0, (byte) (-93));
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(119, (byte)123);
      ConstantString constantString0 = new ConstantString((byte)0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2122), (-2122));
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int int0 = Utility.setBit(1947, 199);
      assertEquals(1947, int0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Utility.classOrInterface((-14));
      byte[] byteArray0 = new byte[6];
      String string0 = Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)18;
      byteArray1[1] = (byte)89;
      byteArray1[2] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantFloat constantFloat0 = new ConstantFloat(2750.3608F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantFloat1;
      constantArray0[1] = (Constant) constantFloat1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("00 00 00 00 00 00");
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Object[] objectArray0 = new Object[1];
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-18);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      constantArray0[2] = (Constant) constantMethodHandle0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 76, (-2190), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-111);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)25;
      byteArray0[0] = (byte)25;
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (byte)25, true, 'I');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = Utility.compactClassName("p5:4~> {", "p5:4~> {", true);
      assertEquals("", string0);
      
      // Undeclared exception!
      Utility.replace("p5:4~> {", "", "");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte) (-48);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-123));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantFloat0;
      constantArray0[3] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("|0gU1-nDe3^d%Cj$,@", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$7c0gU1$znDe3$5ed$rCj$A$40", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iushr", string1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-56);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-56);
      byteArray1[1] = (byte) (-56);
      byteArray0[0] = (byte) (-56);
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 3628, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(";zfQ={DOWJ!H", false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<i^a`ED>=d:_J_;V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `i^a`ED>=d:_J_;V'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Utility.classOrInterface((-14));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-114);
      byteArray0[4] = (byte) (-20);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "monitorexi");
      Utility.toHexString(byteArray0);
      Utility.compactClassName("aX}F*7kH|bsj2VCL");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fmul", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = Utility.classOrInterface(189);
      boolean boolean0 = Utility.isJavaIdentifierPart('d');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.compactClassName("class", "fcmpg", true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Wl!|N]|", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wl!|N]|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = Utility.compactClassName(", high = ");
      assertEquals(", high = ", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.fillup("", 3352, true, '^');
      Utility.compactClassName("");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "Ke@lhS");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Utility.getSignature("g:{zZ\"85e7sS'Tb+");
      Utility.classOrInterface(425);
      Utility.compactClassName("class");
      Utility.compactClassName("g:{zZ\"85e7sS'Tb+", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)9;
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureArgumentTypes("90>wo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 90>wo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.accessToString(36);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('c');
      Utility.convertString("\b");
      Utility.replace("2$x9_*|rv(4<@c", ")sagfeEa?", "\b");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "fL'p$^33jTH;[OPHss";
      int int0 = 57;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(57, (-72));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-64);
      int int1 = 62;
      // Undeclared exception!
      try { 
        Utility.signatureToString("RyF", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RyF'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte byte0 = (byte)90;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = 11;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, 11, (int) (byte)9, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-1056), (int) (byte) (-56));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = Utility.printArray(objectArray0, true);
      assertEquals("{null, null}", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_2", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(65, 65);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-47);
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      String string0 = Utility.printArray((Object[]) null, false, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = Utility.compactClassName("F^V|c%g:aA", false);
      assertEquals("F^V|c%g:aA", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("*V@8EvZK97F'W", "*V@8EvZK97F'W", "*V@8EvZK97F'W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *V@8EvZK97F'W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(".H$!IL1Qcn4\")", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(12, byteArray0.length);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      try { 
        Utility.typeOfSignature("M>|-li{rI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M>|-li{rI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-59);
      byteArray0[7] = (byte)71;
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)20, (byte)71);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = Utility.classOrInterface(3346);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("l2d", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-59);
      byte byte0 = (byte)71;
      byteArray0[7] = (byte)71;
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)20, (byte)71);
      String string0 = "H4z@,t>q[j\\u=mGHo";
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H4z@,t>q[j\\u=mGHo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      int int0 = (-648);
      Utility.clearBit((-648), (-648));
      Utility.isJavaIdentifierPart('@');
      Utility.classOrInterface((-16777864));
      Utility.decode("CONSTANT_InterfaceMethodref", false);
      Utility.getSignature("class");
      String string0 = "\t";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" T><s+9Pg$", "Lclass;", " T><s+9Pg$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  T><s+9Pg$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)14;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 199, (int) (byte) (-18));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W%T{i=Js/l{~bx-q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W%T{i=Js/l{~bx-q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.accessToString(34, true);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte)110;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)66, (int) (byte) (-25), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-93);
      byteArray0[8] = (byte)0;
      byteArray0[8] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(176, 4052);
      ConstantString constantString0 = new ConstantString((byte)0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)10;
      byteArray1[1] = (byte)54;
      Utility.clearBit(170, (-2449));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 176, (int) (byte) (-93));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.accessToString(200);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.fillup("static volatile transient", 200, false, 'I');
      Utility.typeOfSignature("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIstatic volatile transient");
      byte[] byteArray0 = Utility.decode("jS:3K`AH]W%6", false);
      Utility.encode(byteArray0, false);
      Utility.decode("l;vpegp3c&gn0wdy%jk<", false);
      try { 
        Utility.typeOfSignature("java.lang.{java.lang.Object@74f7d983, java.lang.Object@13c51de0, java.lang.Object@6c46f29d, java.lang.Object@3c5e7b31, java.lang.Object@76af86f8, java.lang.Object@4dbeafd0, java.lang.Object@16377ee0}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.{java.lang.Object@74f7d983, java.lang.Object@13c51de0, java.lang.Object@6c46f29d, java.lang.Object@3c5e7b31, java.lang.Object@76af86f8, java.lang.Object@4dbeafd0, java.lang.Object@16377ee0}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("2)Rl:nbM1Mtv395$^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2)Rl:nbM1Mtv395$^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Utility.format(0, 0, false, 'u');
      String string0 = "j\"cA}0DZ))oGEx`";
      String string1 = "]i.xt)Lv";
      String string2 = "";
      boolean boolean0 = true;
      int int0 = 1782;
      int int1 = 29;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -87
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = Utility.getSignature("\t");
      assertEquals("L;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byte byte0 = Utility.typeOfSignature("L;");
      assertEquals((byte)14, byte0);
      
      boolean boolean0 = Utility.isSet((byte)0, (byte)14);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2737, 68);
      byte[] byteArray0 = Utility.decode("void", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence1, constantPool1, true);
      String string1 = Utility.convertString("fneg");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(552, 552);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.signatureToString("HnM!/`~=Jl@<td)!_", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HnM!/`~=Jl@<td)!_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Object[] objectArray0 = new Object[1];
      String string0 = Utility.format('6', 1366, true, '-');
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = Utility.accessToString(200);
      Utility.fillup("static volatile transient", 200, false, 'I');
      Utility.typeOfSignature("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIstatic volatile transient");
      Utility.printArray((Object[]) null, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Etzw'G~:Qe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Etzw'G~:Qe'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(".H$!IL1Qcn4\")", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.skip(0L);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-477), 4, true);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Utility.compactClassName("", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "byte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Utility.clearBit(418, 418);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -79
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("? extends ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lsub", string0);
      
      String string1 = Utility.replace("vC*>XWq dp=", "? extends ", "n)n:#g");
      assertEquals("vC*>XWq dp=", string1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("java.lang.R$40$zTIvI", false);
      assertEquals(17, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(559, 559);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Utility.isJavaIdentifierPart('%');
      Utility.compactClassName("", "*", false);
      try { 
        Utility.methodSignatureArgumentTypes("UDo.}-9DaK", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UDo.}-9DaK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(180, 195);
      constantFieldref0.copy();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-74);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)113;
      byteArray0[0] = (byte)113;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)113;
      Utility.encode(byteArray0, false);
      Utility.encode(byteArray0, false);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("Sensitive");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantInteger constantInteger0 = new ConstantInteger((byte)113);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)0, 39);
      constantInteger0.clone();
      ConstantString constantString0 = new ConstantString((byte)0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInteger0.copy();
      Utility.compactClassName("qq$Aqq", false);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.format("l", (Object[]) constantArray0);
      Utility.printArray(printStream0, (Object[]) constantArray0);
      assertEquals(4L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("]yib/j9%zN@.^qoZ)", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(17, byteArray0.length);
      assertEquals("dup2_x1", string0);
      
      String string1 = Utility.methodSignatureReturnType("J[z:nl~d}(@TmkdOVcd");
      assertEquals("long", string1);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("M>-li{rI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M>-li{rI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Rl-TIvI", false);
      assertArrayEquals(new byte[] {(byte)82, (byte)108, (byte)45, (byte)84, (byte)73, (byte)118, (byte)73}, byteArray0);
      
      String string0 = Utility.accessToString(45);
      assertEquals("public protected static synchronized", string0);
      
      Utility.decode("", false);
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-93);
      byteArray0[8] = (byte)0;
      byteArray0[8] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)0, (byte) (-93));
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      byteSequence0.close();
      constantArray0[1] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.convertString("fstore_0");
      assertEquals("fstore_0", string0);
      
      short short0 = Utility.searchOpcode("fstore_0");
      assertEquals((short)67, short0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      int int0 = 36;
      Utility.accessToString(36);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('c');
      Utility.setBit(36, 158);
      String string0 = "checkcast";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("protected synchronized", "putStatic", "checkcast");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: protected synchronized
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Utility.classOrInterface(189);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "V";
      stringArray0[1] = "putfield";
      stringArray0[2] = "putfield";
      stringArray0[3] = "putfield";
      stringArray0[4] = "putfield";
      stringArray0[5] = "class";
      Utility.methodTypeToSignature("putfield", stringArray0);
      try { 
        Utility.typeOfSignature("*^Ul");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^Ul
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("O)-8{RN:b,wEK", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.release();
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      int int0 = Utility.clearBit(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = "qTK!'jaM1D";
      String string1 = null;
      String string2 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("qTK!'jaM1D", (String) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: qTK!'jaM1D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("k[<M'9p", false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "k[<M'9p");
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 196, 17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.compactClassName("java.io.Serializable", "", false);
      Utility.isJavaIdentifierPart('9');
      String string0 = "V_TH%9vz&yPZs}";
      Utility.compactClassName("V_TH%9vz&yPZs}", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "V_TH%9vz&yPZs}", 48, 48);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Kr?*\"Uhc{}9/YW>m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kr?*\"Uhc{}9/YW>m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("invokespecial", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Utility.searchOpcode("System");
      Utility.accessToString((int) (short) (-1));
      Utility.signatureToString("System");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)80;
      Utility.replace("yC{(&pt", "g", "yC{(&pt");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)80, 45);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(byteSequence0);
      constantArray0[1] = (Constant) constantMethodHandle2;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("yC{(&pt");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = Utility.replace("K/", "float", "K/");
      assertEquals("K/", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)2;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-696), (int) (byte)2, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Utility.getSignature("g:{zZ\"85e7sS'Tb+");
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      try { 
        Utility.typeOfSignature("N*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("? extends ", false);
      String string0 = "MAUd\\#VPMBT81";
      // Undeclared exception!
      try { 
        Utility.signatureToString("MAUd#VPMBT81", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MAUd#VPMBT81'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2737, 68);
      ConstantString constantString0 = new ConstantString(184);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~bG");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.decode(":", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.io.Serializable");
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ifgt\t\t#-25344", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("L<NhD{yG:`eBR;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<NhD{yG:`eBR;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Utility.isJavaIdentifierPart('b');
      Utility.format((byte)0, 78, true, 'v');
      try { 
        Utility.typeOfSignature("0vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-403), (-403));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(169, 169);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      constantArray0[4] = (Constant) constantInvokeDynamic0;
      constantArray0[5] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Utility.classOrInterface(189);
      Utility.isJavaIdentifierPart('d');
      Utility.signatureToString("V");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-20);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Utility.getSignature("\t");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)44;
      Utility.methodSignatureReturnType("L;", true);
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("9%*M*wcTmoL", false);
      byte byte0 = Utility.typeOfSignature("Sensitive");
      assertEquals((byte)9, byte0);
      
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Utility.printArray((Object[]) null, false);
      Utility.printArray((Object[]) null, false, true);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Utility.searchOpcode("ifnull");
      Utility.getSignature("R@-TIvI");
      try { 
        Utility.typeOfSignature("*,rmlQ>p^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,rmlQ>p^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("&+k6NRPwvxpegW", false);
      String string0 = Utility.classOrInterface(144);
      assertEquals("class", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_0", string1);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)113, (byte)113);
      ConstantString constantString0 = new ConstantString((-1148));
      Utility.format((-1148), (-1148), true, 'N');
      try { 
        Utility.typeOfSignature("!.M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-62);
      Utility.toHexString(byteArray0);
      Utility.accessToString(20);
      String string0 = "";
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName("int", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(180, 195);
      Constant constant0 = constantFieldref0.copy();
      constant0.copy();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      Utility.toHexString(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[3];
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte)77;
      byteArray1[2] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      boolean boolean1 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      Code code0 = null;
      try {
        code0 = new Code((byte)77, (byte)77, byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      int int0 = 0;
      Utility.isSet(2, 0);
      String string0 = "(";
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Utility.signatureToString("Sensitive", false);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("monitorenter", string0);
      
      String string1 = Utility.signatureToString("BootstrapMethod(", false);
      assertEquals("byte", string1);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)45;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (int) (byte)45, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 746, (int) (byte)33, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.isJavaIdentifierPart('6');
      Utility.accessToString(88);
      byte[] byteArray0 = Utility.decode("static final volatile", false);
      Utility.clearBit(2, 2209);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfMethodSignature("static final volatile");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: static final volatile
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(12, byteSequence0.getIndex());
      assertEquals("lookupswitch\tdefault = 0, npairs = 0 ()", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Utility.getSignature("g:{zZ\"85e7sS'Tb+");
      Utility.classOrInterface(425);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)3;
      Utility.encode(byteArray0, false);
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte)3;
      byteArray1[2] = (byte)5;
      byteArray1[3] = (byte) (-105);
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dload");
      MockFile mockFile1 = new MockFile(mockFile0, "dload");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-77), (int) (byte) (-77));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Utility.isJavaIdentifierPart('b');
      boolean boolean0 = true;
      Utility.format((byte)0, 66, true, 'v');
      try { 
        Utility.typeOfSignature("0vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00 00 00 00 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Utility.getSignature("\t");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = (byte)0;
      byte byte1 = (byte)0;
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-12), (-2758));
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("\t", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Eja");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Eja
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Utility.getSignature("*Y8$t)GC");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "L*Y8$t)GC;";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)47;
      byte byte0 = (byte)93;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte) (-54);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("*Y8$t)GC", "int");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"int\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      
      Utility.compactClassName("{\"java.lang.Object@52f9ac38\", \"java.lang.Object@2c72a4b8\", \"java.lang.Object@5d6c2b1e\", \"java.lang.Object@46decf5d\", \"java.lang.Object@59d933d2\"}", "", true);
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Utility.classOrInterface(189);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "V";
      stringArray0[1] = "putfield";
      stringArray0[2] = "putfield";
      stringArray0[3] = "putfield";
      stringArray0[4] = "class";
      stringArray0[5] = "class";
      Utility.methodTypeToSignature("putfield", stringArray0);
      Utility.classOrInterface(3294);
      Utility.clearBit(7, 189);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      Utility.encode(byteArray0, true);
      Utility.decode("class", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("The list of prefixes must not be null", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The list of prefixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte) (-59);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)0, (byte)69);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodHandle0;
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("<%G-lw<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <%G-lw<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Utility.classOrInterface(1186);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-63), (int) (byte)37);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Utility.isJavaIdentifierPart('d');
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)123;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/yThCboP6;E2c");
      byteArray0[3] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)32, (int) (byte)32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Utility.classOrInterface(3);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)5;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "class";
      stringArray0[1] = "class";
      stringArray0[2] = "W-/[{/*<w4<n1[C";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("W-/[{/*<w4<n1[C", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[{/*<w4<n1[C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      byte byte0 = (byte) (-18);
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[8] = (byte)123;
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.io.Serializable");
      byteArray0[0] = (byte) (-99);
      byte[] byteArray1 = Utility.decode("if_icmplt", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(";?ty 14lQZb%O[{>WD", "xr~+", " (", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;?ty 14lQZb%O[{>WD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Utility.compactClassName("#gih=~.U)\"4ml.duds");
      // Undeclared exception!
      try { 
        Utility.signatureToString("GNeF]!/?icA.#HM>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GNeF]!/?icA.#HM>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(".H$!IL1Qcn4\")", false);
      Utility.decode("void", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readLong();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "fdiv";
      stringArray0[1] = "void";
      stringArray0[2] = ".H$!IL1Qcn4\")";
      stringArray0[3] = ".H$!IL1Qcn4\")";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Utility.getSignature("\t");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      Utility.encode(byteArray0, false);
      Utility.decode("<@)g/%mg", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("new", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2365, 2365, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Utility.searchOpcode("System");
      Utility.signatureToString("System", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload_1", string0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("C58lfJ4g8", stringArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-39), (int) (byte)48);
      try { 
        Utility.methodSignatureReturnType("`$!waO=u#`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ``$!waO=u#`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      byte[] byteArray0 = Utility.decode("double", false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "double";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)90, (-2173), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      try { 
        Utility.decode("y(5ke\u0001f3}kX.{ar/", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantInteger constantInteger0 = new ConstantInteger((-149));
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1254, (-3026));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)98;
      byteArray0[8] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.convertString("iastore");
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-1L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, constantPool0, (-477), 2689, true);
      try { 
        Utility.typeOfSignature("anewarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: anewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2507, 2507, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1988), (int) (byte)22);
      assertEquals("0:    lload\t\t%0\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)23, (int) (byte)23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("R@-TIvI", false);
      Utility.classOrInterface(144);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 144, (-866));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      boolean boolean0 = false;
      Utility.signatureToString("Jy8a", false);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)31;
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-65);
      Constant[] constantArray0 = new Constant[4];
      ConstantNameAndType constantNameAndType0 = null;
      try {
        constantNameAndType0 = new ConstantNameAndType((ConstantNameAndType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantNameAndType", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(180, 180);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("l2f", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = "Sensitive";
      Utility.format(1366, 48, true, 'N');
      try { 
        Utility.typeOfSignature("1366NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1366NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte) (-117);
      byteArray0[8] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, true);
      assertEquals("castore", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-56), (int) (byte) (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      try { 
        Utility.typeOfSignature("GNeF]!/?icA.#HM>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GNeF]!/?icA.#HM>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.classOrInterface(2698);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-125);
      Utility.signatureToString("Z>.CLNvC%!z", false);
      try { 
        Utility.methodSignatureReturnType("p5:4~> {p5:4~> {");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `p5:4~> {p5:4~> {'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("cUnc k$0i", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0i\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)90;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("=R;t]VG`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =R;t]VG`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = Utility.getSignature("otQJ");
      assertEquals("LotQJ;", string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("ret\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<\"r,(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <\"r,(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodSignatureReturnType("IiwJ?tUh3`7#[7", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-65), (-795), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    athrow
         // 1:    iload_1
         // 2:    dup2_x1
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      try { 
        Utility.typeOfSignature("H*-e%wa1LMs}XN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H*-e%wa1LMs}XN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)71, 250, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)1;
      byteArray0[5] = (byte)17;
      Utility.toHexString(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("_c9wxB}c`|AI;?");
      constantArray0[1] = (Constant) constantUtf8_0;
      Constant constant0 = constantInteger0.copy();
      constantArray0[2] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)83, (int) (byte)1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("V", false);
      Utility.encode(byteArray0, false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "V";
      stringArray0[1] = "V";
      stringArray0[2] = "V";
      stringArray0[3] = "V";
      Utility.methodTypeToSignature("V", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "V", "invokestatic", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1254, (-3026));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "long");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-32));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(180, 195);
      Constant constant0 = constantFieldref0.copy();
      constant0.copy();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 195, 66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(180, 195);
      Constant constant0 = constantFieldref0.copy();
      constant0.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte) (-118);
      byteArray0[7] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fload\t\t%192", string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("zM", false);
      String string0 = Utility.classOrInterface((-122));
      assertEquals("interface", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ishr", string1);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      boolean boolean0 = false;
      Utility.signatureToString("Sensitive", false);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)113, (byte)113);
      ConstantString constantString0 = new ConstantString((-1171));
      Utility.methodTypeToSignature("char", (String[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      Constant[] constantArray0 = new Constant[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "short");
      constantArray0[0] = (Constant) constantMethodHandle0;
      try { 
        Utility.typeOfSignature("((=Vl+,hpy 9$Hn)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ((=Vl+,hpy 9$Hn)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-122);
      byteArray0[6] = (byte) (-55);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-15);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Utility.signatureToString("V", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      try { 
        Utility.decode(".H$!IL1Qcn4\"m)", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte)90;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("fa 5a 75 06 60 b2 bc 5a", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.convertString("lneg");
      String string2 = Utility.compactClassName("lneg");
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'!gy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '!gy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = "";
      Utility.searchOpcode("");
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("[r*:/'m", false);
      Utility.typeOfSignature("[r*:/'m");
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, (int) (byte)13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-93);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.format(1, (byte)10, true, 'C');
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('6');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      byte[] byteArray0 = Utility.decode("double", false);
      byte byte0 = Utility.typeOfSignature("VH0+e-]icfj)uGL");
      assertEquals((byte)12, byte0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("double", string0);
      
      String string1 = Utility.printArray(objectArray0, true);
      assertEquals("{null}", string1);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Utility.classOrInterface((-14));
      byte[] byteArray0 = new byte[6];
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)18;
      byteArray1[1] = (byte)18;
      byteArray1[2] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantFloat constantFloat0 = new ConstantFloat(2750.3608F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantFloat1;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool(byteSequence1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 18. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Duy0tp`R]< H$Rq-zgn");
      assertEquals((byte)7, byte0);
      
      String string0 = Utility.convertString("G^w_A9u*x]D{$_.+!r&");
      assertEquals("G^w_A9u*x]D{$_.+!r&", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('h');
      assertTrue(boolean0);
      
      String string1 = Utility.signatureToString("Duy0tp`R]< H$Rq-zgn", true);
      assertEquals("double", string1);
      
      String string2 = Utility.accessToString((-2216));
      assertEquals("static final volatile native interface abstract synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("eR@-TIvI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: eR@-TIvI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(65, 65);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Utility.getSignature("g:{zZ\"85e7sS'Tb+");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Lg:{zZ\"85e7sS'Tb+;";
      objectArray0[1] = (Object) "g:{zZ\"85e7sS'Tb+";
      objectArray0[2] = (Object) "Lg:{zZ\"85e7sS'Tb+;";
      objectArray0[3] = (Object) "g:{zZ\"85e7sS'Tb+";
      objectArray0[4] = (Object) "Lg:{zZ\"85e7sS'Tb+;";
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("E.|F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E.|F'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Utility.classOrInterface((-14));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      String string0 = Utility.fillup("}4JA8{8I,d[h", (byte) (-15), false, '#');
      assertEquals("}4JA8{8I,d[h", string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Utility.classOrInterface(189);
      byte[] byteArray0 = Utility.decode("class", false);
      String string0 = Utility.classOrInterface(445);
      assertEquals("class", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1613453109), (-3913));
      assertEquals("0:    dadd\n1:    idiv\n2:    ladd\n3:    drem\n4:    drem\n", string1);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Utility.replace("<46", "a;J^", "a;J^");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte) (-64);
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureToString("(", "<46", "(", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString(200);
      Utility.fillup("static volatile transient", 200, false, 'I');
      Utility.typeOfSignature("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIstatic volatile transient");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.classOrInterface((byte)90);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)91;
      Utility.toHexString(byteArray0);
      Utility.compactClassName("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIstatic volatile transient");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("09 9c 0a 0a 09 0a 5b", "jGcqh4", "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIstatic volatile transient");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 09 9c 0a 0a 09 0a 5b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Utility.methodTypeToSignature("F\"G}V5y+x-vZiQ", (String[]) null);
      Utility.signatureToString("F\"G}V5y+x-vZiQ");
      Utility.typeOfMethodSignature("()LF\"G}V5y+x-vZiQ;");
      try { 
        Utility.typeOfSignature("n~&y'a-M1rG@,~J'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: n~&y'a-M1rG@,~J'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~bG");
      String string0 = Utility.convertString("\b");
      assertEquals("\b", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = Utility.replace("L)sagfeEa?;V", "\\b", "L)sagfeEa?;V");
      assertEquals("L)sagfeEa?;V", string1);
      
      String[] stringArray0 = new String[0];
      String string2 = Utility.methodTypeToSignature("C58lfJ4g8", stringArray0);
      assertEquals("()LC58lfJ4g8;", string2);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("? extends ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      byteSequence0.readChar();
      byteSequence0.mark(188);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Qr_8vb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qr_8vb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~bG");
      byte[] byteArray0 = new byte[8];
      Utility.convertString("O4_{rLs'*(?`ME");
      Utility.replace(".jar", "O4_{rLs'*(?`ME", "2$x9_*|rv(4<@c");
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)123, (-2262));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      constantArray0[4] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Constant[] constantArray1 = new Constant[7];
      constantArray1[0] = (Constant) constantInvokeDynamic1;
      constantArray1[1] = (Constant) constantInvokeDynamic0;
      constantArray1[2] = (Constant) constantInvokeDynamic1;
      constantArray1[3] = (Constant) constantInvokeDynamic0;
      constantArray1[4] = (Constant) constantInvokeDynamic1;
      constantArray1[5] = (Constant) constantInvokeDynamic1;
      constantArray1[6] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool1 = new ConstantPool(constantArray1);
      int int0 = 80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 80, (-2262), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Utility.decode("]yib/j9%zN@.^qoZ)", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(180, 195);
      Constant constant0 = constantFieldref0.copy();
      constant0.copy();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";");
      byte[] byteArray0 = Utility.decode("}21[V ND(t,XV@aU6", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String string0 = Utility.convertString("@_hPpK{Zz -o&x<|9");
      assertEquals("@_hPpK{Zz -o&x<|9", string0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 139, 122, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-69), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.signatureToString("Sensitive", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)10;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte) (-93);
      String string0 = Utility.encode(byteArray1, false);
      assertEquals("6$K$a3", string0);
      
      byte[] byteArray2 = Utility.decode("6$K$a3", false);
      assertArrayEquals(new byte[] {(byte)54, (byte)10, (byte) (-93)}, byteArray2);
      
      String string1 = Utility.compactClassName("l#p1$9-(zL0JQgl^", false);
      assertEquals("l#p1$9-(zL0JQgl^", string1);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Utility.classOrInterface(189);
      Utility.isJavaIdentifierPart('d');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)103;
      byteArray0[8] = (byte)3;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 59, 1984);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = Utility.accessToString((-1), true);
      assertEquals("public private protected static final volatile transient native abstract strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.methodSignatureReturnType("Could not create the directory ");
      assertEquals("char", string1);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("if_icmpgt\t\t#-23645", string0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = Utility.format((byte) (-93), 2569, false, 'P');
      String[] stringArray0 = new String[9];
      stringArray0[0] = string1;
      stringArray0[1] = string1;
      stringArray0[2] = string1;
      stringArray0[3] = string1;
      stringArray0[4] = "7XmW<((ZsKFI";
      stringArray0[5] = "if_icmpgt\t\t#-23645";
      stringArray0[6] = "if_icmpgt\t\t#-23645";
      stringArray0[7] = "if_icmpgt\t\t#-23645";
      stringArray0[8] = string1;
      // Undeclared exception!
      Utility.methodTypeToSignature("if_icmpgt\t\t#-23645", stringArray0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2547), 1275);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)81;
      byteArray1[1] = (byte)90;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[8] = (byte)123;
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("Qd%#>XFi_1|`cW&9h6,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qd%#>XFi_1|`cW&9h6,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y'8CJL-?Au<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y'8CJL-?Au<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(155, 552);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)80, (-4923), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Utility.accessToString(200);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.fillup("static volatile transient", 200, false, 'I');
      Utility.typeOfSignature("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIstatic volatile transient");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.classOrInterface((byte)90);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIstatic volatile transient");
      byteArray0[1] = (byte) (-100);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-990), (int) (byte)10);
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Method method0 = new Method(948, (byte)10, (byte)10, attributeArray0, constantPool1);
      Method method1 = new Method(method0);
      method1.getLocalVariableTable();
      try { 
        Utility.methodSignatureToString("class", "\t(wide)", "class", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String string0 = Utility.accessToString(3436);
      assertEquals("protected static synchronized volatile native abstract strictfp", string0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      char char0 = 'q';
      Utility.fillup("", (-1105), true, 'q');
      Utility.fillup("e(p", 2726, false, 'q');
      Utility.clearBit(3173, 3530);
      int int0 = 2979;
      Utility.isSet(2979, 2726);
      // Undeclared exception!
      try { 
        Utility.signatureToString("e(p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `e(p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte) (-25);
      byteArray0[8] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-4));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantFloat0;
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), (int) (byte) (-80));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
      
      String string1 = Utility.convertString("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n");
      assertEquals("0:    nop\\n1:    nop\\n2:    nop\\n3:    nop\\n4:    nop\\n5:    nop\\n", string1);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(70);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Utility.format('6', 1403, true, 'N');
      try { 
        Utility.typeOfSignature("G^wCA9u*x]D{$_.+!r&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G^wCA9u*x]D{$_.+!r&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("k[<M'9p", false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "k[<M'9p");
      ConstantFloat constantFloat0 = new ConstantFloat(2750.3608F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantUtf8.getCachedInstance("k[<M'9p");
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(24, 196);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup_x2", string0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("java.lang.isf'}GIT", false);
      assertEquals(18, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<i^a`ED>=d:_J_;V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `i^a`ED>=d:_J_;V'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('6');
      assertTrue(boolean0);
      
      String string0 = Utility.methodTypeToSignature("F\"G}V5y+x-vZiQ", (String[]) null);
      assertEquals("()LF\"G}V5y+x-vZiQ;", string0);
      
      Utility.signatureToString("F\"G}V5y+x-vZiQ");
      byte byte0 = Utility.typeOfMethodSignature("()LF\"G}V5y+x-vZiQ;");
      assertEquals((byte)14, byte0);
      
      String string1 = Utility.methodSignatureReturnType("()LF\"G}V5y+x-vZiQ;", true);
      assertEquals("F\"G}V5y+x-vZiQ", string1);
      
      String string2 = Utility.convertString("float");
      assertEquals("float", string2);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[1] = (byte) (-55);
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-55));
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(59, 65);
      ConstantString constantString0 = new ConstantString(65);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-55);
      byteArray1[1] = (byte) (-55);
      byteArray1[2] = (byte) (-55);
      byteArray1[3] = (byte) (-55);
      byteArray1[4] = (byte) (-55);
      byteArray1[5] = (byte) (-55);
      byteArray1[7] = (byte) (-55);
      byteArray1[8] = (byte) (-55);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("jsr_w\t\t#-909522487", string0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Utility.isJavaIdentifierPart('9');
      String string0 = "";
      String string1 = "%H2j";
      String string2 = "aAj{a/O%Q+z:4~)wZEI";
      boolean boolean0 = false;
      int int0 = 3610;
      int int1 = 831;
      int int2 = 2937;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-105);
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)127;
      byte byte1 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)0;
      CodeException[] codeExceptionArray0 = new CodeException[5];
      MockFile mockFile0 = new MockFile((File) null, "");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "aAj{a/O%Q+z:4~)wZEI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"aAj{a/O%Q+z:4~)wZEI\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "jsr", (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte) (-123);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      ConstantFloat constantFloat0 = new ConstantFloat(270.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("i2b", string0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = Utility.signatureToString("[CY. ))Q>a");
      assertEquals("char[]", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte)15;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("46 51 24 4e e3 9f 0b 57 0f", string1);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("arraylength", "arraylength", "arraylength");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: arraylength
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = Utility.getSignature("\t");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      Utility.typeOfSignature("L;");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2506, (byte) (-99));
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte) (-121);
      byteArray0[8] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      int int0 = 0;
      Utility.isSet(2, 0);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{}", "{}", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      boolean boolean0 = false;
      Utility.signatureToString("Sensitive", false);
      int int0 = 0;
      Utility.classOrInterface(0);
      Utility.decode("class", false);
      Utility.getSignature("class");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-55));
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(65, 65);
      ConstantString constantString0 = new ConstantString(65);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)75;
      String string0 = "DAG-0-\\u/5u-BN0bK";
      Utility.signatureToString(string0);
      try { 
        Utility.typeOfSignature("#{^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #{^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Utility.getSignature("if_icmpge");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y,E21VzJP*uw", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y,E21VzJP*uw'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Utility.accessToString(36);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('c');
      Utility.convertString("\b");
      Utility.replace("2$x9_*|rv(4<@c", ")sagfeEa?", "\b");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "fL'p$^33jTH;[OPHss";
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(57, (-72));
      MockFile mockFile0 = new MockFile(")9Yq_9HgEc`", "fL'p$^33jTH;[OPHss");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      constantInvokeDynamic0.dump(dataOutputStream0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      try { 
        Utility.typeOfSignature("%jEMlhzA4sI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %jEMlhzA4sI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.close();
      Utility.codeToString(byteSequence1, constantPool0, false);
      String string0 = Utility.compactClassName("{;@g'r<\"`<W-=F", true);
      assertEquals("{;@g'r<\"`<W-=F", string0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.equals(byteArray0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Utility.getSignature("g:{zZ\"85e7sS'Tb+");
      Utility.classOrInterface(425);
      Utility.accessToString((-697), true);
      Utility.compactClassName("g:{zZ\"85e7sS'Tb+", true);
      Utility.format(425, 1619, true, '|');
      try { 
        Utility.methodSignatureArgumentTypes("6VIr+p!rD;y<qdXiS(x", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6VIr+p!rD;y<qdXiS(x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(65, 65);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      constantArray0[4] = (Constant) constantInvokeDynamic0;
      constantArray0[5] = (Constant) constantInvokeDynamic0;
      constantArray0[6] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-79);
      byteArray0[2] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Utility.convertString("%@sY@@[hQoQQTmY");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "%@sY@@[hQoQQTmY";
      objectArray0[1] = (Object) "%@sY@@[hQoQQTmY";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-25);
      String string0 = Utility.codeToString(byteArray0, constantPool0, 0, (int) (byte) (-53), false);
      assertEquals("0:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Utility.format(0, 75, true, 'u');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      objectArray0[1] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      objectArray0[2] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      objectArray0[3] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      objectArray0[4] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      objectArray0[7] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      objectArray0[8] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      Utility.printArray(objectArray0);
      Utility.isSet((-5183), 75);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)46;
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-2);
      byte byte1 = (byte)0;
      byteArray0[6] = (byte)0;
      Constant[] constantArray0 = new Constant[7];
      ClassPath classPath0 = new ClassPath("{0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu, 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu, 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu, 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu, 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu, java.lang.Object@41c03e43, 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu, 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu, 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu}");
      try { 
        classPath0.getInputStream("0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Couldn't find: 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu
         //
         verifyException("org.apache.bcel.util.ClassPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(12, (-1072));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      constantArray0[4] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1087), (-680), false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      String string0 = "'2bmO";
      try { 
        Utility.typeOfMethodSignature("'2bmO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '2bmO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[]", "n@jW\"8f^%K]HoH-eL", "putstatic", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      Utility.format((byte)97, 24929, false, 'r');
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      char char0 = '6';
      Utility.isJavaIdentifierPart('6');
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature(">5@a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >5@a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      try { 
        Utility.typeOfSignature("=R;t]VG`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =R;t]VG`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-57);
      Utility.decode("", false);
      Utility.compactClassName("\t\t%", true);
      Utility.format((byte) (-57), (byte)3, true, '\'');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("-57", "-NeX[aw", "\t\t%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -57
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      String string0 = "5@w=4oV_B8";
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("5@w=4oV_B8", false);
      Utility.classOrInterface(109);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 109, 1334);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(155, 552);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)6, (int) (byte)6, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface((-3598));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "putfield";
      stringArray0[1] = "putfield";
      stringArray0[2] = "class";
      stringArray0[3] = "class";
      Utility.methodTypeToSignature("class", stringArray0);
      Utility.convertString("int");
      Utility.isJavaIdentifierPart('f');
      // Undeclared exception!
      try { 
        Utility.signatureToString("Od:idlX", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Od:idlX'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      short short0 = Utility.searchOpcode("System");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.accessToString((int) (short) (-1));
      assertEquals("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.classOrInterface(2136);
      assertEquals("class", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-67);
      String string2 = Utility.replace("yC{(&pt", "g", "yC{(&pt");
      assertEquals("yC{(&pt", string2);
      
      int int0 = Utility.setBit(51, (byte)0);
      assertEquals(51, int0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String string0 = Utility.format(34, 34, true, '%');
      assertEquals("34%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%", string0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-76);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-76), (int) (byte) (-76));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-123);
      String string0 = Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-123));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("C58lfJ4g8", stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(1450.548F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("invokevirtual");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.methodTypeToSignature("3:", stringArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-128);
      byteArray1[1] = (byte) (-128);
      byteArray1[2] = (byte) (-128);
      byteArray1[3] = (byte) (-128);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 89, 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("? extends ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence0.available();
      byteSequence0.readChar();
      byteSequence0.readInt();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("isub", string0);
      
      String string1 = Utility.replace("vC*>XWq dp=", "? extends ", "n)n:#g");
      assertEquals("vC*>XWq dp=", string1);
      
      short short0 = Utility.searchOpcode("0:");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 48, (int) (byte)24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Utility.decode("&@GZa|tG!m'|9", false);
      Utility.clearBit(2229, 2229);
      Utility.isJavaIdentifierPart('Z');
      boolean boolean0 = true;
      Utility.format((-1250), (-1250), false, '\'');
      try { 
        Utility.methodSignatureArgumentTypes(">", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Utility.convertString("%@sY@@[hQoQQTmY");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "%@sY@@[hQoQQTmY";
      objectArray0[1] = (Object) "%@sY@@[hQoQQTmY";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("4+T(OIPgGN|}fc<4$", "L)B", "%@sY@@[hQoQQTmY", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4+T(OIPgGN|}fc<4$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Utility.accessToString(36);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('c');
      Utility.convertString("\b");
      Utility.replace("\\b", ")sagfeEa?", "\b");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "fL'p$^33jTH;[OPHss";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-78);
      byte byte0 = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, false);
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Utility.clearBit(171, 171);
      String string0 = "";
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("|0gU1-nDe3^d%Cj$,@", false);
      Utility.encode(byteArray0, false);
      Utility.replace("$7c0gU1$znDe3$5ed$rCj$A$40", "$7c0gU1$znDe3$5ed$rCj$A$40", "|0gU1-nDe3^d%Cj$,@");
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat((-1308.82F));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("x_0?Uy5v/sa#GJ");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(24, 93);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-100), 190);
      assertEquals("0:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 1403;
      String string0 = Utility.format('6', 1403, true, 'V');
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(169);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantUtf8.getCachedInstance("<illegal opcode>");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(552, 2698);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)82;
      byteArray0[8] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("2a 27 04 78 0b 23 0d 52 a1", string0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      short short0 = Utility.searchOpcode("System");
      assertEquals((short) (-1), short0);
      
      Utility.signatureToString("System", true);
      byte byte0 = Utility.typeOfSignature("CgxU|??._{Qrt");
      assertEquals((byte)5, byte0);
      
      String string0 = Utility.compactClassName("CgxU|??._{Qrt");
      assertEquals("CgxU|??._{Qrt", string0);
      
      int int0 = Utility.clearBit((-1847), 41);
      assertEquals((-1847), int0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      String string0 = Utility.signatureToString("Invalid type: ", false);
      assertEquals("int", string0);
      
      String string1 = Utility.accessToString((-2216));
      assertEquals("static final volatile native interface abstract synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Utility.classOrInterface(5786);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("Sensitive", "Lprivate;V", true);
      Utility.searchOpcode("Sensitive");
      Utility.getSignature("putfield");
      byte[] byteArray0 = null;
      ConstantPool constantPool0 = null;
      int int0 = 50;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 50, 140);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      String string0 = Utility.signatureToString("Duy0tp`R]< H$Rq-zgn");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(180, 195);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-61));
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(65, 65);
      ConstantString constantString0 = new ConstantString(65);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(216);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(247, 512);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iload_2", string0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-18);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString((-4036));
      Utility.methodSignatureReturnType("Byte code error: ");
      Utility.replace("", "protected static final synchronized synthetic annotation enum", "#");
      try { 
        Utility.methodSignatureArgumentTypes("short", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      try { 
        Utility.methodSignatureReturnType("L<IhD{yG:`eBR;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<IhD{yG:`eBR;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)44;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmplt\t\t#18222", string0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)77;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("33$tnM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 33$tnM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-80);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), (int) (byte) (-80));
      assertEquals("0:    areturn\n1:    areturn\n2:    nop\n3:    nop\n", string0);
      
      String string1 = Utility.convertString("0:    areturn\n1:    areturn\n2:    nop\n3:    nop\n");
      assertEquals("0:    areturn\\n1:    areturn\\n2:    nop\\n3:    nop\\n", string1);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-127), 1991);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)71, 1138);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      constantLong0.copy();
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.compactClassName("pegP3c&GN0WDy%Jk<", "L;V", true);
      try { 
        Utility.typeOfSignature("&;yc8U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &;yc8U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Utility.convertString("%@sY@@[hQoQQTmY");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "%@sY@@[hQoQQTmY";
      objectArray0[1] = (Object) "%@sY@@[hQoQQTmY";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      Utility.format(66, 66, true, '6');
      try { 
        Utility.typeOfSignature("666666666666666666666666666666666666666666666666666666666666666666");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 666666666666666666666666666666666666666666666666666666666666666666
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-100), (int) (byte) (-100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Utility.getSignature("\t");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      Utility.compactClassName("\t", "\t", true);
      try { 
        Utility.typeOfSignature("KE'e]:.i[p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KE'e]:.i[p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      int int0 = 196;
      Utility.accessToString(196);
      byte[] byteArray0 = Utility.decode("protected volatile transient", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.decode("GE#Z:Ui^WI8", false);
      try { 
        Utility.typeOfSignature("U$'&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U$'&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.classOrInterface(189);
      byte[] byteArray0 = Utility.decode("*>[P8k)S/", false);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      String string0 = Utility.getSignature("g:{zZ\"85e7sS'Tb+");
      assertEquals("Lg:{zZ\"85e7sS'Tb+;", string0);
      
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Utility.decode("g:{zZ\"85e7sS'Tb+", false);
      boolean boolean0 = Utility.isJavaIdentifierPart('g');
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = Utility.format((-695), 137, false, 'g');
      assertEquals("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg-695", string1);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-114);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-114), (int) (byte) (-114));
      assertEquals("0:    d2i\n", string0);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(".Ht!IL1Qcn;\")", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.accessToString(46);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 46, 90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("rf", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("frem");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `frem'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2d", string0);
      
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte) (-118), 1843, byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("l2d", "l2d", "areturn", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: l2d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Utility.decode(";zfQ={DOWQJ!H", false);
      Utility.classOrInterface((-122));
      try { 
        Utility.typeOfSignature(";zfQ={DOWQJ!H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;zfQ={DOWQJ!H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Utility.getSignature("g:{zZ\"85e7sS'Tb+");
      Utility.classOrInterface(425);
      boolean boolean0 = true;
      Utility.accessToString((-697), true);
      Utility.compactClassName("g:{zZ\"85e7sS'Tb+", true);
      String string0 = "";
      Utility.replace("ELPtx' `", "fload_1", "Lg:{zZ\"85e7sS'Tb+;");
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence3, (ConstantPool) null, true);
      assertEquals("areturn", string0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)97;
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2453), 1386);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    astore_0
         // 1:    dup2_x1
         // 2:    istore\t\t%212
         // 4:    fload_2
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      String[] stringArray0 = new String[1];
      byte byte0 = Utility.typeOfSignature("C58lfJ4g8");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "impQepG", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = false;
      Utility.decode("double", false);
      try { 
        Utility.typeOfSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 128, (-866));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte) (-118);
      byteArray0[7] = (byte) (-24);
      byteArray0[8] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload_0", string0);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "lload_0", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, false, false);
      String string1 = Utility.fillup("java.lang.Object@5e9a84f, java.lang.Object@7e84b250, java.lang.Object@39e778e8", (-1746), true, 'x');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2737, 68);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-51);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("[r*:/'m", false);
      assertArrayEquals(new byte[] {(byte)91, (byte)114, (byte)42, (byte)58, (byte)47, (byte)39, (byte)109}, byteArray0);
      
      byte byte0 = Utility.typeOfSignature("[r*:/'m");
      assertEquals((byte)13, byte0);
      
      String string0 = Utility.format(625, 2213, false, 'V');
      byte byte1 = Utility.typeOfSignature(string0);
      assertEquals((byte)12, byte1);
      
      int int0 = Utility.clearBit(3415, (byte)13);
      assertEquals(3415, int0);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(155, 552);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("a5 00 00 00 00 00 00 00", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-582), (int) (byte) (-91));
      assertEquals("0:    if_acmpeq\t\t#0\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("K/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      String string0 = Utility.signatureToString("COOP ");
      assertEquals("char", string0);
      
      String string1 = Utility.convertString("COOP ");
      assertEquals("COOP ", string1);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Utility.decode(";zfQ={DOWQJ!H", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~bG");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(123, (-1076));
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantLong1;
      constantArray0[1] = (Constant) constantLong1;
      constantArray0[2] = (Constant) constantMethodHandle0;
      constantArray0[3] = (Constant) constantLong1;
      constantArray0[4] = (Constant) constantLong0;
      constantArray0[5] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "~bG";
      stringArray0[1] = "~bG";
      stringArray0[2] = "~bG";
      stringArray0[3] = "instanceof";
      stringArray0[4] = "instanceof";
      stringArray0[5] = "instanceof";
      stringArray0[6] = "~bG";
      String string0 = Utility.methodTypeToSignature("~bG", stringArray0);
      assertEquals("(L~bG;L~bG;L~bG;Linstanceof;Linstanceof;Linstanceof;L~bG;)L~bG;", string0);
      
      String string1 = Utility.format(1255, 39, true, 'A');
      assertEquals("1255AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string1);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2fXwC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2fXwC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("astore_3", string0);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-117);
      byteArray1[1] = (byte) (-117);
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte) (-14);
      byteArray1[4] = (byte)85;
      byteArray1[5] = (byte) (-92);
      byteArray1[6] = (byte) (-14);
      byteArray1[7] = (byte) (-117);
      byteArray1[8] = (byte)7;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, true);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Utility.signatureToString("Sensitive", false);
      Utility.classOrInterface(21);
      Utility.decode("class", false);
      Utility.convertString("short");
      Utility.replace("\b", "\b", ")?`sagfeEa?");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\b";
      stringArray0[1] = ")?`sagfeEa?";
      stringArray0[2] = ")?`sagfeEa?";
      stringArray0[3] = "impdep1";
      Utility.methodTypeToSignature("L->U0nb@1\"iL=p", stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("short", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_2", string0);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      String string0 = "R@-TIvI";
      boolean boolean0 = false;
      Utility.decode("R@-TIvI", false);
      try { 
        Utility.typeOfSignature("R@-TIvI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R@-TIvI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      String string0 = "[r*:/'m";
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("[r*:/'m", false);
      Utility.typeOfSignature("[r*:/'m");
      Utility.encode(byteArray0, false);
      Utility.convertString("[r*:/'m");
      Utility.clearBit((byte)13, (byte)13);
      // Undeclared exception!
      try { 
        Utility.getSignature("[r*:/'m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [r*:/'m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      String string0 = Utility.accessToString(36);
      assertEquals("protected synchronized", string0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('b');
      String string1 = Utility.format('b', 36, false, 'b');
      assertEquals("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb98", string1);
      
      byte[] byteArray0 = Utility.decode("protected synchronized", false);
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("protected$msynchronized", string2);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("H=bUws", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H=bUws'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Utility.decode("R@-TIvI", false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "R@-TIvI";
      objectArray0[1] = (Object) "R@-TIvI";
      objectArray0[2] = (Object) "R@-TIvI";
      objectArray0[3] = (Object) "R@-TIvI";
      objectArray0[4] = (Object) "R@-TIvI";
      objectArray0[5] = (Object) "R@-TIvI";
      Utility.printArray(objectArray0, false);
      String string0 = "";
      Utility.decode("", false);
      Utility.isJavaIdentifierPart('0');
      Utility.accessToString((int) (byte) (-18));
      try { 
        Utility.decode("R@-TIvI, R@-TIvI, R@-TIvI, R@-TIvI, R@-TIvI, R@-TIvI", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Utility.decode("double", false);
      // Undeclared exception!
      try { 
        Utility.getSignature("k|f4{s5[oIU4XC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[oIU4XC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Utility.classOrInterface(102);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("", "class", true);
      Utility.searchOpcode("class");
      String string0 = ")sagfe\\Ea?";
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "iu*j^y',gO@+W`(W?", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      Object object1 = new Object();
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(65, 65);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-47);
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      String string0 = Utility.printArray((Object[]) null, false, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-59);
      byteArray0[7] = (byte)71;
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)20, (byte)71);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-93);
      byteArray0[8] = (byte)0;
      byteArray0[8] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)0, (byte) (-93));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      byteSequence0.close();
      constantArray0[1] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("J[ofsqFKsDggvc");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(";zfQ={DOWQJ!H", false);
      String string0 = Utility.classOrInterface((-122));
      assertEquals("interface", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-122), (-1561));
      assertEquals("0:    istore_0\n1:    ishr\n2:    fsub\n3:    fastore\n4:    istore_2\n5:    lshr\n6:    fstore_1\n7:    iastore\n8:    pop\n9:    fastore\n10:   dstore_3\n11:   lload_3\n12:   dstore_1\n", string1);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Utility.signatureToString("F\"G}V5y+x-vZiQ", true);
      try { 
        Utility.typeOfSignature("n~&y'a-M1rG@,~J'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: n~&y'a-M1rG@,~J'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(63, 63);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(BtkZaa-,9[+Kf-<", "(BtkZaa-,9[+Kf-<", "? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `tkZaa-,9[+Kf-<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(180, 195);
      constantFieldref0.copy();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("ret\t\t%169", string0);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Utility.accessToString(23);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("R@-TIvI", false);
      Utility.encode(byteArray0, false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("R$40$zTIvI", string0);
      
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("R$40$zTIvI");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantInteger constantInteger0 = new ConstantInteger(59);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(59, 59);
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantString constantString0 = new ConstantString(128);
      constantArray0[4] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dastore", string1);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      String string0 = "7fAto-";
      Utility.fillup("7fAto-", 0, false, 'i');
      String string1 = "dxR5)";
      try { 
        Utility.typeOfMethodSignature("dxR5)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dxR5)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8}Bg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8}Bg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(180, 195);
      Constant constant0 = constantFieldref0.copy();
      constant0.copy();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("lload\t\t%22", string0);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("[r*:/'m", false);
      Utility.typeOfSignature("[r*:/'m");
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[r*:/'m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `r*:/'m'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2737, 68);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[2] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.fillup("L%0MtG4~/)lGJ:AVb", (byte)106, false, 'A');
      try { 
        Utility.methodSignatureReturnType("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL%0MtG4~/)lGJ:AVb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lGJ:AVb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Utility.typeOfSignature("Be*f");
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fdiv", string0);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("R@-TIvI", false);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      byte byte0 = Utility.typeOfSignature("TLnADtAoMG");
      assertEquals((byte)14, byte0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, true);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)3, (int) (byte)40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      String string0 = "Sensitive";
      Utility.signatureToString("Sensitive", false);
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "monitorexi");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-114);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("monitorexi");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte) (-114);
      byteArray1[2] = (byte)106;
      byteArray1[3] = (byte) (-20);
      byteArray1[4] = (byte)8;
      byteArray1[5] = (byte)8;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("d2i", string0);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) ";zfQ={DOWQJ!H";
      objectArray0[1] = (Object) ";zfQ={DOWQJ!H";
      String string0 = Utility.printArray(objectArray0, true);
      assertEquals("{;zfQ={DOWQJ!H, ;zfQ={DOWQJ!H}", string0);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte) (-123);
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-70);
      byteArray1[1] = (byte) (-123);
      byteArray1[2] = (byte) (-111);
      byteArray1[3] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)118;
      objectArray0[1] = (Object) (byte)118;
      objectArray0[2] = (Object) null;
      String string0 = Utility.printArray(objectArray0, true, false);
      String string1 = Utility.convertString("{118, 118, null}");
      assertTrue(string1.equals((Object)string0));
      
      Utility.convertString("instanceof");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{118, 118, null}";
      stringArray0[1] = "CC=";
      stringArray0[2] = "instanceof";
      stringArray0[3] = "\b";
      stringArray0[4] = "\b";
      stringArray0[5] = "CC=";
      stringArray0[6] = "\b";
      stringArray0[7] = "\b";
      stringArray0[8] = "instanceof";
      String string2 = Utility.methodTypeToSignature("CC=", stringArray0);
      assertEquals("(L{118,;LCC=;Linstanceof;L\b;L\b;LCC=;L\b;L\b;Linstanceof;)LCC=;", string2);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Utility.signatureToString("Sensitive", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)123;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-93);
      byteArray0[8] = (byte)123;
      byteArray0[8] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)0, (byte) (-93));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("\"d{d0:!jXeA8F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"d{d0:!jXeA8F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("R@-TIvI", false);
      ConstantLong constantLong0 = new ConstantLong((-2321L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong1;
      constantArray0[2] = (Constant) constantMethodHandle0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantArray0[4] = (Constant) constantLong1;
      constantArray0[5] = (Constant) constantLong1;
      constantArray0[6] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool1.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool2, (-4144), (-4144), false);
      assertEquals("0:    dastore\n1:    lstore_1\n2:    aload_3\n3:    bastore\n4:    dstore_2\n5:    fneg\n6:    dstore_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("? extends ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      Utility.searchOpcode("System");
      Utility.accessToString((int) (short) (-1));
      Utility.classOrInterface(2130);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)60;
      byteArray0[8] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2118), (byte)85);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref1 = new ConstantFieldref(byteSequence0);
      constantArray0[2] = (Constant) constantFieldref1;
      Constant constant0 = constantMethodHandle0.copy();
      constantArray0[3] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (short) (-1), (int) (byte)20, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 21840. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Utility.getSignature("");
      Utility.printArray((Object[]) null);
      int int0 = 0;
      Utility.accessToString(0, false);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-124);
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)0;
      Constant[] constantArray0 = new Constant[9];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      constantArray0[0] = (Constant) constantUtf8_0;
      DataInput dataInput0 = null;
      ConstantMethodref constantMethodref0 = null;
      try {
        constantMethodref0 = new ConstantMethodref((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantCP", e);
      }
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Utility.getSignature("\t");
      ConstantString constantString0 = new ConstantString((-681));
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("L;", stringArray0);
      Utility.methodSignatureToString("()LL;;", "P]6$NqY6'_SI", "L;", true);
      try { 
        Utility.methodSignatureReturnType(">nBz(mN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>nBz(mN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("LB", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      Utility.getSignature("\t");
      ConstantString constantString0 = new ConstantString((-681));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1554), 502);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("0:    nop\n1:    nop\n2:    nop\n3:    nop\n", stringArray0);
      assertEquals("()L0:;", string1);
      
      String string2 = Utility.methodSignatureToString("()L0:;", "P]6$NqY6'_SI", "0:    nop\n1:    nop\n2:    nop\n3:    nop\n", true);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n 0: P]6$NqY6'_SI()", string2);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      String string0 = Utility.replace("B", "B", "B");
      assertEquals("B", string0);
      
      String string1 = Utility.methodSignatureReturnType("B", false);
      assertEquals("byte", string1);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Utility.compactClassName("CR6TTD'r6cKZCS<$5P", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "CR6TTD'r6cKZCS<$5P";
      objectArray0[1] = (Object) "CR6TTD'r6cKZCS<$5P";
      objectArray0[2] = (Object) "CR6TTD'r6cKZCS<$5P";
      objectArray0[3] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)39;
      byte byte0 = (byte)110;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)77;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("#hPt`i]rWC=>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #hPt`i]rWC=>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Utility.getSignature("g:{zZ\"85e7sS'Tb+");
      Utility.classOrInterface(425);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)3;
      Utility.encode(byteArray0, false);
      Utility.signatureToString("Lg:{zZ\"85e7sS'Tb+;");
      ConstantClass constantClass0 = null;
      try {
        constantClass0 = new ConstantClass((ConstantClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      int int0 = 102;
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)90, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)97;
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      Utility.searchOpcode("System");
      Utility.accessToString((int) (short) (-1));
      String string0 = Utility.classOrInterface(2130);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)60;
      byteArray0[8] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2118), (byte)85);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref1 = new ConstantFieldref(byteSequence0);
      constantArray0[2] = (Constant) constantFieldref1;
      Constant constant0 = constantMethodHandle0.copy();
      constantArray0[3] = constant0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)86);
      constantArray0[4] = (Constant) constantDouble0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[5] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      Utility.decode(";zfQ={DOWQJ!H", false);
      try { 
        Utility.typeOfSignature(";zfQ={DOWQJ!H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;zfQ={DOWQJ!H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Utility.classOrInterface(189);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)86;
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-65);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$O$ZII$bf", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2253), (int) (byte) (-65));
      assertEquals("0:    dconst_0\n1:    aload\t\t%73\n3:    dstore_2\n4:    athrow\n", string1);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      Utility.classOrInterface(3);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)84, 36);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)20;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)0, (byte)71);
      Constant[] constantArray0 = new Constant[16];
      constantArray0[0] = (Constant) constantMethodHandle0;
      byte byte0 = Utility.typeOfSignature("Zf");
      assertEquals((byte)4, byte0);
      
      boolean boolean0 = Utility.isSet(201, (byte)71);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[3];
      try { 
        Utility.typeOfSignature("Y5LiaFVonj`|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y5LiaFVonj`|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      short short0 = Utility.searchOpcode(" impdep2");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Utility.searchOpcode("newarray");
      try { 
        Utility.typeOfSignature("(,W5sPx,y9_%gW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (,W5sPx,y9_%gW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.printArray((Object[]) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      Utility.replace("|9BF*3| Xw`2cl'4", "-q?<TMy6q;%", "|9BF*3| Xw`2cl'4");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "|9BF*3| Xw`2cl'4";
      objectArray0[1] = (Object) "|9BF*3| Xw`2cl'4";
      objectArray0[2] = (Object) "-q?<TMy6q;%";
      objectArray0[3] = (Object) "|9BF*3| Xw`2cl'4";
      objectArray0[4] = (Object) "-q?<TMy6q;%";
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Utility.signatureToString("Sensitive", true);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)113, (byte)113);
      ConstantString constantString0 = new ConstantString((-1171));
      Utility.methodTypeToSignature("char", (String[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.format((byte)113, 5, false, 'x');
      try { 
        Utility.typeOfSignature("8q%58-VGu?QH{4J-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8q%58-VGu?QH{4J-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte)60;
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2386, (-1171));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantString constantString0 = new ConstantString((byte)53);
      constantArray0[1] = (Constant) constantString0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-429), 1402);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2205, 9, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 18196. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("C58lfJ4g8", stringArray0);
      assertEquals("()LC58lfJ4g8;", string0);
      
      Utility.methodSignatureArgumentTypes("()LC58lfJ4g8;", false);
      boolean boolean0 = Utility.isJavaIdentifierPart(',');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.format((byte)13, (byte)39, false, 'p');
      assertEquals("ppppppppppppppppppppppppppppppppppppp13", string1);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.classOrInterface(2698);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-125);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 114, 169);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(552, 552);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-85);
      boolean boolean0 = Utility.isJavaIdentifierPart('.');
      String string0 = Utility.accessToString(159);
      assertEquals("public private protected static final transient", string0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray1 = Utility.decode("yDME@$Nspqm)HP", false);
      boolean boolean1 = Utility.equals(byteArray1, byteArray1);
      assertFalse(boolean1 == boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(13, byteArray1.length);
      assertEquals("lshl", string1);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("-", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-124);
      byteArray1[1] = (byte) (-124);
      byteArray1[2] = (byte) (-124);
      byteArray1[3] = (byte) (-124);
      byteArray1[4] = (byte)111;
      byteArray1[5] = (byte) (-124);
      byteArray1[6] = (byte) (-124);
      byteArray1[7] = (byte) (-124);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray1[8] = (byte) (-124);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals(3, byteSequence1.getIndex());
      
      String string0 = Utility.convertString("fload_3");
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-114);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-114);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("DSD.)1g<6)faX", "DSD.)1g<6)faX", (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(48, 1442);
      Utility.toHexString(byteArray0);
      byteSequence0.reset();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(7, byteSequence0.getIndex());
      assertEquals("jsr_w\t\t#2", string0);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Object[] objectArray0 = new Object[1];
      Utility.printArray(objectArray0, false);
      boolean boolean0 = true;
      Utility.format((byte) (-18), 2, true, '6');
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      String string0 = "\t";
      Utility.getSignature("\t");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)44;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.searchOpcode("YImBxTzVm~?h|[jv");
      try { 
        Utility.methodSignatureArgumentTypes("s/^ER|3/Nd-&[tc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: s/^ER|3/Nd-&[tc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-61));
      constantInteger0.toString();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) constantInteger0;
      objectArray0[1] = (Object) constantPool0;
      objectArray0[2] = (Object) (byte) (-61);
      objectArray0[3] = (Object) (byte)12;
      objectArray0[4] = (Object) byteSequence1;
      Object object0 = new Object();
      objectArray0[6] = object0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) (byte)12;
      // Undeclared exception!
      try { 
        Utility.printArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readLong();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Utility.signatureToString("Sensitive", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-93);
      byteArray0[8] = (byte)0;
      byteArray0[8] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)0, (byte) (-93));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("i2b", string0);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      String string0 = Utility.convertString("p5:4~> {");
      assertEquals("p5:4~> {", string0);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      Utility.accessToString(36);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('c');
      Utility.convertString("\b");
      Utility.replace("2$x9_*|rv(4<@c", ")sagfeEa?", "\b");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "fL'p$^33jTH;[OPHss";
      Utility.decode("+4cU9G", false);
      try { 
        Utility.typeOfSignature(")sagfeEa?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )sagfeEa?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      String string0 = Utility.getSignature("\t");
      assertEquals("L;", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      String string1 = Utility.methodSignatureReturnType("L;");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      String string0 = Utility.accessToString(36);
      assertEquals("protected synchronized", string0);
      
      boolean boolean0 = Utility.isSet(36, 36);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('c');
      Utility.convertString("\b");
      String string1 = Utility.replace("2$x9_*|rv(4<@c", ")sagfeEa?", "\b");
      assertEquals("2$x9_*|rv(4<@c", string1);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('c');
      assertFalse(boolean1 == boolean0);
      
      String string2 = Utility.convertString("7I@C\"p.-v?#AVOit");
      assertEquals("7I@C\\\"p.-v?#AVOit", string2);
      
      String string3 = Utility.compactClassName("jvr@w", true);
      assertEquals("jvr@w", string3);
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("C58lfJ4g8", stringArray0);
      assertEquals("()LC58lfJ4g8;", string0);
      
      Utility.methodSignatureArgumentTypes("()LC58lfJ4g8;", false);
      byte byte0 = Utility.typeOfSignature("C58lfJ4g8");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      String string0 = "@_hPp\\K{Z -o&x<|9";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("(k+LbGm;k>", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `k+LbGm;k>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byte[] byteArray1 = new byte[0];
      Utility.encode(byteArray1, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.Utility$1", "q1t+", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility$1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      String string0 = "~bG";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~bG");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)39;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-93);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-50), (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      Utility.getSignature("g:{zZ\"85e7sS'Tb+");
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = null;
      Utility.signatureToString("Lg:{zZ\"85e7sS'Tb+;");
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("SimpleElementValue doesnt know how to write out type ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aastore", string0);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)30;
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)65;
      byteArray1[1] = (byte)30;
      byteArray1[2] = (byte) (-15);
      byteArray1[3] = (byte)30;
      byteArray1[4] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("xZO/?#,5", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-808), (-808));
      assertArrayEquals(new byte[] {(byte)120, (byte)90, (byte)79, (byte)47, (byte)63, (byte)35, (byte)44, (byte)53}, byteArray0);
      assertEquals("0:    ishl\n1:    dup_x1\n2:    iastore\n3:    laload\n4:    lstore_0\n5:    fload_1\n6:    aload_2\n7:    saload\n", string0);
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("R@-TIvI", false);
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "xsL6_";
      stringArray0[1] = "xsL6_";
      String string0 = Utility.methodTypeToSignature("xsL6_", stringArray0);
      assertEquals("(LxsL6_;LxsL6_;)LxsL6_;", string0);
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      Utility.getSignature("\t");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)69;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)12;
      ConstantString constantString0 = new ConstantString((byte)69);
      Utility.methodTypeToSignature("6*{=j", (String[]) null);
      Utility.signatureToString("L;");
      Utility.methodTypeToSignature("", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("bcel.statistics", "6*{=j", "6*{=j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: bcel.statistics
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      Utility.setBit((-3427), 67);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)30;
      byteArray0[8] = (byte) (-23);
      Utility.toHexString(byteArray0);
      Utility.replace("org.apache.bcel.classfile.ConstantUtf8", "org.apache.bcel.classfile.ConstantUtf8", "EWX");
      // Undeclared exception!
      try { 
        Utility.signatureToString("EWX", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EWX'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("G/mbP>,4xvIE1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G/mbP>,4xvIE1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      Utility.getSignature("g:{zZ\"85e7sS'Tb+");
      byte[] byteArray0 = new byte[8];
      Utility.encode(byteArray0, false);
      String string0 = "+>$PavD";
      try { 
        Utility.typeOfSignature("+>$PavD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >$PavD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-100), (int) (byte) (-100));
      assertEquals("0:    nop\n", string0);
      
      String string1 = Utility.classOrInterface((byte) (-100));
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Zjyo6v[F~B:_bTA3)E^");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature("\t");
      Utility.typeOfSignature("F");
      Utility.compactClassName("pMVCe|g");
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "\t", "L;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dneg", string0);
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.convertString("$PF*{lv,l@0KTJ>7g*X");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-59);
      byteArray0[7] = (byte)71;
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)20, (byte)71);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-59), (int) (byte)71);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("1e 1e", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload_0", string1);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(180, 195);
      Constant constant0 = constantFieldref0.copy();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = constant0;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[4] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString(">", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      Object object1 = new Object();
      Utility.printArray(objectArray0, true);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) "{null}";
      objectArray1[1] = object1;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-63);
      Utility.encode(byteArray0, true);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      String string0 = Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.compactClassName("8d 00 00 00 00 00 00 00 00", false);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2d", string2);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      Utility.classOrInterface(189);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), (int) (byte) (-57));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lconst_1
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[3] = (byte)66;
      byteArray0[2] = (byte) (-75);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)99;
      byteArray1[1] = (byte)99;
      byteArray1[2] = (byte)99;
      byteArray1[3] = (byte)99;
      byteArray1[4] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dadd", string0);
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      String string0 = Utility.getSignature("\t");
      assertEquals("L;", string0);
      
      ConstantString constantString0 = new ConstantString((-681));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("ladd", string1);
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".H$!IL1Qcn4\"m)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .H$!IL1Qcn4\"m)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("6d 00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `6d 00 00'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      Utility.convertString("");
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)96;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("(", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      String string0 = Utility.getSignature("Invalid signature: `");
      assertEquals("LInvalid;", string0);
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      Utility.clearBit((-1), (-1));
      Utility.compactClassName("int", false);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String string0 = "v?I@`%fVY%vLe_\\";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "v?I@`%fVY%vLe_", "v?I@`%fVY%vLe_", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Utility.decode("double", false);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Utility.isJavaIdentifierPart('^');
      String string0 = Utility.accessToString((int) (byte) (-18));
      Utility.decode("private protected static synchronized volatile transient native interface abstract strictfp synthetic annotation enum", false);
      String string1 = Utility.format((byte) (-18), 2523, false, '\'');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-59);
      byteArray0[7] = (byte)71;
      ConstantString constantString0 = new ConstantString((byte)71);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)71;
      byteArray1[1] = (byte) (-59);
      byteArray1[2] = (byte)71;
      byteArray1[3] = (byte) (-59);
      byteArray1[4] = (byte)4;
      byteArray1[5] = (byte) (-59);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("dstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)0, (byte)71);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      Constant[] constantArray0 = new Constant[16];
      constantArray0[0] = (Constant) constantMethodHandle0;
      byte byte0 = Utility.typeOfSignature("Zf");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      int int0 = (-1945);
      Utility.classOrInterface((-1945));
      Utility.accessToString(34, true);
      Utility.compactClassName("class", false);
      byte[] byteArray0 = null;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(".H$!IL1Qcn4\")", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = byteSequence0.readUnsignedShort();
      assertEquals(11848, int0);
      
      int int1 = byteSequence0.readUnsignedByte();
      assertEquals(0, int1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_2", string0);
      assertEquals(12, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2737, 68);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-127);
      Utility.accessToString((-5207));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1124, (int) (byte)43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(155, 552);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 69, (-1153), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~bG");
      Utility.decode("~bG", false);
      String string0 = ")";
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte)90;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 5, 2773, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48218. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      Utility.methodSignatureReturnType("V_TH%9vz&y", true);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-93);
      byteArray0[8] = (byte)0;
      Utility.clearBit((byte) (-93), (byte)0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      byte byte0 = (byte)123;
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      String string0 = Utility.format(1403, 1403, true, 'V');
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      byte byte0 = (byte)20;
      byte[] byteArray0 = null;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, ";zfQ={DOWQJ!H", ";zfQ={DOWQJ!H", false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("[r*:/'m", false);
      Utility.typeOfSignature("[r*:/'m");
      String string0 = Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "[r*:/'m";
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), (int) (byte) (-62));
      assertEquals("0:    monitorenter\n", string0);
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Duy0tp`R]< H$Rq-zgn");
      assertEquals((byte)7, byte0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      Utility.classOrInterface(189);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)86;
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(12, byteSequence0.getIndex());
      assertEquals("lookupswitch\tdefault = 0, npairs = 0 ()", string0);
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      Utility.encode(byteArray0, false);
      Utility.decode("if_icmpgt", false);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      Utility.getSignature("\t");
      Utility.methodSignatureReturnType("L;", true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "L;";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("bl[", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("fadd", string0);
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-2773), 57);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-82);
      Utility.compactClassName("wo!Rg)93", "wo!Rg)93", true);
      try { 
        Utility.typeOfSignature("&;yc8U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &;yc8U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.io.Serializable");
      byteArray0[0] = (byte) (-99);
      byte[] byteArray1 = Utility.decode("if_icmplt", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("fsub", string0);
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("null, null", string0);
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 83, false, '#');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      String string0 = "L)sagfe\\Ea?;V";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("Hb", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Object[] objectArray0 = new Object[1];
      Utility.format('6', 1403, true, 'N');
      Utility.compactClassName("vpepN.$(#9n><F9;4v", ".W", true);
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("PxaB}=.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PxaB}=.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("k[<}'9p", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 173, 168);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('6');
      Object[] objectArray0 = new Object[1];
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("null", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-18);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-18), 4, false);
      assertEquals("0:    <illegal opcode>\n1:    nop\n2:    nop\n3:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      Utility.searchOpcode("System");
      Utility.signatureToString("System", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-93);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-93);
      byteArray1[1] = (byte) (-93);
      byteArray1[2] = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray1[4] = (byte)54;
      byteArray1[5] = (byte)54;
      byteArray1[6] = (byte)54;
      byteArray1[7] = (byte)54;
      byteArray1[8] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-92);
      byteArray2[1] = (byte)54;
      byteArray2[2] = (byte) (-93);
      byteArray2[3] = (byte) (-93);
      ByteSequence byteSequence1 = new ByteSequence(byteArray2);
      ByteSequence byteSequence2 = new ByteSequence(byteArray2);
      byteSequence2.close();
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-4257), (byte)0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, true);
      String string1 = Utility.format((-4257), 2687, false, 'u');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[2] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("putstatic", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("irem", string0);
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      Utility.methodTypeToSignature("if_icmpge", (String[]) null);
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-86);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString(4375);
      try { 
        Utility.methodSignatureReturnType("public private protected final native synthetic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public private protected final native synthetic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      String string0 = "ireturn";
      Utility.compactClassName("ireturn");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isSet((-1), 159);
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName("ireturn", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1235, (int) (byte) (-123));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      Utility.accessToString(36);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('c');
      Utility.convertString("\b");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.format((-1442), (-1442), true, 'c');
      try { 
        Utility.typeOfSignature("-1442");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -1442
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore\t\t%55", string0);
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      String string0 = Utility.classOrInterface((-39));
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Oj9hR##KADm/Q`>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Oj9hR##KADm/Q`>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode(")\t", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_3", string0);
      assertArrayEquals(new byte[] {(byte)41, (byte)9}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      Utility.accessToString(36);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('c');
      Utility.convertString("\b");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LYE;V");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-20);
      byteArray0[0] = (byte)19;
      byteArray0[3] = (byte) (-20);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("protected synchronized");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      Utility.format(0, 75, true, 'u');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      objectArray0[1] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      objectArray0[2] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      objectArray0[3] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      objectArray0[4] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      objectArray0[7] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      objectArray0[8] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      Utility.printArray(objectArray0);
      Utility.isSet((-5183), 75);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)0;
      Constant[] constantArray0 = new Constant[7];
      ClassPath classPath0 = new ClassPath("{0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu, 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu, 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu, 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu, 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu, java.lang.Object@651828e2, 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu, 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu, 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu}");
      MockFile mockFile0 = new MockFile("0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu");
      MockFile mockFile1 = new MockFile(mockFile0, "java.lang.protected synchronized");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      try { 
        classPath0.getInputStream(")");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Couldn't find: ).class
         //
         verifyException("org.apache.bcel.util.ClassPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload_2", string0);
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)113;
      byteArray0[0] = (byte)113;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)113;
      Utility.encode(byteArray0, false);
      Utility.encode(byteArray0, false);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("Sensitive");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantInteger constantInteger0 = new ConstantInteger((byte)113);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)0, 39);
      constantInteger0.clone();
      ConstantString constantString0 = new ConstantString((byte)0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInteger0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("lrem", string0);
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2737, 68);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)72;
      try { 
        Utility.typeOfSignature("%AVidB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %AVidB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-55), (int) (byte) (-55), true);
      assertEquals("0:    nop\n1:    lconst_1\n2:    jsr_w\t\t#2\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(180, 195);
      Constant constant0 = constantFieldref0.copy();
      constant0.copy();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.signatureToString("LM27}=btO*a(%XT5H:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LM27}=btO*a(%XT5H:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The size must be non-negative");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(200, false);
      Utility.fillup("static volatile transient", 200, false, 'I');
      Utility.typeOfSignature("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIstatic volatile transient");
      // Undeclared exception!
      try { 
        Utility.signatureToString("static volatile transient", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `static volatile transient'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      Utility.classOrInterface(189);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(12, byteSequence0.getIndex());
      assertEquals("lookupswitch\tdefault = 0, npairs = 0 ()", string0);
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("c_<PF$d.@M>/AbNA)");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("R@-TIvI", false);
      Utility.encode(byteArray0, false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("R$40$zTIvI", string0);
      
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("R$40$zTIvI");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantInteger constantInteger0 = new ConstantInteger(59);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(59, 59);
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      constantInteger0.clone();
      ConstantString constantString0 = new ConstantString(188);
      constantArray0[4] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInteger0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aload_3", string1);
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      String string0 = Utility.classOrInterface(189);
      assertEquals("class", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "V";
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(189, 46);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("Q$oQ$9eQ", string1);
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(175, (-623), (LocalVariable[]) null, (ConstantPool) null);
      LocalVariableTable localVariableTable1 = new LocalVariableTable(localVariableTable0);
      try { 
        Utility.methodSignatureToString("<", ">=", "8];O1NJ`fT'WL&/>]{", true, localVariableTable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      Utility.signatureToString("Sensitive", false);
      Utility.methodSignatureReturnType("V_TH%9vz&y", false);
      Utility.accessToString(27, true);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)92, (int) (byte) (-19));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(65, 65);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 45568. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-55);
      Utility.encode(byteArray0, false);
      Utility.decode("$A$K$c9$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("$A$K$c9$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$A$K$c9$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte)21;
      byteArray0[8] = (byte) (-78);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("bc 85 06 5a 85 91 bc 15 b2", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dup_x1", string1);
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)1;
      Utility.toHexString(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger((byte)1);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("_c9wxB}c`|AI;?");
      constantUtf8_0.copy();
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)83, (-1688));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2d", string0);
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("aastore", string0);
  }
}
