/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:51:21 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.ClonePlugin;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.main.FreeMindApplet;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeListener;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.help.HelpSet;
import javax.swing.ActionMap;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.TransferHandler;
import javax.swing.event.AncestorListener;
import javax.swing.plaf.ComponentUI;
import javax.swing.plaf.basic.BasicComboBoxUI;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.plaf.synth.SynthCheckBoxUI;
import javax.swing.plaf.synth.SynthDesktopIconUI;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleContext;
import org.apache.batik.bridge.SVGColorProfileElementBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.css.engine.SVGCSSEngine;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.dom.events.DOMKeyEvent;
import org.apache.batik.gvt.renderer.StrokingTextPainter;
import org.apache.batik.util.SVGConstants;
import org.apache.xerces.dom.PSVIDocumentImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMImplementation;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 513, (-1470), (-1470), 4, 'N');
      jDayChooser0.keyTyped(keyEvent0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      boolean boolean1 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      Color color0 = jDayChooser0.getSundayForeground();
      assertNotNull(color0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(164, color0.getRed());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      
      jDayChooser0.addNotify();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setDay((-1));
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1), true, jDayChooser0);
      assertNotNull(focusEvent0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(focusEvent0.isTemporary());
      assertEquals((-1), focusEvent0.getID());
      
      jDayChooser0.focusGained(focusEvent0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(focusEvent0.isTemporary());
      assertEquals((-1), focusEvent0.getID());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      Date date0 = jDayChooser0.getMaxSelectableDate();
      assertNotNull(date0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertNotNull(jDayChooser_DecoratorButton0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      
      boolean boolean0 = jDayChooser_DecoratorButton0.isFocusable();
      assertFalse(boolean0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      
      boolean boolean1 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      assertNotNull(jPanel0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertFalse(jPanel0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      JYearChooser jYearChooser0 = new JYearChooser();
      assertNotNull(jYearChooser0);
      assertEquals(2014, jYearChooser0.getValue());
      assertEquals(1, jYearChooser0.getStartYear());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals(1, jYearChooser0.getMinimum());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(2014, jYearChooser0.getYear());
      
      jDayChooser0.setYearChooser(jYearChooser0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(2014, jYearChooser0.getValue());
      assertEquals(1, jYearChooser0.getStartYear());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals(1, jYearChooser0.getMinimum());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(2014, jYearChooser0.getYear());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      assertFalse(boolean0);
      
      StyleContext styleContext0 = new StyleContext();
      assertNotNull(styleContext0);
      
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      assertNotNull(defaultStyledDocument0);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 37);
      assertNotNull(focusEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(37, focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      
      Component component0 = focusEvent0.getOppositeComponent();
      assertNull(component0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(37, focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(37, focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      
      Date date0 = jDayChooser0.getMaxSelectableDate();
      assertNotNull(date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      boolean boolean0 = jDayChooser0.isDoubleBuffered();
      assertTrue(boolean0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      String string0 = jDayChooser0.getName();
      assertNotNull(string0);
      assertEquals("JDayChooser", string0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      
      jDayChooser0.setDay((-3329));
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertNotNull(date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      assertNotNull(date1);
      assertSame(date0, date1);
      assertSame(date1, date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      assertNotNull(hierarchyBoundsListener1);
      
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      assertNull(hierarchyBoundsListener2);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      
      jDayChooser0.locale = locale0;
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", jDayChooser0.locale.toString());
      assertEquals("", jDayChooser0.locale.getCountry());
      assertEquals("", jDayChooser0.locale.getISO3Language());
      assertEquals("", jDayChooser0.locale.getLanguage());
      assertEquals("", jDayChooser0.locale.getISO3Country());
      assertEquals("", jDayChooser0.locale.getVariant());
      
      Locale locale1 = jDayChooser0.getLocale();
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertNotNull(color0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals((-2956050), color0.getRGB());
      assertEquals(210, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(228, color0.getGreen());
      assertEquals(238, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals((-2956050), color0.getRGB());
      assertEquals(210, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(228, color0.getGreen());
      assertEquals(238, color0.getBlue());
      assertEquals(255, color0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.menu;
      assertNotNull(systemColor0);
      assertEquals(192, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getRed());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-4144960), systemColor0.getRGB());
      
      BasicComboBoxUI basicComboBoxUI0 = new BasicComboBoxUI();
      assertNotNull(basicComboBoxUI0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.setMaxDayCharacters(17);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      int int0 = DOMKeyEvent.DOM_VK_F5;
      assertEquals(116, int0);
      
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      assertNull(jMonthChooser0);
      
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(116, (-639), 238);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=116,MONTH=-639,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=238,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=116,MONTH=-639,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=238,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.initialized = false;
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.keyReleased((KeyEvent) null);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      Time time0 = new Time(892L);
      assertNotNull(time0);
      assertEquals("00:00:00", time0.toString());
      
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      assertNotNull(metalComboBoxEditor0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      Integer integer0 = StrokingTextPainter.ADJUST_SPACING;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      ActionEvent actionEvent0 = new ActionEvent(integer0, 7, "day", 892L, 7);
      assertNotNull(actionEvent0);
      assertEquals(892L, actionEvent0.getWhen());
      assertEquals("day", actionEvent0.getActionCommand());
      assertEquals(7, actionEvent0.getModifiers());
      assertEquals(7, actionEvent0.getID());
      
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      SynthDesktopIconUI synthDesktopIconUI0 = new SynthDesktopIconUI();
      assertNotNull(synthDesktopIconUI0);
      
      jDayChooser0.addPropertyChangeListener("day", (PropertyChangeListener) synthDesktopIconUI0);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.addPropertyChangeListener((PropertyChangeListener) synthDesktopIconUI0);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      String string0 = jDayChooser0.getUIClassID();
      assertNotNull(string0);
      assertEquals("PanelUI", string0);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      Color color0 = jDayChooser0.getSundayForeground();
      assertNotNull(color0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(164, color0.getRed());
      
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertNull(jButton0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setMonth((-917));
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      assertNull(jMonthChooser0);
      
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setMaxDayCharacters((-639));
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertNull(jButton0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      SystemColor systemColor0 = SystemColor.menu;
      assertNotNull(systemColor0);
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getBlue());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(192, systemColor0.getGreen());
      
      BasicComboBoxUI basicComboBoxUI0 = new BasicComboBoxUI();
      assertNotNull(basicComboBoxUI0);
      
      Dimension dimension0 = basicComboBoxUI0.getMaximumSize(jDayChooser0);
      assertNotNull(dimension0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(32767.0, dimension0.getWidth(), 0.01);
      assertEquals(32767.0, dimension0.getHeight(), 0.01);
      assertEquals(32767, dimension0.height);
      assertEquals(32767, dimension0.width);
      
      dimension0.setSize(0, 0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ze\"");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      Color color0 = jDayChooser0.getSundayForeground();
      assertNotNull(color0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, color0.getBlue());
      assertEquals(164, color0.getRed());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      
      int int0 = (-717);
      MockDate mockDate0 = new MockDate(0, 0, (-717));
      assertNotNull(mockDate0);
      assertEquals("Thu Jan 13 00:00:00 GMT 1898", mockDate0.toString());
      
      // Undeclared exception!
      try { 
        MockDate.parse("Ze\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      SystemColor systemColor0 = SystemColor.windowText;
      assertNotNull(systemColor0);
      assertEquals(0, systemColor0.getBlue());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(0, systemColor0.getRed());
      
      jDayChooser0.setWeekdayForeground(systemColor0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(0, systemColor0.getRed());
      
      Date date0 = jDayChooser0.minSelectableDate;
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      assertNotNull(date1);
      assertSame(date0, date1);
      assertSame(date1, date0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      assertNull(hierarchyListener1);
      
      Color color0 = Color.pink;
      assertNotNull(color0);
      assertEquals(175, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(175, color0.getGreen());
      assertEquals((-20561), color0.getRGB());
      
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      assertNotNull(sVGColorProfileElementBridge0);
      assertEquals("http://www.w3.org/2000/svg", sVGColorProfileElementBridge0.getNamespaceURI());
      assertEquals("color-profile", sVGColorProfileElementBridge0.getLocalName());
      
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      assertNotNull(userAgentAdapter0);
      assertEquals(0.26458332F, userAgentAdapter0.getPixelToMM(), 0.01F);
      assertEquals("en", userAgentAdapter0.getLanguages());
      assertEquals("Arial, Helvetica, sans-serif", userAgentAdapter0.getDefaultFontFamily());
      assertNull(userAgentAdapter0.getUserStyleSheetURI());
      assertEquals(12.0F, userAgentAdapter0.getMediumFontSize(), 0.01F);
      assertEquals("all", userAgentAdapter0.getMedia());
      assertNull(userAgentAdapter0.getAlternateStyleSheet());
      assertEquals(0.26458332F, userAgentAdapter0.getPixelUnitToMillimeter(), 0.01F);
      assertFalse(userAgentAdapter0.isXMLParserValidating());
      
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      assertNotNull(pSVIDocumentImpl0);
      
      DOMImplementation dOMImplementation0 = GenericDOMImplementation.getDOMImplementation();
      assertNotNull(dOMImplementation0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      int int0 = jDayChooser0.getY();
      assertEquals(0, int0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      assertNotNull(jMonthChooser0);
      assertTrue(jMonthChooser0.hasSpinner());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertEquals(1, jMonthChooser0.getMonth());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jMonthChooser0.hasSpinner());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertEquals(1, jMonthChooser0.getMonth());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      
      Color color1 = jDayChooser0.getSundayForeground();
      assertNotNull(color1);
      assertNotSame(color1, color0);
      assertFalse(color1.equals((Object)color0));
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getGreen());
      assertEquals(0, color1.getBlue());
      assertEquals(164, color1.getRed());
      assertEquals((-6029312), color1.getRGB());
      
      Color color2 = jDayChooser0.getWeekdayForeground();
      assertNotNull(color2);
      assertNotSame(color2, color1);
      assertNotSame(color2, color0);
      assertFalse(color2.equals((Object)color1));
      assertFalse(color2.equals((Object)color0));
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, color2.getRed());
      assertEquals(90, color2.getGreen());
      assertEquals((-16754012), color2.getRGB());
      assertEquals(164, color2.getBlue());
      assertEquals(1, color2.getTransparency());
      assertEquals(255, color2.getAlpha());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      SystemColor systemColor0 = SystemColor.menu;
      assertNotNull(systemColor0);
      assertEquals(192, systemColor0.getBlue());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getRed());
      
      float[] floatArray0 = systemColor0.getComponents((float[]) null);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.7529412F, 0.7529412F, 0.7529412F, 1.0F}, floatArray0, 0.01F);
      assertEquals(192, systemColor0.getBlue());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getRed());
      
      System.setCurrentTimeMillis(0L);
      jDayChooser0.setSundayForeground((Color) null);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      InputMethodListener inputMethodListener0 = AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener0);
      
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener1);
      
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener2);
      
      InputMethodListener inputMethodListener3 = AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener3);
      
      InputMethodListener inputMethodListener4 = AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener4);
      
      InputMethodListener inputMethodListener5 = AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener5);
      
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      Class<SynthDesktopIconUI> class0 = SynthDesktopIconUI.class;
      SynthDesktopIconUI[] synthDesktopIconUIArray0 = jDayChooser0.getListeners(class0);
      assertNotNull(synthDesktopIconUIArray0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{Bin{;c3Q$0";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "2 T$";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      float float0 = jDayChooser0.getAlignmentY();
      assertEquals(0.5F, float0, 0.01F);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      assertNull(hierarchyListener1);
      
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jDayChooser0.setYear(1728);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      Time time0 = new Time(1728);
      assertNotNull(time0);
      assertEquals("00:00:01", time0.toString());
      
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      assertNotNull(metalComboBoxEditor0);
      
      boolean boolean1 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1, 4L, 167, 167, ',');
      assertNotNull(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(39, keyEvent0.getModifiers());
      assertEquals(128, keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(4L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(167, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(1, keyEvent0.getID());
      assertFalse(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(',', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltGraphDown());
      
      keyEvent0.consume();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(keyEvent0.isConsumed());
      assertEquals(39, keyEvent0.getModifiers());
      assertEquals(128, keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(4L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(167, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(1, keyEvent0.getID());
      assertFalse(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(',', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltGraphDown());
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertNotNull(jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(14, jDayChooser1.getDay());
      
      jDayChooser1.keyPressed(keyEvent0);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(keyEvent0.isConsumed());
      assertEquals(39, keyEvent0.getModifiers());
      assertEquals(128, keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(4L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(167, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(1, keyEvent0.getID());
      assertFalse(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(',', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltGraphDown());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(14, jDayChooser1.getDay());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      
      Date date0 = jDayChooser1.getMinSelectableDate();
      assertNotNull(date0);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      jDayChooser1.setMaxDayCharacters(1);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(1, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
      
      jDayChooser0.drawWeeks();
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.setFocus();
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.transferFocusUpCycle();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Time time0 = new Time(892L);
      assertNotNull(time0);
      assertEquals("00:00:00", time0.toString());
      
      Date date0 = jDayChooser0.setMaxSelectableDate(time0);
      assertNotNull(date0);
      assertSame(time0, date0);
      assertSame(date0, time0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals("00:00:00", time0.toString());
      assertEquals("00:00:00", date0.toString());
      
      Locale locale0 = jDayChooser0.getLocale();
      assertNotNull(locale0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      Time time1 = new Time(892L);
      assertNotNull(time1);
      assertTrue(time1.equals((Object)date0));
      assertTrue(time1.equals((Object)time0));
      assertEquals("00:00:00", time1.toString());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertNotNull(jDayChooser_DecoratorButton0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.transferFocusUpCycle();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      assertNull(jYearChooser0);
      
      jDayChooser0.removeFocusListener((FocusListener) null);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertNotNull(jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      
      Date date0 = jDayChooser0.setMaxSelectableDate((Date) null);
      assertNotNull(date0);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Date date1 = jDayChooser0.setMinSelectableDate((Date) null);
      assertNotNull(date1);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(date1, date0);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertTrue(date1.equals((Object)date0));
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      
      JDayChooser jDayChooser2 = new JDayChooser(false);
      assertNotNull(jDayChooser2);
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser2.getDay());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertTrue(jDayChooser2.isDayBordersVisible());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertNotNull(jDayChooser_DecoratorButton0);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.equals((Object)jDayChooser2));
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser0, jDayChooser2);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.equals((Object)jDayChooser2));
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      assertNotNull(structuredMenuHolder0);
      assertEquals(16, StructuredMenuHolder.ICON_SIZE);
      
      ClonePlugin clonePlugin0 = new ClonePlugin();
      assertNotNull(clonePlugin0);
      assertNull(clonePlugin0.getName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      TransferHandler transferHandler0 = jDayChooser0.getTransferHandler();
      assertNull(transferHandler0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      boolean boolean1 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-32), 0L, (-32), (-32), ',');
      assertNotNull(keyEvent0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-2147483616), keyEvent0.getModifiers());
      assertEquals(',', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(0L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals((-32), keyEvent0.getID());
      assertFalse(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isControlDown());
      assertEquals((-32), keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals((-64), keyEvent0.getModifiersEx());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-2147483616), keyEvent0.getModifiers());
      assertEquals(',', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(0L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals((-32), keyEvent0.getID());
      assertFalse(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isControlDown());
      assertEquals((-32), keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals((-64), keyEvent0.getModifiersEx());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      assertNotNull(actionMap0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      jDayChooser0.setDay(39);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      JButton jButton0 = new JButton();
      assertNotNull(jButton0);
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.isFocusCycleRoot());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertFalse(jButton0.getIgnoreRepaint());
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-8), 0L, 653, 39, '+');
      assertNotNull(keyEvent0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(39, keyEvent0.getKeyCode());
      assertEquals(0L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(640, keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-8), keyEvent0.getID());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(keyEvent0.isControlDown());
      assertEquals('+', keyEvent0.getKeyChar());
      assertEquals(13, keyEvent0.getModifiers());
      
      SynthDesktopIconUI synthDesktopIconUI0 = new SynthDesktopIconUI();
      assertNotNull(synthDesktopIconUI0);
      
      keyEvent0.setSource(synthDesktopIconUI0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(39, keyEvent0.getKeyCode());
      assertEquals(0L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(640, keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-8), keyEvent0.getID());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(keyEvent0.isControlDown());
      assertEquals('+', keyEvent0.getKeyChar());
      assertEquals(13, keyEvent0.getModifiers());
      
      String string0 = keyEvent0.paramString();
      assertNotNull(string0);
      assertEquals("unknown type,keyCode=39,keyText=Right,keyChar='+',modifiers=Meta+Alt+Shift,extModifiers=Ctrl+Alt,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0", string0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(39, keyEvent0.getKeyCode());
      assertEquals(0L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(640, keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-8), keyEvent0.getID());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(keyEvent0.isControlDown());
      assertEquals('+', keyEvent0.getKeyChar());
      assertEquals(13, keyEvent0.getModifiers());
      
      String string1 = SVGConstants.SVG_INITIAL_VALUE;
      assertNotNull(string1);
      assertEquals("initial", string1);
      assertFalse(string1.equals((Object)string0));
      
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(39, keyEvent0.getKeyCode());
      assertEquals(0L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(640, keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-8), keyEvent0.getID());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(keyEvent0.isControlDown());
      assertEquals('+', keyEvent0.getKeyChar());
      assertEquals(13, keyEvent0.getModifiers());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertNotNull(jDayChooser_DecoratorButton0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      
      int int0 = SVGCSSEngine.BASELINE_SHIFT_INDEX;
      assertEquals(1, int0);
      
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.setMonth(653);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(30, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(30, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(30, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.setYear(39);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(30, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.setDecorationBordersVisible(true);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(30, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      JDayChooser jDayChooser1 = new JDayChooser();
      assertNotNull(jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      
      jDayChooser0.setDay(34);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SystemColor systemColor0 = SystemColor.scrollbar;
      assertNotNull(systemColor0);
      assertEquals((-2039584), systemColor0.getRGB());
      assertEquals(224, systemColor0.getBlue());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(224, systemColor0.getGreen());
      assertEquals(224, systemColor0.getRed());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      jDayChooser1.calendar = (Calendar) mockGregorianCalendar0;
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(jDayChooser1.calendar.isLenient());
      assertEquals(1, jDayChooser1.calendar.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", jDayChooser1.calendar.toString());
      assertEquals(1, jDayChooser1.calendar.getFirstDayOfWeek());
      
      JButton jButton0 = new JButton();
      assertNotNull(jButton0);
      assertFalse(jButton0.getIgnoreRepaint());
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.isFocusCycleRoot());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, (byte) (-89), 34, 34, '/');
      assertNotNull(keyEvent0);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(34, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(8320, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(34, keyEvent0.getKeyCode());
      assertEquals(34, keyEvent0.getID());
      assertEquals('/', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals((-89L), keyEvent0.getWhen());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isControlDown());
      
      keyEvent0.setKeyChar('a');
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(34, keyEvent0.getModifiers());
      assertEquals('a', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(8320, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(34, keyEvent0.getKeyCode());
      assertEquals(34, keyEvent0.getID());
      assertTrue(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals((-89L), keyEvent0.getWhen());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isControlDown());
      
      String string0 = SVGConstants.SVG_INITIAL_VALUE;
      assertNotNull(string0);
      assertEquals("initial", string0);
      
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      assertNotNull(actionMap0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      jDayChooser0.setDay(39);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      JButton jButton0 = new JButton();
      assertNotNull(jButton0);
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertFalse(jButton0.isFocusCycleRoot());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertFalse(jButton0.getIgnoreRepaint());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-8), 0L, 653, 39, '+');
      assertNotNull(keyEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(keyEvent0.isConsumed());
      assertEquals('+', keyEvent0.getKeyChar());
      assertEquals(13, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(39, keyEvent0.getKeyCode());
      assertEquals((-8), keyEvent0.getID());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(0L, keyEvent0.getWhen());
      assertEquals(640, keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isControlDown());
      
      String string0 = keyEvent0.paramString();
      assertNotNull(string0);
      assertEquals("unknown type,keyCode=39,keyText=Right,keyChar='+',modifiers=Meta+Alt+Shift,extModifiers=Ctrl+Alt,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0", string0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(keyEvent0.isConsumed());
      assertEquals('+', keyEvent0.getKeyChar());
      assertEquals(13, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(39, keyEvent0.getKeyCode());
      assertEquals((-8), keyEvent0.getID());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(0L, keyEvent0.getWhen());
      assertEquals(640, keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isControlDown());
      
      String string1 = SVGConstants.SVG_INITIAL_VALUE;
      assertNotNull(string1);
      assertEquals("initial", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(keyEvent0.isConsumed());
      assertEquals('+', keyEvent0.getKeyChar());
      assertEquals(13, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(39, keyEvent0.getKeyCode());
      assertEquals((-8), keyEvent0.getID());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(0L, keyEvent0.getWhen());
      assertEquals(640, keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isControlDown());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertNotNull(jDayChooser_DecoratorButton0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      assertNotNull(jDayChooser_DecoratorButton1);
      assertFalse(jDayChooser_DecoratorButton1.equals((Object)jDayChooser_DecoratorButton0));
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser_DecoratorButton1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton1.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton1.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton1.isFocusable());
      
      boolean boolean3 = jDayChooser_DecoratorButton1.isFocusable();
      assertFalse(boolean3);
      assertNotSame(jDayChooser_DecoratorButton1, jDayChooser_DecoratorButton0);
      assertFalse(jDayChooser_DecoratorButton1.equals((Object)jDayChooser_DecoratorButton0));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser_DecoratorButton1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton1.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton1.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton1.isFocusable());
      
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      SystemColor systemColor0 = SystemColor.textHighlight;
      assertNotNull(systemColor0);
      assertEquals((-16777088), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(128, systemColor0.getBlue());
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getGreen());
      
      float[] floatArray0 = systemColor0.getComponents((float[]) null);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.5019608F, 1.0F}, floatArray0, 0.01F);
      assertEquals((-16777088), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(128, systemColor0.getBlue());
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getGreen());
      
      System.setCurrentTimeMillis(0L);
      jDayChooser0.setDoubleBuffered(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      InputMethodListener inputMethodListener0 = AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener0);
      
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener1);
      
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      MockDate mockDate0 = new MockDate(347, 3028, (-2093));
      assertNotNull(mockDate0);
      assertEquals("Thu Aug 06 00:00:00 GMT 2493", mockDate0.toString());
      
      JButton jButton0 = new JButton("\"_8fc*`Lq=WVxHu");
      assertNotNull(jButton0);
      assertFalse(jButton0.isFocusCycleRoot());
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.getIgnoreRepaint());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 347, 228, 244, 37, 'Q');
      assertNotNull(keyEvent0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(347, keyEvent0.getID());
      assertEquals('Q', keyEvent0.getKeyChar());
      assertEquals(192, keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(52, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(37, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(228L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isMetaDown());
      
      String string0 = SVGConstants.SVG_INITIAL_VALUE;
      assertNotNull(string0);
      assertEquals("initial", string0);
      
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(13, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(347, keyEvent0.getID());
      assertEquals('Q', keyEvent0.getKeyChar());
      assertEquals(192, keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(52, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(37, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(228L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isMetaDown());
      
      JYearChooser jYearChooser0 = new JYearChooser();
      assertNotNull(jYearChooser0);
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(1970, jYearChooser0.getYear());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(1, jYearChooser0.getMinimum());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertEquals(1970, jYearChooser0.getValue());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      assertNull(jDayChooser1);
      
      JDayChooser jDayChooser2 = new JDayChooser(true);
      assertNotNull(jDayChooser2);
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertEquals(1, jDayChooser2.getDay());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser2.isWeekOfYearVisible());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertTrue(jDayChooser2.isDayBordersVisible());
      
      boolean boolean0 = jDayChooser2.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      assertNotSame(jDayChooser2, jDayChooser0);
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertEquals(1, jDayChooser2.getDay());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser2.isWeekOfYearVisible());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertTrue(jDayChooser2.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          JDayChooser jDayChooser0 = new JDayChooser();
          assertNotNull(jDayChooser0);
          assertEquals(14, jDayChooser0.getDay());
          assertFalse(jDayChooser0.isWeekOfYearVisible());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          
          SystemColor systemColor0 = SystemColor.textInactiveText;
          assertNotNull(systemColor0);
          assertEquals(128, systemColor0.getBlue());
          assertEquals(128, systemColor0.getRed());
          assertEquals(128, systemColor0.getGreen());
          assertEquals((-8355712), systemColor0.getRGB());
          assertEquals(1, systemColor0.getTransparency());
          assertEquals(255, systemColor0.getAlpha());
          
          float[] floatArray0 = new float[4];
          floatArray0[2] = (float) 93;
          floatArray0[3] = (float) 93;
          int int0 = 56;
          JDayChooser jDayChooser1 = new JDayChooser();
          assertNotNull(jDayChooser1);
          assertFalse(jDayChooser1.equals((Object)jDayChooser0));
          assertFalse(jDayChooser1.isFocusTraversalPolicySet());
          assertFalse(jDayChooser1.isFocusCycleRoot());
          assertTrue(jDayChooser1.isDecorationBackgroundVisible());
          assertEquals(0, jDayChooser1.getMaxDayCharacters());
          assertEquals(14, jDayChooser1.getDay());
          assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
          assertFalse(jDayChooser1.getIgnoreRepaint());
          assertFalse(jDayChooser1.isWeekOfYearVisible());
          assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
          assertTrue(jDayChooser1.isDayBordersVisible());
          assertFalse(jDayChooser1.isDecorationBordersVisible());
          
          JDayChooser jDayChooser2 = new JDayChooser();
          assertNotNull(jDayChooser2);
          assertFalse(jDayChooser2.equals((Object)jDayChooser1));
          assertFalse(jDayChooser2.equals((Object)jDayChooser0));
          assertFalse(jDayChooser2.isDecorationBordersVisible());
          assertTrue(jDayChooser2.isDecorationBackgroundVisible());
          assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
          assertFalse(jDayChooser2.isFocusCycleRoot());
          assertEquals(0, jDayChooser2.getMaxDayCharacters());
          assertEquals(14, jDayChooser2.getDay());
          assertTrue(jDayChooser2.isDayBordersVisible());
          assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser2.isWeekOfYearVisible());
          assertFalse(jDayChooser2.isFocusTraversalPolicySet());
          assertFalse(jDayChooser2.getIgnoreRepaint());
          
          jDayChooser0.setDay(56);
          assertNotSame(jDayChooser0, jDayChooser2);
          assertNotSame(jDayChooser0, jDayChooser1);
          assertFalse(jDayChooser0.equals((Object)jDayChooser2));
          assertFalse(jDayChooser0.equals((Object)jDayChooser1));
          assertFalse(jDayChooser0.isWeekOfYearVisible());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertEquals(28, jDayChooser0.getDay());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          
          Color color0 = jDayChooser0.getSundayForeground();
          assertNotNull(color0);
          assertNotSame(jDayChooser0, jDayChooser2);
          assertNotSame(jDayChooser0, jDayChooser1);
          assertFalse(jDayChooser0.equals((Object)jDayChooser2));
          assertFalse(jDayChooser0.equals((Object)jDayChooser1));
          assertFalse(jDayChooser0.isWeekOfYearVisible());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertEquals(28, jDayChooser0.getDay());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertEquals(164, color0.getRed());
          assertEquals(255, color0.getAlpha());
          assertEquals(0, color0.getBlue());
          assertEquals(1, color0.getTransparency());
          assertEquals(0, color0.getGreen());
          assertEquals((-6029312), color0.getRGB());
          
          Color color1 = Color.getColor("day", (Color) systemColor0);
          assertNotNull(color1);
          assertSame(systemColor0, color1);
          assertSame(color1, systemColor0);
          assertEquals(128, systemColor0.getBlue());
          assertEquals(128, systemColor0.getRed());
          assertEquals(128, systemColor0.getGreen());
          assertEquals((-8355712), systemColor0.getRGB());
          assertEquals(1, systemColor0.getTransparency());
          assertEquals(255, systemColor0.getAlpha());
          assertEquals(128, color1.getBlue());
          assertEquals((-8355712), color1.getRGB());
          assertEquals(1, color1.getTransparency());
          assertEquals(255, color1.getAlpha());
          assertEquals(128, color1.getGreen());
          assertEquals(128, color1.getRed());
          
          jDayChooser2.setDecorationBackgroundColor(color0);
          assertNotSame(jDayChooser0, jDayChooser2);
          assertNotSame(jDayChooser0, jDayChooser1);
          assertNotSame(jDayChooser2, jDayChooser1);
          assertNotSame(jDayChooser2, jDayChooser0);
          assertFalse(jDayChooser0.equals((Object)jDayChooser2));
          assertFalse(jDayChooser0.equals((Object)jDayChooser1));
          assertFalse(jDayChooser2.equals((Object)jDayChooser1));
          assertFalse(jDayChooser2.equals((Object)jDayChooser0));
          assertFalse(jDayChooser0.isWeekOfYearVisible());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertEquals(28, jDayChooser0.getDay());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertFalse(jDayChooser2.isDecorationBordersVisible());
          assertTrue(jDayChooser2.isDecorationBackgroundVisible());
          assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
          assertFalse(jDayChooser2.isFocusCycleRoot());
          assertEquals(0, jDayChooser2.getMaxDayCharacters());
          assertEquals(14, jDayChooser2.getDay());
          assertTrue(jDayChooser2.isDayBordersVisible());
          assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser2.isWeekOfYearVisible());
          assertFalse(jDayChooser2.isFocusTraversalPolicySet());
          assertFalse(jDayChooser2.getIgnoreRepaint());
          assertEquals(164, color0.getRed());
          assertEquals(255, color0.getAlpha());
          assertEquals(0, color0.getBlue());
          assertEquals(1, color0.getTransparency());
          assertEquals(0, color0.getGreen());
          assertEquals((-6029312), color0.getRGB());
          
          JDayChooser jDayChooser3 = new JDayChooser();
          assertNotNull(jDayChooser3);
          assertFalse(jDayChooser3.equals((Object)jDayChooser1));
          assertFalse(jDayChooser3.equals((Object)jDayChooser0));
          assertFalse(jDayChooser3.equals((Object)jDayChooser2));
          assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
          assertEquals(0, jDayChooser3.getMaxDayCharacters());
          assertFalse(jDayChooser3.isFocusCycleRoot());
          assertEquals(14, jDayChooser3.getDay());
          assertFalse(jDayChooser3.isDecorationBordersVisible());
          assertTrue(jDayChooser3.isDayBordersVisible());
          assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser3.isWeekOfYearVisible());
          assertTrue(jDayChooser3.isDecorationBackgroundVisible());
          assertFalse(jDayChooser3.getIgnoreRepaint());
          assertFalse(jDayChooser3.isFocusTraversalPolicySet());
          
          AncestorListener[] ancestorListenerArray0 = jDayChooser3.getAncestorListeners();
          assertNotNull(ancestorListenerArray0);
          assertNotSame(jDayChooser3, jDayChooser1);
          assertNotSame(jDayChooser3, jDayChooser0);
          assertNotSame(jDayChooser3, jDayChooser2);
          assertFalse(jDayChooser3.equals((Object)jDayChooser1));
          assertFalse(jDayChooser3.equals((Object)jDayChooser0));
          assertFalse(jDayChooser3.equals((Object)jDayChooser2));
          assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
          assertEquals(0, jDayChooser3.getMaxDayCharacters());
          assertFalse(jDayChooser3.isFocusCycleRoot());
          assertEquals(14, jDayChooser3.getDay());
          assertFalse(jDayChooser3.isDecorationBordersVisible());
          assertTrue(jDayChooser3.isDayBordersVisible());
          assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser3.isWeekOfYearVisible());
          assertTrue(jDayChooser3.isDecorationBackgroundVisible());
          assertFalse(jDayChooser3.getIgnoreRepaint());
          assertFalse(jDayChooser3.isFocusTraversalPolicySet());
          
          MockDate mockDate0 = new MockDate(93, 93, 56);
          assertNotNull(mockDate0);
          assertEquals("Sat Nov 25 00:00:00 GMT 2000", mockDate0.toString());
          
          HelpSet helpSet0 = new HelpSet();
          assertNotNull(helpSet0);
          
          jDayChooser2.repaint((long) 93);
          assertNotSame(jDayChooser2, jDayChooser1);
          assertNotSame(jDayChooser2, jDayChooser0);
          assertNotSame(jDayChooser2, jDayChooser3);
          assertFalse(jDayChooser2.equals((Object)jDayChooser1));
          assertFalse(jDayChooser2.equals((Object)jDayChooser0));
          assertFalse(jDayChooser2.equals((Object)jDayChooser3));
          assertFalse(jDayChooser2.isDecorationBordersVisible());
          assertTrue(jDayChooser2.isDecorationBackgroundVisible());
          assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
          assertFalse(jDayChooser2.isFocusCycleRoot());
          assertEquals(0, jDayChooser2.getMaxDayCharacters());
          assertEquals(14, jDayChooser2.getDay());
          assertTrue(jDayChooser2.isDayBordersVisible());
          assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser2.isWeekOfYearVisible());
          assertFalse(jDayChooser2.isFocusTraversalPolicySet());
          assertFalse(jDayChooser2.getIgnoreRepaint());
          
          JDayChooser jDayChooser4 = new JDayChooser();
          assertNotNull(jDayChooser4);
          assertFalse(jDayChooser4.equals((Object)jDayChooser2));
          assertFalse(jDayChooser4.equals((Object)jDayChooser3));
          assertFalse(jDayChooser4.equals((Object)jDayChooser1));
          assertFalse(jDayChooser4.equals((Object)jDayChooser0));
          assertFalse(jDayChooser4.getIgnoreRepaint());
          assertTrue(jDayChooser4.isDayBordersVisible());
          assertEquals(14, jDayChooser4.getDay());
          assertTrue(jDayChooser4.getFocusTraversalKeysEnabled());
          assertTrue(jDayChooser4.isDecorationBackgroundVisible());
          assertFalse(jDayChooser4.isFocusTraversalPolicySet());
          assertFalse(jDayChooser4.isWeekOfYearVisible());
          assertEquals(0, jDayChooser4.getMaxDayCharacters());
          assertFalse(jDayChooser4.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser4.isFocusCycleRoot());
          assertFalse(jDayChooser4.isDecorationBordersVisible());
          
          MockDate mockDate1 = new MockDate();
          assertNotNull(mockDate1);
          assertFalse(mockDate1.equals((Object)mockDate0));
          assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
          
          HelpSet helpSet1 = new HelpSet();
          assertNotNull(helpSet1);
          assertFalse(helpSet1.equals((Object)helpSet0));
          
          jDayChooser0.repaint((-1465L));
          assertNotSame(jDayChooser0, jDayChooser4);
          assertNotSame(jDayChooser0, jDayChooser3);
          assertNotSame(jDayChooser0, jDayChooser2);
          assertNotSame(jDayChooser0, jDayChooser1);
          assertFalse(jDayChooser0.equals((Object)jDayChooser4));
          assertFalse(jDayChooser0.equals((Object)jDayChooser3));
          assertFalse(jDayChooser0.equals((Object)jDayChooser2));
          assertFalse(jDayChooser0.equals((Object)jDayChooser1));
          assertFalse(jDayChooser0.isWeekOfYearVisible());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertEquals(28, jDayChooser0.getDay());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          
          KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 17, 17, 17, 33, 'q');
          assertNotNull(keyEvent0);
          assertFalse(jDayChooser0.equals((Object)jDayChooser4));
          assertFalse(jDayChooser0.equals((Object)jDayChooser3));
          assertFalse(jDayChooser0.equals((Object)jDayChooser2));
          assertFalse(jDayChooser0.equals((Object)jDayChooser1));
          assertFalse(jDayChooser0.isWeekOfYearVisible());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertEquals(28, jDayChooser0.getDay());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertEquals(17, keyEvent0.getID());
          assertEquals(1088, keyEvent0.getModifiersEx());
          assertEquals(33, keyEvent0.getKeyCode());
          assertFalse(keyEvent0.isAltDown());
          assertEquals(0, keyEvent0.getKeyLocation());
          assertFalse(keyEvent0.isAltGraphDown());
          assertEquals(17L, keyEvent0.getWhen());
          assertEquals(17, keyEvent0.getModifiers());
          assertTrue(keyEvent0.isShiftDown());
          assertEquals('q', keyEvent0.getKeyChar());
          assertTrue(keyEvent0.isActionKey());
          assertFalse(keyEvent0.isConsumed());
          assertFalse(keyEvent0.isControlDown());
          assertFalse(keyEvent0.isMetaDown());
          
          // Undeclared exception!
          try { 
            jDayChooser1.keyPressed(keyEvent0);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("accessories.plugins.time.JDayChooser", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertNotNull(jDayChooser0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.transferFocusUpCycle();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Time time0 = new Time(892L);
      assertNotNull(time0);
      assertEquals("00:00:00", time0.toString());
      
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      assertNull(jYearChooser0);
      
      jDayChooser0.setFocus();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.setFocus();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      SystemColor systemColor0 = SystemColor.textInactiveText;
      assertNotNull(systemColor0);
      assertEquals(128, systemColor0.getBlue());
      assertEquals(128, systemColor0.getRed());
      assertEquals(128, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-8355712), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      
      jDayChooser0.setForeground(systemColor0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(128, systemColor0.getBlue());
      assertEquals(128, systemColor0.getRed());
      assertEquals(128, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-8355712), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertNotNull(jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      
      SynthCheckBoxUI synthCheckBoxUI0 = new SynthCheckBoxUI();
      assertNotNull(synthCheckBoxUI0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 228, 228, 228, 38, 'a');
      assertNotNull(keyEvent0);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(36, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(192, keyEvent0.getModifiersEx());
      assertEquals('a', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(38, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(228, keyEvent0.getID());
      assertEquals(228L, keyEvent0.getWhen());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertEquals(7, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(36, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(192, keyEvent0.getModifiersEx());
      assertEquals('a', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(38, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(228, keyEvent0.getID());
      assertEquals(228L, keyEvent0.getWhen());
      
      jDayChooser0.setMonth(11);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertEquals(7, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.setMonth(38);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertEquals(7, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser1.drawDays();
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      
      jDayChooser1.initDecorations();
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = jDayChooser0.requestFocusInWindow();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      JDayChooser jDayChooser1 = new JDayChooser();
      assertNotNull(jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(14, jDayChooser1.getDay());
      
      jDayChooser0.setDoubleBuffered(true);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      jDayChooser0.setDay(34);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      boolean boolean4 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      
      JDayChooser jDayChooser2 = new JDayChooser();
      assertNotNull(jDayChooser2);
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertEquals(14, jDayChooser2.getDay());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      
      SystemColor systemColor0 = SystemColor.scrollbar;
      assertNotNull(systemColor0);
      assertEquals(224, systemColor0.getBlue());
      assertEquals(224, systemColor0.getRed());
      assertEquals(224, systemColor0.getGreen());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-2039584), systemColor0.getRGB());
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("10", 29);
      boolean boolean5 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean5);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      
      JButton jButton0 = new JButton();
      assertNotNull(jButton0);
      assertFalse(jButton0.getIgnoreRepaint());
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertFalse(jButton0.isFocusCycleRoot());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser2, 34, 1488L, 34, 34, '/');
      assertNotNull(keyEvent0);
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertEquals(14, jDayChooser2.getDay());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(1488L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals('/', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(8320, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(34, keyEvent0.getKeyCode());
      assertEquals(34, keyEvent0.getID());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(34, keyEvent0.getModifiers());
      
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 36, 2738L, 34, 36, '/');
      assertNotNull(keyEvent1);
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      assertFalse(jDayChooser0.equals((Object)jDayChooser2));
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(keyEvent1.isShiftDown());
      assertFalse(keyEvent1.isAltDown());
      assertEquals('/', keyEvent1.getKeyChar());
      assertFalse(keyEvent1.isMetaDown());
      assertEquals(36, keyEvent1.getID());
      assertTrue(keyEvent1.isControlDown());
      assertFalse(keyEvent1.isConsumed());
      assertEquals(8320, keyEvent1.getModifiersEx());
      assertTrue(keyEvent1.isActionKey());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertTrue(keyEvent1.isAltGraphDown());
      assertEquals(34, keyEvent1.getModifiers());
      assertEquals(36, keyEvent1.getKeyCode());
      assertEquals(2738L, keyEvent1.getWhen());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      int int0 = KeyEvent.getExtendedKeyCodeForChar(12);
      assertEquals(0, int0);
      
      jDayChooser1.keyPressed(keyEvent1);
      assertNotSame(keyEvent1, keyEvent0);
      assertNotSame(jDayChooser0, jDayChooser2);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertNotSame(jDayChooser1, jDayChooser2);
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      assertFalse(jDayChooser0.equals((Object)jDayChooser2));
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(jDayChooser1.equals((Object)jDayChooser2));
      assertFalse(keyEvent1.isShiftDown());
      assertFalse(keyEvent1.isAltDown());
      assertEquals('/', keyEvent1.getKeyChar());
      assertFalse(keyEvent1.isMetaDown());
      assertEquals(36, keyEvent1.getID());
      assertTrue(keyEvent1.isControlDown());
      assertFalse(keyEvent1.isConsumed());
      assertEquals(8320, keyEvent1.getModifiersEx());
      assertTrue(keyEvent1.isActionKey());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertTrue(keyEvent1.isAltGraphDown());
      assertEquals(34, keyEvent1.getModifiers());
      assertEquals(36, keyEvent1.getKeyCode());
      assertEquals(2738L, keyEvent1.getWhen());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(1, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      
      jDayChooser1.setDecorationBackgroundVisible(true);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertNotSame(jDayChooser1, jDayChooser2);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(jDayChooser1.equals((Object)jDayChooser2));
      assertEquals(1, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          JDayChooser jDayChooser0 = new JDayChooser(true);
          assertNotNull(jDayChooser0);
          assertEquals(14, jDayChooser0.getDay());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertTrue(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          
          boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
          assertTrue(boolean0);
          assertEquals(14, jDayChooser0.getDay());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertTrue(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          
          Date date0 = jDayChooser0.defaultMaxSelectableDate;
          assertNotNull(date0);
          assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
          
          jDayChooser0.setSelectableDateRange(date0, date0);
          assertEquals(14, jDayChooser0.getDay());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertTrue(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
          
          jDayChooser0.updateUI();
          assertEquals(14, jDayChooser0.getDay());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertTrue(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          
          Date date1 = jDayChooser0.defaultMaxSelectableDate;
          assertNotNull(date1);
          assertSame(date1, date0);
          assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
          
          ComponentUI componentUI0 = BasicComboBoxUI.createUI(jDayChooser0);
          assertNotNull(componentUI0);
          assertEquals(14, jDayChooser0.getDay());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertTrue(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          
          JDayChooser jDayChooser1 = new JDayChooser();
          assertNotNull(jDayChooser1);
          assertFalse(jDayChooser1.equals((Object)jDayChooser0));
          assertTrue(jDayChooser1.isDayBordersVisible());
          assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
          assertEquals(0, jDayChooser1.getMaxDayCharacters());
          assertEquals(14, jDayChooser1.getDay());
          assertFalse(jDayChooser1.isDecorationBordersVisible());
          assertTrue(jDayChooser1.isDecorationBackgroundVisible());
          assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
          assertFalse(jDayChooser1.isFocusCycleRoot());
          assertFalse(jDayChooser1.isWeekOfYearVisible());
          assertFalse(jDayChooser1.isFocusTraversalPolicySet());
          assertFalse(jDayChooser1.getIgnoreRepaint());
          
          boolean boolean1 = jDayChooser1.requestFocusInWindow();
          assertFalse(boolean1);
          assertNotSame(jDayChooser1, jDayChooser0);
          assertFalse(jDayChooser1.equals((Object)jDayChooser0));
          assertFalse(boolean1 == boolean0);
          assertTrue(jDayChooser1.isDayBordersVisible());
          assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
          assertEquals(0, jDayChooser1.getMaxDayCharacters());
          assertEquals(14, jDayChooser1.getDay());
          assertFalse(jDayChooser1.isDecorationBordersVisible());
          assertTrue(jDayChooser1.isDecorationBackgroundVisible());
          assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
          assertFalse(jDayChooser1.isFocusCycleRoot());
          assertFalse(jDayChooser1.isWeekOfYearVisible());
          assertFalse(jDayChooser1.isFocusTraversalPolicySet());
          assertFalse(jDayChooser1.getIgnoreRepaint());
          
          JDayChooser jDayChooser2 = new JDayChooser();
          assertNotNull(jDayChooser2);
          assertFalse(jDayChooser2.equals((Object)jDayChooser0));
          assertFalse(jDayChooser2.equals((Object)jDayChooser1));
          assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
          assertFalse(jDayChooser2.isDecorationBordersVisible());
          assertFalse(jDayChooser2.isFocusTraversalPolicySet());
          assertFalse(jDayChooser2.getIgnoreRepaint());
          assertFalse(jDayChooser2.isFocusCycleRoot());
          assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
          assertTrue(jDayChooser2.isDayBordersVisible());
          assertFalse(jDayChooser2.isWeekOfYearVisible());
          assertTrue(jDayChooser2.isDecorationBackgroundVisible());
          assertEquals(0, jDayChooser2.getMaxDayCharacters());
          assertEquals(14, jDayChooser2.getDay());
          
          boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
          assertFalse(boolean2);
          assertFalse(boolean2 == boolean0);
          assertTrue(boolean2 == boolean1);
          
          jDayChooser2.setDay(34);
          assertNotSame(jDayChooser2, jDayChooser0);
          assertNotSame(jDayChooser2, jDayChooser1);
          assertFalse(jDayChooser2.equals((Object)jDayChooser0));
          assertFalse(jDayChooser2.equals((Object)jDayChooser1));
          assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
          assertFalse(jDayChooser2.isDecorationBordersVisible());
          assertFalse(jDayChooser2.isFocusTraversalPolicySet());
          assertFalse(jDayChooser2.getIgnoreRepaint());
          assertFalse(jDayChooser2.isFocusCycleRoot());
          assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
          assertTrue(jDayChooser2.isDayBordersVisible());
          assertFalse(jDayChooser2.isWeekOfYearVisible());
          assertTrue(jDayChooser2.isDecorationBackgroundVisible());
          assertEquals(28, jDayChooser2.getDay());
          assertEquals(0, jDayChooser2.getMaxDayCharacters());
          
          boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
          assertFalse(boolean3);
          assertTrue(boolean3 == boolean1);
          assertTrue(boolean3 == boolean2);
          assertFalse(boolean3 == boolean0);
          
          JDayChooser jDayChooser3 = new JDayChooser();
          assertNotNull(jDayChooser3);
          assertFalse(jDayChooser3.equals((Object)jDayChooser0));
          assertFalse(jDayChooser3.equals((Object)jDayChooser1));
          assertFalse(jDayChooser3.equals((Object)jDayChooser2));
          assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
          assertTrue(jDayChooser3.isDecorationBackgroundVisible());
          assertFalse(jDayChooser3.isWeekOfYearVisible());
          assertFalse(jDayChooser3.getIgnoreRepaint());
          assertFalse(jDayChooser3.isFocusTraversalPolicySet());
          assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
          assertEquals(14, jDayChooser3.getDay());
          assertFalse(jDayChooser3.isFocusCycleRoot());
          assertFalse(jDayChooser3.isDecorationBordersVisible());
          assertEquals(0, jDayChooser3.getMaxDayCharacters());
          assertTrue(jDayChooser3.isDayBordersVisible());
          
          SystemColor systemColor0 = SystemColor.scrollbar;
          assertNotNull(systemColor0);
          assertEquals((-2039584), systemColor0.getRGB());
          assertEquals(224, systemColor0.getBlue());
          assertEquals(224, systemColor0.getGreen());
          assertEquals(224, systemColor0.getRed());
          assertEquals(1, systemColor0.getTransparency());
          assertEquals(255, systemColor0.getAlpha());
          
          jDayChooser0.setDecorationBackgroundColor(systemColor0);
          assertNotSame(jDayChooser0, jDayChooser3);
          assertNotSame(jDayChooser0, jDayChooser2);
          assertNotSame(jDayChooser0, jDayChooser1);
          assertFalse(jDayChooser0.equals((Object)jDayChooser3));
          assertFalse(jDayChooser0.equals((Object)jDayChooser2));
          assertFalse(jDayChooser0.equals((Object)jDayChooser1));
          assertEquals(14, jDayChooser0.getDay());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertTrue(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertEquals((-2039584), systemColor0.getRGB());
          assertEquals(224, systemColor0.getBlue());
          assertEquals(224, systemColor0.getGreen());
          assertEquals(224, systemColor0.getRed());
          assertEquals(1, systemColor0.getTransparency());
          assertEquals(255, systemColor0.getAlpha());
          
          JButton jButton0 = new JButton();
          assertNotNull(jButton0);
          assertFalse(jButton0.getIgnoreRepaint());
          assertFalse(jButton0.isFocusTraversalPolicySet());
          assertTrue(jButton0.getFocusTraversalKeysEnabled());
          assertFalse(jButton0.isFocusCycleRoot());
          assertFalse(jButton0.isFocusTraversalPolicyProvider());
          
          JOptionPane jOptionPane0 = new JOptionPane();
          assertNotNull(jOptionPane0);
          assertFalse(jOptionPane0.isFocusCycleRoot());
          assertFalse(jOptionPane0.isFocusTraversalPolicySet());
          assertFalse(jOptionPane0.isFocusTraversalPolicyProvider());
          assertFalse(jOptionPane0.getIgnoreRepaint());
          assertTrue(jOptionPane0.getFocusTraversalKeysEnabled());
          
          KeyEvent keyEvent0 = new KeyEvent(jOptionPane0, 34, 1703L, (-1081), 40, '/');
          assertNotNull(keyEvent0);
          assertFalse(jOptionPane0.isFocusCycleRoot());
          assertFalse(jOptionPane0.isFocusTraversalPolicySet());
          assertFalse(jOptionPane0.isFocusTraversalPolicyProvider());
          assertFalse(jOptionPane0.getIgnoreRepaint());
          assertTrue(jOptionPane0.getFocusTraversalKeysEnabled());
          assertFalse(keyEvent0.isAltDown());
          assertEquals((-1088), keyEvent0.getModifiersEx());
          assertTrue(keyEvent0.isMetaDown());
          assertEquals('/', keyEvent0.getKeyChar());
          assertEquals(1703L, keyEvent0.getWhen());
          assertTrue(keyEvent0.isActionKey());
          assertFalse(keyEvent0.isConsumed());
          assertTrue(keyEvent0.isControlDown());
          assertEquals(34, keyEvent0.getID());
          assertEquals((-2147483641), keyEvent0.getModifiers());
          assertFalse(keyEvent0.isAltGraphDown());
          assertEquals(0, keyEvent0.getKeyLocation());
          assertEquals(40, keyEvent0.getKeyCode());
          assertTrue(keyEvent0.isShiftDown());
          
          String string0 = SVGConstants.SVG_INITIAL_VALUE;
          assertNotNull(string0);
          assertEquals("initial", string0);
          
          jDayChooser3.setFocus();
          assertNotSame(jDayChooser3, jDayChooser0);
          assertNotSame(jDayChooser3, jDayChooser1);
          assertNotSame(jDayChooser3, jDayChooser2);
          assertFalse(jDayChooser3.equals((Object)jDayChooser0));
          assertFalse(jDayChooser3.equals((Object)jDayChooser1));
          assertFalse(jDayChooser3.equals((Object)jDayChooser2));
          assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
          assertTrue(jDayChooser3.isDecorationBackgroundVisible());
          assertFalse(jDayChooser3.isWeekOfYearVisible());
          assertFalse(jDayChooser3.getIgnoreRepaint());
          assertFalse(jDayChooser3.isFocusTraversalPolicySet());
          assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
          assertEquals(14, jDayChooser3.getDay());
          assertFalse(jDayChooser3.isFocusCycleRoot());
          assertFalse(jDayChooser3.isDecorationBordersVisible());
          assertEquals(0, jDayChooser3.getMaxDayCharacters());
          assertTrue(jDayChooser3.isDayBordersVisible());
          
          jDayChooser0.keyPressed(keyEvent0);
          assertNotSame(jDayChooser0, jDayChooser3);
          assertNotSame(jDayChooser0, jDayChooser2);
          assertNotSame(jDayChooser0, jDayChooser1);
          assertFalse(jDayChooser0.equals((Object)jDayChooser3));
          assertFalse(jDayChooser0.equals((Object)jDayChooser2));
          assertFalse(jDayChooser0.equals((Object)jDayChooser1));
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertTrue(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertEquals(21, jDayChooser0.getDay());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertFalse(jOptionPane0.isFocusCycleRoot());
          assertFalse(jOptionPane0.isFocusTraversalPolicySet());
          assertFalse(jOptionPane0.isFocusTraversalPolicyProvider());
          assertFalse(jOptionPane0.getIgnoreRepaint());
          assertTrue(jOptionPane0.getFocusTraversalKeysEnabled());
          assertFalse(keyEvent0.isAltDown());
          assertEquals((-1088), keyEvent0.getModifiersEx());
          assertTrue(keyEvent0.isMetaDown());
          assertEquals('/', keyEvent0.getKeyChar());
          assertEquals(1703L, keyEvent0.getWhen());
          assertTrue(keyEvent0.isActionKey());
          assertFalse(keyEvent0.isConsumed());
          assertTrue(keyEvent0.isControlDown());
          assertEquals(34, keyEvent0.getID());
          assertEquals((-2147483641), keyEvent0.getModifiers());
          assertFalse(keyEvent0.isAltGraphDown());
          assertEquals(0, keyEvent0.getKeyLocation());
          assertEquals(40, keyEvent0.getKeyCode());
          assertTrue(keyEvent0.isShiftDown());
          
          Color color0 = jDayChooser3.getSundayForeground();
          assertNotNull(color0);
          assertNotSame(jDayChooser3, jDayChooser0);
          assertNotSame(jDayChooser3, jDayChooser1);
          assertNotSame(jDayChooser3, jDayChooser2);
          assertFalse(jDayChooser3.equals((Object)jDayChooser0));
          assertFalse(jDayChooser3.equals((Object)jDayChooser1));
          assertFalse(jDayChooser3.equals((Object)jDayChooser2));
          assertEquals((-6029312), color0.getRGB());
          assertEquals(0, color0.getGreen());
          assertEquals(164, color0.getRed());
          assertEquals(255, color0.getAlpha());
          assertEquals(0, color0.getBlue());
          assertEquals(1, color0.getTransparency());
          assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
          assertTrue(jDayChooser3.isDecorationBackgroundVisible());
          assertFalse(jDayChooser3.isWeekOfYearVisible());
          assertFalse(jDayChooser3.getIgnoreRepaint());
          assertFalse(jDayChooser3.isFocusTraversalPolicySet());
          assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
          assertEquals(14, jDayChooser3.getDay());
          assertFalse(jDayChooser3.isFocusCycleRoot());
          assertFalse(jDayChooser3.isDecorationBordersVisible());
          assertEquals(0, jDayChooser3.getMaxDayCharacters());
          assertTrue(jDayChooser3.isDayBordersVisible());
          
          jDayChooser0.setSundayForeground(systemColor0);
          assertNotSame(jDayChooser0, jDayChooser3);
          assertNotSame(jDayChooser0, jDayChooser2);
          assertNotSame(jDayChooser0, jDayChooser1);
          assertFalse(jDayChooser0.equals((Object)jDayChooser3));
          assertFalse(jDayChooser0.equals((Object)jDayChooser2));
          assertFalse(jDayChooser0.equals((Object)jDayChooser1));
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertTrue(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertEquals(21, jDayChooser0.getDay());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertEquals((-2039584), systemColor0.getRGB());
          assertEquals(224, systemColor0.getBlue());
          assertEquals(224, systemColor0.getGreen());
          assertEquals(224, systemColor0.getRed());
          assertEquals(1, systemColor0.getTransparency());
          assertEquals(255, systemColor0.getAlpha());
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      boolean boolean0 = new Boolean("day");
      assertFalse(boolean0);
      
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      assertNotNull(jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertNotNull(jDayChooser_DecoratorButton0);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      
      jDayChooser0.setDay(2060);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      JDayChooser jDayChooser2 = new JDayChooser(false);
      assertNotNull(jDayChooser2);
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      
      Color color0 = Color.gray;
      assertNotNull(color0);
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      
      jDayChooser1.setDecorationBackgroundColor(color0);
      assertNotSame(jDayChooser1, jDayChooser2);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser2));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      
      jDayChooser0.repaint((-1L));
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser0, jDayChooser2);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.equals((Object)jDayChooser2));
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      JDayChooser jDayChooser3 = new JDayChooser();
      assertNotNull(jDayChooser3);
      assertFalse(jDayChooser3.equals((Object)jDayChooser0));
      assertFalse(jDayChooser3.equals((Object)jDayChooser2));
      assertFalse(jDayChooser3.equals((Object)jDayChooser1));
      assertFalse(jDayChooser3.isDecorationBordersVisible());
      assertFalse(jDayChooser3.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser3.getMaxDayCharacters());
      assertEquals(14, jDayChooser3.getDay());
      assertFalse(jDayChooser3.isWeekOfYearVisible());
      assertTrue(jDayChooser3.isDecorationBackgroundVisible());
      assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser3.getIgnoreRepaint());
      assertTrue(jDayChooser3.isDayBordersVisible());
      assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser3.isFocusCycleRoot());
      
      Locale locale1 = Locale.KOREA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("ko", locale1.getLanguage());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("KR", locale1.getCountry());
      assertEquals("ko_KR", locale1.toString());
      
      String string0 = jDayChooser0.getName();
      assertNotNull(string0);
      assertEquals("JDayChooser", string0);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser0, jDayChooser2);
      assertNotSame(jDayChooser0, jDayChooser3);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.equals((Object)jDayChooser2));
      assertFalse(jDayChooser0.equals((Object)jDayChooser3));
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser1.setMaxDayCharacters(36);
      assertNotSame(jDayChooser1, jDayChooser2);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertNotSame(jDayChooser1, jDayChooser3);
      assertFalse(jDayChooser1.equals((Object)jDayChooser2));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(jDayChooser1.equals((Object)jDayChooser3));
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      
      JYearChooser jYearChooser0 = new JYearChooser();
      assertNotNull(jYearChooser0);
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertEquals(2014, jYearChooser0.getYear());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(1, jYearChooser0.getStartYear());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jYearChooser0.getMinimum());
      assertEquals(292278994, jYearChooser0.getEndYear());
      
      jDayChooser0.selectedDay = (JButton) jDayChooser_DecoratorButton0;
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.selectedDay.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.selectedDay.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.selectedDay.getIgnoreRepaint());
      assertFalse(jDayChooser0.selectedDay.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.selectedDay.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      
      jDayChooser3.setFocus();
      assertNotSame(jDayChooser3, jDayChooser0);
      assertNotSame(jDayChooser3, jDayChooser2);
      assertNotSame(jDayChooser3, jDayChooser1);
      assertFalse(jDayChooser3.equals((Object)jDayChooser0));
      assertFalse(jDayChooser3.equals((Object)jDayChooser2));
      assertFalse(jDayChooser3.equals((Object)jDayChooser1));
      assertFalse(jDayChooser3.isDecorationBordersVisible());
      assertFalse(jDayChooser3.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser3.getMaxDayCharacters());
      assertEquals(14, jDayChooser3.getDay());
      assertFalse(jDayChooser3.isWeekOfYearVisible());
      assertTrue(jDayChooser3.isDecorationBackgroundVisible());
      assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser3.getIgnoreRepaint());
      assertTrue(jDayChooser3.isDayBordersVisible());
      assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser3.isFocusCycleRoot());
      
      jDayChooser0.setFocus();
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser0, jDayChooser2);
      assertNotSame(jDayChooser0, jDayChooser3);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.equals((Object)jDayChooser2));
      assertFalse(jDayChooser0.equals((Object)jDayChooser3));
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser1.setForeground(color0);
      assertNotSame(jDayChooser1, jDayChooser2);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertNotSame(jDayChooser1, jDayChooser3);
      assertFalse(jDayChooser1.equals((Object)jDayChooser2));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(jDayChooser1.equals((Object)jDayChooser3));
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      
      Date date1 = jDayChooser3.getMinSelectableDate();
      assertNotNull(date1);
      assertNotSame(date1, date0);
      assertNotSame(jDayChooser3, jDayChooser0);
      assertNotSame(jDayChooser3, jDayChooser2);
      assertNotSame(jDayChooser3, jDayChooser1);
      assertTrue(date1.equals((Object)date0));
      assertFalse(jDayChooser3.equals((Object)jDayChooser0));
      assertFalse(jDayChooser3.equals((Object)jDayChooser2));
      assertFalse(jDayChooser3.equals((Object)jDayChooser1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertFalse(jDayChooser3.isDecorationBordersVisible());
      assertFalse(jDayChooser3.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser3.getMaxDayCharacters());
      assertEquals(14, jDayChooser3.getDay());
      assertFalse(jDayChooser3.isWeekOfYearVisible());
      assertTrue(jDayChooser3.isDecorationBackgroundVisible());
      assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser3.getIgnoreRepaint());
      assertTrue(jDayChooser3.isDayBordersVisible());
      assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser3.isFocusCycleRoot());
      
      jDayChooser2.setSundayForeground(color0);
      assertNotSame(jDayChooser2, jDayChooser0);
      assertNotSame(jDayChooser2, jDayChooser3);
      assertNotSame(jDayChooser2, jDayChooser1);
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.equals((Object)jDayChooser3));
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Time time0 = new Time(672L);
      assertNotNull(time0);
      assertEquals("00:00:00", time0.toString());
      
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      assertNotNull(actionMap0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      jDayChooser0.setDay(39);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JDayChooser jDayChooser1 = new JDayChooser();
      assertNotNull(jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      
      JButton jButton0 = new JButton();
      assertNotNull(jButton0);
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertFalse(jButton0.getIgnoreRepaint());
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertFalse(jButton0.isFocusCycleRoot());
      
      KeyEvent keyEvent0 = new KeyEvent(jButton0, (-496), 669L, 2756, (-496), '\\');
      assertNotNull(keyEvent0);
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertFalse(jButton0.getIgnoreRepaint());
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertFalse(jButton0.isFocusCycleRoot());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(669L, keyEvent0.getWhen());
      assertEquals((-496), keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(2752, keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(4, keyEvent0.getModifiers());
      assertEquals((-496), keyEvent0.getID());
      assertFalse(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals('\\', keyEvent0.getKeyChar());
      
      String string0 = SVGConstants.SVG_INITIAL_VALUE;
      assertNotNull(string0);
      assertEquals("initial", string0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertFalse(jButton0.getIgnoreRepaint());
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertFalse(jButton0.isFocusCycleRoot());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(669L, keyEvent0.getWhen());
      assertEquals((-496), keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(2752, keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(4, keyEvent0.getModifiers());
      assertEquals((-496), keyEvent0.getID());
      assertFalse(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals('\\', keyEvent0.getKeyChar());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      assertNotNull(jDayChooser_DecoratorButton0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      
      boolean boolean3 = jDayChooser_DecoratorButton0.isFocusable();
      assertFalse(boolean3);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      
      jDayChooser1.setSelectableDateRange(date0, time0);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("00:00:00", time0.toString());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      
      jDayChooser1.setDayBordersVisible(true);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      
      System.setCurrentTimeMillis(672L);
  }
}
