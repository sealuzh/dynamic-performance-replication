/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 17:45:09 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.nio.charset.Charset;
import java.util.zip.Deflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealBufferedSource_ESTest extends RealBufferedSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8LineStrict(1168L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      Timeout timeout0 = gzipSource0.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-21), (-2428L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-2428 toIndex=9223372036854775807
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8Line();
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      String string0 = realBufferedSource0.toString();
      assertEquals("buffer([size=0])", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      boolean boolean0 = realBufferedSource0.rangeEquals((-4999L), byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      realBufferedSource0.indexOfElement(byteString0);
      boolean boolean0 = realBufferedSource0.closed;
      byteString0.asByteBuffer();
      Charset.defaultCharset();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readByteString(32L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      try { 
        realBufferedSource0.readFully(buffer1, 32L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict((-810L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -810
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.writeShort(276);
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(255L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xff
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      realBufferedSource0.skip(0L);
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      boolean boolean0 = realBufferedSource0.closed;
      byte[] byteArray0 = new byte[8];
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = realBufferedSource0.readByteArray();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource1.exhausted();
      try { 
        realBufferedSource0.readIntLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.exhausted();
      // Undeclared exception!
      try { 
        realBufferedSource0.request((-1152921504606846976L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1152921504606846976
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      long long0 = realBufferedSource0.indexOfElement(byteString0);
      assertEquals((-1L), long0);
      
      boolean boolean0 = realBufferedSource0.closed;
      long long1 = realBufferedSource0.readAll(realBufferedSource0.buffer);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = realBufferedSource0.buffer.writeShort((-4382));
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      String string0 = realBufferedSource0.readString(charset0);
      assertEquals("\uFFFD\uFFFD", string0);
      assertNotNull(string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      
      boolean boolean0 = realBufferedSource0.rangeEquals(100L, byteString0);
      assertTrue(boolean0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteString0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = realBufferedSource0.rangeEquals(2L, byteString0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(9, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      ByteString[] byteStringArray0 = new ByteString[1];
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(1, options0.size());
      
      int int0 = realBufferedSource0.select(options0);
      assertEquals(0, int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(1, options0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      String string0 = realBufferedSource0.readUtf8();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      ByteString[] byteStringArray0 = new ByteString[1];
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSource0.buffer);
      assertNotNull(hashingSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(1, options0.size());
      
      int int0 = realBufferedSource0.select(options0);
      assertEquals((-1), int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(1, options0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteArray((-2682L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2682
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      realBufferedSource0.close();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8Line();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Pipe pipe0 = new Pipe(32L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-55), 2147483647L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=2147483647 toIndex=0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeLongLe(255L);
      assertNotNull(buffer1);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      try { 
        realBufferedSource0.skip(100000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertNotNull(realBufferedSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      ByteString byteString0 = realBufferedSource1.readByteString();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      try { 
        realBufferedSource1.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      long long0 = realBufferedSource1.indexOf((byte)118, (long) (byte)118, (long) (byte)118);
      assertEquals((-1L), long0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertNotSame(realBufferedSource0, realBufferedSource1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      GzipSource gzipSource0 = new GzipSource(buffer0);
      assertNotNull(gzipSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      String string0 = realBufferedSource0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(gzipSource0);
      assertNotNull(realBufferedSource1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(0, options0.size());
      
      int int0 = realBufferedSource0.select(options0);
      assertEquals((-1), int0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, options0.size());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertNotSame(realBufferedSource0, realBufferedSource1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      try { 
        realBufferedSource0.readUtf8(962L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeLongLe(1288L);
      assertNotNull(buffer1);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      long long0 = realBufferedSource0.readAll(buffer1);
      assertEquals(8L, long0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      realBufferedSource0.close();
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource1);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      Buffer buffer2 = realBufferedSource1.buffer;
      assertNotNull(buffer2);
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer2, 8L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[9];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = realBufferedSource0.buffer.writeShort((-340));
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertNotNull(realBufferedSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      try { 
        realBufferedSource1.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeShort(276);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      String string0 = realBufferedSource0.readUtf8Line();
      assertEquals("\u0001\u0014", string0);
      assertNotNull(string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      String string0 = realBufferedSource0.readUtf8Line();
      assertNull(string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Deflater deflater0 = new Deflater();
      assertNotNull(deflater0);
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = realBufferedSource0.exhausted();
      assertTrue(boolean0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = realBufferedSource0.buffer.writeShort((-1039));
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      boolean boolean1 = realBufferedSource0.exhausted();
      assertFalse(boolean1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(buffer0, buffer1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      String string0 = realBufferedSource0.readString((long) (byte)1, charset0);
      assertEquals("\uFFFD", string0);
      assertNotNull(string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Deflater deflater0 = new Deflater();
      assertNotNull(deflater0);
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertNotNull(deflaterSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      
      boolean boolean0 = deflater0.finished();
      assertFalse(boolean0);
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      deflaterSink0.finishDeflate();
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertTrue(deflater0.needsInput());
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      assertNotNull(hashingSink0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotNull(byteString0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      assertNotNull(hashingSource0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      
      HashingSink hashingSink1 = HashingSink.hmacSha512(buffer0, byteString0);
      assertNotNull(hashingSink1);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      
      HashingSink hashingSink2 = HashingSink.hmacSha1(hashingSink1, byteString0);
      assertNotNull(hashingSink2);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(hashingSink2.equals((Object)hashingSink0));
      assertFalse(hashingSink2.equals((Object)hashingSink1));
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink2);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(hashingSink2, hashingSink0);
      assertNotSame(hashingSink2, hashingSink1);
      
      ByteString byteString1 = hashingSink1.hash();
      assertNotNull(byteString1);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertEquals(64, byteString1.size());
      assertFalse(hashingSink0.equals((Object)hashingSink2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink2));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSink1, hashingSink2);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(byteString1, byteString0);
      
      boolean boolean1 = realBufferedSource0.rangeEquals(3L, byteString0);
      assertFalse(boolean1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(64, byteString0.size());
      assertFalse(hashingSink0.equals((Object)hashingSink2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeLongLe(255L);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement(byteString0, 7L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Deflater deflater0 = new Deflater();
      assertNotNull(deflater0);
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0, deflater0.getTotalOut());
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertNotNull(deflaterSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0, deflater0.getTotalOut());
      
      deflaterSink0.finishDeflate();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(8L, deflater0.getBytesWritten());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x78
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Deflater deflater0 = new Deflater();
      assertNotNull(deflater0);
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertNotNull(deflaterSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      
      boolean boolean0 = deflater0.finished();
      assertFalse(boolean0);
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      deflaterSink0.finishDeflate();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(8L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      assertNotNull(hashingSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotNull(byteString1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertEquals(32, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      HashingSink hashingSink1 = HashingSink.hmacSha512(buffer0, byteString1);
      assertNotNull(hashingSink1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertEquals(32, byteString1.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(hashingSink1, hashingSink0);
      
      HashingSink hashingSink2 = HashingSink.hmacSha1(hashingSink1, byteString1);
      assertNotNull(hashingSink2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertEquals(32, byteString1.size());
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(hashingSink2.equals((Object)hashingSink1));
      assertFalse(hashingSink2.equals((Object)hashingSink0));
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(hashingSink1, hashingSink2);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(hashingSink2, hashingSink1);
      assertNotSame(hashingSink2, hashingSink0);
      
      ByteString byteString2 = hashingSink1.hash();
      assertNotNull(byteString2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertEquals(32, byteString1.size());
      assertEquals(64, byteString2.size());
      assertFalse(hashingSink0.equals((Object)hashingSink2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(hashingSink1.equals((Object)hashingSink2));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(hashingSink1, hashingSink2);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      // Undeclared exception!
      try { 
        realBufferedSource1.readString(3L, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeShort((byte)19);
      assertNotNull(buffer1);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)19;
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)19, (byte)19}, byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Deflater deflater0 = new Deflater();
      assertNotNull(deflater0);
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertNotNull(deflaterSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      
      boolean boolean0 = deflater0.finished();
      assertFalse(boolean0);
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      deflaterSink0.finishDeflate();
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(8, deflater0.getTotalOut());
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      assertNotNull(hashingSink0);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotNull(byteString0);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      assertNotNull(hashingSource0);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotNull(byteString1);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      assertEquals(32, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      HashingSink hashingSink1 = HashingSink.hmacSha512(buffer0, byteString1);
      assertNotNull(hashingSink1);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      assertEquals(32, byteString1.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(hashingSink1, hashingSink0);
      
      HashingSink hashingSink2 = HashingSink.hmacSha1(hashingSink1, byteString1);
      assertNotNull(hashingSink2);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      assertEquals(32, byteString1.size());
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(hashingSink2.equals((Object)hashingSink1));
      assertFalse(hashingSink2.equals((Object)hashingSink0));
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(hashingSink1, hashingSink2);
      assertNotSame(hashingSink2, hashingSink1);
      assertNotSame(hashingSink2, hashingSink0);
      
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(1, options0.size());
      
      int int0 = realBufferedSource0.select(options0);
      assertEquals((-1), int0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, options0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeLongLe(345L);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = realBufferedSource0.readUtf8CodePoint();
      assertEquals(89, int0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      try { 
        realBufferedSource0.skip(345L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeLongLe(255L);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      int int0 = realBufferedSource0.readUtf8CodePoint();
      assertEquals(65533, int0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeLongLe(1325L);
      assertNotNull(buffer1);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertNotNull(realBufferedSource1);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      ByteString byteString0 = realBufferedSource1.readByteString();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(8, byteString0.size());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      long long0 = realBufferedSource0.indexOf((byte)8, 1238L);
      assertEquals((-1L), long0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      Buffer buffer2 = realBufferedSource1.buffer;
      assertNotNull(buffer2);
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer2);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotNull(byteString1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(16, byteString1.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(byteString1, byteString0);
      
      boolean boolean0 = realBufferedSource1.rangeEquals(3007L, byteString1, (-1015), 2048);
      assertFalse(boolean0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(16, byteString1.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource2);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readAll((Sink) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeLongLe(274L);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x12
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Deflater deflater0 = new Deflater();
      assertNotNull(deflater0);
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertNotNull(deflaterSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      deflaterSink0.finishDeflate();
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x78
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Deflater deflater0 = new Deflater();
      assertNotNull(deflater0);
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertNotNull(deflaterSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      
      deflaterSink0.finishDeflate();
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(1, deflater0.getAdler());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      assertNotNull(hashingSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotNull(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      assertNotNull(hashingSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotNull(byteString1);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      assertEquals(32, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      HashingSink hashingSink1 = HashingSink.hmacSha512(deflaterSink0, byteString0);
      assertNotNull(hashingSink1);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(1, deflater0.getAdler());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(64, byteString0.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSink1, hashingSink0);
      
      HashingSink hashingSink2 = HashingSink.hmacSha1(hashingSink1, byteString1);
      assertNotNull(hashingSink2);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(1, deflater0.getAdler());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(64, byteString0.size());
      assertEquals(32, byteString1.size());
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(hashingSink2.equals((Object)hashingSink0));
      assertFalse(hashingSink2.equals((Object)hashingSink1));
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(hashingSink1, hashingSink2);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(hashingSink2, hashingSink0);
      assertNotSame(hashingSink2, hashingSink1);
      
      HashingSink hashingSink3 = HashingSink.md5(hashingSink1);
      assertNotNull(hashingSink3);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(1, deflater0.getAdler());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(64, byteString0.size());
      assertFalse(hashingSink0.equals((Object)hashingSink2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSink1.equals((Object)hashingSink2));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(hashingSink3.equals((Object)hashingSink0));
      assertFalse(hashingSink3.equals((Object)hashingSink2));
      assertFalse(hashingSink3.equals((Object)hashingSink1));
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink3);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSink1, hashingSink2);
      assertNotSame(hashingSink1, hashingSink3);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(hashingSink3, hashingSink0);
      assertNotSame(hashingSink3, hashingSink2);
      assertNotSame(hashingSink3, hashingSink1);
      
      ByteString byteString2 = hashingSink3.hash();
      assertNotNull(byteString2);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(1, deflater0.getAdler());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(64, byteString0.size());
      assertEquals(16, byteString2.size());
      assertFalse(hashingSink0.equals((Object)hashingSink2));
      assertFalse(hashingSink0.equals((Object)hashingSink3));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSink1.equals((Object)hashingSink2));
      assertFalse(hashingSink1.equals((Object)hashingSink3));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(hashingSink3.equals((Object)hashingSink0));
      assertFalse(hashingSink3.equals((Object)hashingSink2));
      assertFalse(hashingSink3.equals((Object)hashingSink1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink3);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(hashingSink1, hashingSink2);
      assertNotSame(hashingSink1, hashingSink3);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(hashingSink3, hashingSink0);
      assertNotSame(hashingSink3, hashingSink2);
      assertNotSame(hashingSink3, hashingSink1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      boolean boolean0 = realBufferedSource0.exhausted();
      assertFalse(boolean0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      realBufferedSource1.close();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      // Undeclared exception!
      try { 
        realBufferedSource1.rangeEquals((-2704L), byteString1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = realBufferedSource0.buffer.writeLongLe((-3898L));
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      int int0 = realBufferedSource0.readUtf8CodePoint();
      assertEquals(65533, int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      GzipSource gzipSource0 = new GzipSource(buffer0);
      assertNotNull(gzipSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      String string0 = realBufferedSource0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      realBufferedSource0.close();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.skip(1825L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = realBufferedSource0.buffer.writeShort(276);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      byte[] byteArray0 = new byte[0];
      realBufferedSource1.readFully(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[9];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeShort(276);
      assertNotNull(buffer1);
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteString0.size());
      
      long long0 = realBufferedSource0.indexOf(byteString0);
      assertEquals((-1L), long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9, byteString0.size());
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      GzipSource gzipSource0 = new GzipSource(realBufferedSource0);
      assertNotNull(gzipSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      realBufferedSource0.close();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement(byteString0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Deflater deflater0 = new Deflater();
      assertNotNull(deflater0);
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertNotNull(deflaterSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      
      deflaterSink0.finishDeflate();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      assertEquals(8L, deflater0.getBytesWritten());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-8);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-8);
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)0, (byte) (-8), (byte) (-64), (byte) (-8)}, byteArray0);
      assertEquals(5, byteString0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeShort(8230);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      realBufferedSource0.readFully(byteArray0);
      assertArrayEquals(new byte[] {(byte)120, (byte) (-100), (byte)3, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer1);
      
      long long0 = realBufferedSource0.indexOfElement(byteString0);
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte)120, (byte) (-100), (byte)3, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(5, byteString0.size());
      assertSame(buffer0, buffer1);
      
      long long1 = realBufferedSource0.indexOf((byte) (-100));
      assertEquals((-1L), long1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(long1 == long0);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteString0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      realBufferedSource0.close();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      realBufferedSource0.close();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeUtf8("base64 == null");
      assertNotNull(buffer1);
      assertEquals(14L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(14L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource1);
      assertEquals(14L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      realBufferedSource1.close();
      assertEquals(14L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.exhausted();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Deflater deflater0 = new Deflater();
      assertNotNull(deflater0);
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong((-1367L));
      assertNotNull(bufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      long long0 = realBufferedSource0.readDecimalLong();
      assertEquals((-1367L), long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertSame(realBufferedSink0, bufferedSink0);
      
      realBufferedSource0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertSame(realBufferedSink0, bufferedSink0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      boolean boolean0 = realBufferedSource1.exhausted();
      assertTrue(boolean0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotSame(realBufferedSource1, realBufferedSource0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeLongLe(4L);
      assertNotNull(buffer1);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      long long0 = realBufferedSource0.readAll(buffer0);
      assertEquals(8L, long0);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      
      realBufferedSource0.close();
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      
      realBufferedSource0.close();
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeLongLe((-1559L));
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = realBufferedSource0.readUtf8CodePoint();
      assertEquals(65533, int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xf9
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      
      boolean boolean0 = realBufferedSource0.rangeEquals(1091L, byteString0, 2147483626, 2147483626);
      assertFalse(boolean0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertNotNull(realBufferedSource1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      boolean boolean1 = realBufferedSource1.exhausted();
      assertTrue(boolean1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Deflater deflater0 = new Deflater();
      assertNotNull(deflater0);
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertNotNull(deflaterSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      long long0 = buffer0.readAll(deflaterSink0);
      assertEquals(0L, long0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      deflaterSink0.finishDeflate();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(8, deflater0.getTotalOut());
      
      long long1 = realBufferedSource0.indexOf((byte)1);
      assertEquals(7L, long1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(long1 == long0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x78
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteString0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byteString0.write(buffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      long long0 = realBufferedSource0.indexOf(byteString0);
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      pushbackInputStream0.unread(35);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.readFrom((InputStream) pushbackInputStream0, 2732L);
      assertNotNull(buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      int int0 = pushbackInputStream0.available();
      assertEquals(0, int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      try { 
        realBufferedSource0.buffer.readFrom((InputStream) pushbackInputStream0, 2732L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }
}
