/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 05:25:38 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.regex.Pattern;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(807, 807);
      constantInterfaceMethodref0.clone();
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant(929, constantInterfaceMethodref1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 929
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat((-2758.0938F));
      constantPoolGen0.lookupLong(1);
      int int0 = constantPoolGen0.lookupInteger((-1));
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(0.0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(0, 0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupDouble(0.0);
      String string0 = "";
      constantPoolGen0.addInterfaceMethodref("", "", "");
      Method method0 = new Method();
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(method0, "", constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-1048);
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass("org.apache.bcel.generic.Instruction");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(227);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      constantArray0[1] = (Constant) constantDouble0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(0, 0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantLong constantLong0 = new ConstantLong(0);
      constantArray0[3] = (Constant) constantLong0;
      ConstantString constantString0 = new ConstantString(0);
      constantArray0[4] = (Constant) constantString0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(51, 0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      Constant constant0 = constantNameAndType1.copy();
      constantArray0[5] = constant0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1, 1);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(0, 0);
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.lookupInteger(0);
      Method method0 = new Method();
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(method0, ",od648gbt@.`", constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      String string0 = ", locals={";
      constantPoolGen0.addMethodref(", locals={", ", locals={", "&");
      constantPoolGen0.addFloat(1.0F);
      String string1 = "Not allowed to create an array with more than 255 dimensions; actual: ";
      constantPoolGen0.addMethodref("CONSTANT_Methodref", "Not allowed to create an array with more than 255 dimensions; actual: ", ", locals={");
      constantPoolGen0.addLong(6);
      constantPoolGen0.constants = constantArray0;
      constantPoolGen0.lookupNameAndType("&", "&");
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref("&", (String) null, "V ;}%o-hcz5XJI%)");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-1048);
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref("}fYt=jDSE", "}fYt=jDSE", "}fYt=jDSE");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(228);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen0);
      int int0 = constantPoolGen0.lookupFloat(228);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupInterfaceMethodref("Z^2 =`v/p_?EM/", "Z^2 =`v/p_?EM/", "a*n'[-Kia");
      constantPoolGen0.lookupNameAndType((String) null, "Z^2 =`v/p_?EM/");
      constantPoolGen0.lookupFloat(4246.834F);
      constantPoolGen0.lookupMethodref("Unexpected constant type: ", "Unexpected constant type: ", "Unexpected constant type: ");
      constantPoolGen0.addClass("Unexpected constant type: ");
      constantPoolGen0.addString("Unexpected constant type: ");
      constantPoolGen0.lookupClass("Z^2 =`v/p_?EM/");
      constantPoolGen0.getConstantPool();
      constantPoolGen0.lookupNameAndType("caload", (String) null);
      constantPoolGen0.lookupDouble(3);
      ObjectType objectType0 = Type.STRING;
      constantPoolGen0.addClass(objectType0);
      constantPoolGen0.lookupNameAndType((String) null, "");
      constantPoolGen0.addUtf8("Z^2 =`v/p_?EM/");
      constantPoolGen0.lookupMethodref((String) null, (String) null, (String) null);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(248);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen0);
      int int0 = constantPoolGen0.lookupDouble(1004.9041);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(64);
      constantArray0[0] = (Constant) constantClass0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("hLv1S|%M#!&QiO^Rz;P|");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.adjustSize();
      Constant[] constantArray0 = new Constant[6];
      constantPoolGen0.getConstant(0);
      constantArray0[0] = null;
      String string0 = "-UXt!V=(Wfs";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("-UXt!V=(Wfs");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 0);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2, 2);
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.adjustSize();
      Constant[] constantArray0 = new Constant[6];
      constantPoolGen0.getConstant(0);
      constantArray0[0] = null;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("-UXt!V=(Wfs");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen1.addLong(0);
      constantPoolGen0.lookupNameAndType("-UXt!V=(Wfs", "Local Variables:\n");
      constantPoolGen1.addInterfaceMethodref("r)eu4vX;AaxwVF`", "<points to itself>", "<points to itself>");
      ObjectType objectType0 = Type.STRINGBUFFER;
      InstructionList instructionList0 = new InstructionList();
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen((-4123), objectType0, objectType0.NO_ARGS, stringArray0, "<points to itself>", "V ;}%o-hcz5XJI%)", instructionList0, constantPoolGen1);
      constantPoolGen1.lookupInterfaceMethodref(methodGen0);
      assertEquals(8, constantPoolGen1.getSize());
      
      constantPoolGen0.lookupFieldref("r)eu4vX;AaxwVF`", "-UXt!V=(Wfs", (String) null);
      int int1 = constantPoolGen0.lookupFloat((-1057.1023F));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addMethodref(", locals={", ", locals={", "&");
      constantPoolGen0.addFloat(1.0F);
      constantPoolGen0.addMethodref("CONSTANT_Methodref", "Not allowed to create an array with more than 255 dimensions; actual: ", ", locals={");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1199, 236);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("CONSTANT_Methodref");
      ConstantDouble constantDouble0 = new ConstantDouble(6);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantDouble constantDouble2 = new ConstantDouble(0.0);
      constantDouble0.toString();
      constantPoolGen0.lookupDouble(3220.96967);
      constantPoolGen0.lookupNameAndType("pE", "^ReVa>PB0$B04G}ww!");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addInteger(3);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      constantPoolGen2.lookupFloat(1.0F);
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantDouble2, constantPoolGen3);
      assertEquals(14, constantPoolGen0.getSize());
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFloat(4246.834F);
      constantPoolGen0.lookupMethodref("Unexpected constant type: ", "Unexpected constant type: ", "Unexpected constant type: ");
      constantPoolGen0.addClass("Unexpected constant type: ");
      constantPoolGen0.addString("Unexpected constant type: ");
      int int0 = Long.BYTES;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addNameAndType("{,Ww\"~tC2Zp%>nD{Yz", "Unexpected constant type: ");
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantString constantString0 = new ConstantString((-1));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(3, (-1091));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref("Unexpected constant type: ", "a*n'[-Kia", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      assertEquals(1, constantPoolGen0.getSize());
      
      Constant[] constantArray0 = new Constant[6];
      ConstantString constantString0 = new ConstantString(0);
      constantArray0[0] = (Constant) constantString0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("-UXt!V=(Wfs");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 0);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(0, 0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen1.lookupFieldref("XJTp<[o", (String) null, "-UXt!V=(Wfs");
      assertEquals((-1), int0);
      assertEquals(6, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1091);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      Constant.setComparator((BCELComparator) null);
      constantMethodType0.setDescriptorIndex(27);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CONSTANT_Methodref:Not allowed to create an array with more than 255 dimensions; actual: :, locals={");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[8];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(27, 1);
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantMethodType1;
      constantArray0[2] = (Constant) constantMethodType1;
      constantArray0[3] = (Constant) constantMethodType1;
      constantArray0[4] = (Constant) constantMethodType0;
      constantArray0[5] = (Constant) constantMethodType0;
      constantArray0[6] = (Constant) constantMethodType0;
      constantArray0[7] = (Constant) constantMethodType1;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodType0, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodType[16](descriptor_index = 27)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat((-2758.0938F));
      constantPoolGen0.addLong(0L);
      int int0 = constantPoolGen0.getSize();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-427.0932));
      Pattern.quote("j");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(193.85896F);
      constantPoolGen0.addUtf8("QjE");
      constantPoolGen0.lookupDouble((-427.0932));
      constantPoolGen0.lookupNameAndType("j", "QjE");
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addInteger(0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      int int0 = Pattern.UNIX_LINES;
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2954, 2954);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      // Undeclared exception!
      try { 
        constantPoolGen2.addConstant(constantNameAndType1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2954
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(856, 3);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3, 4356);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(856, 41);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[2] = (Constant) constantNameAndType1;
      ConstantString constantString0 = new ConstantString(1843);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[3] = (Constant) constantString1;
      ConstantInteger constantInteger0 = new ConstantInteger(249);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[4] = (Constant) constantInteger1;
      ConstantString constantString2 = new ConstantString(856);
      constantArray0[5] = (Constant) constantString2;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 856
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(250);
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantFloat constantFloat0 = new ConstantFloat(250);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addFloat((-1.0F));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat((-2758.0938F));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u8qWO");
      int int0 = constantPoolGen0.addFloat(2386.8945F);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat((-2758.0938F));
      constantPoolGen0.addFieldref(")", ")", ")");
      constantPoolGen0.addLong(0L);
      constantPoolGen0.toString();
      assertEquals(8, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(236);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
      assertEquals(1, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantString constantString0 = new ConstantString(1008);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("h&opluG[D]F?qh;");
      Constant[] constantArray0 = new Constant[7];
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = Character.MIN_CODE_POINT;
      constantPoolGen1.lookupDouble(0.0);
      ObjectType objectType0 = Type.STRING;
      constantPoolGen0.addClass(objectType0);
      constantPoolGen0.lookupNameAndType("", "h&opluG[D]F?qh;");
      constantPoolGen0.addUtf8("V3A~K8JHA");
      constantPoolGen0.lookupMethodref("h&opluG[D]F?qh;", "I!{k2?qL>K][~!", "V3A~K8JHA");
      assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addString("Z^2 =`v/p_?EM/");
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      constantPoolGen2.lookupClass("Z^2 =`v/p_?EM/");
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger((-2122512905));
      constantPoolGen0.addFloat(2511.187F);
      constantPoolGen0.addLong(2);
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addUtf8("");
      constantPoolGen0.lookupString("of@kh");
      constantPoolGen0.getFinalConstantPool();
      ALOAD aLOAD0 = new ALOAD();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      ArrayType arrayType0 = new ArrayType(type0, 1);
      constantPoolGen0.addArrayClass(arrayType0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-3786), (-1));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3786
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addNameAndType("'-T(j;,Ig.", "'-T(j;,Ig.");
      constantPoolGen0.lookupMethodref(", catch_type = ", "'-T(j;,Ig.", (String) null);
      constantPoolGen0.addInteger(1);
      constantPoolGen0.adjustSize();
      constantPoolGen0.addInteger(3);
      constantPoolGen0.adjustSize();
      int int0 = constantPoolGen0.addLong(0L);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFloat(4246.834F);
      constantPoolGen0.addClass("a*n'[-Kia");
      constantPoolGen0.addString("a*n'[-Kia");
      int int0 = Long.BYTES;
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addInteger((-1));
      constantPoolGen0.adjustSize();
      constantPoolGen0.addInteger((-1));
      constantPoolGen0.addDouble(4);
      constantPoolGen0.addLong(4);
      int int1 = constantPoolGen0.lookupDouble(7);
      assertEquals(9, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1422, 1422);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "g\"dW");
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantDouble constantDouble0 = new ConstantDouble((-1.1399715711379312));
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen1.lookupInterfaceMethodref("BS*MFMU+GfPeXN", "BS*MFMU+GfPeXN", "BS*MFMU+GfPeXN");
      assertEquals((-1), int0);
      
      int int1 = ObjectStreamConstants.baseWireHandle;
      int int2 = constantPoolGen0.addConstant(constantDouble0, constantPoolGen1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFieldref("'$L6*:z]g7kjH5", "bytes must not be null!", ",fOnlXv");
      constantPoolGen0.lookupFieldref((String) null, "T", "");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("DCONST can be used only for 0.0 and 1.0: ");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      constantUtf8_0.dump(dataOutputStream0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen1);
      constantPoolGen0.lookupDouble((-770.915692843889));
      constantPoolGen1.lookupMethodref("DCONST can be used only for 0.0 and 1.0: ", "DCONST can be used only for 0.0 and 1.0: ", "`cIKGK!Gse^E");
      constantPoolGen0.addInterfaceMethodref("*!e:a00Q(1u1`S", "VYr&w+D|/(", "*!e:a00Q(1u1`S");
      constantPoolGen0.addFieldref("java/lang/String", "Ws (./J)N<q@D_D[xa1", "MethodParameters");
      assertEquals(13, constantPoolGen0.getSize());
      
      ConstantPool constantPool0 = constantPoolGen1.getConstantPool();
      assertEquals(256, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong(1L);
      int int0 = constantPoolGen0.lookupLong((-82L));
      assertEquals(9, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble(2.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantLong constantLong0 = new ConstantLong(1495L);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(0, 0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong(1L);
      constantPoolGen0.addClass("&");
      constantPoolGen0.addLong((-2887L));
      int int0 = constantPoolGen0.lookupUtf8("&");
      assertEquals(9, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFieldref("z/^Ks8Dl96$TzZC7?1", ")", ".)XobbV:0");
      ConstantLong constantLong0 = new ConstantLong(4616189618054758400L);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantLong0, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("c\"V/K*", "eN", "=0phP_( joiO5Pv/Y");
      constantPoolGen0.lookupInterfaceMethodref("c\"V/K*", "c\"V/K*", "V3A~K8JHA");
      ConstantInteger constantInteger0 = new ConstantInteger(64);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      assertEquals(8, constantPoolGen0.getSize());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.lookupFieldref("z/^Ks8Dl96$TzZC7?1", "[Ljava/lang/Object;", ".)XobbV:0");
      ConstantString constantString0 = new ConstantString(11);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(0, 0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      Integer integer0 = new Integer(0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen2.addConstant(constantArray0[0], constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantFloat constantFloat0 = new ConstantFloat(1253.461F);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantFloat0;
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantFloat0;
      constantArray0[5] = (Constant) constantFloat0;
      constantArray0[6] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantFloat0, constantPoolGen1);
      // Undeclared exception!
      try { 
        constantPoolGen1.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = ")";
      constantPoolGen0.addInterfaceMethodref(")", ")", ")");
      String string1 = "vY ";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string2 = null;
      constantPoolGen0.lookupNameAndType("vY ", "vY ");
      BasicType basicType0 = Type.BOOLEAN;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1), 4);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger(227);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantClass constantClass0 = new ConstantClass(227);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass1, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("}fYt=jDSE", "Unknown constant type ", "org.apache.bcel.generic.ConstantPoolGen");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addNameAndType("5g)VjRwD(K9>", "5g)VjRwD(K9>");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.getConstantPool();
      assertEquals(9, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addMethodref("Not targeting ", "Unknown constant type ", "Unknown constant type ");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addFieldref("QTr", "QTr", "QTr");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(10, constantPoolGen0.getSize());
  }
}
