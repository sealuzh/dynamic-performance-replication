/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 07:27:54 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileDescriptor;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.ArrayList;
import java.util.List;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.value.ValueLob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter session", (DBSchema) null);
      String[] stringArray0 = new String[6];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "w{jh{n_mE)LX", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("Arrays are not equal, the size differs: [");
      String string0 = SQLUtil.renderValue(jMXPrincipal0);
      assertEquals("JMXPrincipal:  Arrays are not equal, the size differs: [", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ValueLob valueLob0 = ValueLob.createSmallLob((-2211), byteArray0);
      Reader reader0 = valueLob0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.join((String) null, "Underlying ResultSet is not updatable.", stringArray0, "Underlying ResultSet is not updatable.", (String) null, stringArray0);
      assertEquals("Underlying ResultSet is not updatable. as null on Underlying ResultSet is not updatable..null = null.null and Underlying ResultSet is not updatable..null = null.null and Underlying ResultSet is not updatable..null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("drop tablexsdag.s", (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("FILE");
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      File file0 = MockFile.createTempFile("REMARKS", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DataStore dataStore0 = new DataStore("select into43x70.u");
      VirtualFile virtualFile0 = new VirtualFile("}uGJB", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.join("alter tableprimary", "J+2", stringArray0, "^S&4(T\"oS:^C^J", "alter materialized view", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String[] stringArray1 = new String[5];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("left join = as truncate|rjn on setBinaryStream(int, InputStream, long).= = truncate|rjn.= and setBinaryStream(int, InputStream, long).setBinaryStream (int, InputStream, long) = truncate|rjn.setBinaryStream (int, InputStream, long) and setBinaryStream(int, InputStream, long).exec|rjn = truncate|rjn.exec|rjn and setBinaryStream(int, InputStream, long).exec|rjn = truncate|rjn.exec|rjn", stringArray1, "exec|rjn", "Jb", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("renameinner", (DBSchema) null);
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "renameinner", false, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " empty: ", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(" empty: ", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "'UNIQUE'", true, stringArray0);
      dBPrimaryKeyConstraint0.equals(" empty: ");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) " empty: ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (, , )
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.normalize("\"H~Ca8_T1+", false);
      String[] stringArray0 = new String[6];
      stringArray0[5] = "\"H~Ca8_T1+";
      SQLUtil.join("caKD,2", "`fO", stringArray0, "\"H~Ca8_T1+", "caKD,2", stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("FILE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("n&b", defaultDBTable0, 65, "CHECK ");
      StringBuilder stringBuilder0 = new StringBuilder("ROLLBACK TO SAVEPOINT ");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("ROLLBACK TO SAVEPOINT CHECK ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      defaultDBTable0.getIndexes();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      defaultDBTable0.addReferrer((DBTable) null);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("E.7(&`v", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT E.7(&`v FOREIGN KEY (, , , , , ) REFERENCES null(, , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter index");
      String[] stringArray0 = new String[9];
      stringArray0[8] = "alter index";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter index", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"alter index\" PRIMARY KEY (, , , , , , , , alter index)", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("vj[8XrP?^y#(sH-j!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SQLUtil.renderColumnListWithTableName("insertnull", stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance((-842), "CONSTRAINT I&9q!=Ls_vfg8JoF PRIMARY KEY (insertnull, null, I&9q!=Ls_vfg8JoF, null)");
      assertFalse(dBDataType0.isLOB());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("M1Smo]'Zkf");
      String string0 = SQLUtil.normalize("M1Smo]'Zkf", false);
      assertEquals("M1Smo ] 'Zkf'", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("M1Smo]'Zkf");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = SQLUtil.normalize("zo*~LxXO G)", true);
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure(string0);
      assertNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.isDML("|rjn");
      SQLUtil.normalize("3-g1AT", false);
      Object object0 = null;
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("--", false);
      ConstraintDescriptorList constraintDescriptorList0 = null;
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.normalize("}un!i/#MJq:m", false);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.mutatesStructure("org.apache.derby.impl.sql.catalog.XPLAINTableDescriptor");
      SQLUtil.normalize("org.apache.derby.impl.sql.catalog.XPLAINTableDescriptor", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.normalize("setBinaryStream(int, InputStream, long)", false);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("exec|rjn");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      String string0 = "^DE/:QN-Gc0{a@";
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.typeAndName((DBObject) null);
      Integer integer0 = RawTransaction.ABORT;
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter session", (DBSchema) null);
      SQLUtil.substituteMarkers("w{jh{n_mE)LX", "select", "]:%XcFn{Hq}O5!iy7/");
      SQLUtil.typeAndName(defaultDBTable0);
      int int0 = (-2029091454);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[8] = "FILE";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "+X;|O", false, stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("n&b", defaultDBTable0, 65, "CHECK ");
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.impl.sql.catalog.XPLAINTableDescriptor", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("org.apache.derby.impl.sql.catalog.XPLAINTableDescriptor");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("org.apache.derby.impl.sql.catalog.XPLAINTableDescriptorCONSTRAINT org.apache.derby.impl.sql.catalog.XPLAINTableDescriptor ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      defaultDBTable0.getIndexes();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      dBUniqueConstraint0.equals(stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = SQLUtil.normalize("\"H~Ca8_T1+", false);
      assertEquals("\"H~Ca8_T1+\"", string0);
      
      String[] stringArray0 = new String[6];
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("org.apa");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "N(|XLc~", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , , )", string1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      boolean boolean0 = true;
      String[] stringArray0 = new String[5];
      stringArray0[4] = "select*e89$.a-";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "select*e89$.a-", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBPrimaryKeyConstraint0);
      String string0 = SQLUtil.ownerDotComponent(dBUniqueIndex0);
      assertEquals("null.null", string0);
      
      boolean boolean1 = SQLUtil.isDML(stringArray0[4]);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String string0 = "drop materialized view";
      SQLUtil.ownerDotComponent(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertEquals("drop materialized view", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLUtil.isDDL("<z>3");
      StringBuilder stringBuilder0 = new StringBuilder(178);
      SQLUtil.addOptionalCondition("-pgPort", stringBuilder0);
      assertEquals("-pgPort", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "~,#Tz@");
      SQLUtil.addRequiredCondition("~,#Tz@", stringBuilder0);
      String string0 = "h57MJ";
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("^c Z2TcH>}iX?FA", stringBuilder0);
      SQLUtil.addOptionalCondition("9c>Xr'Qu/)|AE9m#A", stringBuilder1);
      assertEquals("^c Z2TcH>}iX?FA or 9c>Xr'Qu/)|AE9m#A", stringBuilder1.toString());
      assertEquals("^c Z2TcH>}iX?FA or 9c>Xr'Qu/)|AE9m#A", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(a{:t");
      String[] stringArray0 = new String[3];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "\"aOmI~Q", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"aOmI~Q UNIQUE (, , )", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "truncatel;tq|rsa";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncatel;tq|rsa");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string1);
      
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      boolean boolean1 = SQLUtil.isQuery("|7^");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("exec|rjn");
      String[] stringArray0 = new String[4];
      SQLUtil.leftJoin("setBinaryStream(int, InputStream, long)", stringArray0, "=", "truncate|rjn", stringArray0);
      String[] stringArray1 = new String[5];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("left join = as truncate|rjn on setBinaryStream(int, InputStream, long).= = truncate|rjn.= and setBinaryStream(int, InputStream, long).setBinaryStream (int, InputStream, long) = truncate|rjn.setBinaryStream (int, InputStream, long) and setBinaryStream(int, InputStream, long).exec|rjn = truncate|rjn.exec|rjn and setBinaryStream(int, InputStream, long).exec|rjn = truncate|rjn.exec|rjn", stringArray1, "exec|rjn", "Jb", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "update";
      SQLUtil.mutatesDataOrStructure("update");
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select*e89$.a-");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SQLUtil.removeComments("fOuS\"[op,F)P:q");
      SQLUtil.mutatesDataOrStructure("alter session");
      String string0 = "F}?H_5Gg";
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Character character0 = Character.valueOf('x');
      Character.isIdeographic((-4564));
      SQLUtil.substituteMarkers("yjn9 QjIM", "BLOB", character0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("YH{:N", true, "INSTEAD", "INSTEAD");
      assertEquals("check constraint", dBCheckConstraint0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "GIs,r+k=Dc7";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      int int0 = (-1724901991);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "create table";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(453, "create table");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create table", defaultDBTable0, dBDataType0, integer0, integer0);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CREATE TABLE(0,0)", string1);
      
      Boolean boolean0 = SQLUtil.mutatesStructure(string1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "truncatel;tq|rsa";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncatel;tq|rsa");
      defaultDBTable0.getCheckConstraints();
      DBDataType dBDataType0 = DBDataType.getInstance(6, "org.apache.derby.iapi.s");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("C", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setNullable(false);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("C ORG.APACHE.DERBY.IAPI.S NOT NULL", string1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "truncatel;tq|rsa";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncatel;tq|rsa");
      defaultDBTable0.getCheckConstraints();
      DBDataType dBDataType0 = DBDataType.getInstance(6, "org.apache.derby.iapi.s");
      dBDataType0.isAlpha();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("C", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setDefaultValue("42X71");
      SQLUtil.renderColumn(defaultDBColumn0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = defaultDBColumn0.getForeignKeyConstraint();
      assertNull(dBForeignKeyConstraint0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance(129, "VpYQ@nmApI<0@!");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("sd2X[jD", (DBTable) null, dBDataType0);
      arrayList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("create table");
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      VersionNumber.valueOf("J~uQ! #%");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("J~uQ! #%", (DBTable) null, (DBDataType) null, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("alter tablez6", (DBTable) null, (DBDataType) null);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("alter tablez6", (DBTable) null, (-2222), "");
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn(" WHERE ", (DBTable) null, (DBDataType) null, integer0, integer0);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      long long0 = 3552L;
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SQLUtil.renderValue((Object) null);
      String[] stringArray0 = new String[3];
      SQLUtil.leftJoin("null", stringArray0, "sPg", "sPg", stringArray0);
      DBSchema dBSchema0 = new DBSchema("E,|,>k{", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "null", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("create materialized view", true, dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      File file0 = MockFile.createTempFile("insert", "create table ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SQLUtil.renderColumnNames((String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "x)Gyxf/('j.zH.4!";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("x)Gyxf/('j.zH.4!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: x)Gyxf/('j.zH.4!
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("CREATE TABLE(0,0)");
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = "-1#fnxzkf*";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("-1#fnxzkf*", false, "rename", "rename");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.NEVER;
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("null");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insertnull", dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[3] = "null";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "I&9q!=Ls_vfg8JoF", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBDataType dBDataType0 = DBDataType.getInstance((-842), "CONSTRAINT I&9q!=Ls_vfg8JoF PRIMARY KEY (insertnull, null, I&9q!=Ls_vfg8JoF, null)");
      assertEquals((-842), dBDataType0.getJdbcType());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter index");
      String[] stringArray0 = new String[9];
      stringArray0[8] = "alter index";
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, "alter ", "alter ", stringArray0);
      assertEquals("alter  as alter  on null.null = alter .null and null.null = alter .null and null.null = alter .null and null.null = alter .null and null.null = alter .null and null.null = alter .null and null.null = alter .null and null.null = alter .null and null.alter index = alter .alter index", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("vj[8XrP?^y#(sH-j!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("renameinner", (DBSchema) null);
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "renameinner", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("cZJ*6=U3{%V&", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("}.jgJ", true, dBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES renameinner()", string0);
      
      String string1 = SQLUtil.leftJoin(stringArray0[0], stringArray0, stringArray0[0], stringArray0[0], stringArray0);
      assertEquals("left join null as null on null.null = null.null", string1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[2];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = "drop materialized view";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("drop materialized view");
      PrintWriter printWriter0 = mockPrintWriter0.printf("create table ", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, printWriter0);
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertEquals("drop materialized view", stringBuilder0.toString());
  }
}
