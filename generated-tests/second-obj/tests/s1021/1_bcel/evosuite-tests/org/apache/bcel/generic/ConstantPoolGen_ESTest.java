/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:51:46 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.ObjectStreamConstants;
import java.lang.reflect.Array;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(219);
      constantPoolGen0.getConstant(1);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = constantPoolGen0.addNameAndType("OXcc`2!/j6,C`", "OXcc`2!/j6,C`");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addUtf8("@.k/QHfK2");
      int int0 = constantPoolGen0.getSize();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(1827.312F);
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant(1973, constantFloat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1973
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.getSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(579.17175F);
      int int0 = constantPoolGen0.lookupInteger((-445));
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantFloat constantFloat0 = new ConstantFloat((-14));
      int int0 = constantPoolGen1.addConstant(constantFloat0, constantPoolGen0);
      assertEquals(3, constantPoolGen1.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(12L);
      constantPoolGen0.toString();
      int int0 = Float.MIN_EXPONENT;
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("AE_=/nNIk(y55_e", "AE_=/nNIk(y55_e", "AE_=/nNIk(y55_e");
      constantPoolGen0.toString();
      int int0 = constantPoolGen0.addInteger(4);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1473, 1473);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantDouble constantDouble0 = new ConstantDouble((-0.56849));
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(2670);
      constantArray0[0] = (Constant) constantClass0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2670, 2670);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("INSENSITIVE");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2992), (-2992));
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(235, 235);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(62);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(90);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantMethodType0.copy();
      int int0 = constantPoolGen0.lookupInteger(62);
      assertEquals((-1), int0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.lookupString("#");
      int int1 = constantPoolGen0.lookupFieldref("1+-#F*u}z:bO^o", "[", "oa9e-Qjy;;zgs");
      assertTrue(int1 == int0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(251, (-1251));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[1] = (Constant) constantNameAndType2;
      ConstantFloat constantFloat0 = new ConstantFloat(3774.12F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1251
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.THROWABLE;
      constantPoolGen0.addClass(objectType0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 6);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      Class<Object> class5 = Object.class;
      classArray0[5] = class5;
      Type.getTypes(classArray0);
      constantPoolGen0.lookupLong(0L);
      int int0 = constantPoolGen0.addClass(objectType0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupMethodref("", (String) null, (String) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ArrayType arrayType0 = new ArrayType(":&<`mtXf'!6;ufpU&Gv-&*/fM$:\"uNk%<`mtXf'!6;ufpU%Gv-&*/M$:\"uNk", 147);
      int int0 = constantPoolGen0.addArrayClass(arrayType0);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass(62);
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(90);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("$.g6Rmuna+dJ/G(gjx");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[0], constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[1] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantDouble constantDouble0 = new ConstantDouble(785.66838);
      constantPoolGen0.addConstant(constantDouble0, constantPoolGen1);
      constantPoolGen0.addConstant(constantDouble0, constantPoolGen1);
      // Undeclared exception!
      try { 
        constantPoolGen1.lookupClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble((-0.56849));
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupDouble((byte)109);
      assertEquals((-1), int0);
      
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int1 = constantPoolGen0.addConstant(constantArray0[2], constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, constantPoolGen1.getSize());
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(206, 206);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int1 = Pattern.LITERAL;
      constantPoolGen0.addFloat(16);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodHandle0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = 206, reference_index = 206)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.lookupFloat(0.0F);
      int int0 = 240;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(240, (-1));
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantNameAndType0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen2);
      assertEquals(3, constantPoolGen0.getSize());
      
      ConstantPool constantPool0 = constantPoolGen1.getFinalConstantPool();
      assertEquals(2, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(235);
      constantPoolGen0.addInteger(235);
      assertEquals(2, constantPoolGen0.getSize());
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(541, 235);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addInteger(76);
      constantPoolGen0.getFinalConstantPool();
      int int0 = constantPoolGen0.addInteger(905);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addFloat(3336.829F);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.lookupFloat(1525.276F);
      int int0 = constantPoolGen1.lookupMethodref("O8r/B1n{J3x_a", "this", "O8r/B1n{J3x_a");
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(0);
      constantPoolGen0.addConstant(constantFloat0, constantPoolGen1);
      constantPoolGen0.getFinalConstantPool();
      int int0 = constantPoolGen0.lookupFloat(0.0F);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(0L);
      int int0 = Long.SIZE;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      int int1 = constantPoolGen0.size;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1149), 256);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.addLong(0L);
      ConstantString constantString0 = new ConstantString(1280);
      assertEquals((byte)8, constantString0.getTag());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "Unknown constant type ";
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-3251), (-3251));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      String string1 = "\"Z6?T;B";
      String string2 = "#";
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(256);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(256);
      ConstantString constantString0 = new ConstantString(256);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 256
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("#`j}-{p9}Qlh<");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(377, 377);
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(0L);
      constantPoolGen0.lookupFloat(0.0F);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1149), (-1));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.addLong((-1149));
      ConstantString constantString0 = new ConstantString(1280);
      assertEquals((byte)8, constantString0.getTag());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Constant.setComparator((BCELComparator) null);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(78, 9);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodref0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addInterfaceMethodref("uti@ ", "", "");
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(5, 5);
      Constant.setComparator((BCELComparator) null);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2198, (-411));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      constantPoolGen0.lookupFieldref("JMLl>", "e", "'3LmG}IY]R");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool2);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(256, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = 11;
      ConstantString constantString0 = new ConstantString(11);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      ConstantFloat constantFloat0 = new ConstantFloat((-366.3323F));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantFloat0;
      constantArray0[3] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantFloat0, constantPoolGen1);
      constantPoolGen1.lookupString("uti9 ");
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      constantPoolGen1.getConstant(1);
      constantPoolGen1.addConstant(constantFloat0, constantPoolGen0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addNameAndType((String) null, "&%puti@ ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(1728);
      constantInteger0.copy();
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen0);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantClass constantClass0 = new ConstantClass(1);
      assertEquals(1, constantClass0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupString("xt9!,J!1'z:'-'zJWI");
      constantPoolGen0.lookupUtf8("xt9!,J!1'z:'-'zJWI");
      constantPoolGen0.addInteger(66);
      constantPoolGen0.addDouble(0.0);
      String string0 = Constants.ILLEGAL_OPCODE;
      ConstantLong constantLong0 = new ConstantLong((-1));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantLong1, constantPoolGen1);
      int int0 = constantPoolGen1.index;
      constantPoolGen0.lookupMethodref("xt9!,J!1'z:'-'zJWI", "", "");
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen((Method) null, "qXkHLrjaBz+Br<8", constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addString("9L[so@ROM9b@");
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.toString();
      constantPoolGen0.lookupDouble(0.0);
      String string0 = "puti@ &puti@ &puti@ ";
      constantPoolGen0.lookupString("puti@ &puti@ &puti@ ");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1018, (-1));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1018
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(228, 228);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Character.MAX_RADIX;
      ConstantInteger constantInteger0 = new ConstantInteger(61);
      constantPoolGen0.toString();
      constantPoolGen0.addFieldref("\"!=AV/`-\"G/<!arC#Fk^", "\"!=AV/`-\"G/<!arC#Fk^", "AE_=/\"nNIk(7y755_e");
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantInteger0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(61, 61);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 5);
      String string0 = "vQ|N!]O";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vQ|N!]O");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantFieldref0.setClassIndex((-1513));
      constantPoolGen0.lookupNameAndType("\"!=AV/`-\"G/<!arC#Fk^", "AE_=/\"nNIk(7y755_e");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      int int1 = Byte.BYTES;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      int int2 = Pattern.LITERAL;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "puti@ ";
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addString("puti@ ");
      constantPool0.copy();
      constantPoolGen0.addMethodref(">uf!TEEUu(`}", "puti@ ", "puti@ ");
      constantPoolGen0.addInterfaceMethodref("puti@ ", "puti@ ", "puti@ ");
      constantPool0.toString();
      constantPoolGen0.addDouble((-1.0));
      int int0 = Short.BYTES;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(9, 6);
      int int1 = 2;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 2);
      byte[] byteArray0 = new byte[2];
      constantPoolGen0.addFloat(8);
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)3;
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.EOFException
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantDouble constantDouble0 = new ConstantDouble(785.66838);
      constantPoolGen0.addConstant(constantDouble0, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      
      int int0 = constantPoolGen1.lookupClass("4C4qiZ1EIEF RI'U");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "hputK";
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      int int0 = Float.BYTES;
      constantPoolGen0.addMethodref("hputK", "hputK", "hputK");
      int int1 = Short.BYTES;
      int int2 = Byte.BYTES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      String string1 = "org.apache.bcel.generic.ConstantPoolGen";
      constantPoolGen1.lookupFieldref("org.apache.bcel.generic.ConstantPoolGen", "Va", "<`mwf'!;ufU");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(4, 4);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantMethodref cannot be cast to org.apache.bcel.classfile.ConstantClass
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.COMMENTS;
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("\"!=AV/`-\"G/<!arC#Fk^");
      ConstantInteger constantInteger0 = new ConstantInteger(77);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EF[Ul\"");
      constantPoolGen0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = constantPoolGen0.index;
      Constant[] constantArray0 = new Constant[4];
      constantArray0[3] = (Constant) constantInteger0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(77, 77);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(3, 3);
      constantFieldref0.setClassIndex(77);
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"!=AV/`-\"G/<!arC#Fk^");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInteger0.toString();
      constantPoolGen0.addString("\"!=AV/`-\"G/<!arC#Fk^");
      constantPoolGen0.adjustSize();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[0], constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = 0;
      constantPoolGen0.lookupUtf8("AC'Rt,(7");
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref(".R#{f(:>W ", "C>", "6b2CF Y8");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(757, 757);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantLong constantLong0 = new ConstantLong(757);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addInterfaceMethodref("%", "%", "%");
      int int0 = constantPoolGen0.addInterfaceMethodref("%", "%", "%");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addUtf8("1 S`TG~yIR");
      constantPoolGen0.lookupLong(0L);
      constantPoolGen0.addMethodref("1 S`TG~yIR", "1 S`TG~yIR", "1 S`TG~yIR");
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addFloat(534.71F);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1, (-1551));
      constantPoolGen0.lookupMethodref("1 S`TG~yIR", "1 S`TG~yIR", "1 S`TG~yIR");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1 S`TG~yIR", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      constantMethodHandle0.dump(dataOutputStream0);
      constantMethodHandle0.setReferenceKind(243);
      constantPoolGen0.setConstant(242, constantMethodHandle0);
      constantPoolGen0.toString();
      constantPoolGen0.lookupInterfaceMethodref("}]", "OlDT)}V99GQ", (String) null);
      assertEquals(6, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupMethodref("%l\"b-'bu;kblgn5y6x", "%l\"b-'bu;kblgn5y6x", "Could not create the directory ");
      ConstantInteger constantInteger0 = new ConstantInteger(1728);
      constantPoolGen0.addFieldref("Could not create the directory ", "Could not create the directory ", "Could not create the directory ");
      constantInteger0.copy();
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen0);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantClass constantClass0 = new ConstantClass(5);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addFieldref("Could not create the directory ", "Could not create the directory ", "Could not create the directory ");
      int int0 = Byte.BYTES;
      constantPool0.toString();
      ConstantPoolGen constantPoolGen4 = new ConstantPoolGen(constantPool0);
      constantPool0.copy();
      int int1 = Byte.BYTES;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(5, 1728);
      ConstantPoolGen constantPoolGen5 = new ConstantPoolGen(constantPool0);
      int int2 = Pattern.LITERAL;
      constantPoolGen3.lookupFieldref("/lo;n}N@PB\b~i=;T[)", "' not found in class '", "/lo;n}N@PB\b~i=;T[)");
      int int3 = constantPoolGen4.addNameAndType("&", "&");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(7, int3);
  }
}
