/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 08:27:23 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(aeaL@)gd]U@q<T");
      SystemInUtil.addInputLine("(aeaL@)gd]U@q<T");
      SystemInUtil.addInputLine("(aeaL@)gd]U@q<T");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine((String) null);
      streamTokenizer0.wordChars((-4), (-1));
      jSTerm0.JSPredicateFormInit(streamTokenizer0);
      SystemInUtil.addInputLine("(aeaL@)gd]U@q<T");
      streamTokenizer0.nextToken();
      jSTerm0.toStr();
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.print();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) (-3));
      jSTerm0.clone();
      jSTerm0.print();
      jSPredicateForm0.removeIf(predicate0);
      jSPredicateForm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.print();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      Consumer<JSPredicateForm> consumer0 = (Consumer<JSPredicateForm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSJshopVars.whiteSpace = (-3);
      JSJshopVars.semicolon = (-3362);
      jSPredicateForm1.forEach(consumer0);
      jSSubstitution0.add((Object) "(aeaL@)gd]U@q<T");
      jSPredicateForm1.clonePF();
      JSJshopVars.slash = 0;
      JSPredicateForm jSPredicateForm2 = null;
      try {
        jSPredicateForm2 = new JSPredicateForm("(!i@du<c");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.print();
      SystemInUtil.addInputLine("not");
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.matches(jSPredicateForm0);
      SystemInUtil.addInputLine("the tokenizer is SPACE!");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPredicateForm0.print();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.print();
      SystemInUtil.addInputLine("not");
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.matches(jSPredicateForm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.toStr();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      jSPredicateForm1.sort(comparator0);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElements(jSSubstitution0);
      StringReader stringReader1 = new StringReader("not");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      jSTerm0.add((Object) "not");
      jSTerm0.print();
      jSTerm0.toStr();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(aeaL@.)gd]U@q<T");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm(streamTokenizer0);
      assertEquals(10, jSPredicateForm1.capacity());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("VY");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      stringReader0.markSupported();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.print();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      stringReader0.ready();
      Integer integer0 = new Integer((-5696));
      jSSubstitution2.add((Object) integer0);
      jSPredicateForm0.toStr();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      jSTerm1.matches(jSPredicateForm1, jSSubstitution2);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(!aU@Ld]UW<T");
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSTerm jSTerm1 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      JSPredicateForm jSPredicateForm2 = null;
      try {
        jSPredicateForm2 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Stream stream0 = jSTerm0.stream();
      jSTerm0.add((Object) "noK");
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      jSTerm0.print();
      System.setCurrentTimeMillis(0L);
      jSTerm0.print();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.equals(jSPredicateForm0);
      StringReader stringReader0 = new StringReader("noK");
      StringReader stringReader1 = new StringReader("l0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stream0;
      objectArray0[1] = (Object) stringReader0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.equals(jSPredicateForm1);
      streamTokenizer0.pushBack();
      jSPredicateForm1.equals((JSPredicateForm) jSTerm0);
      jSPredicateForm0.toStr();
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      String string0 = "not";
      jSTerm0.add((Object) "not");
      jSTerm0.listIterator();
      jSTerm0.print();
      jSTerm0.print();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("VY");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      stringReader0.markSupported();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.print();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      jSTerm1.matches(jSPredicateForm1, jSSubstitution2);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "(!aU@Ld]UW<T";
      StringReader stringReader0 = new StringReader("(!aU@Ld]UW<T");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      jSTerm0.add((Object) "not");
      Object object0 = new Object();
      jSTerm0.iterator();
      Comparator<JSPredicateForm> comparator0 = (Comparator<JSPredicateForm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      System.setCurrentTimeMillis((-1316));
      StringReader stringReader0 = new StringReader("not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      String string0 = "not";
      jSTerm0.add((Object) "not");
      Object object0 = new Object();
      jSTerm0.listIterator();
      jSTerm0.add(object0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v^&0l~ nz+.J");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.markSupported();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm0, jSSubstitution1);
      jSTerm0.print();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution3);
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      JSJshopVars.interrogation = 43;
      JSSubstitution jSSubstitution4 = jSPredicateForm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Comparator<JSPredicateForm> comparator0 = (Comparator<JSPredicateForm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      streamTokenizer0.ordinaryChar(43);
      jSPredicateForm1.firstElement();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.add((Object) jSTerm2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm1.isGround();
      jSPredicateForm0.standarizerPredicateForm();
      jSTerm1.equals((JSPredicateForm) jSTerm1);
      jSTerm0.equals(jSPredicateForm1);
      StringReader stringReader1 = new StringReader(";=VQMZUAbBq");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution4);
      jSPredicateForm2.toStr();
      JSPredicateForm jSPredicateForm3 = null;
      try {
        jSPredicateForm3 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      jSTerm0.add((Object) "not");
      Object object0 = new Object();
      jSTerm0.add(object0);
      jSTerm0.iterator();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Pl{nninDo$ain: eror");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer0.resetSyntax();
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PlanningDomain: error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.eolIsSignificant(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.isGround();
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      char[] charArray0 = new char[8];
      charArray0[0] = 'X';
      charArray0[1] = '(';
      charArray0[2] = 'w';
      charArray0[3] = ';';
      charArray0[4] = 'g';
      charArray0[5] = 'U';
      charArray0[6] = 'o';
      charArray0[7] = 'p';
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, (-217), (-217));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V[l^*[XY(dJ7ES@3");
      char[] charArray0 = new char[8];
      stringReader0.read(charArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.wordChars(8, 8);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#c+9&Q3x");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("( ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#c+9&Q3( x");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'F';
      charArray0[1] = '9';
      charArray0[2] = 'x';
      charArray0[3] = '^';
      charArray0[4] = 'H';
      charArray0[5] = '!';
      charArray0[6] = 'x';
      stringReader0.read(charArray0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8^|0l~ n+:9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = 2723;
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.firstElement();
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      streamTokenizer0.ordinaryChar(2723);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution1);
      jSTerm2.isGround();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm1.equals(jSPredicateForm0);
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      jSPredicateForm1.print();
      jSPredicateForm1.equals((JSPredicateForm) jSTerm1);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSPredicateForm0.replaceAll(unaryOperator0);
      jSPredicateForm2.equals((JSPredicateForm) jSTerm1);
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      jSTerm2.isEmpty();
      JSPredicateForm jSPredicateForm4 = null;
      try {
        jSPredicateForm4 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8^|0l~ n+:9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.firstElement();
      Object object0 = new Object();
      jSTerm1.add(object0);
      jSSubstitution0.add((Object) "8.0");
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      streamTokenizer0.ordinaryChar(2723);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution1);
      jSTerm2.isGround();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSTerm1.print();
      jSTerm0.equals(jSPredicateForm1);
      jSPredicateForm1.equals(jSPredicateForm1);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution1);
      jSPredicateForm2.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      jSPredicateForm0.equals((JSPredicateForm) jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8^|0l~ n+:9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      streamTokenizer0.ordinaryChar(2723);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPredicateForm1.matches(jSPredicateForm0, jSSubstitution1);
      jSTerm2.isGround();
      JSPredicateForm jSPredicateForm2 = jSTerm0.standarizerPredicateForm();
      jSTerm1.print();
      boolean boolean0 = jSPredicateForm0.equals(jSPredicateForm2);
      boolean boolean1 = jSPredicateForm2.equals(jSPredicateForm2);
      assertFalse(boolean1 == boolean0);
      
      jSPredicateForm2.isEmpty();
      JSPredicateForm jSPredicateForm3 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      assertFalse(jSSubstitution1.fail());
      
      StringBuffer stringBuffer0 = jSPredicateForm1.toStr();
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm3));
      assertEquals("(8.08.0 )", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8^|0l~ n+:9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      streamTokenizer0.ordinaryChar(2723);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSPredicateForm1.matches(jSPredicateForm0, jSSubstitution1);
      assertTrue(jSSubstitution2.fail());
      
      jSTerm2.isGround();
      JSPredicateForm jSPredicateForm2 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSTerm1.print();
      boolean boolean0 = jSPredicateForm3.equals(jSPredicateForm2);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm5 = new JSPredicateForm();
      boolean boolean1 = jSPredicateForm4.equals(jSPredicateForm3);
      assertFalse(boolean1 == boolean0);
      
      jSPredicateForm2.isEmpty();
      JSPredicateForm jSPredicateForm6 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      assertTrue(jSPredicateForm6.equals((Object)jSPredicateForm1));
      assertNotSame(jSPredicateForm6, jSPredicateForm3);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.iterator();
      jSPredicateForm0.toStr();
      jSPredicateForm0.print();
      StringReader stringReader0 = new StringReader("HWW7;E'?_i'dkUwP&n");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip((-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm2.print();
      JSSubstitution jSSubstitution1 = jSPredicateForm1.matches(jSPredicateForm0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.standarizerPredicateForm();
      jSSubstitution0.add((Object) null);
      jSSubstitution1.add((Object) null);
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSTerm0.equals(jSPredicateForm3);
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7/=v,.y0-Kj%(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip(0L);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.print();
      streamTokenizer0.nval = 1043.505796;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8^|0l~ n+:9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
      jSTerm0.add((Object) jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      streamTokenizer0.ordinaryChar(2723);
      jSTerm0.clonePF();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8^|0l~ n+:9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      streamTokenizer0.ordinaryChar(2723);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSPredicateForm1.matches(jSPredicateForm0, jSSubstitution1);
      jSPredicateForm0.remove((Object) null);
      jSSubstitution1.instance(jSTerm0);
      // Undeclared exception!
      try { 
        jSSubstitution2.removeElementAt(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7/=v,.y0-Kj%(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip(0L);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.print();
      streamTokenizer0.nval = 1043.505796078305;
      JSSubstitution jSSubstitution0 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSSubstitution0.add((Object) jSPredicateForm1);
      jSSubstitution0.add((Object) jSPredicateForm0);
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      jSPredicateForm2.toStr();
      jSTerm0.toStr();
      jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      jSTerm0.isGround();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm4.print();
      // Undeclared exception!
      try { 
        jSPredicateForm1.matches(jSPredicateForm3, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7/=v,.y0-Kj%(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip(0L);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.print();
      streamTokenizer0.nval = 1043.505796078305;
      JSSubstitution jSSubstitution0 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSSubstitution0.add((Object) jSPredicateForm1);
      jSSubstitution0.add((Object) jSPredicateForm0);
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      jSPredicateForm2.toStr();
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      jSPredicateForm0.equals(jSPredicateForm3);
      JSPredicateForm jSPredicateForm4 = null;
      try {
        jSPredicateForm4 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TH;,tFiHGy?RrYh{p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      boolean boolean0 = jSTerm0.equals(jSPredicateForm1);
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm((String) null);
      boolean boolean1 = jSPredicateForm0.equals(jSPredicateForm2);
      assertFalse(boolean1 == boolean0);
      
      jSPredicateForm2.print();
      stringReader0.markSupported();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      assertNotSame(jSPredicateForm3, jSPredicateForm0);
      assertNotSame(jSPredicateForm0, jSPredicateForm1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" OyvFns21");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = jSPredicateForm1.matches(jSPredicateForm0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      jSTerm0.print();
      jSTerm0.matches(jSPredicateForm3, jSSubstitution0);
      jSPredicateForm3.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm4 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm4.equals(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7/=v,.y0-Kj%(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip(0L);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.print();
      streamTokenizer0.nval = 1043.505796078305;
      JSSubstitution jSSubstitution0 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm0.retainAll(jSPredicateForm1);
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      jSTerm0.add((Object) null);
      jSTerm0.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      String string0 = "umd.cs.shop.JSTerm";
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSTerm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.iterator();
      jSTerm0.toStr();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = null;
      jSPredicateForm0.applySubstitutionPF((JSSubstitution) null);
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("expected '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.eolIsSignificant(false);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.addAll(0, (Collection) jSPredicateForm1);
      // Undeclared exception!
      try { 
        jSTerm0.listIterator(61);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 61
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.add((Object) jSPredicateForm0);
      jSTerm0.print();
      jSPredicateForm0.matches((JSPredicateForm) jSTerm0, (JSSubstitution) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Operator name expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.equals(jSPredicateForm0);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1, (JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PlanningDomain: error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.isGround();
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      char[] charArray0 = new char[8];
      charArray0[0] = 'X';
      charArray0[2] = 'w';
      charArray0[3] = 'X';
      charArray0[4] = 'g';
      streamTokenizer0.ordinaryChar(33);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.iterator();
      jSPredicateForm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.get((-1933129747));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1933129747
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8^|0l~ n+:9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.firstElement();
      jSSubstitution0.add((Object) "8.0");
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      streamTokenizer0.ordinaryChar(2723);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution1);
      jSTerm2.isGround();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSTerm1.print();
      jSTerm0.equals(jSPredicateForm1);
      jSPredicateForm1.equals(jSPredicateForm1);
      jSPredicateForm1.isEmpty();
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSPredicateForm0.toStr();
      // Undeclared exception!
      try { 
        jSTerm2.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      Object object0 = jSPredicateForm0.clone();
      System.setCurrentTimeMillis(0L);
      jSSubstitution0.add(object0);
      jSSubstitution0.add((Object) null);
      // Undeclared exception!
      try { 
        jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Operator name expected");
      char[] charArray0 = new char[1];
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.equals((JSPredicateForm) null);
      charArray0[0] = 'E';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-1305), (-1305));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "Operator name expected";
      StringReader stringReader0 = new StringReader("Operator name expected");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = null;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.print();
      JSJshopVars.leftPar = 0;
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.astherisk = 0;
      StringReader stringReader0 = new StringReader("iW!SY>Kd-aur[/4U!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSJshopVars.flagLevel = 0;
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Object> comparator0 = null;
      jSTerm0.sort((Comparator) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.iterator();
      jSPredicateForm0.toStr();
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.listIterator();
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.close();
      streamTokenizer0.whitespaceChars(0, 0);
      streamTokenizer0.wordChars(0, 87);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StreamTokenizer streamTokenizer0 = null;
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(aeaL@gd]U@W<T");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
