/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 16:43:29 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PipedReader;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.substituteMarkers("/afHiGb-Sgq0nqZ~N", "org.databene.jdbacl.SQLUtil", object0);
      assertEquals("/afHiGb-Sgq0nqZ~N", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "", "");
      assertEquals("''", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".null, .null, .null, .null", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("B^A~ B\"%8om`");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("n", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "B^A~ B\"%8om`", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"B^A~ B\"%8om`\" PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.leftJoin("U|9nAH, U|9nAH", stringArray0, "null", "", stringArray0);
      assertEquals("left join null as  on U|9nAH, U|9nAH.null = .null and U|9nAH, U|9nAH.null = .null and U|9nAH, U|9nAH.null = .null and U|9nAH, U|9nAH.null = .null and U|9nAH, U|9nAH.null = .null and U|9nAH, U|9nAH.null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("+z<!CEx_ckv6Gi8)b[2", stringArray0, "select into", "execute0vzee6d``u-}", stringArray0);
      assertEquals("left join select into as execute0vzee6d``u-} on ", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("alter sessionv.pc}f", stringArray0, "alter sessionv.pc}f", " r109z", stringArray0);
      assertEquals("alter sessionv.pc}f as  r109z on ", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.innerJoin("CONSTRAINT vz8}-3[\"V0r3QV: PRIMARY KEY (vz8}-3[\"V0r3QV:, drop materialized view, drop materialized view, vz8}-3[\"V0r3QV:, drop materialized view, drop materialized view)", stringArray0, "drop table", "select into64#agmjm`o?'i y,{", stringArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("B^A~ B\"%8om`");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("n", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "B^A~ B\"%8om`", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"B^A~ B\"%8om`\" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.databene.jdbacl.SQLUtil");
      String[] stringArray0 = new String[9];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "/afHiGb-Sgq0nqZ~N", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT /afHiGb-Sgq0nqZ~N ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("e6---s", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-g", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(953, "ck");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("e6---s", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = new Integer(32767);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|", defaultDBTable0, (DBDataType) null, integer0, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Unknown XML Source class: {0}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rename", (DBSchema) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[9];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("rename", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("callselect");
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("callselect", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("alter sessionv.pc}f as  r109z on ", " and ", stringArray0, "alter sessionv.pc}f", "YNEWNkdPw", stringArray0);
      assertEquals("alter sessionv.pc}f as  r109z on  join alter sessionv.pc}f as YNEWNkdPw on ", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select intoe6---sdaup%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("p/w");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("0VZeE6D``u-}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("e6---SDAuP%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("`:47$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("create unique indexdelay (change pending)");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("call");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("insertg%jk6o r< ORG.APACHE.DERBY.IAPI.TYPES.NUMBERDATAVALUE NOT NULL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("ALTER TABLE ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("%i{??U3=15v<", (DBTable) null, 39, "%i{??U3=15v<");
      StringBuilder stringBuilder0 = new StringBuilder("org.apache");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("org.apache%I{??U3=15V<", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , )", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.renderColumnListWithTableName("o^Jt`ExJ|$C<z2`#v&", stringArray0);
      assertEquals("o^Jt`ExJ|$C<z2`#v&.null, o^Jt`ExJ|$C<z2`#v&.null, o^Jt`ExJ|$C<z2`#v&.null, o^Jt`ExJ|$C<z2`#v&.null, o^Jt`ExJ|$C<z2`#v&.null, o^Jt`ExJ|$C<z2`#v&.null, o^Jt`ExJ|$C<z2`#v&.null, o^Jt`ExJ|$C<z2`#v&.null, o^Jt`ExJ|$C<z2`#v&.null", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("7)E-#/v.i3*?^", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = SQLUtil.normalize("7)E-#/v.i3*?^", false);
      assertEquals("7) E - # / v.i3 * ? ^", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = SQLUtil.normalize("callleft join ]=?x3bjm+zmp6wq\" as null on 4swk:nm*y__mn`.4swk:nm*y__mn` = null.4swk:nm*y__mn` and 4swk:nm*y__mn`.4swk:nm*y__mn` = null.4swk:nm*y__mn` and 4swk:nm*y__mn`.4swk:nm*y__mn` = null.4swk:nm*y__mn` and 4swk:nm*y__mn`.]=?x3bjm+zmp6wq\" = null.]=?x3bjm+zmp6wq\" and 4swk:nm*y__mn`.4swk:nm*y__mn` = null.4swk:nm*y__mn` and 4swk:nm*y__mn`.4swk:nm*y__mn` = null.4swk:nm*y__mn` and 4swk:nm*y__mn`.4swk:nm*y__mn` = null.4swk:nm*y__mn`", false);
      assertEquals("callleft join ] = ? x3bjm + zmp6wq \" as null on 4swk:nm*y__mn`.4swk:nm*y__mn` = null.4swk:nm*y__mn` and 4swk:nm*y__mn`.4swk:nm*y__mn` = null.4swk:nm*y__mn` and 4swk:nm*y__mn`.4swk:nm*y__mn` = null.4swk:nm*y__mn` and 4swk:nm*y__mn`.]=?x3bjm+zmp6wq\" = null.] = ? x3bjm + zmp6wq \" and 4swk:nm*y__mn`.4swk:nm*y__mn` = null.4swk:nm*y__mn` and 4swk:nm*y__mn`.4swk:nm*y__mn` = null.4swk:nm*y__mn` and 4swk:nm*y__mn`.4swk:nm*y__mn` = null.4swk:nm*y__mn`\"", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = SQLUtil.normalize("UNIQUE (w)!/ Xru*k', w)!/ Xru*k', w)!/ Xru*k', w)!/ Xru*k', alter materialized view, w)!/ Xru*k', w)!/ Xru*k')", true);
      assertEquals("UNIQUE (w) ! / Xru * k ', w)!/ Xru*k', w) ! / Xru * k ', w)!/ Xru*k', alter materialized view, w) ! / Xru * k ', w)!/ Xru*k')", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = SQLUtil.removeComments("drop materialized view2*-x`[m@jtq\"<ri");
      assertEquals("drop materialized view2*-x`[m@jtq\"<ri", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("drop index``ev(q");
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema drop index``ev(q", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertNotNull(string0);
      assertEquals("schema null", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Y 18R?LG.x", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT \"Y 18R?LG.x\" ", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[8];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("delete");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("0(`On`p}&>a_", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "delete", false, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder("delete");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("deleteCONSTRAINT delete ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder("48gTB}b<L]");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("48gTB}b<L]", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Savepoint is unnamed.");
      DBPackage dBPackage0 = new DBPackage(")nwU>", dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(dBPackage0);
      assertEquals("Savepoint is unnamed..)nwU>", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("%i{??U3=15v<", "CoHjQS2nk^$oySlmWI", "%i{??U3=15v<");
      String string0 = SQLUtil.ownerDotComponent(dBSequence0);
      assertEquals("%i{??U3=15v<", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[3];
      stringBuilder0.append(charArray0);
      SQLUtil.addOptionalCondition("Y@V@Giu", stringBuilder0);
      assertEquals("\u0000\u0000\u0000 or Y@V@Giu", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("] data node table:", stringBuilder0);
      assertEquals("] data node table:", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) " (");
      SQLUtil.addRequiredCondition("<=", stringBuilder0);
      assertEquals(" ( and <=", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "s.=9/NoV75\\ut_sH";
      String[] stringArray0 = new String[8];
      String string1 = SQLUtil.join((String) null, string0, stringArray0, string0, string0, stringArray0);
      assertEquals("s.=9/NoV75\\ut_sH as s.=9/NoV75\\ut_sH on s.=9/NoV75\\ut_sH.null = s.=9/NoV75\\ut_sH.null and s.=9/NoV75\\ut_sH.null = s.=9/NoV75\\ut_sH.null and s.=9/NoV75\\ut_sH.null = s.=9/NoV75\\ut_sH.null and s.=9/NoV75\\ut_sH.null = s.=9/NoV75\\ut_sH.null and s.=9/NoV75\\ut_sH.null = s.=9/NoV75\\ut_sH.null and s.=9/NoV75\\ut_sH.null = s.=9/NoV75\\ut_sH.null and s.=9/NoV75\\ut_sH.null = s.=9/NoV75\\ut_sH.null and s.=9/NoV75\\ut_sH.null = s.=9/NoV75\\ut_sH.null", string1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncate", dBSchema0);
      String[] stringArray0 = new String[2];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, ) REFERENCES truncate(, )", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("create table ", (Database) null);
      DBSchema dBSchema0 = new DBSchema("inner", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create table ", dBSchema0);
      String[] stringArray0 = new String[9];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "inner", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT inner UNIQUE (, , , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("- ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "(c4X6KkZ]:hhOk#|sQ, c4X6KkZ]:hhOk#|sQ)", true, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"(c4X6KkZ]:hhOk#|sQ, c4X6KkZ]:hhOk#|sQ)\" PRIMARY KEY (, )", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("delete");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create table");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionv.pc}f as  r109z on ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("exec-s!at,h3z71tdaw~*<");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Character character0 = new Character(' ');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("' '", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-214830576), "qmpX8");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("qmpX8", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("QMPX8(2,2)", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("MAmnrkoP94S ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DATE", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("UNIQUE ", defaultDBTable0, dBDataType0, integer0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("MAmnrkoP94S ");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("DATE", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.iapi.types.NumberDataValue");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insertg%jk6o r<", defaultDBTable0, (-1006), "org.apache.derby.iapi.types.NumberDataValue");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "org.apache.derby.iapi.types.NumberDataValue", false, "insertg%jk6o r<");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("insertg%jk6o r< ORG.APACHE.DERBY.IAPI.TYPES.NUMBERDATAVALUE NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1999487103), "~CBY{<f0{>dcq");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("D19X_", (DBTable) null, dBDataType0, (Integer) null, (Integer) null);
      defaultDBColumn0.setDefaultValue("D19X_");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("D19X_ ~CBY{<F0{>DCQ DEFAULT D19X_ NULL", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("U|9nAH", (DBTable) null, 467, "USAGE");
      ArrayList<DefaultDBColumn> arrayList0 = new ArrayList<DefaultDBColumn>();
      arrayList0.add(defaultDBColumn0);
      arrayList0.add(defaultDBColumn0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>(arrayList0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("U|9nAH, U|9nAH", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("U|9nAH", (DBTable) null, 467, "USAGE");
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[8] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("U|9nAH, U|9nAH, U|9nAH, U|9nAH, U|9nAH, U|9nAH, U|9nAH, U|9nAH, U|9nAH", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rename", (DBSchema) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringWriter stringWriter0 = new StringWriter(868);
      String[] stringArray0 = new String[9];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("rename", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("create table rename (,\n\tFOREIGN KEY (, , , , , , , , ) REFERENCES rename(, , , , , , , , )\n)", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String[] stringArray0 = new String[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "/{xps\"M%agq@jlnp", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals(49, charArrayWriter0.size());
      assertEquals("create table null (,\n\tUNIQUE (, , , , , , , , )\n)", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "vz8}-3[\"V0r3QV:", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = MockFile.createTempFile("vz8}-3[\"V0r3QV:", " SELECTIVITY ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setNString(String, String)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(|YW=`!F6`UnPOIm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (|YW=`!F6`UnPOIm
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("null");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("create unique indexdelay (change pending)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"change pending\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("#kc", true, "exec-s!at,h3z71tdaw~*<", "null");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT #kc CHECK null", string0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("uti.n~rcH18=-JIH");
      DBDataType dBDataType0 = DBDataType.getInstance(90079, "uti.n~rcH18=-JIH");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("uti.n~rcH18=-JIH", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("UTI.N~RCH18=-JIH(3)", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.databene.jdbacl.SQLUtil");
      String[] stringArray0 = new String[9];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "/afHiGb-Sgq0nqZ~N", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT /afHiGb-Sgq0nqZ~N PRIMARY KEY (, , , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[8];
      String string0 = SQLUtil.innerJoin("Ryo|:W+#mL5K4;", stringArray0, "+ z < ! CEx_ckv6Gi8) b [ 2", "RClaQwu-6p", stringArray1);
      assertEquals("+ z < ! CEx_ckv6Gi8) b [ 2 as RClaQwu-6p on ", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("alter table", "alter table", (Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Szo;!L:", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals("ALTER TABLE null ADD \n\tCONSTRAINT Szo;!L: FOREIGN KEY () REFERENCES null()", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }
}
