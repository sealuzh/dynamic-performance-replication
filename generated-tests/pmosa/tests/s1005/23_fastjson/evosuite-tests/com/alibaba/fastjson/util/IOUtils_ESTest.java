/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 05:05:49 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.nio.charset.IllegalCharsetNameException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 18);
      IOUtils.close(stringReader0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 18, (-3217));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3200
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.loadPropertiesFromFile();
      int int0 = (-1083);
      // Undeclared exception!
      try { 
        IOUtils.getChars(61, (-1083), (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = '?';
      charArray0[2] = '0';
      charArray0[3] = 'a';
      charArray0[4] = 'O';
      charArray0[5] = 'E';
      charArray0[6] = '5';
      // Undeclared exception!
      try { 
        IOUtils.getChars(0, 0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("i");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("Z");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 42, 42, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder");
      byte[] byteArray0 = IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder");
      IOUtils.stringSize(0L);
      IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder");
      char[] charArray0 = new char[0];
      IOUtils.decodeUTF8(byteArray0, 0, 1, charArray0);
      IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder");
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)0, 0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IOUtils.getStringProperty("fastjson.properties");
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)69, (int) (byte)69, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 68
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = IOUtils.stringSize((long) 18);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      IOUtils.stringSize((-808L));
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 1, 242, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOUtils.decodeBase64("Y%vR");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars((-2147483645), 125, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 124
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder");
      int int0 = IOUtils.stringSize((-7L));
      assertEquals(1, int0);
      
      char[] charArray0 = new char[0];
      int int1 = IOUtils.decodeUTF8(byteArray0, 0, 1, charArray0);
      assertEquals((-1), int1);
      
      boolean boolean0 = IOUtils.isIdent('V');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = ".pp30$6ls;`rm4GKJD";
      int int0 = (-1148);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(".pp30$6ls;`rm4GKJD", (-1148), (-1148));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("fastjson.properties", 2015, (-781));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("q%~'", (-3481), 0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      charArray0[2] = 'v';
      charArray0[3] = '!';
      charArray0[4] = 'f';
      charArray0[5] = '\"';
      charArray0[6] = '$';
      charArray0[7] = 'L';
      charArray0[8] = 'm';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-787L), 171, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 170
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOUtils.loadPropertiesFromFile();
      boolean boolean0 = IOUtils.firstIdentifier('q');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IOUtils.stringSize(297);
      IOUtils.firstIdentifier('r');
      // Undeclared exception!
      try { 
        IOUtils.getStringProperty("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOUtils.getChars((byte)42, (int) (byte)42, iOUtils0.replaceChars);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = ' ';
      charArray0[2] = 'x';
      charArray0[3] = ',';
      charArray0[4] = 'K';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      IOUtils.encodeUTF8(charArray0, 0, 0, byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 1748, 481);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1748
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IOUtils.firstIdentifier('');
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(iOUtils0.ASCII_CHARS, 117, 14, iOUtils0.specicalFlags_doubleQuotes);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 117
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = IOUtils.decodeBase64("");
      char[] charArray0 = new char[0];
      int int0 = IOUtils.encodeUTF8(charArray0, (-2889), (-2889), byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IOUtils.isValidJsonpQueryParam("");
      IOUtils.isIdent('f');
      byte[] byteArray0 = IOUtils.decodeBase64("");
      IOUtils.firstIdentifier('f');
      IOUtils.stringSize(2113L);
      IOUtils.stringSize(4);
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      IOUtils.encodeUTF8(charArray0, 1, (-930), byteArray0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      uTF8Decoder0.onMalformedInput(codingErrorAction0);
      String string0 = "AcT";
      // Undeclared exception!
      try { 
        Charset.forName("AcT");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // AcT
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = '|';
      charArray0[2] = 'e';
      charArray0[3] = 'M';
      charArray0[4] = '7';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      IOUtils.encodeUTF8(charArray0, 0, 0, byteArray0);
      IOUtils.firstIdentifier('|');
      IOUtils.isIdent('M');
      IOUtils.decodeUTF8(byteArray0, 244, 0, charArray0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = uTF8Decoder0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        charBuffer0.append('H');
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IOUtils.stringSize(0L);
      IOUtils.close((Closeable) null);
      IOUtils.firstIdentifier('U');
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = 'U';
      charArray0[5] = 'U';
      charArray0[6] = 'U';
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)74, 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IOUtils.isValidJsonpQueryParam("vqX.Bk1]fb");
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 54);
      // Undeclared exception!
      try { 
        IOUtils.readAll(bufferedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // read string from reader error
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IOUtils.decodeBase64("S2*");
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, (-3906), (-3906));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "&;Wn";
      IOUtils.decodeBase64("&;Wn");
      IOUtils.isValidJsonpQueryParam("");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.alibaba.fastjson.util.UTF8Decoder");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-22);
      mockPrintStream0.write(byteArray0);
      mockPrintStream0.println(1.0F);
      IOUtils.close(mockPrintStream0);
      IOUtils.close(mockPrintStream0);
      byte[] byteArray1 = IOUtils.decodeBase64(">z.");
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("com.alibaba.fastjson.util.UTF8Decoder");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.decodeBase64("f?lzf4f");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = uTF8Decoder0.unmappableCharacterAction();
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("");
      CharBuffer charBuffer0 = uTF8Decoder0.decode(byteBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      assertSame(charsetDecoder0, uTF8Decoder0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = IOUtils.decodeBase64("\"'`H");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = 'h';
      charArray0[2] = '$';
      charArray0[3] = ',';
      charArray0[4] = '3';
      charArray0[5] = '5';
      IOUtils.getChars(1436, 6, charArray0);
      assertArrayEquals(new char[] {'1', 'h', '1', '4', '3', '6'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = 'B';
      IOUtils.decodeBase64(charArray0, 1, 1);
      IOUtils.getChars(1, 1, charArray0);
      assertArrayEquals(new char[] {'1', 'B', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IOUtils.firstIdentifier('');
      IOUtils.stringSize(57);
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      String string0 = IOUtils.readAll(charArrayReader0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = 'M';
      charArray0[2] = 'F';
      charArray0[3] = '4';
      charArray0[4] = 'K';
      charArray0[5] = '+';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      String string0 = IOUtils.readAll(charArrayReader0);
      assertEquals("}MF4K+", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder", 2, 2);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("utf8 decode error, ", 7, 7);
      assertArrayEquals(new byte[] {(byte)114, (byte) (-121), (byte)94, (byte) (-3), (byte) (-22)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = IOUtils.isIdent('\u00A2');
      assertFalse(boolean0);
      
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.decodeBase64("fastjson.compatibleWithFieldName", 5, 5);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64(">cAo/R#eO*#$;cGu", 2, 2);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '9';
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, 1, 1);
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 1, 1, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = '$';
      charArray0[2] = 'x';
      charArray0[3] = 'q';
      charArray0[4] = 'K';
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 0, 'K', byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = 'W';
      charArray0[2] = '0';
      charArray0[3] = 'O';
      charArray0[4] = 'V';
      charArray0[5] = ']';
      IOUtils.getChars(7L, 5, charArray0);
      assertArrayEquals(new char[] {'K', 'W', '0', 'O', '7', ']'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IOUtils.getChars((-767L), 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '9';
      IOUtils.decodeBase64(charArray0, 1, 1);
      IOUtils.getChars((long) 1, 1, charArray0);
      assertArrayEquals(new char[] {'1', '9', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder");
      IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder");
      char[] charArray0 = new char[9];
      charArray0[0] = 'P';
      charArray0[1] = '`';
      charArray0[2] = '\"';
      charArray0[3] = '!';
      charArray0[4] = 't';
      charArray0[5] = '5';
      charArray0[6] = 'o';
      charArray0[7] = 'j';
      charArray0[8] = 'R';
      IOUtils.getChars((long) (-2306), 5, charArray0);
      assertArrayEquals(new char[] {'-', '1', '3', '1', '6', '5', 'o', 'j', 'R'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IOUtils.isIdent('\u0084');
      char[] charArray0 = new char[9];
      charArray0[0] = '\u0084';
      charArray0[1] = '\u0084';
      charArray0[2] = '\u0084';
      charArray0[3] = '\u0084';
      charArray0[4] = '\u0084';
      charArray0[5] = '\u0084';
      charArray0[6] = '\u0084';
      charArray0[7] = '\u0084';
      charArray0[8] = '\u0084';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 2, 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder");
      byte[] byteArray0 = IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder");
      int int0 = IOUtils.stringSize((-7L));
      assertEquals(1, int0);
      
      char[] charArray0 = new char[1];
      int int1 = IOUtils.decodeUTF8(byteArray0, 0, 1, charArray0);
      assertEquals((-1), int1);
      
      boolean boolean0 = IOUtils.isIdent('V');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IOUtils.getStringProperty("uv*WjhASI");
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = 'D';
      charArray0[2] = 'E';
      charArray0[3] = '8';
      charArray0[4] = '>';
      charArray0[5] = 'o';
      charArray0[6] = 'o';
      charArray0[7] = '\'';
      charArray0[8] = '7';
      IOUtils.decodeBase64(charArray0, 4, 4);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 244, 1456);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 244
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray1 = IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 7, 6);
      assertArrayEquals(new byte[] {(byte) (-33), (byte)78, (byte)52, (byte) (-25)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder");
      IOUtils.stringSize((-7L));
      char[] charArray0 = new char[0];
      IOUtils.decodeUTF8(byteArray0, 16, 1, charArray0);
      boolean boolean0 = IOUtils.isIdent('V');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('\u00A2');
      assertFalse(boolean0);
      
      IOUtils.isIdent('\u00A2');
      byte[] byteArray0 = IOUtils.decodeBase64("4AKEs=");
      assertArrayEquals(new byte[] {(byte) (-32), (byte)2, (byte) (-124)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'G';
      byte[] byteArray0 = IOUtils.decodeBase64(";3*:=_");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.decodeBase64(iOUtils0.CA, 0, 29);
      IOUtils.getChars((-1390L), 7, iOUtils0.ASCII_CHARS);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = IOUtils.decodeUTF8(iOUtils0.specicalFlags_singleQuotes, 10, 0, iOUtils0.replaceChars);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.replaceChars, 5, 5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-7);
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = ')';
      charArray0[2] = 'u';
      charArray0[3] = '<';
      charArray0[4] = '8';
      int int0 = IOUtils.decodeUTF8(byteArray0, 1, 11, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'D', ')', 'u', '<', '8'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-16);
      char[] charArray0 = new char[6];
      int int0 = IOUtils.decodeUTF8(byteArray0, 0, 5, charArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = IOUtils.decodeBase64(charArray0, (int) (byte)0, 0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      IOUtils.firstIdentifier('\u00AB');
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("d(^w");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\u00AB';
      charArray0[1] = '\u00AB';
      charArray0[2] = '\u00AB';
      charArray0[3] = '\u00AB';
      charArray0[4] = 'Y';
      charArray0[5] = '\u00AB';
      charArray0[6] = '\u00AB';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)12;
      int int0 = IOUtils.encodeUTF8(charArray0, 1, 1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-85), (byte)1, (byte) (-128), (byte)12}, byteArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-24);
      char[] charArray0 = new char[22];
      charArray0[2] = '\u0000';
      IOUtils.decodeUTF8(byteArray0, 1, 11, charArray0);
      IOUtils.isValidJsonpQueryParam("#wp");
      IOUtils iOUtils0 = new IOUtils();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-37);
      byteArray0[4] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte) (-37);
      char[] charArray0 = new char[6];
      charArray0[2] = '\u0000';
      IOUtils.decodeUTF8(byteArray0, 1, 11, charArray0);
      boolean boolean0 = IOUtils.isIdent('\u0000');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      IOUtils.isIdent('\u0107');
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("com.acibaba.fastjsoM.JSNException", 28, 2142732577);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-111);
      byteArray0[0] = (byte) (-14);
      byteArray0[2] = (byte)61;
      byteArray0[5] = (byte)61;
      char[] charArray0 = new char[1];
      IOUtils.decodeUTF8(byteArray0, 0, 11, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, (int) (byte) (-111), (int) (byte)93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -111
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-110);
      byteArray0[0] = (byte) (-14);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)7;
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      IOUtils.decodeUTF8(byteArray0, 0, 11, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, (int) (byte) (-110), (int) (byte)93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -110
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      IOUtils.isIdent('\u0100');
      IOUtils.firstIdentifier('\u0100');
      String string0 = IOUtils.getStringProperty("com.alibaba.fastjson.JSONException");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[2] = (byte) (-35);
      byteArray0[4] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[5] = (byte) (-35);
      char[] charArray0 = new char[6];
      charArray0[2] = '\u0000';
      IOUtils.decodeUTF8(byteArray0, 1, 5, charArray0);
      byte[] byteArray1 = IOUtils.specicalFlags_singleQuotes;
      IOUtils.getChars((long) (byte) (-35), 5, charArray0);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-35);
      byteArray2[1] = (byte) (-35);
      byteArray2[2] = (byte) (-35);
      byteArray2[3] = (byte) (-35);
      byteArray2[4] = (byte) (-35);
      byteArray2[5] = (byte) (-35);
      byteArray2[6] = (byte) (-35);
      byteArray2[7] = (byte)4;
      IOUtils.decodeUTF8(byteArray2, (byte)0, 1, charArray0);
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(iOUtils0.specicalFlags_doubleQuotes, 30, (byte) (-35), (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-32);
      byteArray0[3] = (byte)0;
      char[] charArray0 = new char[4];
      charArray0[2] = '_';
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, 5, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '_', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 10, 79);
      int int0 = 24;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-32);
      byteArray0[0] = byte0;
      byte byte1 = (byte)95;
      byteArray0[1] = byte1;
      byte byte2 = (byte)7;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-1);
      byteArray0[3] = byte3;
      byte byte4 = (byte)4;
      byteArray0[4] = byte4;
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(iOUtils0.CA, int0, int0, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-111);
      byteArray0[0] = (byte) (-32);
      byteArray0[2] = (byte) (-111);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-111);
      char[] charArray0 = new char[10];
      IOUtils.decodeUTF8(byteArray0, 0, 11, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, (int) (byte) (-111), (int) (byte)93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -111
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-111);
      byteArray0[0] = (byte) (-14);
      byteArray0[2] = (byte) (-111);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[5] = (byte) (-111);
      char[] charArray0 = new char[1];
      IOUtils.decodeUTF8(byteArray0, 0, 11, charArray0);
      IOUtils.decodeUTF8(byteArray0, (byte) (-111), (byte) (-111), charArray0);
      IOUtils.loadPropertiesFromFile();
  }
}
