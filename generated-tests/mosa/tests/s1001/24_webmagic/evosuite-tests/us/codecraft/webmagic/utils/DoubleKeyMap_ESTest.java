/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:15:17 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Integer>();
      HashMap<Map<String, Integer>, Map<String, Object>> hashMap0 = new HashMap<Map<String, Integer>, Map<String, Object>>();
      DoubleKeyMap<Map<String, Integer>, String, Object> doubleKeyMap1 = new DoubleKeyMap<Map<String, Integer>, String, Object>(hashMap0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Map<String, Object> map0 = doubleKeyMap1.remove((Map<String, Integer>) hashMap1);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Integer, Map<String, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<String, Integer>, Object>();
      Integer integer0 = new Integer((-1));
      HashMap<Map<String, Integer>, Object> hashMap0 = new HashMap<Map<String, Integer>, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(integer0, (Map<Map<String, Integer>, Object>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      doubleKeyMap0.remove("us.codecraft.webmagic.utils.MultiKeyMapBase", (Object) "us.codecraft.webmagic.utils.MultiKeyMapBase");
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>();
      doubleKeyMap1.newMap();
      Integer integer0 = doubleKeyMap1.get("}", (Object) doubleKeyMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      doubleKeyMap0.newMap();
      doubleKeyMap0.newMap();
      doubleKeyMap0.put((String) null, (Object) null, (String) null);
      doubleKeyMap0.remove((String) null, (Object) null);
      doubleKeyMap0.remove((String) null);
      HashMap<Object, Map<Integer, Integer>> hashMap0 = new HashMap<Object, Map<Integer, Integer>>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      assertTrue(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>();
      Object object0 = new Object();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>((Map<Object, Map<Object, String>>) null);
      Integer integer0 = new Integer(742);
      doubleKeyMap1.put((Object) integer0, (Object) doubleKeyMap0, "wrong proto type map ");
      Integer integer1 = new Integer(742);
      doubleKeyMap1.put((Object) integer1, (Object) doubleKeyMap0, "wrong proto type map ");
      DoubleKeyMap<String, Object, Map<String, Integer>> doubleKeyMap2 = new DoubleKeyMap<String, Object, Map<String, Integer>>();
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      doubleKeyMap0.newMap();
      doubleKeyMap0.put((String) null, (Object) null, (String) null);
      Integer integer0 = new Integer(793);
      String string0 = "NlSr[)3=";
      doubleKeyMap0.put((String) null, (Object) integer0, "NlSr[)3=");
      String string1 = null;
      doubleKeyMap0.remove((String) null, (Object) null);
      doubleKeyMap0.remove((String) null);
      HashMap<Object, Map<Integer, Integer>> hashMap0 = new HashMap<Object, Map<Integer, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, String> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<String, Integer, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Map<String, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(map0);
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Object>();
      HashMap<String, Map<String, String>> hashMap1 = new HashMap<String, Map<String, String>>();
      DoubleKeyMap<String, String, String> doubleKeyMap3 = new DoubleKeyMap<String, String, String>(hashMap1, class0);
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put("Ep;'M^9S-8kaPYJ", object0, integer0);
      doubleKeyMap3.remove("Ep;'M^9S-8kaPYJ", "Ep;'M^9S-8kaPYJ");
      Map<Object, Map<String, Object>> map1 = doubleKeyMap3.newMap();
      DoubleKeyMap<Object, String, Object> doubleKeyMap4 = new DoubleKeyMap<Object, String, Object>(map1);
      doubleKeyMap4.put((Object) doubleKeyMap1, "us.codecraft.webmagic.utils.MultiKeyMapBase", (Object) hashMap1);
      Integer integer1 = doubleKeyMap0.get("Ep;'M^9S-8kaPYJ", (Object) null);
      assertNull(integer1);
  }
}
