/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:28:53 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.List;
import java.util.Locale;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.nio.cs.US_ASCII;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.flush();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.require((-660));
      buffer0.writeShortLe((-660));
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.require(2347L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Pipe pipe0 = new Pipe(2803L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, 2803L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(4L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      buffer0.size = 4L;
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        buffer0.readUtf8Line();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ByteString[] byteStringArray0 = new ByteString[1];
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(1, options0.size());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeDecimalLong(1585L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer1.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 4
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      try { 
        buffer0.readUtf8LineStrict(1000000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeLongLe(2689L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      
      String string0 = buffer1.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(string0);
      assertEquals("\uFFFD", string0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      // Undeclared exception!
      try { 
        buffer1.copyTo(buffer0, 1019L, 2689L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=6 offset=1019 byteCount=2689
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeDecimalLong(32L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = buffer0.buffer();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      try { 
        buffer0.readUtf8LineStrict(2147483647L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=2 content=3332\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeLongLe(3L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      
      Buffer buffer2 = (Buffer)buffer0.emit();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(8L, buffer2.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      long long0 = buffer0.indexOf((byte)0, 0L, 0L);
      assertEquals((-1L), long0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = pipe0.buffer;
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      Buffer buffer2 = buffer1.writeShortLe((-2416));
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer2.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Pipe pipe0 = new Pipe(1095216660459L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      String string0 = buffer0.readUtf8();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      // Undeclared exception!
      try { 
        buffer0.write((Source) buffer1, 126L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)5;
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-113), (byte)5}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(2, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      assertArrayEquals(new byte[] {(byte) (-113), (byte)5}, byteArray0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      assertArrayEquals(new byte[] {(byte) (-113), (byte)5}, byteArray0);
      assertNotNull(gzipSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      
      HashingSource hashingSource1 = HashingSource.sha1(gzipSource0);
      assertArrayEquals(new byte[] {(byte) (-113), (byte)5}, byteArray0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      assertArrayEquals(new byte[] {(byte) (-113), (byte)5}, byteArray0);
      assertNotNull(realBufferedSource0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertArrayEquals(new byte[] {(byte) (-113), (byte)5}, byteArray0);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      // Undeclared exception!
      try { 
        buffer1.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)0;
      Buffer buffer1 = buffer0.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)75, (byte)0}, byteArray0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong(9223372036854775807L);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(18L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeInt((-1));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      int int0 = buffer_UnsafeCursor0.next();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(4, buffer_UnsafeCursor0.end);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals(4, int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(1000000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=1000000000000 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Pipe pipe0 = new Pipe(1095216660480L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      buffer_UnsafeCursor0.close();
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      assertEquals("US-ASCII", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.toString());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.name());
      
      // Undeclared exception!
      try { 
        buffer0.readUtf8(1095216660480L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1095216660480
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Pipe pipe0 = new Pipe(2979L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      String string0 = buffer0.readUtf8();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeIntLe((-2147208751));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = buffer0.sha512();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      
      String string0 = buffer0.readUtf8();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = buffer0.md5();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Pipe pipe0 = new Pipe(1095216660480L);
      assertNotNull(pipe0);
      
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[1];
      pipe0.sourceClosed = true;
      byteArray0[0] = (byte) (-93);
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-93)}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(1, byteString0.size());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer0, (long) (byte) (-93));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeString(",)XBJI,Pv|`Fs(D{I&", charset0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(19L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      int int0 = buffer1.readInt();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(740907074, int0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(15L, buffer1.size());
      
      Segment segment0 = buffer0.head;
      assertNotNull(segment0);
      
      short short0 = buffer1.readShortLe();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals((short)18762, short0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(13L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(13L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeLongLe(100000000000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      String string0 = buffer0.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\uFFFD]xEc\u0001", string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = (Buffer)buffer0.write((Source) buffer1, (-2189L));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer1.writableSegment((-1878));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Segment segment0 = buffer0.writableSegment(58);
      assertNotNull(segment0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      buffer0.head = segment0;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      InputStream inputStream0 = buffer0.inputStream();
      assertNotNull(inputStream0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeUtf8("@31suT^");
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(1, byteString0.size());
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      assertNotNull(hashingSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      HashingSink hashingSink1 = HashingSink.hmacSha1(buffer0, byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotNull(hashingSink1);
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, byteString0.size());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort(2034458192);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotNull(bufferedSink0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      int int1 = buffer1.readUtf8CodePoint();
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(int1 == int0);
      assertEquals(94, int1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(8257536);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7e0000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      
      boolean boolean0 = buffer0.rangeEquals(10000000000L, byteString0);
      assertFalse(boolean0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      assertNotNull(pipe0);
      
      pipe0.sinkClosed = false;
      pipe0.sourceClosed = false;
      pipe0.sinkClosed = false;
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = false;
      pipe0.sinkClosed = false;
      ByteString byteString0 = buffer0.readByteString();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      
      InputStream inputStream0 = buffer0.inputStream();
      assertNotNull(inputStream0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)45;
      ByteString byteString1 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-112), (byte) (-112), (byte) (-11), (byte)102, (byte)4, (byte)45}, byteArray0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(7, byteString1.size());
      
      boolean boolean0 = buffer0.rangeEquals(1L, byteString1, (-2754), (int) (byte) (-11));
      assertArrayEquals(new byte[] {(byte)3, (byte) (-112), (byte) (-112), (byte) (-11), (byte)102, (byte)4, (byte)45}, byteArray0);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(boolean0);
      assertEquals(7, byteString1.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        buffer0.readByteString(10000000000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=10000000000000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(5, byteString0.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      ByteString byteString1 = buffer0.hmacSha256(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(5, byteString0.size());
      assertEquals(32, byteString1.size());
      
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = buffer0.sha256();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeLongLe(2689L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      ByteString byteString0 = buffer1.sha1();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(byteString0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      
      short short0 = buffer1.readShortLe();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals((short)2689, short0);
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      
      String string0 = buffer1.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      try { 
        buffer0.write((Source) buffer1, 2689L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeLongLe(2710L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      String string0 = buffer0.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertNotNull(string0);
      assertEquals("\uFFFD", string0);
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = buffer0.writeShortLe(2865);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(8L, buffer2.size());
      
      long long0 = buffer2.readLongLe();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(806425808276029440L, long0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      String string1 = hashingSource0.toString();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      String string2 = hashingSource0.toString();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      String string3 = buffer2.readUtf8();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeLongLe(2710L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      Buffer buffer2 = buffer0.writeShortLe(2865);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      long long0 = buffer2.readLongLe();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(2710L, long0);
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      
      Buffer buffer3 = new Buffer();
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      
      Buffer buffer4 = buffer2.writeHexadecimalUnsignedLong(2865);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer4);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer2);
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer3));
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(5L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(5L, buffer4.size());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString0 = buffer0.sha1();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1742L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      
      ByteString byteString1 = buffer1.hmacSha512(byteString0);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertEquals(64, byteString1.size());
      
      short short0 = buffer1.readShort();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals((short)13923, short0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(14L, long0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertSame(buffer0, buffer1);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = buffer0.equals(object0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Pipe pipe0 = new Pipe(2979L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeIntLe((-2147208751));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xffffffd1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1742L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1742L, long0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertSame(buffer0, buffer1);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = 1353L;
      Pipe pipe0 = new Pipe(1353L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      int int0 = (-152);
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-152));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      OutputStream outputStream0 = buffer1.outputStream();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(outputStream0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer2 = pipe0.buffer;
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      // Undeclared exception!
      try { 
        buffer2.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x68
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(2, byteString0.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      long long0 = 280375465082866L;
      Buffer buffer1 = buffer0.writeDecimalLong(280375465082866L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(15L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      MockFile mockFile0 = new MockFile("VeEUI");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals("VeEUI", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("VeEUI", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      buffer1.head = segment0;
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(15L, buffer1.size());
      
      int int0 = buffer0.readIntLe();
      assertSame(buffer0, buffer1);
      assertEquals(0, int0);
      assertFalse(buffer0.exhausted());
      assertEquals(11L, buffer0.size());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("VeEUI");
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        buffer1.copyTo((OutputStream) mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      long long0 = buffer0.size();
      assertEquals(0L, long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeInt(3870);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      
      try { 
        buffer0.skip(1173L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = 4294967295L;
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("beginIndex < 0: ", 1102, 42);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 42 < 1102
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Pipe pipe0 = new Pipe(20L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      buffer0.hashCode();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      
      ByteString byteString0 = buffer0.readByteString();
      assertNotSame(buffer0, buffer1);
      assertNotNull(byteString0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      
      MockFile mockFile0 = new MockFile("bn");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("bn", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("bn", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)43;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)52, (byte)92, (byte)43}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)52, (byte)92, (byte)43}, byteArray0);
      assertNotNull(pushbackInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      try { 
        buffer1.readFrom((InputStream) pushbackInputStream0, (long) (byte)52);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      try { 
        buffer0.readFrom((InputStream) sequenceInputStream0, 10000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotSame(buffer0, buffer1);
      assertNotNull(inputStream0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = buffer1.readFrom(inputStream0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      
      byte[] byteArray0 = realBufferedSource0.readByteArray((long) (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotNull(byteArray0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer3 = buffer1.writeUtf8CodePoint((byte)0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotNull(buffer3);
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      assertNotNull(pushbackInputStream0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      buffer3.close();
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertSame(buffer0, buffer1);
      assertNotNull(list0);
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = buffer0.sha512();
      assertSame(buffer0, buffer1);
      assertNotNull(byteString0);
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSink0);
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString1 = realBufferedSource0.readByteString();
      assertSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2, byteString1.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer1, byteString1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString1, byteString0);
      assertNotNull(hashingSource0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2, byteString1.size());
      
      Timeout timeout0 = hashingSink0.timeout();
      assertSame(buffer0, buffer1);
      assertNotNull(timeout0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString2 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotNull(byteString2);
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2, byteString1.size());
      assertEquals(20, byteString2.size());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.indexOfElement(byteString2, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = 305L;
      Pipe pipe0 = new Pipe(305L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      try { 
        buffer1.readFully(buffer0, 4167L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeString(",)XBJI,Pv`Fs(D{I&", charset0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      ByteString[] byteStringArray0 = new ByteString[3];
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(3, options0.size());
      
      Object[] objectArray0 = options0.toArray();
      assertNotNull(objectArray0);
      assertEquals(3, options0.size());
      
      // Undeclared exception!
      try { 
        buffer1.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Pipe pipe0 = new Pipe(71776119061217280L);
      assertNotNull(pipe0);
      
      Buffer buffer1 = pipe0.buffer;
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      ByteString byteString0 = buffer1.sha256();
      assertNotSame(buffer1, buffer0);
      assertNotNull(byteString0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString0;
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer1, byteString0);
      assertNotSame(buffer1, buffer0);
      assertNotNull(hashingSource0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotSame(buffer1, buffer0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(32, byteString1.size());
      
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      ByteString byteString2 = new ByteString((byte[]) null);
      assertNotNull(byteString2);
      
      byteStringArray0[7] = byteString2;
      byteStringArray0[8] = byteString0;
      pipe0.sinkClosed = false;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(9, options0.size());
      
      int int0 = buffer1.selectPrefix(options0);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0, int0);
      assertEquals(9, options0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      buffer1.flush();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("T'm0{>", 72, 72);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 72 > 6
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      buffer0.flush();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = buffer0.hashCode();
      assertFalse(int1 == int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      long long0 = 1L;
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0, 1L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertSame(buffer0, buffer1);
      assertNotNull(list0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      long long0 = 10L;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte)101, 8192L, 36L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=2 fromIndex=8192 toIndex=36
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1032));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RC");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-14), (long) (-1032));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=1 fromIndex=-1032 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)89;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-30);
      int int1 = buffer0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)70, (byte)121, (byte)89, (byte)0, (byte) (-60), (byte) (-30)}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer1 = buffer0.writeInt(1114111);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeDecimalLong((-2210L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      long long0 = buffer0.readDecimalLong();
      assertSame(buffer0, buffer1);
      assertEquals((-2210L), long0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeDecimalLong(215L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      Buffer buffer2 = buffer0.buffer();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Segment segment0 = buffer0.writableSegment(48);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotNull(segment0);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      buffer2.flush();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      short short0 = buffer0.readShortLe();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertEquals((short)12594, short0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer3 = buffer1.writeUtf8("@31suT^");
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertNotNull(buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(8L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      long long0 = buffer1.readDecimalLong();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertEquals(5L, long0);
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      ByteString byteString0 = buffer2.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertNotNull(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(7L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      
      boolean boolean0 = buffer1.request(48);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertFalse(boolean0);
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      // Undeclared exception!
      try { 
        buffer2.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x40
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertNotNull(inflaterSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      
      boolean boolean0 = inflaterSource0.refill();
      assertTrue(boolean0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)0;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      long long0 = buffer0.indexOf((byte)115, 9223372036854775789L);
      assertEquals((-1L), long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertNotNull(inflaterSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer1.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      assertNotNull(hashingSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertEquals(20, byteString1.size());
      
      long long0 = buffer0.indexOf(byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals((-1L), long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertEquals(20, byteString1.size());
      
      Buffer buffer1 = buffer0.writeLongLe(2689L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      
      String string0 = buffer1.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(string0);
      assertEquals("\uFFFD", string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      // Undeclared exception!
      try { 
        buffer0.write((Source) buffer1, 2689L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)94;
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)94}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(2, byteString0.size());
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      assertNotNull(hashingSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/q+w");
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)94}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      HashingSink hashingSink1 = HashingSink.sha1(hashingSink0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotNull(hashingSink1);
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      
      MockFile mockFile1 = new MockFile("q+w");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.isDirectory());
      assertEquals(2L, mockFile1.length());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertEquals("q+w", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isAbsolute());
      assertEquals("q+w", mockFile1.getName());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertEquals("q+w", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isAbsolute());
      assertEquals("q+w", mockFile1.getName());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      
      mockPrintStream0.flush();
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertEquals("q+w", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isAbsolute());
      assertEquals("q+w", mockFile1.getName());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      assertArrayEquals(new byte[] {(byte)6, (byte)94}, byteArray0);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString0, byteString1);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(20, byteString1.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteString0.size());
      
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeDecimalLong(1269L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      buffer0.hashCode();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Pipe pipe0 = new Pipe(1095216660480L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1018));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MockFile mockFile0 = new MockFile("size < 4: ", "");
      assertNotNull(mockFile0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio", mockFile0.getParent());
      assertEquals("size < 4: ", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/size < 4: ", mockFile0.toString());
      
      boolean boolean0 = mockFile0.setWritable(true, true);
      assertFalse(boolean0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio", mockFile0.getParent());
      assertEquals("size < 4: ", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/size < 4: ", mockFile0.toString());
      
      boolean boolean1 = mockFile0.mkdir();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio", mockFile0.getParent());
      assertEquals("size < 4: ", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/size < 4: ", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      
      boolean boolean2 = mockFile0.createNewFile();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio", mockFile0.getParent());
      assertEquals("size < 4: ", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/size < 4: ", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Buffer buffer2 = pipe0.buffer;
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertEquals(1L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean3 = buffer2.equals(object1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(1L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      long long0 = buffer0.indexOf((byte) (-18), 18L);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertEquals((-1L), long0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Buffer buffer1 = buffer0.writeLongLe(2710L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      String string0 = buffer1.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(string0);
      assertEquals("\uFFFD", string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      // Undeclared exception!
      try { 
        buffer1.readFrom((InputStream) null, 2710L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeDecimalLong(32L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      // Undeclared exception!
      try { 
        buffer0.writeString("l|(0Rz'rY/FK,&{Z,L", 66, (-2487), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -2487 < 66
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeDecimalLong(215L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      
      Buffer buffer2 = buffer0.buffer();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(3L, buffer2.size());
      
      Segment segment0 = buffer0.writableSegment(48);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotNull(segment0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      
      buffer2.flush();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(3L, buffer2.size());
      
      short short0 = buffer0.readShortLe();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertEquals((short)12594, short0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer3 = buffer1.writeUtf8("@31suT^");
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotNull(buffer3);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(8L, buffer3.size());
      
      long long0 = buffer1.readDecimalLong();
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertEquals(5L, long0);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)100;
      buffer3.readFully(byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)51, (byte)49, (byte)115, (byte)117, (byte)84, (byte)94}, byteArray0);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      
      // Undeclared exception!
      try { 
        buffer2.writeUtf8("@31suT^", (-709), (-1008));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -709
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeLongLe(100000000000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      String string0 = buffer1.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\uFFFD]xEc\u0001", string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      Pipe pipe0 = new Pipe(100000000000000000L);
      assertNotNull(pipe0);
      
      buffer1.hashCode();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer2 = pipe0.buffer;
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotNull(byteString0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      
      boolean boolean1 = buffer2.rangeEquals((-427L), byteString0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(32, byteString0.size());
      
      try { 
        buffer2.write((Source) buffer0, 3L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0, (-3314L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3314
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Pipe pipe0 = new Pipe(1095216660480L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1032));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MockFile mockFile0 = new MockFile((String) null, "RC");
      assertNotNull(mockFile0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("RC", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("RC", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      
      boolean boolean0 = mockFile0.setLastModified(1095216660480L);
      assertFalse(boolean0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("RC", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("RC", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      
      boolean boolean1 = mockFile0.mkdir();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("RC", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("RC", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      
      pipe0.sinkClosed = false;
      boolean boolean2 = pipe0.sourceClosed;
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        buffer1.readFully(buffer0, 681L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      assertNotNull(pipe0);
      
      pipe0.sinkClosed = false;
      pipe0.sourceClosed = false;
      pipe0.sinkClosed = false;
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = false;
      pipe0.sinkClosed = false;
      ByteString byteString0 = buffer0.readByteString();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      
      InputStream inputStream0 = buffer0.inputStream();
      assertNotNull(inputStream0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-112);
      ByteString byteString1 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-112), (byte) (-112), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(7, byteString1.size());
      
      boolean boolean0 = buffer0.rangeEquals((long) (byte)3, byteString0, 53, (-483));
      assertNotSame(byteString0, byteString1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(boolean0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Buffer buffer1 = buffer0.writeShort(909);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      short short0 = buffer0.readShortLe();
      assertSame(buffer0, buffer1);
      assertEquals((short) (-29437), short0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong(909);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertEquals(3L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotNull(hashingSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      ByteString byteString0 = hashingSink0.hash();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotNull(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(64, byteString0.size());
      
      long long0 = buffer1.indexOf(byteString0, 3321L);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertEquals((-1L), long0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(64, byteString0.size());
      
      // Undeclared exception!
      try { 
        buffer2.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 3
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      buffer1.flush();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = buffer0.clone();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.completeSegmentByteCount());
      
      buffer0.flush();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertTrue(buffer0.equals((Object)buffer2));
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)13}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(1, byteString0.size());
      
      long long0 = buffer0.indexOf(byteString0);
      assertArrayEquals(new byte[] {(byte)13}, byteArray0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertTrue(buffer0.equals((Object)buffer2));
      assertEquals((-1L), long0);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1, byteString0.size());
      
      Buffer buffer3 = buffer1.writeUtf8("");
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertNotNull(buffer3);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer2));
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(2L, buffer3.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      long long1 = buffer1.readDecimalLong();
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(long1 == long0);
      assertEquals((-1L), long1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Pipe pipe0 = new Pipe(99999999999999994L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(109);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MockFile mockFile0 = new MockFile(" hex=", "\"xY>:G9nE");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("\"xY>:G9nE", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/ hex=/\"xY>:G9nE", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/ hex=", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" hex=");
      assertNotNull(mockFileOutputStream0);
      
      ByteString byteString0 = buffer0.sha256();
      assertSame(buffer0, buffer1);
      assertNotNull(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      assertNotNull(filterOutputStream0);
      
      Buffer buffer2 = buffer1.copyTo((OutputStream) filterOutputStream0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Buffer buffer3 = buffer2.writeTo((OutputStream) mockFileOutputStream0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotNull(buffer3);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(5, byteString0.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      
      Buffer buffer1 = buffer0.writeDecimalLong(2147483648L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Buffer buffer1 = buffer0.writeDecimalLong(100000000000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(18L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      buffer1.flush();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(18L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      assertEquals(16, byteString0.size());
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString1 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString1.size());
      
      ByteString byteString2 = byteString1.hmacSha1(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotNull(byteString2);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertEquals(1, byteString1.size());
      assertEquals(20, byteString2.size());
      
      ByteString byteString3 = buffer0.sha256();
      assertSame(buffer0, buffer1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertNotNull(byteString3);
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      assertEquals(32, byteString3.size());
      
      byte byte0 = ObjectStreamConstants.TC_RESET;
      assertEquals((byte)121, byte0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertSame(buffer0, buffer1);
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      
      // Undeclared exception!
      try { 
        byteString0.getByte(52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      buffer_UnsafeCursor0.offset = (-477L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeString("Up_HRqhK7E+m,i`92", (-1), 1617, charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = buffer0.sha1();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteString byteString1 = buffer0.sha512();
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(64, byteString1.size());
      
      // Undeclared exception!
      try { 
        buffer0.writeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((byte)0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertSame(buffer0, buffer1);
      assertNotNull(list0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      // Undeclared exception!
      try { 
        Charset.forName(" conte7t=");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  conte7t=
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      buffer1.flush();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = buffer0.clone();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertEquals(2L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.size());
      
      Pipe pipe0 = new Pipe(16L);
      assertNotNull(pipe0);
      
      int int0 = 13;
      long long0 = buffer2.read(buffer0, 2941L);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(2L, long0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      
      Buffer buffer3 = pipe0.buffer;
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      
      int int1 = buffer_UnsafeCursor0.next();
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      byte byte0 = (byte)24;
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = (Buffer)buffer0.write((Source) buffer0, (-2189L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      byte byte1 = (byte)35;
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertNotNull(uS_ASCII0);
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertTrue(uS_ASCII0.canEncode());
      assertTrue(uS_ASCII0.isRegistered());
      
      Buffer buffer2 = new Buffer();
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Buffer buffer3 = buffer2.writeString(",)XBJI,Pv`Fs(D{I&", (Charset) uS_ASCII0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotNull(buffer3);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertTrue(uS_ASCII0.canEncode());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals(18L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(18L, buffer3.size());
      
      try { 
        buffer1.write((Source) buffer2, (long) (byte)24);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Pipe pipe0 = new Pipe(1095216660480L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1008));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      // Undeclared exception!
      try { 
        buffer1.writeString("]Zww", 766, 766, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 766 > 4
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      long long0 = (-922337203685477580L);
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((-922337203685477580L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-922337203685477580
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeString(",)XBJI,Pv`Fs(D{I&", charset0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(18L, buffer1.size());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)21;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(6, byteString0.size());
      
      String string0 = byteString0.base64();
      assertArrayEquals(new byte[] {(byte)0, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("ABUAAAAA", string0);
      assertEquals(6, byteString0.size());
      
      ByteString[] byteStringArray0 = new ByteString[21];
      long long0 = buffer0.indexOf(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals((-1L), long0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertEquals(6, byteString0.size());
      
      byteStringArray0[0] = byteString0;
      byteStringArray0[0] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(21, options0.size());
      
      Object[] objectArray0 = options0.toArray();
      assertNotNull(objectArray0);
      assertEquals(21, options0.size());
      
      // Undeclared exception!
      try { 
        buffer1.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      ByteString byteString0 = buffer0.sha256();
      assertNotSame(buffer0, buffer1);
      assertNotNull(byteString0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      
      boolean boolean0 = buffer0.equals(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(boolean0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(0, options0.size());
      
      Options options1 = Options.of(byteStringArray0);
      assertNotSame(options1, options0);
      assertNotNull(options1);
      assertTrue(options1.equals((Object)options0));
      assertEquals(0, options1.size());
      
      int int0 = buffer1.selectPrefix(options1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(options1, options0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(options1.equals((Object)options0));
      assertEquals((-1), int0);
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0, options1.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      int int0 = 55296;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(55296);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = buffer0.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertNotNull(string0);
      assertEquals("?", string0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("source exhausted prematurely");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      int int0 = 4314;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(4314);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        buffer1.readFrom((InputStream) pipedInputStream0, 100000000000000L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = (Buffer)buffer0.write((Source) buffer0, (-2189L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = buffer1.writeDecimalLong((-2189L));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(5L, buffer2.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer3 = buffer1.writeByte(89);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertNotNull(buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(6L, buffer3.size());
      
      buffer2.flush();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(6L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotNull(hashingSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)53;
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(6, byteString0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      assertNull(buffer4);
      
      ByteString byteString1 = new ByteString((byte[]) null);
      assertNotNull(byteString1);
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotNull(list0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      buffer1.clear();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      List<Integer> list1 = buffer1.segmentSizes();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readUnsafe(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotNull(buffer_UnsafeCursor1);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      int int0 = buffer_UnsafeCursor0.seek((-1L));
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)118;
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)75, (byte)118}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(2, byteString0.size());
      
      Buffer buffer2 = buffer1.write(byteString0);
      assertArrayEquals(new byte[] {(byte)75, (byte)118}, byteArray0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2, byteString0.size());
      assertEquals(2L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      ByteString byteString1 = realBufferedSource0.readByteString();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteString1.size());
      
      ByteString byteString2 = buffer1.hmacSha256(byteString1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotNull(byteString2);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(2, byteString1.size());
      assertEquals(32, byteString2.size());
      
      buffer1.flush();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      
      Buffer buffer3 = buffer0.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)75, (byte)118}, byteArray0);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(2L, buffer3.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-1080L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-1080 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = buffer1.writeDecimalLong(10000L);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(5L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Pipe pipe0 = new Pipe(8257536L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(" < ");
      assertNotNull(mockPrintStream0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(8257536L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      
      pipe0.sinkClosed = true;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format(" < ", objectArray0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      Buffer buffer2 = buffer0.copyTo((OutputStream) printStream0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(7L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(7L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      buffer_UnsafeCursor1.end = (-1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(7L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      buffer_UnsafeCursor1.close();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(7L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      long long0 = 2147483647L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeLongLe(100000000000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      String string0 = buffer0.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\uFFFD]xEc\u0001", string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = buffer1.writeDecimalLong(16711640L);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(8L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Buffer buffer3 = buffer0.buffer();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertNotNull(buffer3);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(8L, buffer3.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      
      String string1 = buffer3.readString(charset0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("16711640", string1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      
      int int0 = 48;
      Segment segment0 = buffer2.head;
      assertNull(segment0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, 48, 48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)24;
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)24, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(4, byteString0.size());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      Pipe pipe0 = new Pipe((byte)24);
      assertNotNull(pipe0);
      
      Buffer buffer1 = pipe0.buffer;
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      long long0 = buffer0.readAll(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, long0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      // Undeclared exception!
      try { 
        buffer1.readUtf8((-330L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-330
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeLongLe(100000000000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      String string0 = buffer0.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\uFFFD]xEc\u0001", string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = buffer1.writeDecimalLong(100000000000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(18L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      Buffer buffer3 = buffer2.buffer();
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertNotNull(buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(18L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(18L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      buffer3.flush();
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(18L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(18L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotNull(hashingSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      ByteString byteString0 = hashingSource0.hash();
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotNull(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      ByteString byteString1 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)56}, byteArray0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString1.size());
      
      // Undeclared exception!
      try { 
        buffer3.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Number too large: 10000000000000000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeLongLe(100000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      
      String string0 = buffer0.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertNotNull(string0);
      assertEquals("\u0000\uFFFDvH\u0017\u0000\u0000\u0000", string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer2 = buffer1.writeDecimalLong(100000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(12L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      buffer1.flush();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, buffer1.size());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, buffer1.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, buffer1.size());
      assertEquals(16, byteString0.size());
      
      HashingSource hashingSource1 = HashingSource.hmacSha256(hashingSource0, byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, buffer1.size());
      assertEquals(16, byteString0.size());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(12L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      ByteString byteString1 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, buffer1.size());
      assertEquals(16, byteString1.size());
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      Buffer buffer3 = buffer1.write(byteString0);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString0, byteString1);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertNotNull(buffer3);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(byteString0.equals((Object)byteString1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(28L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(28L, buffer1.size());
      assertEquals(16, byteString0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(28L, buffer3.size());
      
      ByteString byteString2 = hashingSource1.hash();
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotNull(byteString2);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(28L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(28L, buffer1.size());
      assertEquals(16, byteString0.size());
      assertEquals(32, byteString2.size());
      
      Buffer buffer4 = buffer3.writeUtf8("\u0000\uFFFDvH\u0017\u0000\u0000\u0000");
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertSame(buffer3, buffer4);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer3);
      assertNotNull(buffer4);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertTrue(byteString0.equals((Object)byteString1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(38L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(38L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(38L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(38L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      
      ByteString byteString3 = hashingSource1.hash();
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString3);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(byteString3);
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertTrue(byteString3.equals((Object)byteString2));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals(32, byteString3.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(38L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(38L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      
      int int2 = ObjectStreamConstants.baseWireHandle;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8257536, int2);
      
      Integer integer0 = new Integer(971);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(971, (int)integer0);
      
      // Undeclared exception!
      try { 
        buffer0.readByteArray((long) 971);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=38 offset=0 byteCount=971
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Pipe pipe0 = new Pipe(1095216660480L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1032));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MockFile mockFile0 = new MockFile("RC", "RC");
      assertNotNull(mockFile0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/RC", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/RC/RC", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("RC", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      assertNotNull(mockFileOutputStream0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/RC", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/RC/RC", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("RC", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      
      boolean boolean0 = mockFile0.setLastModified(1095216660480L);
      assertTrue(boolean0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1095216660480L, mockFile0.lastModified());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/RC", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/RC/RC", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("RC", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      Buffer buffer2 = buffer1.writeDecimalLong(1095216660480L);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertEquals(14L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(14L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(14L, buffer2.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        buffer2.hmacSha1(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      
      byte byte0 = (byte)12;
      ByteString byteString1 = hashingSource0.hash();
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString1.size());
      
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString2 = hashingSource0.hash();
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotNull(byteString2);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(byteString2.equals((Object)byteString1));
      assertTrue(byteString2.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString2.size());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      Buffer buffer1 = buffer0.write(byteString0);
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(byteString0.equals((Object)byteString1));
      assertTrue(byteString0.equals((Object)byteString2));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertEquals(16L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      ByteString byteString3 = byteString0.toAsciiLowercase();
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotNull(byteString3);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(byteString0.equals((Object)byteString1));
      assertTrue(byteString0.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertEquals(16, byteString3.size());
      
      ByteString byteString4 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString2);
      assertNotNull(byteString4);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString3));
      assertTrue(byteString4.equals((Object)byteString2));
      assertTrue(byteString4.equals((Object)byteString0));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16L, buffer0.size());
      assertEquals(16, byteString4.size());
      
      long long0 = buffer1.indexOfElement(byteString1);
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString4);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString3);
      assertSame(buffer1, buffer0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(byteString0.equals((Object)byteString3));
      assertTrue(byteString0.equals((Object)byteString4));
      assertTrue(byteString0.equals((Object)byteString1));
      assertTrue(byteString0.equals((Object)byteString2));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString3));
      assertTrue(byteString1.equals((Object)byteString2));
      assertTrue(byteString1.equals((Object)byteString4));
      assertEquals(0L, long0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertEquals(16, byteString1.size());
      assertEquals(16L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      long long1 = 10L;
      // Undeclared exception!
      try { 
        buffer1.write(buffer0, (-794L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Segment segment0 = buffer0.writableSegment(2048);
      assertNotNull(segment0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      
      HashingSource hashingSource1 = HashingSource.hmacSha1(buffer0, byteString0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      
      ByteString byteString1 = hashingSource1.hash();
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertEquals(20, byteString1.size());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/xI[.ZmFj1/xI[.ZmFj1");
      Integer integer0 = new Integer(8257536);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(8257536, (int)integer0);
      
      ByteString byteString2 = hashingSource0.hash();
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotNull(byteString2);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertTrue(byteString2.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString2.size());
      
      ByteString byteString3 = buffer0.sha256();
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertNotNull(byteString3);
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString3.size());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)55;
      int int1 = byteString3.indexOf(byteArray0);
      assertArrayEquals(new byte[] {(byte)36, (byte)55}, byteArray0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString3.size());
      
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      long long0 = buffer0.indexOfElement(byteString1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString3);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString3));
      assertEquals((-1L), long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertEquals(20, byteString1.size());
      
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Pipe pipe0 = new Pipe(99999999999999994L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(109);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" hex=");
      assertNotNull(mockFileOutputStream0);
      
      pipe0.sinkClosed = true;
      pipe0.sinkClosed = true;
      ByteString byteString0 = buffer0.sha256();
      assertSame(buffer0, buffer1);
      assertNotNull(byteString0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(hashingSource0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      ByteString byteString1 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString1.size());
      
      int int0 = byteString0.indexOf(byteString1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals((-1), int0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertEquals(32, byteString1.size());
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      assertNotNull(filterOutputStream0);
      
      Buffer buffer2 = buffer1.copyTo((OutputStream) mockFileOutputStream0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      mockFileOutputStream0.release();
      long long0 = buffer2.indexOfElement(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString0, byteString1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals((-1L), long0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Pipe pipe0 = new Pipe(1186L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      pipe0.sourceClosed = true;
      buffer0.clear();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = pipe0.buffer;
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      assertEquals("US-ASCII", charset1.toString());
      assertTrue(charset1.canEncode());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.displayName());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer2 = realBufferedSink0.buffer.writeUtf8CodePoint(37);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer3 = realBufferedSource0.buffer();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      boolean boolean0 = realBufferedSink0.buffer.exhausted();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(boolean0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        buffer2.writeUtf8("=(/<&EQ7V,.vnU@8)01", 37, 8257536);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 8257536 > 19
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Pipe pipe0 = new Pipe(1095216660435L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1032));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MockFile mockFile0 = new MockFile("RC", "RC");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals("RC", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/RC/RC", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/RC", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("RC");
      assertNotNull(mockFileOutputStream0);
      
      boolean boolean0 = pipe0.sourceClosed;
      assertFalse(boolean0);
      
      pipe0.sinkClosed = false;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      assertNotNull(filterOutputStream0);
      
      Buffer buffer2 = buffer0.clone();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(1L, buffer2.size());
      
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Pipe pipe0 = new Pipe(1095216660480L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeLongLe(439L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertSame(buffer0, buffer1);
      assertNotNull(list0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      int int0 = 1985;
      // Undeclared exception!
      try { 
        buffer1.write((byte[]) null, 1985, 1985);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = (Buffer)buffer0.write((Source) buffer0, (-2189L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = buffer1.writeDecimalLong((-2189L));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(5L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Buffer buffer3 = buffer2.buffer();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertNotNull(buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(5L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(5L, buffer3.size());
      assertFalse(buffer3.exhausted());
      
      Segment segment0 = buffer2.writableSegment(353);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotNull(segment0);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(5L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Buffer buffer4 = buffer2.writeUtf8("@31suT^");
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer4);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer4);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer3);
      assertNotNull(buffer4);
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(12L, buffer2.size());
      assertEquals(12L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer4);
      assertNotNull(hashingSource0);
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      long long0 = buffer4.readDecimalLong();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer4);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer4);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer3);
      assertEquals((-2189L), long0);
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(7L, buffer2.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(7L, buffer4.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer4);
      assertNotNull(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      
      ByteString byteString1 = buffer4.hmacSha256(byteString0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer4);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer4);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer3);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(7L, buffer2.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(7L, buffer4.size());
      assertEquals(20, byteString0.size());
      assertEquals(32, byteString1.size());
      
      short short0 = buffer2.readShort();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer4);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer4);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertEquals((short)16435, short0);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(5L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      long long1 = buffer2.readHexadecimalUnsignedLong();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer4);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer4);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer2.readFully(buffer1, (-2189L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      
      Integer integer0 = new Integer(1630);
      assertNotNull(integer0);
      assertEquals(1630, (int)integer0);
      
      Buffer buffer2 = buffer1.writeString("6-!", charset0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(3L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      ByteString byteString0 = buffer0.sha256();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      
      String string0 = buffer0.readString(charset0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotNull(string0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals("", string0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = buffer0.equals(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(boolean0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Pipe pipe0 = new Pipe(99999999999999994L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      MockFile mockFile0 = new MockFile(" hex=", "\"xY>:G9nE");
      assertNotNull(mockFile0);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/ hex=", mockFile0.getParent());
      assertEquals("\"xY>:G9nE", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/ hex=/\"xY>:G9nE", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" hex=");
      assertNotNull(mockFileOutputStream0);
      
      mockFileOutputStream0.close();
      ByteString byteString0 = buffer0.sha256();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      assertNotNull(filterOutputStream0);
      
      Buffer buffer1 = buffer0.copyTo((OutputStream) filterOutputStream0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = buffer1.writeTo((OutputStream) mockFileOutputStream0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(228);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      ByteString byteString0 = buffer0.snapshot();
      assertSame(buffer0, buffer1);
      assertNotNull(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertEquals(2, byteString0.size());
      
      // Undeclared exception!
      try { 
        buffer1.writableSegment(2147483633);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      buffer0.require((-664));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeShortLe((-664));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      
      int int0 = buffer0.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertEquals(104, int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      
      int int1 = buffer1.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(int1 == int0);
      assertEquals(65533, int1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Buffer buffer1 = buffer0.writeLongLe(100000000000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      String string0 = buffer0.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\uFFFD]xEc\u0001", string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      Buffer buffer2 = buffer0.writeShortLe((-270));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      try { 
        buffer1.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 4: 2 (to read code point prefixed 0xfffffff2)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeDecimalLong(100000000000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = new Buffer();
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      buffer2.flush();
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotNull(hashingSource0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(1, byteString0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      ByteString byteString1 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(16, byteString1.size());
      
      ByteString byteString2 = buffer0.sha256();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotNull(byteString2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(32, byteString2.size());
      
      byte byte0 = ObjectStreamConstants.TC_RESET;
      assertEquals((byte)121, byte0);
      
      // Undeclared exception!
      try { 
        buffer1.write((Source) buffer0, 11L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Buffer buffer1 = buffer0.writeDecimalLong(100000000000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(18L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      buffer1.flush();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(18L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(1, byteString0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertNotNull(realBufferedSink0);
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(18L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      ByteString byteString1 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(16, byteString1.size());
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      
      ByteString byteString2 = buffer0.sha256();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotNull(byteString2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(32, byteString2.size());
      
      byte byte0 = ObjectStreamConstants.TC_RESET;
      assertEquals((byte)121, byte0);
      
      Buffer buffer3 = (Buffer)buffer2.write((Source) buffer0, 11L);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertEquals(11L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(11L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      String string0 = buffer3.readUtf8();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotNull(string0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertEquals("10000000000", string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 7
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Buffer buffer1 = buffer0.writeDecimalLong(100000000000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(18L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      buffer1.flush();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(18L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      ByteString byteString0 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString1 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString1.size());
      
      ByteString byteString2 = byteString1.hmacSha1(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotNull(byteString2);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertEquals(1, byteString1.size());
      assertEquals(20, byteString2.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(18L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Buffer buffer3 = buffer2.write(byteString0);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(18L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(16, byteString0.size());
      assertEquals(16L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(16L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      short short0 = buffer3.readShort();
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertEquals((short) (-11235), short0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(18L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(16, byteString0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(14L, buffer2.size());
      assertEquals(14L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      byte byte0 = ObjectStreamConstants.TC_RESET;
      assertEquals((byte)121, byte0);
      
      Buffer buffer4 = (Buffer)buffer2.write((Source) buffer0, 13L);
      assertSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(27L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(27L, buffer2.size());
      
      int int0 = buffer4.readInt();
      assertSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals((-1931899136), int0);
      assertEquals(23L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(23L, buffer2.size());
      
      Buffer buffer5 = realBufferedSink0.buffer();
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer5, buffer4);
      assertSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer0);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer5);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(23L, buffer5.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      
      ByteString byteString3 = buffer5.sha256();
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer5, buffer4);
      assertSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer0);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer1);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotNull(byteString3);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(23L, buffer5.size());
      assertEquals(32, byteString3.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Buffer buffer6 = realBufferedSink0.buffer;
      assertSame(buffer6, buffer3);
      assertSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer0);
      assertSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer1);
      assertSame(buffer6, buffer5);
      assertNotNull(buffer6);
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer1));
      assertFalse(buffer6.exhausted());
      assertEquals(23L, buffer6.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer6.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffb2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeLongLe(100000000000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      
      String string0 = buffer0.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\uFFFD]xEc\u0001", string0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer2 = buffer1.writeDecimalLong(100000000000000000L);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(18L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(18L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      Buffer buffer3 = buffer2.buffer();
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertNotNull(buffer3);
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(18L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(18L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(18L, buffer3.size());
      
      buffer3.flush();
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(18L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(18L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(18L, buffer3.size());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotNull(hashingSource0);
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(18L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      ByteString byteString0 = hashingSource0.hash();
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotNull(byteString0);
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(18L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      ByteString byteString1 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)56}, byteArray0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString1.size());
      
      int int0 = byteString0.indexOf(byteString1, 1630);
      assertArrayEquals(new byte[] {(byte)56}, byteArray0);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals((-1), int0);
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(18L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertEquals(1, byteString1.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      assertNotNull(realBufferedSink0);
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(18L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(18L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      ByteString byteString2 = hashingSource0.hash();
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString1));
      assertTrue(byteString2.equals((Object)byteString0));
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(18L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16, byteString2.size());
      
      int int1 = byteString0.compareTo(byteString2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(byteString0.equals((Object)byteString2));
      assertFalse(byteString2.equals((Object)byteString1));
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(18L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertEquals(16, byteString2.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      Buffer buffer4 = buffer1.write(byteString0);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer3);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer2);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotNull(buffer4);
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(byteString0.equals((Object)byteString2));
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(34L, buffer4.size());
      assertEquals(34L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(34L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      
      Integer integer0 = new Integer(1630);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(1630, (int)integer0);
      
      ByteString byteString3 = buffer2.sha256();
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer2);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer4);
      assertNotNull(byteString3);
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertEquals(34L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(34L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString3.size());
      assertEquals(34L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      HashingSource hashingSource1 = HashingSource.hmacSha1(buffer0, byteString2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer2);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString1);
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString2.equals((Object)byteString3));
      assertFalse(byteString2.equals((Object)byteString1));
      assertTrue(byteString2.equals((Object)byteString0));
      assertEquals(34L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(34L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16, byteString2.size());
      
      ByteString byteString4 = hashingSource0.hash();
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer2);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString4, byteString1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotNull(byteString4);
      assertTrue(byteString4.equals((Object)byteString2));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString1));
      assertTrue(byteString4.equals((Object)byteString0));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertEquals(34L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(34L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16, byteString4.size());
      
      // Undeclared exception!
      try { 
        buffer1.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = (Buffer)buffer0.write((Source) buffer0, (-2189L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      Buffer buffer2 = buffer1.writeDecimalLong((-2189L));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(5L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer3 = buffer1.writeByte(89);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotNull(buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertEquals(6L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      
      buffer2.flush();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertEquals(6L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotNull(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertEquals(16, byteString0.size());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)58;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)58;
      ByteString byteString1 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)58, (byte)38, (byte)58, (byte)0, (byte)58, (byte)58}, byteArray0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(6, byteString1.size());
      
      int int0 = byteString0.indexOf(byteString1, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)58, (byte)38, (byte)58, (byte)0, (byte)58, (byte)58}, byteArray0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals((-1), int0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertEquals(6, byteString1.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertEquals(6L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HashingSource hashingSource1 = HashingSource.sha1(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(hashingSource1, hashingSource0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertEquals(6L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Buffer buffer4 = realBufferedSink0.buffer;
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertEquals(0L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      
      Buffer buffer5 = buffer3.writeShortLe((byte)58);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer5);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer5, buffer4);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer3);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer5);
      assertSame(buffer3, buffer2);
      assertNotNull(buffer5);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer4));
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(8L, buffer5.size());
      assertEquals(8L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      
      HashingSource hashingSource2 = HashingSource.hmacSha256(realBufferedSink0.buffer, byteString1);
      assertArrayEquals(new byte[] {(byte)58, (byte)38, (byte)58, (byte)0, (byte)58, (byte)58}, byteArray0);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer5);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer5);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer4);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotSame(hashingSource2, hashingSource0);
      assertNotSame(byteString1, byteString0);
      assertNotNull(hashingSource2);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(6, byteString1.size());
      
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(2, options0.size());
      
      int int1 = buffer3.select(options0);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer5);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer5);
      assertSame(buffer3, buffer2);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer4));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(2, options0.size());
      
      Buffer buffer6 = buffer0.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)58, (byte)38, (byte)58, (byte)0, (byte)58, (byte)58}, byteArray0);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer6);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer6, buffer1);
      assertSame(buffer6, buffer3);
      assertSame(buffer6, buffer5);
      assertSame(buffer6, buffer0);
      assertSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer4);
      assertNotNull(buffer6);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer4));
      assertEquals(14L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer6.exhausted());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(14L, buffer6.size());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      
      byte[] byteArray0 = new byte[2];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotSame(buffer0, buffer1);
      assertNotNull(inputStream0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = buffer0.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.size());
      
      ByteString[] byteStringArray0 = new ByteString[1];
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(1, options0.size());
      
      int int0 = realBufferedSource0.buffer.select(options0);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals((-1), int0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, options0.size());
      
      boolean boolean0 = realBufferedSource0.buffer.request(1326L);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(boolean0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSource0);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = hashingSource0.hash();
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      
      ByteString byteString1 = buffer2.hmacSha256(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.size());
      assertEquals(20, byteString0.size());
      assertEquals(32, byteString1.size());
      
      byte byte0 = buffer2.readByte();
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals((byte)0, byte0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(1L, buffer2.size());
      
      byte byte1 = buffer0.readByte();
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertTrue(byte1 == byte0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals((byte)0, byte1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      buffer0.flush();
      assertNotSame(buffer0, buffer1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = buffer1.clone();
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer3 = buffer2.writeLong(2703L);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotNull(buffer3);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(8L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(8L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.emitCompleteSegments();
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertNotNull(realBufferedSink1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      String string0 = buffer2.readUtf8Line();
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotNull(string0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Pipe pipe0 = new Pipe(1186L);
      assertNotNull(pipe0);
      
      Buffer buffer4 = pipe0.buffer;
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer1));
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      
      InputStream inputStream0 = buffer2.inputStream();
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotNull(inputStream0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer4);
      assertNotNull(hashingSource0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer4));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(1L, buffer3.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer4);
      assertNotNull(byteString0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer4));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(1L, buffer3.size());
      assertEquals(32, byteString0.size());
      
      ByteString byteString1 = realBufferedSink1.buffer.hmacSha1(byteString0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer4);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(1L, buffer3.size());
      assertEquals(32, byteString0.size());
      assertEquals(20, byteString1.size());
      
      pipe0.sourceClosed = true;
      boolean boolean0 = realBufferedSink1.buffer.request(4L);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer4));
      assertFalse(boolean0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer5 = realBufferedSink1.buffer;
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer1);
      assertNotNull(buffer5);
      assertFalse(buffer5.equals((Object)buffer2));
      assertTrue(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertTrue(buffer5.equals((Object)buffer0));
      assertTrue(buffer5.equals((Object)buffer4));
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      
      buffer5.size = (-1835L);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals((-1835L), buffer5.size());
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertNotNull(uS_ASCII0);
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.canEncode());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.name());
      
      US_ASCII uS_ASCII1 = (US_ASCII)Charset.defaultCharset();
      assertSame(uS_ASCII1, uS_ASCII0);
      assertNotNull(uS_ASCII1);
      assertEquals("US-ASCII", uS_ASCII1.toString());
      assertTrue(uS_ASCII1.canEncode());
      assertEquals("US-ASCII", uS_ASCII1.displayName());
      assertTrue(uS_ASCII1.isRegistered());
      assertEquals("US-ASCII", uS_ASCII1.name());
      
      RealBufferedSink realBufferedSink2 = (RealBufferedSink)realBufferedSink0.writeString("=(/<&EQ7V,.inU@8)0,", (Charset) uS_ASCII0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertSame(uS_ASCII0, uS_ASCII1);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink2, realBufferedSink0);
      assertSame(realBufferedSink2, realBufferedSink1);
      assertNotNull(realBufferedSink2);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer4));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.canEncode());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.name());
      
      Buffer buffer6 = realBufferedSink1.buffer;
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer0);
      assertSame(buffer6, buffer5);
      assertNotNull(buffer6);
      assertFalse(buffer6.equals((Object)buffer1));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer0));
      assertEquals((-1816L), buffer6.size());
      assertFalse(buffer6.exhausted());
      assertEquals((-1835L), buffer6.completeSegmentByteCount());
      
      ByteString byteString2 = realBufferedSink0.buffer.sha256();
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer6);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, realBufferedSink2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotNull(byteString2);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString2.size());
      
      Buffer buffer7 = realBufferedSink2.buffer.writeUtf8CodePoint(37);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer6);
      assertSame(uS_ASCII0, uS_ASCII1);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink2, realBufferedSink0);
      assertSame(realBufferedSink2, realBufferedSink1);
      assertSame(buffer7, buffer5);
      assertNotSame(buffer7, buffer0);
      assertNotSame(buffer7, buffer4);
      assertSame(buffer7, buffer6);
      assertNotSame(buffer7, buffer2);
      assertNotSame(buffer7, buffer3);
      assertNotSame(buffer7, buffer1);
      assertNotNull(buffer7);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer4));
      assertFalse(buffer7.equals((Object)buffer2));
      assertFalse(buffer7.equals((Object)buffer3));
      assertFalse(buffer7.equals((Object)buffer1));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.canEncode());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertFalse(buffer7.exhausted());
      assertEquals((-1835L), buffer7.completeSegmentByteCount());
      assertEquals((-1815L), buffer7.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink2.buffer);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer7));
      assertTrue(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer6));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.canEncode());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.name());
      
      try { 
        realBufferedSource0.buffer.readFrom(inputStream0, 491L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(2, byteString0.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(280375465082866L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(15L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(15L, buffer1.size());
      
      MockFile mockFile0 = new MockFile("VeEUI");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("VeEUI", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("VeEUI", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      int int0 = buffer0.readIntLe();
      assertSame(buffer0, buffer1);
      assertEquals(858798130, int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(11L, buffer0.size());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("VeEUI");
      assertNotNull(mockPrintStream0);
      
      Buffer buffer2 = buffer1.copyTo((OutputStream) mockPrintStream0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(11L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(11L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(11L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      assertNotNull(mockPrintStream1);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      // Undeclared exception!
      try { 
        buffer1.writeUtf8((String) null, 858798130, 70);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      ByteString[] byteStringArray0 = new ByteString[2];
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(hashingSource0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      String string0 = hashingSource0.toString();
      assertNotSame(buffer1, buffer0);
      assertNotNull(string0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotSame(buffer1, buffer0);
      assertNotNull(byteString0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      
      HashingSink hashingSink0 = HashingSink.hmacSha1(buffer0, byteString0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(hashingSink0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      
      ByteString byteString1 = hashingSink0.hash();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(20, byteString1.size());
      
      byteStringArray0[0] = byteString1;
      Buffer buffer2 = buffer0.emitCompleteSegments();
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      
      Buffer buffer2 = buffer1.writeLongLe((-331L));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(8L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-10);
      Buffer buffer3 = new Buffer();
      assertNotNull(buffer3);
      assertTrue(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      assertNotNull(realBufferedSource1);
      assertTrue(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      Buffer buffer4 = realBufferedSource1.buffer;
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotNull(buffer4);
      assertTrue(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer0));
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      
      Buffer buffer5 = realBufferedSource0.buffer();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer5, buffer4);
      assertSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer0);
      assertSame(buffer5, buffer2);
      assertNotNull(buffer5);
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(8L, buffer5.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer5);
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer5));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(8L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      int int0 = buffer_UnsafeCursor0.next();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer5);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(8, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer5));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(8, int0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(8L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      long long0 = buffer1.completeSegmentByteCount();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer5));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertEquals(0L, long0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      
      Buffer buffer6 = buffer_UnsafeCursor0.buffer;
      assertNotSame(buffer6, buffer4);
      assertSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer0);
      assertSame(buffer6, buffer2);
      assertSame(buffer6, buffer5);
      assertNotNull(buffer6);
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer0));
      assertEquals(8L, buffer6.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertFalse(buffer6.exhausted());
      
      Buffer buffer7 = buffer6.writeDecimalLong(1000000000000000000L);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer7);
      assertSame(buffer1, buffer6);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer5);
      assertSame(buffer2, buffer6);
      assertSame(buffer2, buffer7);
      assertNotSame(buffer6, buffer4);
      assertSame(buffer6, buffer1);
      assertSame(buffer6, buffer7);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer0);
      assertSame(buffer6, buffer2);
      assertSame(buffer6, buffer5);
      assertSame(buffer7, buffer2);
      assertSame(buffer7, buffer1);
      assertNotSame(buffer7, buffer3);
      assertNotSame(buffer7, buffer4);
      assertNotSame(buffer7, buffer0);
      assertSame(buffer7, buffer5);
      assertSame(buffer7, buffer6);
      assertNotNull(buffer7);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(8, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer6));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer3));
      assertFalse(buffer7.equals((Object)buffer4));
      assertFalse(buffer7.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(27L, buffer1.size());
      assertEquals(27L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(27L, buffer6.size());
      assertFalse(buffer6.exhausted());
      assertEquals(27L, buffer7.size());
      assertFalse(buffer7.exhausted());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      
      Buffer buffer8 = buffer7.writeDecimalLong(1000000000000000000L);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer8);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer8);
      assertSame(buffer1, buffer7);
      assertSame(buffer1, buffer6);
      assertSame(buffer2, buffer8);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer5);
      assertSame(buffer2, buffer6);
      assertSame(buffer2, buffer7);
      assertNotSame(buffer6, buffer4);
      assertSame(buffer6, buffer1);
      assertSame(buffer6, buffer7);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer0);
      assertSame(buffer6, buffer2);
      assertSame(buffer6, buffer5);
      assertSame(buffer6, buffer8);
      assertSame(buffer7, buffer2);
      assertSame(buffer7, buffer1);
      assertNotSame(buffer7, buffer3);
      assertNotSame(buffer7, buffer4);
      assertSame(buffer7, buffer8);
      assertNotSame(buffer7, buffer0);
      assertSame(buffer7, buffer5);
      assertSame(buffer7, buffer6);
      assertSame(buffer8, buffer1);
      assertNotSame(buffer8, buffer3);
      assertNotSame(buffer8, buffer4);
      assertSame(buffer8, buffer2);
      assertSame(buffer8, buffer5);
      assertNotSame(buffer8, buffer0);
      assertSame(buffer8, buffer7);
      assertSame(buffer8, buffer6);
      assertNotNull(buffer8);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(8, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer6));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer3));
      assertFalse(buffer7.equals((Object)buffer4));
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer8.equals((Object)buffer3));
      assertFalse(buffer8.equals((Object)buffer4));
      assertFalse(buffer8.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(46L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(46L, buffer2.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(46L, buffer6.size());
      assertFalse(buffer6.exhausted());
      assertFalse(buffer7.exhausted());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertEquals(46L, buffer7.size());
      assertFalse(buffer8.exhausted());
      assertEquals(0L, buffer8.completeSegmentByteCount());
      assertEquals(46L, buffer8.size());
      
      realBufferedSource0.skip(8);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer8);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer8));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        buffer1.readUtf8(2533L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=38 offset=0 byteCount=2533
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeDecimalLong((-2210L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        buffer0.readAll(buffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      List<Integer> list0 = buffer2.segmentSizes();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(list0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotNull(hashingSink0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotNull(byteString0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(20, byteString0.size());
      
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = (Buffer)buffer0.write((Source) buffer0, (-2186L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      String string0 = buffer1.readUtf8();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)58;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Buffer buffer3 = buffer1.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)58, (byte)0}, byteArray0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      assertFalse(buffer3.exhausted());
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotNull(hashingSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      ByteString byteString0 = hashingSink0.hash();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      
      ByteString byteString1 = hashingSink0.hash();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(20, byteString1.size());
      
      Segment segment0 = buffer3.head;
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)58, (byte)0}, byteArray0);
      assertNotNull(segment0);
      
      SegmentPool.next = segment0;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      assertFalse(buffer3.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      ByteString byteString2 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)58, (byte)0}, byteArray0);
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(4, byteString2.size());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      String string1 = byteString2.base64();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)58, (byte)0}, byteArray0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals("AAA6AA==", string1);
      assertEquals(4, byteString2.size());
      
      long long0 = buffer3.indexOf(byteString2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)58, (byte)0}, byteArray0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(0L, long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(4, byteString2.size());
      
      // Undeclared exception!
      try { 
        buffer3.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 4
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = (Buffer)buffer0.write((Source) buffer0, (-2186L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)24;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      
      Buffer buffer3 = buffer1.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)24, (byte)24, (byte)0}, byteArray0);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertEquals(4L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)24, (byte)24, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(4, byteString0.size());
      
      String string1 = byteString0.base64();
      assertArrayEquals(new byte[] {(byte)0, (byte)24, (byte)24, (byte)0}, byteArray0);
      assertNotNull(string1);
      assertEquals("ABgYAA==", string1);
      assertEquals(4, byteString0.size());
      
      long long0 = buffer_UnsafeCursor0.offset;
      assertEquals((-1L), long0);
      
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(3, options0.size());
      
      Object[] objectArray0 = options0.toArray();
      assertNotNull(objectArray0);
      assertEquals(3, options0.size());
      
      Options options1 = Options.of(byteStringArray0);
      assertNotSame(options1, options0);
      assertNotNull(options1);
      assertTrue(options1.equals((Object)options0));
      assertEquals(3, options1.size());
      
      int int0 = buffer0.selectPrefix(options1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(options1, options0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(options1.equals((Object)options0));
      assertEquals(0, int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(3, options1.size());
      
      try { 
        buffer2.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1742L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = buffer0.writeDecimalLong(0L);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotNull(list0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      ByteString byteString0 = buffer2.sha512();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotNull(hashingSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      ByteString byteString1 = realBufferedSource0.readByteString();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(4, byteString1.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer2, byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotNull(hashingSource0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(64, byteString0.size());
      
      Timeout timeout0 = hashingSink0.timeout();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotNull(timeout0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString2 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotNull(byteString2);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(64, byteString0.size());
      assertEquals(20, byteString2.size());
      
      long long0 = buffer2.indexOfElement(byteString0, 3444L);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertEquals((-1L), long0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(64, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Pipe pipe0 = new Pipe(99999999999999994L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(109);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MockFile mockFile0 = new MockFile(" hex=", "\"xY>:G9nE");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("\"xY>:G9nE", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/ hex=", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/ hex=/\"xY>:G9nE", mockFile0.toString());
      
      Pipe pipe1 = new Pipe(109);
      assertNotNull(pipe1);
      assertFalse(pipe1.equals((Object)pipe0));
      
      Buffer buffer2 = pipe1.buffer;
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      InputStream inputStream0 = buffer2.inputStream();
      assertNotSame(pipe1, pipe0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(inputStream0);
      assertFalse(pipe1.equals((Object)pipe0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Buffer buffer3 = pipe0.buffer;
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      boolean boolean0 = buffer3.request(109);
      assertNotSame(pipe0, pipe1);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertFalse(pipe0.equals((Object)pipe1));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertFalse(boolean0);
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      assertNotNull(realBufferedSource0);
      assertFalse(pipe1.equals((Object)pipe0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer3));
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotSame(pipe1, pipe0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotNull(byteString0);
      assertFalse(pipe1.equals((Object)pipe0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer3));
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSource0);
      assertNotSame(pipe1, pipe0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotNull(hashingSource0);
      assertFalse(pipe1.equals((Object)pipe0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer3));
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotNull(hashingSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      
      Timeout timeout0 = hashingSink0.timeout();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotNull(timeout0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotSame(pipe1, pipe0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(pipe1.equals((Object)pipe0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer3));
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(16, byteString1.size());
      
      long long0 = buffer0.indexOfElement(byteString0, 99999999999999994L);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(pipe1, pipe0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotSame(byteString0, byteString1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(pipe1.equals((Object)pipe0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals((-1L), long0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = (Buffer)buffer0.write((Source) buffer0, (-2189L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = buffer1.writeDecimalLong((-2189L));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(5L, buffer2.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer3 = buffer1.writeByte(89);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertNotNull(buffer3);
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      
      buffer2.flush();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(6L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertNotNull(hashingSource0);
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      
      ByteString byteString0 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertNotNull(byteString0);
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      // Undeclared exception!
      try { 
        buffer3.indexOf(byteString0, (-2189L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      String string0 = buffer0.readUtf8Line();
      assertNotSame(buffer0, buffer1);
      assertNull(string0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer2 = (Buffer)buffer0.write((Source) buffer1, (-2189L));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertNotNull(uS_ASCII0);
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.canEncode());
      
      Buffer buffer3 = new Buffer();
      assertNotNull(buffer3);
      assertTrue(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer0));
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)21;
      byteArray1[1] = (byte)21;
      byteArray1[2] = (byte)80;
      byteArray1[3] = (byte)21;
      byteArray1[4] = (byte)21;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertArrayEquals(new byte[] {(byte)21, (byte)21, (byte)80, (byte)21, (byte)21}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      
      byteArray0[1] = (byte)21;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer3));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeInt((byte)21);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertNotNull(realBufferedSink1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer3));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      RealBufferedSink realBufferedSink2 = (RealBufferedSink)realBufferedSink0.writeLong((byte)21);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink2, realBufferedSink0);
      assertSame(realBufferedSink2, realBufferedSink1);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertNotNull(realBufferedSink2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer3));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(buffer2);
      assertNotNull(realBufferedSink3);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer3));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      RealBufferedSink realBufferedSink4 = (RealBufferedSink)realBufferedSink0.writeString("_yBB^D&.J[u84A", (Charset) uS_ASCII0);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(realBufferedSink4, realBufferedSink3);
      assertSame(realBufferedSink4, realBufferedSink1);
      assertSame(realBufferedSink4, realBufferedSink2);
      assertSame(realBufferedSink4, realBufferedSink0);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink0, realBufferedSink4);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertNotNull(realBufferedSink4);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSink4.equals((Object)realBufferedSink3));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.canEncode());
      
      RealBufferedSink realBufferedSink5 = new RealBufferedSink(buffer3);
      assertNotNull(realBufferedSink5);
      assertFalse(realBufferedSink5.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink5.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink5.equals((Object)realBufferedSink4));
      assertFalse(realBufferedSink5.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink5.equals((Object)realBufferedSink0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer0));
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      
      Buffer buffer4 = buffer1.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)21, (byte)0}, byteArray0);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer1);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(buffer4);
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(3L, buffer4.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer4.readAndWriteUnsafe();
      assertArrayEquals(new byte[] {(byte)0, (byte)21, (byte)0}, byteArray0);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer1);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(3L, buffer4.size());
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)21, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(3, byteString0.size());
      
      String string1 = byteString0.base64();
      assertArrayEquals(new byte[] {(byte)0, (byte)21, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(string1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals("ABUA", string1);
      assertEquals(3, byteString0.size());
      
      ByteString[] byteStringArray0 = new ByteString[3];
      long long0 = new Integer((byte)21);
      assertEquals(21, long0);
      
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[1] = byteString0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      RealBufferedSink realBufferedSink6 = new RealBufferedSink(buffer4);
      assertArrayEquals(new byte[] {(byte)0, (byte)21, (byte)0}, byteArray0);
      assertNotNull(realBufferedSink6);
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(realBufferedSink6.equals((Object)realBufferedSink5));
      assertFalse(realBufferedSink6.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink6.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink6.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink6.equals((Object)realBufferedSink4));
      assertFalse(realBufferedSink6.equals((Object)realBufferedSink2));
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(3L, buffer4.size());
      
      US_ASCII uS_ASCII1 = (US_ASCII)Charset.defaultCharset();
      assertSame(uS_ASCII1, uS_ASCII0);
      assertNotNull(uS_ASCII1);
      assertEquals("US-ASCII", uS_ASCII1.displayName());
      assertEquals("US-ASCII", uS_ASCII1.toString());
      assertTrue(uS_ASCII1.isRegistered());
      assertEquals("US-ASCII", uS_ASCII1.name());
      assertTrue(uS_ASCII1.canEncode());
      
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(3, options0.size());
      
      int int0 = buffer_UnsafeCursor0.buffer.select(options0);
      assertArrayEquals(new byte[] {(byte)0, (byte)21, (byte)0}, byteArray0);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer1);
      assertNotSame(byteArray0, byteArray1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, int0);
      assertEquals(3, options0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      
      long long1 = buffer_UnsafeCursor0.buffer.indexOf(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)21, (byte)0}, byteArray0);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer1);
      assertNotSame(byteArray0, byteArray1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(long1 == long0);
      assertTrue(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals((-1L), long1);
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertEquals(3, byteString0.size());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-2189L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-2189 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeShort((-444));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      
      short short0 = buffer0.readShortLe();
      assertSame(buffer0, buffer1);
      assertEquals((short)17662, short0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong((short)17662);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      
      int int0 = buffer0.readInt();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertEquals(875849317, int0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      buffer1.flush();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      Buffer buffer2 = buffer0.clone();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.size());
      assertEquals(2L, buffer2.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer2.read(buffer1, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = (Buffer)buffer0.write((Source) buffer0, (-2189L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertNotNull(uS_ASCII0);
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      
      Buffer buffer2 = buffer0.writeString(",)XBJI,Pv`Fs(D{I&", (Charset) uS_ASCII0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(18L, buffer2.size());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)35;
      byteArray0[0] = (byte)35;
      byteArray0[0] = (byte)35;
      ByteString byteString0 = buffer0.sha256();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotNull(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      
      long long0 = buffer2.readLongLe();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(5777073005298985260L, long0);
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals(10L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Buffer buffer3 = buffer0.writeLong((byte)24);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotNull(buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(18L, buffer3.size());
      
      Buffer buffer4 = buffer0.write(byteString0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer2);
      assertNotNull(buffer4);
      assertFalse(buffer0.exhausted());
      assertEquals(50L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(50L, buffer4.size());
      assertFalse(buffer4.exhausted());
      
      Integer integer0 = new Integer(1465);
      assertNotNull(integer0);
      assertEquals(1465, (int)integer0);
      
      ByteString byteString1 = buffer3.sha256();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer4);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(buffer0.exhausted());
      assertEquals(50L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(50L, buffer3.size());
      assertEquals(32, byteString1.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer4);
      assertNotNull(realBufferedSink0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(buffer0.exhausted());
      assertEquals(50L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(50L, buffer4.size());
      assertFalse(buffer4.exhausted());
      
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.emit();
      assertSame(realBufferedSink1, realBufferedSink0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertNotSame(byteString0, byteString1);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer2);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertNotNull(realBufferedSink1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(buffer0.exhausted());
      assertEquals(50L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(50L, buffer4.size());
      assertFalse(buffer4.exhausted());
      
      Buffer buffer5 = buffer1.writeDecimalLong((-931L));
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer4);
      assertSame(buffer5, buffer3);
      assertSame(buffer5, buffer0);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer5);
      assertSame(buffer1, buffer2);
      assertNotNull(buffer5);
      assertFalse(buffer0.exhausted());
      assertEquals(54L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(54L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(54L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      Buffer buffer6 = buffer0.writeHexadecimalUnsignedLong(1465);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer6);
      assertSame(buffer0, buffer3);
      assertSame(buffer6, buffer1);
      assertSame(buffer6, buffer5);
      assertSame(buffer6, buffer2);
      assertSame(buffer6, buffer0);
      assertSame(buffer6, buffer4);
      assertSame(buffer6, buffer3);
      assertNotNull(buffer6);
      assertEquals(57L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(57L, buffer6.size());
      assertFalse(buffer6.exhausted());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      
      long long1 = buffer3.indexOf(byteString0, (long) (byte)35);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer6);
      assertSame(buffer0, buffer3);
      assertNotSame(byteString0, byteString1);
      assertSame(buffer3, buffer5);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer6);
      assertSame(buffer3, buffer4);
      assertFalse(long1 == long0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals((-1L), long1);
      assertEquals(57L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertFalse(buffer3.exhausted());
      assertEquals(57L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeDecimalLong((-2210L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      long long0 = buffer0.readDecimalLong();
      assertSame(buffer0, buffer1);
      assertEquals((-2210L), long0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      Buffer buffer2 = buffer0.writeShortLe(572);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.size());
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.displayName());
      assertEquals("US-ASCII", charset1.toString());
      assertTrue(charset1.canEncode());
      assertTrue(charset1.isRegistered());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      int int0 = buffer_UnsafeCursor0.next();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(2, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(2, int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      byteArrayOutputStream0.flush();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeDecimalLong(410L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = new Buffer();
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      
      // Undeclared exception!
      try { 
        buffer1.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        buffer0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeShortLe((-664));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      int int1 = buffer0.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertFalse(int1 == int0);
      assertEquals(104, int1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertSame(buffer0, buffer1);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-664));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -664
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeDecimalLong(100000000000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(18L, buffer1.size());
      
      Buffer buffer2 = new Buffer();
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      buffer2.flush();
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertEquals(16, byteString0.size());
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString1 = byteString0.hmacSha1(byteString0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertEquals(20, byteString1.size());
      
      ByteString byteString2 = hashingSource0.hash();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotNull(byteString2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertEquals(16, byteString2.size());
      
      Buffer buffer3 = new Buffer();
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      
      Buffer buffer4 = buffer3.write(byteString0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(byteString0.equals((Object)byteString2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(16L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(16L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      
      ByteString byteString3 = buffer0.sha256();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotNull(byteString3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertEquals(32, byteString3.size());
      
      long long0 = buffer3.indexOf(byteString0, (long) (byte)0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString3);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString3));
      assertTrue(byteString0.equals((Object)byteString2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertEquals(0L, long0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(16L, buffer3.size());
      assertFalse(buffer3.exhausted());
      
      byte byte0 = ObjectStreamConstants.TC_RESET;
      assertEquals((byte)121, byte0);
      
      long long1 = 11L;
      String string0 = buffer2.readUtf8();
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(string0);
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals("", string0);
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      boolean boolean0 = buffer0.rangeEquals(0L, byteString0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString3));
      assertTrue(byteString0.equals((Object)byteString2));
      assertFalse(boolean0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertEquals(16, byteString0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      
      Buffer buffer5 = new Buffer();
      assertNotNull(buffer5);
      assertFalse(buffer5.equals((Object)buffer1));
      assertTrue(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer0));
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(0L, buffer5.size());
      assertTrue(buffer5.exhausted());
      
      OutputStream outputStream0 = buffer5.outputStream();
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer0);
      assertNotNull(outputStream0);
      assertFalse(buffer5.equals((Object)buffer1));
      assertTrue(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer0));
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(0L, buffer5.size());
      assertTrue(buffer5.exhausted());
      
      // Undeclared exception!
      try { 
        buffer2.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeLongLe(100000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      
      String string0 = buffer0.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertNotNull(string0);
      assertEquals("\u0000\uFFFDvH\u0017\u0000\u0000\u0000", string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer2 = buffer1.writeDecimalLong(100000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, buffer1.size());
      assertEquals(12L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Buffer buffer3 = buffer2.buffer();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotNull(buffer3);
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, buffer1.size());
      assertEquals(12L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(12L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      buffer3.flush();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, buffer1.size());
      assertEquals(12L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(12L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotNull(hashingSource0);
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, buffer1.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotNull(byteString0);
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, buffer1.size());
      assertEquals(16, byteString0.size());
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString1 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString1.size());
      
      int int0 = byteString0.indexOf(byteString1, 1630);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals((-1), int0);
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, buffer1.size());
      assertEquals(16, byteString0.size());
      assertEquals(1, byteString1.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      assertNotNull(realBufferedSink0);
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, buffer1.size());
      assertEquals(12L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      ByteString byteString2 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotNull(byteString2);
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, buffer1.size());
      assertEquals(16, byteString2.size());
      
      int int1 = byteString0.compareTo(byteString2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertTrue(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, buffer1.size());
      assertEquals(16, byteString0.size());
      assertEquals(16, byteString2.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      Buffer buffer4 = buffer1.write(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer4);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer0);
      assertNotNull(buffer4);
      assertTrue(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals(28L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(28L, buffer1.size());
      assertEquals(16, byteString0.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(28L, buffer4.size());
      
      Integer integer0 = new Integer(1630);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1630, (int)integer0);
      
      ByteString byteString3 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer4);
      assertNotNull(byteString3);
      assertTrue(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertTrue(byteString3.equals((Object)byteString2));
      assertEquals(28L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString3.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(28L, buffer1.size());
      
      Buffer buffer5 = buffer4.writeUtf8("\u0000\uFFFDvH\u0017\u0000\u0000\u0000");
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertSame(buffer1, buffer4);
      assertSame(buffer5, buffer3);
      assertSame(buffer5, buffer0);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer4);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertSame(buffer4, buffer5);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer0);
      assertNotNull(buffer5);
      assertTrue(byteString0.equals((Object)byteString2));
      assertTrue(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(buffer0.exhausted());
      assertEquals(38L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(38L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(38L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(16, byteString0.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(38L, buffer4.size());
      assertFalse(buffer4.exhausted());
      
      Buffer buffer6 = realBufferedSink0.buffer.writeInt((byte)0);
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer6);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer6);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer2);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer5);
      assertSame(buffer2, buffer4);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer6);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer6);
      assertFalse(buffer6.equals((Object)buffer1));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(38L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(38L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(4L, buffer6.size());
      assertFalse(buffer6.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(38L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      ByteString byteString4 = hashingSource0.hash();
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer6);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer6);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertSame(buffer1, buffer4);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString1);
      assertNotNull(byteString4);
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer1.equals((Object)buffer6));
      assertTrue(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString1));
      assertTrue(byteString4.equals((Object)byteString2));
      assertTrue(byteString4.equals((Object)byteString3));
      assertFalse(buffer0.exhausted());
      assertEquals(38L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(38L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16, byteString4.size());
      
      int int2 = byteString4.lastIndexOf(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer6);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer6);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertSame(buffer1, buffer4);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString1);
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer1.equals((Object)buffer6));
      assertTrue(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString1));
      assertTrue(byteString4.equals((Object)byteString2));
      assertTrue(byteString4.equals((Object)byteString3));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertFalse(buffer0.exhausted());
      assertEquals(38L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(38L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16, byteString4.size());
      
      long long0 = buffer0.indexOfElement(byteString4);
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer6);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer6);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertSame(buffer1, buffer4);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString1);
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer1.equals((Object)buffer6));
      assertTrue(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString1));
      assertTrue(byteString4.equals((Object)byteString2));
      assertTrue(byteString4.equals((Object)byteString3));
      assertEquals(12L, long0);
      assertFalse(buffer0.exhausted());
      assertEquals(38L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(38L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16, byteString4.size());
      
      boolean boolean0 = buffer5.rangeEquals(12L, byteString3);
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer6);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString4);
      assertNotSame(buffer1, buffer6);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertSame(buffer1, buffer4);
      assertSame(buffer5, buffer3);
      assertSame(buffer5, buffer0);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer6);
      assertSame(buffer5, buffer4);
      assertSame(buffer5, buffer1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer6);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer0);
      assertFalse(buffer0.equals((Object)buffer6));
      assertTrue(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertTrue(byteString3.equals((Object)byteString2));
      assertTrue(byteString3.equals((Object)byteString4));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer6));
      assertTrue(byteString0.equals((Object)byteString2));
      assertTrue(byteString0.equals((Object)byteString3));
      assertTrue(byteString0.equals((Object)byteString4));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(buffer4.equals((Object)buffer6));
      assertTrue(boolean0);
      assertFalse(buffer0.exhausted());
      assertEquals(38L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString3.size());
      assertFalse(buffer1.exhausted());
      assertEquals(38L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(38L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(16, byteString0.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(38L, buffer4.size());
      assertFalse(buffer4.exhausted());
      
      boolean boolean1 = realBufferedSink0.buffer.equals(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer6);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer6);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertSame(buffer1, buffer4);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer5);
      assertSame(buffer2, buffer4);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer6);
      assertSame(buffer2, buffer0);
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(buffer2.equals((Object)buffer6));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(buffer0.exhausted());
      assertEquals(38L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(38L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(38L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      // Undeclared exception!
      try { 
        buffer1.indexOfElement(byteString3, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      buffer1.flush();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = buffer0.clone();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertEquals(2L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      buffer0.flush();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer((byte)13);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals(2L, long0);
      assertEquals(13L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-787L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -787
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      buffer1.flush();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      Buffer buffer2 = buffer0.clone();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertEquals(2L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      Buffer buffer3 = buffer2.writeHexadecimalUnsignedLong((-1L));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer2.size());
      assertEquals(2L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(2L, buffer3.completeSegmentByteCount());
      assertEquals(18L, buffer3.size());
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      Buffer buffer4 = realBufferedSource0.buffer();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer2.size());
      assertEquals(2L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      Buffer buffer5 = buffer_UnsafeCursor0.buffer;
      assertNotSame(buffer5, buffer1);
      assertSame(buffer5, buffer3);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer4);
      assertNotNull(buffer5);
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer4));
      assertEquals(2L, buffer5.completeSegmentByteCount());
      assertEquals(18L, buffer5.size());
      assertFalse(buffer5.exhausted());
      
      int int0 = buffer_UnsafeCursor0.next();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertSame(buffer2, buffer5);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(2, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer4));
      assertEquals(2, int0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer2.size());
      assertEquals(2L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      // Undeclared exception!
      try { 
        buffer3.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x2d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeLongLe(100000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      String string0 = buffer0.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertNotNull(string0);
      assertEquals("\u0000\uFFFDvH\u0017\u0000\u0000\u0000", string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = buffer1.writeDecimalLong(100000000000L);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(12L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      Buffer buffer3 = new Buffer();
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      
      buffer3.flush();
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotNull(hashingSource0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      int int2 = ObjectStreamConstants.baseWireHandle;
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8257536, int2);
      
      Integer integer0 = new Integer(971);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(971, (int)integer0);
      
      int int3 = buffer2.readInt();
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(825241648, int3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(8L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = new Buffer();
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      
      buffer2.flush();
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      
      Buffer buffer3 = new Buffer();
      assertNotNull(buffer3);
      assertTrue(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotNull(bufferedSink0);
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(((RealBufferedSink) bufferedSink0).buffer);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer4 = buffer0.writeUtf8("`Lg+Xx(?^*");
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(10L, buffer4.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(6L);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals(10L, long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      String string0 = buffer1.readUtf8Line();
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertNull(string0);
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertTrue(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer2));
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer5 = realBufferedSource0.buffer.writeShortLe((-1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer2);
      assertNotNull(buffer5);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer2));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null, 6L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      byte byte0 = (byte)115;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      
      Buffer buffer2 = new Buffer();
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)115;
      byte[] byteArray1 = new byte[16];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ByteString byteString0 = new ByteString(byteArray1);
      assertNotNull(byteString0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(16, byteString0.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      long long0 = 280375465082866L;
      // Undeclared exception!
      try { 
        buffer1.writeString((String) null, (int) (byte)115, 1420, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)38;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)33, (byte)51, (byte) (-48), (byte)51, (byte)39, (byte)38, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      boolean boolean1 = buffer0.request(12L);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-824L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeString("q+w", charset0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)74;
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)74}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(2, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer1, byteString0);
      assertArrayEquals(new byte[] {(byte)6, (byte)74}, byteArray0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(hashingSource0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2, byteString0.size());
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSink0);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HashingSink hashingSink1 = HashingSink.sha1(hashingSink0);
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotNull(hashingSink1);
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      int int0 = buffer1.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(113, int0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      
      MockFile mockFile1 = new MockFile("q+w");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertEquals("q+w", mockFile1.getName());
      assertFalse(mockFile1.isAbsolute());
      assertFalse(mockFile1.canExecute());
      assertEquals("q+w", mockFile1.toString());
      assertEquals(0L, mockFile1.getTotalSpace());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertEquals("q+w", mockFile1.getName());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertEquals("q+w", mockFile1.toString());
      assertEquals(0L, mockFile1.getTotalSpace());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      
      mockPrintStream0.flush();
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertEquals("q+w", mockFile1.getName());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertEquals("q+w", mockFile1.toString());
      assertEquals(0L, mockFile1.getTotalSpace());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long long0 = buffer1.indexOfElement(byteString0);
      assertArrayEquals(new byte[] {(byte)6, (byte)74}, byteArray0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals((-1L), long0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2, byteString0.size());
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      HashingSource hashingSource1 = HashingSource.hmacSha1(hashingSource0, byteString0);
      assertArrayEquals(new byte[] {(byte)6, (byte)74}, byteArray0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2, byteString0.size());
      
      ByteString byteString1 = hashingSource0.hash();
      assertArrayEquals(new byte[] {(byte)6, (byte)74}, byteArray0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(20, byteString1.size());
      assertEquals(2, byteString0.size());
      
      ByteString byteString2 = buffer0.hmacSha1(byteString0);
      assertArrayEquals(new byte[] {(byte)6, (byte)74}, byteArray0);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertEquals(20, byteString2.size());
      assertEquals(2, byteString0.size());
      
      Buffer buffer2 = buffer1.writeTo((OutputStream) mockPrintStream0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(mockFile1, mockFile0);
      assertNotNull(buffer2);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertEquals("q+w", mockFile1.getName());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertEquals("q+w", mockFile1.toString());
      assertEquals(0L, mockFile1.getTotalSpace());
      
      long long1 = buffer0.completeSegmentByteCount();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer3 = buffer1.buffer();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotNull(buffer3);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeString("q+w", charset0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)74;
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)74}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(2, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer1, byteString0);
      assertArrayEquals(new byte[] {(byte)6, (byte)74}, byteArray0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(hashingSource0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2, byteString0.size());
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      Buffer buffer2 = buffer1.writeByte((byte)6);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Buffer buffer3 = buffer0.buffer();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertNotNull(buffer3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      assertFalse(buffer3.exhausted());
      
      buffer0.flush();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer1);
      assertNotNull(buffer4);
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(4L, buffer4.size());
      assertFalse(buffer4.exhausted());
      
      HashingSource hashingSource1 = HashingSource.md5(buffer0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      HashingSource hashingSource2 = HashingSource.sha256(buffer3);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotSame(hashingSource2, hashingSource0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer3, buffer4);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertNotNull(hashingSource2);
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      assertFalse(buffer3.exhausted());
      
      ByteString byteString1 = hashingSource0.hash();
      assertArrayEquals(new byte[] {(byte)6, (byte)74}, byteArray0);
      assertNotSame(byteString1, byteString0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertEquals(20, byteString1.size());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertEquals(2, byteString0.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteString byteString2 = new ByteString((byte[]) null);
      assertNotNull(byteString2);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      Buffer buffer5 = buffer_UnsafeCursor0.buffer;
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer3);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer4);
      assertSame(buffer5, buffer0);
      assertNotNull(buffer5);
      assertEquals(4L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      
      Buffer buffer6 = buffer5.clone();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer6);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer6);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer4);
      assertSame(buffer5, buffer0);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer5);
      assertNotNull(buffer6);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer6.equals((Object)buffer1));
      assertTrue(buffer6.equals((Object)buffer5));
      assertTrue(buffer6.equals((Object)buffer2));
      assertTrue(buffer6.equals((Object)buffer4));
      assertTrue(buffer6.equals((Object)buffer0));
      assertTrue(buffer6.equals((Object)buffer3));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(4L, buffer6.size());
      assertEquals(4L, buffer6.completeSegmentByteCount());
      assertFalse(buffer6.exhausted());
      
      Buffer buffer7 = buffer3.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)74}, byteArray0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer7);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer6);
      assertSame(buffer7, buffer4);
      assertSame(buffer7, buffer2);
      assertSame(buffer7, buffer0);
      assertSame(buffer7, buffer5);
      assertSame(buffer7, buffer1);
      assertNotSame(buffer7, buffer6);
      assertSame(buffer7, buffer3);
      assertSame(buffer3, buffer4);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer5);
      assertSame(buffer3, buffer7);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer6);
      assertNotNull(buffer7);
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer7.equals((Object)buffer6));
      assertFalse(buffer3.equals((Object)buffer6));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertFalse(buffer7.exhausted());
      assertEquals(6L, buffer7.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(6L, buffer3.size());
      
      HashingSource hashingSource3 = HashingSource.sha256(buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer7);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer6);
      assertNotSame(hashingSource3, hashingSource0);
      assertNotSame(hashingSource3, hashingSource2);
      assertNotSame(hashingSource3, hashingSource1);
      assertSame(buffer4, buffer5);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer7);
      assertSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer6);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer1);
      assertNotNull(hashingSource3);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(hashingSource3.equals((Object)hashingSource0));
      assertFalse(hashingSource3.equals((Object)hashingSource2));
      assertFalse(hashingSource3.equals((Object)hashingSource1));
      assertFalse(buffer4.equals((Object)buffer6));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(6L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      
      String string0 = hashingSource2.toString();
      assertNotSame(hashingSource2, hashingSource1);
      assertNotSame(hashingSource2, hashingSource3);
      assertNotSame(hashingSource2, hashingSource0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer7);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer6);
      assertSame(buffer3, buffer4);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer5);
      assertSame(buffer3, buffer7);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer6);
      assertNotNull(string0);
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertFalse(hashingSource2.equals((Object)hashingSource3));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer3.equals((Object)buffer6));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(6L, buffer3.size());
      
      long long0 = buffer3.indexOfElement(byteString0, (long) 2);
      assertArrayEquals(new byte[] {(byte)6, (byte)74}, byteArray0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer7);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer6);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertSame(buffer3, buffer4);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer5);
      assertSame(buffer3, buffer7);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer6);
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(buffer3.equals((Object)buffer6));
      assertEquals(3L, long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(2, byteString0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(6L, buffer3.size());
      
      ByteString byteString3 = hashingSource3.hash();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer7);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer6);
      assertNotSame(hashingSource3, hashingSource0);
      assertNotSame(hashingSource3, hashingSource2);
      assertNotSame(hashingSource3, hashingSource1);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      assertSame(buffer4, buffer5);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer7);
      assertSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer6);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer1);
      assertNotNull(byteString3);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(hashingSource3.equals((Object)hashingSource0));
      assertFalse(hashingSource3.equals((Object)hashingSource2));
      assertFalse(hashingSource3.equals((Object)hashingSource1));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(buffer4.equals((Object)buffer6));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(32, byteString3.size());
      assertEquals(6L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeLongLe(100000000000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      String string0 = buffer1.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\uFFFD]xEc\u0001", string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      
      Buffer buffer2 = buffer1.writeShortLe((-320));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.size());
      
      int int0 = buffer0.readUtf8CodePoint();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertEquals(65533, int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      
      Buffer buffer3 = buffer2.writeUtf8CodePoint(65533);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotNull(buffer3);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      assertNotNull(realBufferedSource0);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      Buffer buffer4 = new Buffer();
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer4);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotNull(hashingSource0);
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotNull(byteString0);
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      
      MockFile mockFile0 = new MockFile("\u0000\u0000\uFFFD]xEc\u0001");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("\u0000\u0000\uFFFD]xEc\u0001", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals("\u0000\u0000\uFFFD]xEc\u0001", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      
      int int1 = ObjectStreamConstants.baseWireHandle;
      assertFalse(int1 == int0);
      assertEquals(8257536, int1);
      
      boolean boolean0 = buffer4.rangeEquals((-1674L), byteString0);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(boolean0);
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(0, options0.size());
      
      Options options1 = Options.of(byteStringArray0);
      assertNotSame(options1, options0);
      assertNotNull(options1);
      assertTrue(options1.equals((Object)options0));
      assertEquals(0, options1.size());
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("\u0000\u0000\uFFFD]xEc\u0001");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeShort((-438));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      short short0 = buffer1.readShortLe();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals((short)19198, short0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong((short)19198);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      String string0 = buffer2.readUtf8Line();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(string0);
      assertEquals("4afe", string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((short)19198);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      Buffer buffer2 = buffer1.writeLongLe((-331L));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(8L, buffer2.size());
      
      String string0 = buffer2.readUtf8Line();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(string0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals("\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      
      String string1 = buffer2.readUtf8();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(string1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      
      Buffer buffer3 = realBufferedSource0.buffer.writeHexadecimalUnsignedLong(100000000000000000L);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(15L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(15L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(15L, buffer2.size());
      
      Buffer buffer4 = realBufferedSink0.buffer();
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertTrue(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(15L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(15L, buffer2.size());
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer4.readAndWriteUnsafe();
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertTrue(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(15L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(15L, buffer2.size());
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(17662L);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer0));
      assertEquals(0L, long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(15L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(15L, buffer2.size());
      assertFalse(buffer4.exhausted());
      assertEquals(16384L, buffer4.completeSegmentByteCount());
      assertEquals(17662L, buffer4.size());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer_UnsafeCursor0.buffer);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertNotNull(hashingSource0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(15L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(15L, buffer2.size());
      assertFalse(buffer4.exhausted());
      assertEquals(16384L, buffer4.completeSegmentByteCount());
      assertEquals(17662L, buffer4.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertNotNull(byteString0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(15L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(15L, buffer2.size());
      assertFalse(buffer4.exhausted());
      assertEquals(16384L, buffer4.completeSegmentByteCount());
      assertEquals(17662L, buffer4.size());
      assertEquals(16, byteString0.size());
      
      ByteString byteString1 = buffer4.hmacSha1(byteString0);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(15L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(15L, buffer2.size());
      assertFalse(buffer4.exhausted());
      assertEquals(16384L, buffer4.completeSegmentByteCount());
      assertEquals(17662L, buffer4.size());
      assertEquals(16, byteString0.size());
      assertEquals(20, byteString1.size());
      
      long long1 = buffer1.indexOf((byte) (-76));
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertFalse(long1 == long0);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer0));
      assertEquals((-1L), long1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(15L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      Buffer buffer5 = realBufferedSource0.buffer;
      assertNotSame(buffer5, buffer0);
      assertSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer4);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer3);
      assertNotNull(buffer5);
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer4));
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(15L, buffer5.size());
      
      Buffer buffer6 = buffer5.clone();
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer6);
      assertSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer4);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer3);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer4);
      assertNotNull(buffer6);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer4));
      assertTrue(buffer6.equals((Object)buffer3));
      assertTrue(buffer6.equals((Object)buffer1));
      assertTrue(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer0));
      assertTrue(buffer6.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer4));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(15L, buffer5.size());
      assertFalse(buffer6.exhausted());
      assertEquals(15L, buffer6.size());
      assertEquals(15L, buffer6.completeSegmentByteCount());
      
      long long2 = buffer1.completeSegmentByteCount();
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer6));
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(0L, long2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(15L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer4);
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer6));
      assertTrue(buffer2.equals((Object)buffer6));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer5));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer6));
      assertFalse(buffer4.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(15L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(15L, buffer2.size());
      assertFalse(buffer4.exhausted());
      assertEquals(16384L, buffer4.completeSegmentByteCount());
      assertEquals(17662L, buffer4.size());
      
      Buffer buffer7 = realBufferedSource0.buffer();
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer7, buffer6);
      assertSame(buffer7, buffer1);
      assertSame(buffer7, buffer2);
      assertSame(buffer7, buffer3);
      assertNotSame(buffer7, buffer4);
      assertSame(buffer7, buffer5);
      assertNotSame(buffer7, buffer0);
      assertNotNull(buffer7);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer7.equals((Object)buffer4));
      assertTrue(buffer7.equals((Object)buffer6));
      assertFalse(buffer7.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertFalse(buffer7.exhausted());
      assertEquals(15L, buffer7.size());
      
      Buffer buffer8 = realBufferedSource0.buffer();
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer8);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertSame(buffer8, buffer5);
      assertNotSame(buffer8, buffer0);
      assertSame(buffer8, buffer3);
      assertNotSame(buffer8, buffer6);
      assertSame(buffer8, buffer1);
      assertSame(buffer8, buffer7);
      assertNotSame(buffer8, buffer4);
      assertSame(buffer8, buffer2);
      assertNotNull(buffer8);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer8.equals((Object)buffer0));
      assertTrue(buffer8.equals((Object)buffer6));
      assertFalse(buffer8.equals((Object)buffer4));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer8.exhausted());
      assertEquals(0L, buffer8.completeSegmentByteCount());
      assertEquals(15L, buffer8.size());
      
      // Undeclared exception!
      try { 
        buffer8.readUtf8LineStrict((long) (byte) (-76));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -76
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeLongLe(99999999994L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      String string0 = buffer0.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertNotNull(string0);
      assertEquals("\uFFFD\uFFFDvH\u0017\u0000\u0000\u0000", string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = buffer1.writeDecimalLong(99999999994L);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(11L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(11L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(11L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Buffer buffer3 = new Buffer();
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      
      buffer3.flush();
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotNull(hashingSource0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer0.exhausted());
      assertEquals(11L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(11L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer0.exhausted());
      assertEquals(11L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(11L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16, byteString0.size());
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString1 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString1.size());
      
      HashingSource hashingSource1 = HashingSource.hmacSha256(hashingSource0, byteString1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(hashingSource1);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(buffer0.exhausted());
      assertEquals(11L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(11L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1, byteString1.size());
      
      HashingSink hashingSink0 = HashingSink.sha256(buffer3);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotNull(hashingSink0);
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      
      ByteString byteString2 = hashingSink0.hash();
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotNull(byteString2);
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertEquals(32, byteString2.size());
      
      ByteString byteString3 = buffer0.hmacSha1(byteString0);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotNull(byteString3);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(buffer0.exhausted());
      assertEquals(11L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(11L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16, byteString0.size());
      assertEquals(20, byteString3.size());
      
      Buffer buffer4 = buffer2.write(byteString1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer4);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString3);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      assertEquals(12L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1, byteString1.size());
      assertEquals(12L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      
      ByteString byteString4 = buffer0.sha256();
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString0);
      assertNotNull(byteString4);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString2));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString0));
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString4.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      
      BufferedSink bufferedSink0 = realBufferedSink0.emit();
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(bufferedSink0, realBufferedSink0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotNull(bufferedSink0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      
      ByteString byteString5 = hashingSink0.hash();
      assertNotSame(byteString5, byteString1);
      assertNotSame(byteString5, byteString2);
      assertNotSame(byteString5, byteString4);
      assertNotSame(byteString5, byteString3);
      assertNotSame(byteString5, byteString0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotNull(byteString5);
      assertFalse(byteString5.equals((Object)byteString1));
      assertFalse(byteString5.equals((Object)byteString4));
      assertFalse(byteString5.equals((Object)byteString3));
      assertTrue(byteString5.equals((Object)byteString2));
      assertFalse(byteString5.equals((Object)byteString0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertEquals(32, byteString5.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      
      long long0 = buffer2.indexOf(byteString1, 2366L);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer4);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString5);
      assertNotSame(byteString1, byteString4);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(byteString1.equals((Object)byteString5));
      assertFalse(byteString1.equals((Object)byteString4));
      assertEquals((-1L), long0);
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      assertEquals(12L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1, byteString1.size());
      
      MockFile mockFile0 = new MockFile("", "data == null");
      assertNotNull(mockFile0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("data == null", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals("/data == null", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      byte byte0 = ObjectStreamConstants.TC_RESET;
      assertEquals((byte)121, byte0);
      
      HashingSource hashingSource2 = HashingSource.md5(buffer0);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotSame(hashingSource2, hashingSource0);
      assertNotNull(hashingSource2);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer2.write((Source) buffer0, (long) (byte)121);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      
      buffer1.flush();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      
      Buffer buffer2 = buffer0.clone();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      
      Pipe pipe0 = new Pipe(16L);
      assertNotNull(pipe0);
      
      Buffer buffer3 = pipe0.buffer;
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      
      int int0 = buffer_UnsafeCursor0.next();
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(2, buffer_UnsafeCursor0.end);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertEquals(2, int0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      byteArrayOutputStream0.write(buffer_UnsafeCursor0.data);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(2, buffer_UnsafeCursor0.end);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertEquals(8192, byteArrayOutputStream0.size());
      
      Buffer buffer4 = buffer1.copyTo((OutputStream) byteArrayOutputStream0);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer0);
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertEquals(8194, byteArrayOutputStream0.size());
      assertEquals(2L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      
      try { 
        realBufferedSource0.readUtf8((long) 13);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      
      String string0 = realBufferedSink0.buffer.toString();
      assertNotNull(string0);
      assertEquals("[size=0]", string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      boolean boolean0 = realBufferedSink0.closed;
      assertFalse(boolean0);
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      assertEquals("US-ASCII", charset1.toString());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.displayName());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.name());
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      Buffer buffer2 = buffer1.writeShortLe((-18));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      try { 
        buffer1.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 3: 2 (to read code point prefixed 0xffffffee)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteString byteString1 = hashingSource1.hash();
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString1.size());
      
      Timeout timeout0 = hashingSource1.timeout();
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(timeout0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Integer integer0 = new Integer(8257536);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(8257536, (int)integer0);
      
      Buffer buffer1 = realBufferedSink0.buffer.write(byteString0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16L, buffer1.size());
      
      ByteString byteString2 = byteString1.toAsciiLowercase();
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotNull(byteString2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString1.size());
      assertEquals(32, byteString2.size());
      
      HashingSource hashingSource2 = HashingSource.sha256(hashingSource1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(hashingSource1, hashingSource2);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotSame(hashingSource2, hashingSource0);
      assertNotNull(hashingSource2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "endIndex > string.length: ");
      assertFalse(boolean0);
      
      ByteString byteString3 = hashingSource1.hash();
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(hashingSource1, hashingSource2);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      assertNotNull(byteString3);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(hashingSource1.equals((Object)hashingSource2));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertTrue(byteString3.equals((Object)byteString1));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString3.size());
      
      Buffer buffer2 = buffer1.writeShortLe(8257536);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString3);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(18L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(18L, buffer2.size());
      
      Buffer buffer3 = realBufferedSink0.buffer;
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.exhausted());
      assertEquals(18L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      try { 
        buffer3.readUtf8LineStrict(10L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=10 content=d41d8cd98f00b204e9800998ecf8427e0000\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeLongLe(100000000000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      
      String string0 = buffer0.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\uFFFD]xEc\u0001", string0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer2 = (Buffer)buffer0.write((Source) buffer1, (-2189L));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertNotNull(uS_ASCII0);
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.name());
      
      Buffer buffer3 = new Buffer();
      assertNotNull(buffer3);
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer2));
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      
      Buffer buffer4 = buffer3.writeString("\u0000\u0000\uFFFD]xEc\u0001", (Charset) uS_ASCII0);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotNull(buffer4);
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertFalse(buffer3.exhausted());
      assertEquals(8L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(8L, buffer4.size());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)38;
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)38, (byte)38, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(6, byteString0.size());
      
      Buffer buffer5 = buffer2.writeUtf8("\u0000\u0000\uFFFD]xEc\u0001");
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer5, buffer3);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer0);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer4);
      assertNotNull(buffer5);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertEquals(10L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(10L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer5);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertEquals(10L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(10L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer2, byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)38, (byte)38, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer4);
      assertNotNull(hashingSource0);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertEquals(10L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(6, byteString0.size());
      
      ByteString byteString1 = hashingSource0.hash();
      assertArrayEquals(new byte[] {(byte)0, (byte)38, (byte)38, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer4);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertEquals(10L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(6, byteString0.size());
      assertEquals(32, byteString1.size());
      
      Buffer buffer6 = buffer5.write(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)38, (byte)38, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer4);
      assertSame(buffer2, buffer6);
      assertNotSame(byteString0, byteString1);
      assertNotSame(buffer5, buffer3);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer6);
      assertSame(buffer5, buffer0);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer4);
      assertNotSame(byteString1, byteString0);
      assertSame(buffer6, buffer1);
      assertSame(buffer6, buffer0);
      assertSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer4);
      assertSame(buffer6, buffer5);
      assertNotNull(buffer6);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(42L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(42L, buffer1.size());
      assertEquals(42L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(6, byteString0.size());
      assertEquals(42L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(32, byteString1.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertFalse(buffer6.exhausted());
      assertEquals(42L, buffer6.size());
      
      ByteString byteString2 = hashingSource0.hash();
      assertArrayEquals(new byte[] {(byte)0, (byte)38, (byte)38, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer4);
      assertSame(buffer2, buffer6);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString1));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals(32, byteString2.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(42L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(42L, buffer1.size());
      assertEquals(42L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(6, byteString0.size());
      
      Buffer buffer7 = buffer3.writeUtf8("Expected leading [0-9] or '-' character but was 0x");
      assertNotSame(buffer7, buffer2);
      assertNotSame(buffer7, buffer5);
      assertNotSame(buffer7, buffer6);
      assertNotSame(buffer7, buffer0);
      assertSame(buffer7, buffer3);
      assertSame(buffer7, buffer4);
      assertNotSame(buffer7, buffer1);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer6);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer7);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer5);
      assertNotNull(buffer7);
      assertFalse(buffer7.equals((Object)buffer2));
      assertFalse(buffer7.equals((Object)buffer5));
      assertFalse(buffer7.equals((Object)buffer6));
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer6));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(buffer7.exhausted());
      assertEquals(58L, buffer7.size());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(58L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      ByteString byteString3 = hashingSource0.hash();
      assertArrayEquals(new byte[] {(byte)0, (byte)38, (byte)38, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer7);
      assertSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer3);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer7);
      assertSame(buffer2, buffer6);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString1);
      assertNotNull(byteString3);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(byteString3.equals((Object)byteString0));
      assertTrue(byteString3.equals((Object)byteString1));
      assertTrue(byteString3.equals((Object)byteString2));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer7));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(42L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(42L, buffer1.size());
      assertEquals(32, byteString3.size());
      assertEquals(42L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(6, byteString0.size());
      
      int int0 = byteString1.lastIndexOf(byteArray0, 8);
      assertArrayEquals(new byte[] {(byte)0, (byte)38, (byte)38, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer7);
      assertSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer7);
      assertSame(buffer2, buffer6);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString2);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer7));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(byteString1.equals((Object)byteString2));
      assertTrue(byteString1.equals((Object)byteString3));
      assertEquals((-1), int0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(42L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(42L, buffer1.size());
      assertEquals(42L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(6, byteString0.size());
      assertEquals(32, byteString1.size());
      
      Integer integer0 = new Integer((byte)38);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(38, (int)integer0);
      
      Buffer buffer8 = realBufferedSource0.buffer();
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer8);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer8);
      assertNotSame(buffer1, buffer7);
      assertSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer8);
      assertNotSame(buffer2, buffer7);
      assertSame(buffer2, buffer6);
      assertNotSame(buffer8, buffer7);
      assertNotSame(buffer8, buffer1);
      assertNotSame(buffer8, buffer6);
      assertNotSame(buffer8, buffer5);
      assertNotSame(buffer8, buffer4);
      assertNotSame(buffer8, buffer0);
      assertNotSame(buffer8, buffer2);
      assertNotSame(buffer8, buffer3);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer7);
      assertNotSame(buffer5, buffer8);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer6);
      assertSame(buffer5, buffer0);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer4);
      assertNotNull(buffer8);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer7));
      assertFalse(buffer8.equals((Object)buffer7));
      assertFalse(buffer8.equals((Object)buffer1));
      assertFalse(buffer8.equals((Object)buffer6));
      assertFalse(buffer8.equals((Object)buffer5));
      assertFalse(buffer8.equals((Object)buffer4));
      assertFalse(buffer8.equals((Object)buffer0));
      assertFalse(buffer8.equals((Object)buffer2));
      assertFalse(buffer8.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer7));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(42L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(42L, buffer1.size());
      assertEquals(42L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer8.size());
      assertTrue(buffer8.exhausted());
      assertEquals(0L, buffer8.completeSegmentByteCount());
      assertEquals(42L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      
      boolean boolean0 = buffer0.equals(buffer5);
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer8);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer8);
      assertNotSame(buffer1, buffer7);
      assertSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer8);
      assertNotSame(buffer2, buffer7);
      assertSame(buffer2, buffer6);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer7);
      assertNotSame(buffer5, buffer8);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer6);
      assertSame(buffer5, buffer0);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer4);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer8));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer8));
      assertFalse(buffer1.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer8));
      assertFalse(buffer2.equals((Object)buffer7));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer7));
      assertFalse(buffer5.equals((Object)buffer8));
      assertFalse(buffer5.equals((Object)buffer4));
      assertTrue(boolean0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(42L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(42L, buffer1.size());
      assertEquals(42L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(42L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      
      Buffer buffer9 = realBufferedSource0.buffer;
      assertNotSame(buffer9, buffer6);
      assertNotSame(buffer9, buffer3);
      assertNotSame(buffer9, buffer1);
      assertNotSame(buffer9, buffer0);
      assertNotSame(buffer9, buffer4);
      assertNotSame(buffer9, buffer2);
      assertSame(buffer9, buffer8);
      assertNotSame(buffer9, buffer5);
      assertNotSame(buffer9, buffer7);
      assertNotNull(buffer9);
      assertFalse(buffer9.equals((Object)buffer6));
      assertFalse(buffer9.equals((Object)buffer3));
      assertFalse(buffer9.equals((Object)buffer1));
      assertFalse(buffer9.equals((Object)buffer0));
      assertFalse(buffer9.equals((Object)buffer4));
      assertFalse(buffer9.equals((Object)buffer2));
      assertFalse(buffer9.equals((Object)buffer5));
      assertFalse(buffer9.equals((Object)buffer7));
      assertEquals(0L, buffer9.completeSegmentByteCount());
      assertEquals(0L, buffer9.size());
      assertTrue(buffer9.exhausted());
      
      long long0 = buffer2.indexOfElement(byteString1, (long) (byte)38);
      assertArrayEquals(new byte[] {(byte)0, (byte)38, (byte)38, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer9);
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer8);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer8);
      assertNotSame(buffer1, buffer7);
      assertSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer9);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer2, buffer9);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer8);
      assertNotSame(buffer2, buffer7);
      assertSame(buffer2, buffer6);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString2);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer9));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer8));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer8));
      assertFalse(buffer1.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer9));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer9));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer8));
      assertFalse(buffer2.equals((Object)buffer7));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(byteString1.equals((Object)byteString2));
      assertTrue(byteString1.equals((Object)byteString3));
      assertEquals(38L, long0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(42L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(42L, buffer1.size());
      assertEquals(42L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(6, byteString0.size());
      assertEquals(32, byteString1.size());
      
      long long1 = buffer7.completeSegmentByteCount();
      assertNotSame(buffer7, buffer2);
      assertNotSame(buffer7, buffer5);
      assertNotSame(buffer7, buffer6);
      assertNotSame(buffer7, buffer0);
      assertSame(buffer7, buffer3);
      assertSame(buffer7, buffer4);
      assertNotSame(buffer7, buffer1);
      assertNotSame(buffer7, buffer8);
      assertNotSame(buffer7, buffer9);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer6);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer7);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer5);
      assertNotSame(buffer3, buffer8);
      assertNotSame(buffer3, buffer9);
      assertFalse(buffer7.equals((Object)buffer2));
      assertFalse(buffer7.equals((Object)buffer5));
      assertFalse(buffer7.equals((Object)buffer6));
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer1));
      assertFalse(buffer7.equals((Object)buffer8));
      assertFalse(buffer7.equals((Object)buffer9));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer6));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(buffer3.equals((Object)buffer8));
      assertFalse(buffer3.equals((Object)buffer9));
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      assertFalse(buffer7.exhausted());
      assertEquals(58L, buffer7.size());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(58L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      Buffer buffer10 = realBufferedSource0.buffer;
      assertNotSame(buffer10, buffer7);
      assertNotSame(buffer10, buffer6);
      assertNotSame(buffer10, buffer5);
      assertSame(buffer10, buffer8);
      assertNotSame(buffer10, buffer0);
      assertNotSame(buffer10, buffer2);
      assertNotSame(buffer10, buffer4);
      assertSame(buffer10, buffer9);
      assertNotSame(buffer10, buffer1);
      assertNotSame(buffer10, buffer3);
      assertNotNull(buffer10);
      assertFalse(buffer10.equals((Object)buffer7));
      assertFalse(buffer10.equals((Object)buffer6));
      assertFalse(buffer10.equals((Object)buffer5));
      assertFalse(buffer10.equals((Object)buffer0));
      assertFalse(buffer10.equals((Object)buffer2));
      assertFalse(buffer10.equals((Object)buffer4));
      assertFalse(buffer10.equals((Object)buffer1));
      assertFalse(buffer10.equals((Object)buffer3));
      assertTrue(buffer10.exhausted());
      assertEquals(0L, buffer10.size());
      assertEquals(0L, buffer10.completeSegmentByteCount());
      
      int int1 = buffer6.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-17), (byte) (-65), (byte) (-67), (byte)93}, byteArray0);
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer9);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer10);
      assertSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer8);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer8);
      assertNotSame(buffer1, buffer10);
      assertNotSame(buffer1, buffer7);
      assertSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer9);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer2, buffer9);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer8);
      assertNotSame(buffer2, buffer10);
      assertNotSame(buffer2, buffer7);
      assertSame(buffer2, buffer6);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString1);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer10);
      assertNotSame(buffer5, buffer7);
      assertNotSame(buffer5, buffer8);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer6);
      assertSame(buffer5, buffer0);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer9);
      assertNotSame(buffer5, buffer4);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString2);
      assertSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer7);
      assertSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer10);
      assertNotSame(buffer6, buffer8);
      assertSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer9);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer4);
      assertSame(buffer6, buffer5);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer9));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer10));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer8));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer8));
      assertFalse(buffer1.equals((Object)buffer10));
      assertFalse(buffer1.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer9));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer9));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer8));
      assertFalse(buffer2.equals((Object)buffer10));
      assertFalse(buffer2.equals((Object)buffer7));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(int1 == int0);
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer10));
      assertFalse(buffer5.equals((Object)buffer7));
      assertFalse(buffer5.equals((Object)buffer8));
      assertFalse(buffer5.equals((Object)buffer9));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(byteString1.equals((Object)byteString2));
      assertTrue(byteString1.equals((Object)byteString3));
      assertFalse(buffer6.equals((Object)buffer7));
      assertFalse(buffer6.equals((Object)buffer10));
      assertFalse(buffer6.equals((Object)buffer8));
      assertFalse(buffer6.equals((Object)buffer9));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer4));
      assertEquals(6, int1);
      assertFalse(buffer0.exhausted());
      assertEquals(36L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(36L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(36L, buffer2.size());
      assertEquals(6, byteString0.size());
      assertFalse(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(36L, buffer5.size());
      assertEquals(32, byteString1.size());
      assertEquals(36L, buffer6.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertFalse(buffer6.exhausted());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      Segment segment0 = buffer0.writableSegment(46);
      assertNotSame(buffer0, buffer1);
      assertNotNull(segment0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotSame(buffer0, buffer1);
      assertNotNull(byteString0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      
      Segment segment1 = new Segment();
      assertNotNull(segment1);
      assertFalse(segment1.equals((Object)segment0));
      
      segment0.prev = segment1;
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString1.size());
      
      buffer1.head = segment0;
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      ByteString byteString2 = hashingSource0.hash();
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotNull(byteString2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(byteString2.equals((Object)byteString1));
      assertTrue(byteString2.equals((Object)byteString0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString2.size());
      
      ByteString byteString3 = hashingSource0.hash();
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertNotNull(byteString3);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(byteString3.equals((Object)byteString1));
      assertTrue(byteString3.equals((Object)byteString0));
      assertTrue(byteString3.equals((Object)byteString2));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString3.size());
      
      ByteString byteString4 = buffer0.sha256();
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString4, byteString1);
      assertNotNull(byteString4);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString2));
      assertFalse(byteString4.equals((Object)byteString1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString4.size());
      
      Buffer buffer2 = buffer0.writeUtf8CodePoint(2660);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(3L, buffer2.size());
      
      // Undeclared exception!
      buffer2.readUtf8CodePoint();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeDecimalLong(100000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      Buffer buffer2 = buffer1.writeTo((OutputStream) printStream0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeLongLe(100000000000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      String string0 = buffer0.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\uFFFD]xEc\u0001", string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      
      Buffer buffer2 = buffer1.writeString("\u0000\u0000\uFFFD]xEc\u0001", charset0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(8L, buffer2.size());
      
      Buffer buffer3 = buffer1.writeDecimalLong(999999978L);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertNotNull(buffer3);
      assertEquals(17L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(17L, buffer1.size());
      assertFalse(buffer3.exhausted());
      assertEquals(17L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      try { 
        buffer3.require(100000000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      buffer0.flush();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.clone();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer2 = realBufferedSink0.buffer.writeLong(2680L);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(8L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      Segment segment0 = buffer0.head;
      assertNull(segment0);
      
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.emitCompleteSegments();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertNotNull(realBufferedSink1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotNull(byteString0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(16, byteString0.size());
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(16, byteString0.size());
      assertEquals(16, byteString1.size());
      
      Buffer buffer3 = realBufferedSink1.buffer;
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.exhausted());
      assertEquals(8L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      HashingSource hashingSource1 = HashingSource.sha256(buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(hashingSource1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(8L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HashingSource hashingSource2 = HashingSource.sha1(buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(hashingSource2, hashingSource0);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotNull(hashingSource2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(8L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      ByteString byteString2 = hashingSource1.hash();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(hashingSource1, hashingSource2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotNull(byteString2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(hashingSource1.equals((Object)hashingSource2));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(8L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(32, byteString2.size());
      
      Buffer buffer4 = realBufferedSink1.buffer();
      assertSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertSame(buffer4, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(8L, buffer4.size());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString3 = buffer0.sha256();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      assertNotNull(byteString3);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString3.size());
      
      String string1 = buffer2.readUtf8LineStrict((long) 1017);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertNotNull(string1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(1L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      ByteString byteString4 = buffer2.sha256();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString1);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertNotNull(byteString4);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(byteString4.equals((Object)byteString2));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString4.size());
      assertEquals(1L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      ByteString byteString5 = hashingSource2.hash();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString5, byteString2);
      assertNotSame(byteString5, byteString0);
      assertNotSame(byteString5, byteString3);
      assertNotSame(byteString5, byteString4);
      assertNotSame(byteString5, byteString1);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertNotSame(hashingSource2, hashingSource0);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotNull(byteString5);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(byteString5.equals((Object)byteString2));
      assertFalse(byteString5.equals((Object)byteString0));
      assertFalse(byteString5.equals((Object)byteString3));
      assertFalse(byteString5.equals((Object)byteString4));
      assertFalse(byteString5.equals((Object)byteString1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString5.size());
      assertEquals(1L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      
      String string0 = realBufferedSink0.buffer.toString();
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotNull(string0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer2));
      assertEquals("[size=0]", string0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      ByteString byteString0 = buffer0.readByteString();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotNull(byteString0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      
      MockFile mockFile0 = new MockFile("bn");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("bn", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("bn", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      assertEquals("US-ASCII", charset1.toString());
      assertTrue(charset1.canEncode());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.displayName());
      assertEquals("US-ASCII", charset1.name());
      
      long long0 = realBufferedSink0.buffer.completeSegmentByteCount();
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer2));
      assertEquals(0L, long0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      Buffer buffer3 = realBufferedSink0.buffer.writeDecimalLong(1000000000000000L);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotNull(buffer3);
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(16L, buffer3.size());
      assertFalse(buffer3.exhausted());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      String string0 = buffer0.readUtf8Line();
      assertNotSame(buffer0, buffer1);
      assertNull(string0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = new Buffer();
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      
      buffer2.clear();
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotNull(hashingSource0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer2));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotNull(byteString0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer2));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(16, byteString0.size());
      
      byte[] byteArray0 = new byte[1];
      int int0 = byteString0.lastIndexOf(byteArray0, 46);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer2));
      assertEquals(5, int0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(16, byteString0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = byteString0.utf8();
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotNull(string1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer2));
      assertEquals("\uFFFD\u001D\uFFFD\u064F\u0000\uFFFD\u0004\uFFFD\t\uFFFD\uFFFD\uFFFDB~", string1);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(16, byteString0.size());
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(16, byteString1.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      
      ByteString byteString2 = hashingSource0.hash();
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotNull(byteString2);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString1));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(16, byteString2.size());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/xI[.ZmFj1/xI[.ZmFj1");
      buffer2.head = segment0;
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(46, (int)integer0);
      
      ByteString byteString3 = hashingSource0.hash();
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      assertNotNull(byteString3);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(byteString3.equals((Object)byteString1));
      assertTrue(byteString3.equals((Object)byteString2));
      assertTrue(byteString3.equals((Object)byteString0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(16, byteString3.size());
      
      long long0 = (-69L);
      boolean boolean2 = realBufferedSink0.buffer.rangeEquals((-69L), byteString0, 46, 46);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(byteString0.equals((Object)byteString1));
      assertTrue(byteString0.equals((Object)byteString2));
      assertTrue(byteString0.equals((Object)byteString3));
      assertFalse(boolean2);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(16, byteString0.size());
      
      // Undeclared exception!
      try { 
        buffer2.sha256();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      String string0 = buffer0.readUtf8Line();
      assertNotSame(buffer0, buffer1);
      assertNull(string0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer2 = new Buffer();
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      
      buffer2.clear();
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      
      Segment segment0 = buffer0.writableSegment(46);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotNull(segment0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotNull(hashingSource0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer2));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotNull(byteString0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer2));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(16, byteString0.size());
      
      Buffer buffer3 = buffer1.writeLong(70L);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotNull(buffer3);
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(8L, buffer3.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotNull(bufferedSink0);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer4 = buffer3.writeUtf8("");
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertNotNull(buffer4);
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(8L, buffer3.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(8L, buffer4.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer4.readAndWriteUnsafe();
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(8L, buffer3.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(8L, buffer4.size());
      
      long long0 = buffer_UnsafeCursor0.offset;
      assertEquals((-1L), long0);
      
      String string1 = realBufferedSink0.buffer.readUtf8Line();
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNull(string1);
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      
      long long1 = buffer_UnsafeCursor0.resizeBuffer(65536L);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(long1 == long0);
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertEquals(8L, long1);
      assertEquals(65536L, buffer1.completeSegmentByteCount());
      assertEquals(65536L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(65536L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(65536L, buffer3.completeSegmentByteCount());
      assertEquals(65536L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(65536L, buffer4.completeSegmentByteCount());
      
      ByteString byteString1 = buffer2.hmacSha1(byteString0);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertNotSame(byteString0, byteString1);
      assertNotNull(byteString1);
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(65536L, buffer1.completeSegmentByteCount());
      assertEquals(65536L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(20, byteString1.size());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(16, byteString0.size());
      
      Buffer buffer5 = realBufferedSink0.buffer;
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer2);
      assertNotNull(buffer5);
      assertTrue(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer1));
      assertTrue(buffer5.equals((Object)buffer0));
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      
      long long2 = buffer5.indexOf((byte)13);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertSame(realBufferedSink0, bufferedSink0);
      assertTrue(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer1));
      assertTrue(buffer5.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer5));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals((-1L), long2);
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      
      Buffer buffer6 = buffer5.clone();
      assertNotSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer6);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer5);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotNull(buffer6);
      assertTrue(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer1));
      assertTrue(buffer5.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer5));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer4));
      assertTrue(buffer6.equals((Object)buffer0));
      assertTrue(buffer6.equals((Object)buffer2));
      assertTrue(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer1));
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertTrue(buffer6.exhausted());
      assertEquals(0L, buffer6.size());
      
      long long3 = buffer3.completeSegmentByteCount();
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer5);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer6);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer5);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer6);
      assertNotSame(buffer3, buffer2);
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer6));
      assertFalse(buffer3.equals((Object)buffer2));
      assertEquals(65536L, long3);
      assertEquals(65536L, buffer1.completeSegmentByteCount());
      assertEquals(65536L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(65536L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(65536L, buffer3.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer6.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(2, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      assertNotNull(hashingSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      HashingSink hashingSink1 = HashingSink.hmacSha1(buffer0, byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotNull(hashingSink1);
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString1);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(2, byteString1.size());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = realBufferedSource0.buffer.write(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotSame(byteString1, byteString0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertTrue(byteString1.equals((Object)byteString0));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(2, byteString1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      Buffer buffer3 = realBufferedSource0.buffer;
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(2L, buffer3.size());
      
      Buffer buffer4 = realBufferedSource0.buffer();
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer3);
      assertNotNull(buffer4);
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(2L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      int int0 = buffer_UnsafeCursor0.next();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertEquals((-1), int0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      long long0 = buffer0.completeSegmentByteCount();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertEquals(0L, long0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer5 = buffer_UnsafeCursor0.buffer;
      assertNotSame(buffer5, buffer2);
      assertSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer1);
      assertNotNull(buffer5);
      assertFalse(buffer5.equals((Object)buffer2));
      assertTrue(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer4));
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      
      Buffer buffer6 = buffer4.writeDecimalLong(0L);
      assertSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer0);
      assertSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer1);
      assertSame(buffer6, buffer3);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer5);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer6);
      assertNotNull(buffer6);
      assertFalse(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer5));
      assertFalse(buffer6.exhausted());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(3L, buffer6.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(3L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      
      Buffer buffer7 = realBufferedSource0.buffer.writeDecimalLong(71776119061217280L);
      assertNotSame(buffer7, buffer0);
      assertSame(buffer7, buffer6);
      assertSame(buffer7, buffer3);
      assertNotSame(buffer7, buffer1);
      assertNotSame(buffer7, buffer5);
      assertSame(buffer7, buffer4);
      assertSame(buffer7, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer7);
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer1));
      assertFalse(buffer7.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer6));
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertFalse(buffer7.exhausted());
      assertEquals(20L, buffer7.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer2.readUtf8(2533L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=20 offset=0 byteCount=2533
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      long long0 = 100000000000L;
      Buffer buffer1 = buffer0.writeLongLe(100000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      String string0 = buffer0.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertNotNull(string0);
      assertEquals("\u0000\uFFFDvH\u0017\u0000\u0000\u0000", string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer2 = buffer1.writeDecimalLong(100000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(12L, buffer2.size());
      
      buffer1.flush();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotNull(hashingSource0);
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotNull(byteString0);
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      assertEquals(16, byteString0.size());
      
      Buffer buffer3 = buffer1.writeShortLe((-2126429885));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotNull(buffer3);
      assertEquals(14L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(14L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(14L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      Buffer buffer4 = buffer3.writeIntLe((-2126429885));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer4);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer4);
      assertSame(buffer3, buffer0);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertNotNull(buffer4);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertEquals(18L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(18L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(18L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      
      ByteString byteString1 = buffer4.sha1();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer4);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer4);
      assertSame(buffer3, buffer0);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(18L, buffer0.size());
      assertEquals(18L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(18L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(18L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(20, byteString1.size());
      
      long long1 = buffer2.readLongLe();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer4);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer4);
      assertFalse(long1 == long0);
      assertEquals(3472328296227680305L, long1);
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(10L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      Buffer buffer5 = new Buffer();
      assertNotNull(buffer5);
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer2));
      assertEquals(0L, buffer5.size());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      
      Buffer buffer6 = buffer0.writeHexadecimalUnsignedLong((-72057594037927936L));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer6);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer6, buffer4);
      assertSame(buffer6, buffer2);
      assertSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer5);
      assertSame(buffer6, buffer0);
      assertSame(buffer6, buffer3);
      assertNotNull(buffer6);
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer5));
      assertFalse(buffer0.exhausted());
      assertEquals(26L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(26L, buffer6.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertFalse(buffer6.exhausted());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      long long2 = buffer6.readHexadecimalUnsignedLong();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer6);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer6, buffer4);
      assertSame(buffer6, buffer2);
      assertSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer5);
      assertSame(buffer6, buffer0);
      assertSame(buffer6, buffer3);
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer5));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(830634L, long2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertFalse(buffer6.exhausted());
      assertEquals(17L, buffer6.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer5.readUnsafe();
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer2);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer2));
      assertEquals(0L, buffer5.size());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer2.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeLongLe(2703L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      String string0 = buffer1.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(string0);
      assertEquals("\uFFFD", string0);
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      buffer0.flush();
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = buffer1.clone();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(6L, buffer2.completeSegmentByteCount());
      assertEquals(6L, buffer2.size());
      
      buffer2.flush();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(6L, buffer2.completeSegmentByteCount());
      assertEquals(6L, buffer2.size());
      
      Buffer buffer3 = new Buffer();
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(6L, buffer2.completeSegmentByteCount());
      assertEquals(6L, buffer2.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(6L, buffer2.completeSegmentByteCount());
      assertEquals(6L, buffer2.size());
      
      Buffer buffer4 = realBufferedSource0.buffer;
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer0));
      assertTrue(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer4.readAndWriteUnsafe();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertTrue(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(6L, buffer2.completeSegmentByteCount());
      assertEquals(6L, buffer2.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      
      long long0 = 0L;
      long long1 = buffer_UnsafeCursor0.resizeBuffer(0L);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertTrue(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(6L, buffer2.completeSegmentByteCount());
      assertEquals(6L, buffer2.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeShortLe(8257536);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotNull(bufferedSink0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(6L, buffer2.completeSegmentByteCount());
      assertEquals(6L, buffer2.size());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hiFRy/Fio");
      assertFalse(boolean0);
      
      String string1 = realBufferedSink0.toString();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertTrue(buffer2.equals((Object)buffer1));
      assertEquals("buffer([hex=000000000000])", string1);
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(6L, buffer2.completeSegmentByteCount());
      assertEquals(6L, buffer2.size());
      
      ByteString byteString0 = buffer2.readByteString();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer4));
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6, byteString0.size());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      ByteString byteString1 = ((RealBufferedSink) bufferedSink0).buffer.sha256();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString1, byteString0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotNull(byteString1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer4));
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      try { 
        buffer2.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      String string0 = buffer0.readUtf8Line();
      assertNotSame(buffer0, buffer1);
      assertNull(string0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer2 = new Buffer();
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      
      Segment segment0 = buffer0.writableSegment(46);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotNull(segment0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/xI[.ZmFj1/xI[.ZmFj1");
      buffer2.head = segment0;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      Buffer buffer3 = buffer2.writeUtf8("");
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotNull(buffer3);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer1));
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      
      int int0 = buffer_UnsafeCursor0.next();
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertEquals((-1), int0);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(16L);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(16, buffer_UnsafeCursor0.end);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(0L, long0);
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(16L, buffer2.size());
      
      // Undeclared exception!
      try { 
        buffer3.readByteArray(1000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=16 offset=0 byteCount=1000000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeLongLe(2703L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      String string0 = buffer1.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(string0);
      assertEquals("\uFFFD", string0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      
      buffer0.flush();
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      
      Buffer buffer2 = buffer1.clone();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      assertEquals(6L, buffer2.size());
      assertEquals(6L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      
      Buffer buffer3 = buffer2.writeLong(2703L);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      assertEquals(6L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(14L, buffer2.size());
      assertFalse(buffer3.exhausted());
      assertEquals(14L, buffer3.size());
      assertEquals(6L, buffer3.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.emitCompleteSegments();
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertNotNull(realBufferedSink1);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer4 = buffer0.writeUtf8("\uFFFD");
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      
      String string1 = buffer2.readUtf8Line();
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer4);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotNull(string1);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(9L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(1L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Pipe pipe0 = new Pipe(1186L);
      assertNotNull(pipe0);
      
      Buffer buffer5 = pipe0.buffer;
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer2);
      assertNotNull(buffer5);
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer2));
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      
      InputStream inputStream0 = buffer2.inputStream();
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer5);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotNull(inputStream0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer5));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(9L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(1L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      pipe0.sourceClosed = true;
      boolean boolean0 = realBufferedSink1.buffer.request(0L);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertSame(buffer1, buffer0);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer5));
      assertTrue(boolean0);
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(9L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      buffer5.clear();
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer2);
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer2));
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      
      Buffer buffer6 = realBufferedSink1.buffer;
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer4);
      assertNotNull(buffer6);
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer0));
      assertTrue(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer1));
      assertFalse(buffer6.equals((Object)buffer4));
      assertEquals(0L, buffer6.size());
      assertTrue(buffer6.exhausted());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertNotNull(uS_ASCII0);
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.canEncode());
      
      US_ASCII uS_ASCII1 = (US_ASCII)Charset.defaultCharset();
      assertSame(uS_ASCII1, uS_ASCII0);
      assertNotNull(uS_ASCII1);
      assertEquals("US-ASCII", uS_ASCII1.displayName());
      assertTrue(uS_ASCII1.canEncode());
      assertEquals("US-ASCII", uS_ASCII1.toString());
      assertTrue(uS_ASCII1.isRegistered());
      assertEquals("US-ASCII", uS_ASCII1.name());
      
      RealBufferedSink realBufferedSink2 = (RealBufferedSink)realBufferedSink0.writeString("=(/<&EQ7V,.inU@8)0,", (Charset) uS_ASCII0);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer6);
      assertSame(buffer1, buffer0);
      assertSame(uS_ASCII0, uS_ASCII1);
      assertSame(realBufferedSink2, realBufferedSink0);
      assertSame(realBufferedSink2, realBufferedSink1);
      assertSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertNotNull(realBufferedSink2);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer6));
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(9L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.canEncode());
      
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(buffer5);
      assertNotNull(realBufferedSink3);
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer2));
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      
      Buffer buffer7 = realBufferedSink1.buffer;
      assertNotSame(buffer7, buffer5);
      assertNotSame(buffer7, buffer2);
      assertNotSame(buffer7, buffer3);
      assertSame(buffer7, buffer6);
      assertNotSame(buffer7, buffer4);
      assertNotSame(buffer7, buffer1);
      assertNotSame(buffer7, buffer0);
      assertNotNull(buffer7);
      assertFalse(buffer7.equals((Object)buffer5));
      assertFalse(buffer7.equals((Object)buffer2));
      assertFalse(buffer7.equals((Object)buffer3));
      assertFalse(buffer7.equals((Object)buffer4));
      assertFalse(buffer7.equals((Object)buffer1));
      assertFalse(buffer7.equals((Object)buffer0));
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertEquals(19L, buffer7.size());
      assertFalse(buffer7.exhausted());
      
      ByteString byteString0 = buffer4.sha256();
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer6);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer7);
      assertNotSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer2);
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer6));
      assertFalse(buffer4.equals((Object)buffer7));
      assertFalse(buffer4.equals((Object)buffer5));
      assertFalse(buffer4.equals((Object)buffer2));
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(9L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      
      Buffer buffer8 = realBufferedSink3.buffer.writeUtf8CodePoint(37);
      assertNotSame(realBufferedSink3, realBufferedSink0);
      assertNotSame(realBufferedSink3, realBufferedSink1);
      assertNotSame(realBufferedSink3, realBufferedSink2);
      assertNotSame(buffer8, buffer0);
      assertNotSame(buffer8, buffer2);
      assertNotSame(buffer8, buffer6);
      assertNotSame(buffer8, buffer7);
      assertNotSame(buffer8, buffer3);
      assertNotSame(buffer8, buffer4);
      assertNotSame(buffer8, buffer5);
      assertNotSame(buffer8, buffer1);
      assertNotSame(buffer5, buffer7);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer8);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer2);
      assertNotNull(buffer8);
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertFalse(buffer8.equals((Object)buffer0));
      assertFalse(buffer8.equals((Object)buffer2));
      assertFalse(buffer8.equals((Object)buffer6));
      assertFalse(buffer8.equals((Object)buffer7));
      assertFalse(buffer8.equals((Object)buffer3));
      assertFalse(buffer8.equals((Object)buffer4));
      assertFalse(buffer8.equals((Object)buffer5));
      assertFalse(buffer8.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer7));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer8.exhausted());
      assertEquals(0L, buffer8.completeSegmentByteCount());
      assertEquals(1L, buffer8.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      
      Buffer buffer9 = realBufferedSink3.buffer.write(byteString0);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer9);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer8);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer6);
      assertNotSame(realBufferedSink3, realBufferedSink0);
      assertNotSame(realBufferedSink3, realBufferedSink1);
      assertNotSame(realBufferedSink3, realBufferedSink2);
      assertSame(buffer9, buffer8);
      assertNotSame(buffer9, buffer3);
      assertNotSame(buffer9, buffer7);
      assertNotSame(buffer9, buffer0);
      assertNotSame(buffer9, buffer5);
      assertNotSame(buffer9, buffer6);
      assertNotSame(buffer9, buffer4);
      assertNotSame(buffer9, buffer1);
      assertNotSame(buffer9, buffer2);
      assertNotSame(buffer4, buffer9);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer8);
      assertNotSame(buffer4, buffer6);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer7);
      assertNotSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer5, buffer7);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer9);
      assertNotSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer8);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer2);
      assertNotNull(buffer9);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer8));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertFalse(buffer9.equals((Object)buffer3));
      assertFalse(buffer9.equals((Object)buffer7));
      assertFalse(buffer9.equals((Object)buffer0));
      assertFalse(buffer9.equals((Object)buffer5));
      assertFalse(buffer9.equals((Object)buffer6));
      assertFalse(buffer9.equals((Object)buffer4));
      assertFalse(buffer9.equals((Object)buffer1));
      assertFalse(buffer9.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer8));
      assertFalse(buffer4.equals((Object)buffer6));
      assertFalse(buffer4.equals((Object)buffer7));
      assertFalse(buffer4.equals((Object)buffer5));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer7));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer8));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer2));
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(0L, buffer9.completeSegmentByteCount());
      assertFalse(buffer9.exhausted());
      assertEquals(33L, buffer9.size());
      assertEquals(9L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink3.buffer);
      assertNotNull(realBufferedSource0);
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertFalse(buffer5.equals((Object)buffer7));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer9));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer8));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer2));
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      
      Buffer buffer10 = realBufferedSource0.buffer();
      assertNotSame(realBufferedSink3, realBufferedSink0);
      assertNotSame(realBufferedSink3, realBufferedSink1);
      assertNotSame(realBufferedSink3, realBufferedSink2);
      assertNotSame(buffer10, buffer2);
      assertNotSame(buffer10, buffer5);
      assertNotSame(buffer10, buffer0);
      assertNotSame(buffer10, buffer6);
      assertNotSame(buffer10, buffer4);
      assertNotSame(buffer10, buffer1);
      assertNotSame(buffer10, buffer3);
      assertNotSame(buffer10, buffer8);
      assertNotSame(buffer10, buffer7);
      assertNotSame(buffer10, buffer9);
      assertNotSame(buffer5, buffer7);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer9);
      assertNotSame(buffer5, buffer10);
      assertNotSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer8);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer2);
      assertNotNull(buffer10);
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertFalse(buffer10.equals((Object)buffer2));
      assertFalse(buffer10.equals((Object)buffer0));
      assertFalse(buffer10.equals((Object)buffer6));
      assertFalse(buffer10.equals((Object)buffer4));
      assertFalse(buffer10.equals((Object)buffer1));
      assertFalse(buffer10.equals((Object)buffer3));
      assertTrue(buffer10.equals((Object)buffer5));
      assertFalse(buffer10.equals((Object)buffer8));
      assertFalse(buffer10.equals((Object)buffer7));
      assertFalse(buffer10.equals((Object)buffer9));
      assertFalse(buffer5.equals((Object)buffer7));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer9));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer8));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer2));
      assertEquals(0L, buffer10.size());
      assertTrue(buffer10.exhausted());
      assertEquals(0L, buffer10.completeSegmentByteCount());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      int int1 = buffer2.hashCode();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer9);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer8);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer10);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer8);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer10);
      assertNotSame(buffer1, buffer9);
      assertNotSame(buffer1, buffer6);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer10);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer8);
      assertNotSame(buffer2, buffer6);
      assertNotSame(buffer2, buffer7);
      assertNotSame(buffer2, buffer9);
      assertNotSame(buffer2, buffer5);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer9));
      assertFalse(buffer0.equals((Object)buffer8));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer10));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer8));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer10));
      assertFalse(buffer1.equals((Object)buffer9));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer10));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer8));
      assertFalse(buffer2.equals((Object)buffer6));
      assertFalse(buffer2.equals((Object)buffer7));
      assertFalse(buffer2.equals((Object)buffer9));
      assertFalse(buffer2.equals((Object)buffer5));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(int1 == int0);
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(9L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(1L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Buffer buffer11 = buffer4.buffer();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer9);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer8);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer11);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer10);
      assertNotSame(buffer4, buffer9);
      assertNotSame(buffer4, buffer10);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer8);
      assertNotSame(buffer4, buffer6);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer11);
      assertNotSame(buffer4, buffer7);
      assertNotSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer11, buffer7);
      assertNotSame(buffer11, buffer2);
      assertSame(buffer11, buffer4);
      assertSame(buffer11, buffer1);
      assertNotSame(buffer11, buffer3);
      assertNotSame(buffer11, buffer8);
      assertNotSame(buffer11, buffer10);
      assertNotSame(buffer11, buffer9);
      assertSame(buffer11, buffer0);
      assertNotSame(buffer11, buffer6);
      assertNotSame(buffer11, buffer5);
      assertNotNull(buffer11);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer9));
      assertFalse(buffer0.equals((Object)buffer8));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer10));
      assertFalse(buffer4.equals((Object)buffer9));
      assertFalse(buffer4.equals((Object)buffer10));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer8));
      assertFalse(buffer4.equals((Object)buffer6));
      assertFalse(buffer4.equals((Object)buffer7));
      assertFalse(buffer4.equals((Object)buffer5));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer11.equals((Object)buffer7));
      assertFalse(buffer11.equals((Object)buffer2));
      assertFalse(buffer11.equals((Object)buffer3));
      assertFalse(buffer11.equals((Object)buffer8));
      assertFalse(buffer11.equals((Object)buffer10));
      assertFalse(buffer11.equals((Object)buffer9));
      assertFalse(buffer11.equals((Object)buffer6));
      assertFalse(buffer11.equals((Object)buffer5));
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer11.exhausted());
      assertEquals(9L, buffer11.size());
      assertEquals(0L, buffer11.completeSegmentByteCount());
      
      OutputStream outputStream0 = realBufferedSink0.buffer.outputStream();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer9);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer8);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer11);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer10);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer11);
      assertNotSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer8);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer10);
      assertNotSame(buffer1, buffer9);
      assertNotSame(buffer1, buffer6);
      assertSame(buffer1, buffer0);
      assertSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertNotNull(outputStream0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer9));
      assertFalse(buffer0.equals((Object)buffer8));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer10));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer8));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer10));
      assertFalse(buffer1.equals((Object)buffer9));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(9L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      Buffer buffer12 = buffer7.copyTo(outputStream0);
      assertSame(buffer12, buffer6);
      assertNotSame(buffer12, buffer9);
      assertNotSame(buffer12, buffer11);
      assertNotSame(buffer12, buffer3);
      assertSame(buffer12, buffer7);
      assertNotSame(buffer12, buffer0);
      assertNotSame(buffer12, buffer8);
      assertNotSame(buffer12, buffer4);
      assertNotSame(buffer12, buffer10);
      assertNotSame(buffer12, buffer1);
      assertNotSame(buffer12, buffer5);
      assertNotSame(buffer12, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer9);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer8);
      assertNotSame(buffer0, buffer12);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer11);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer10);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer11);
      assertNotSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer8);
      assertNotSame(buffer1, buffer12);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer10);
      assertNotSame(buffer1, buffer9);
      assertNotSame(buffer1, buffer6);
      assertSame(buffer1, buffer0);
      assertSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertNotSame(buffer7, buffer5);
      assertNotSame(buffer7, buffer2);
      assertNotSame(buffer7, buffer3);
      assertSame(buffer7, buffer6);
      assertSame(buffer7, buffer12);
      assertNotSame(buffer7, buffer4);
      assertNotSame(buffer7, buffer10);
      assertNotSame(buffer7, buffer8);
      assertNotSame(buffer7, buffer1);
      assertNotSame(buffer7, buffer0);
      assertNotSame(buffer7, buffer11);
      assertNotSame(buffer7, buffer9);
      assertNotSame(realBufferedSink1, realBufferedSink3);
      assertSame(realBufferedSink1, realBufferedSink2);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertNotNull(buffer12);
      assertFalse(buffer12.equals((Object)buffer9));
      assertFalse(buffer12.equals((Object)buffer11));
      assertFalse(buffer12.equals((Object)buffer3));
      assertFalse(buffer12.equals((Object)buffer0));
      assertFalse(buffer12.equals((Object)buffer4));
      assertFalse(buffer12.equals((Object)buffer8));
      assertFalse(buffer12.equals((Object)buffer10));
      assertFalse(buffer12.equals((Object)buffer1));
      assertFalse(buffer12.equals((Object)buffer5));
      assertFalse(buffer12.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer9));
      assertFalse(buffer0.equals((Object)buffer8));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer10));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer8));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer10));
      assertFalse(buffer1.equals((Object)buffer9));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(buffer7.equals((Object)buffer5));
      assertFalse(buffer7.equals((Object)buffer2));
      assertFalse(buffer7.equals((Object)buffer3));
      assertFalse(buffer7.equals((Object)buffer4));
      assertFalse(buffer7.equals((Object)buffer10));
      assertFalse(buffer7.equals((Object)buffer8));
      assertFalse(buffer7.equals((Object)buffer1));
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer9));
      assertFalse(buffer7.equals((Object)buffer11));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink3));
      assertEquals(0L, buffer12.completeSegmentByteCount());
      assertEquals(38L, buffer12.size());
      assertFalse(buffer12.exhausted());
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(9L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertFalse(buffer7.exhausted());
      assertEquals(38L, buffer7.size());
      
      boolean boolean1 = buffer11.equals(buffer12);
      assertSame(buffer12, buffer6);
      assertNotSame(buffer12, buffer9);
      assertNotSame(buffer12, buffer11);
      assertNotSame(buffer12, buffer3);
      assertSame(buffer12, buffer7);
      assertNotSame(buffer12, buffer0);
      assertNotSame(buffer12, buffer8);
      assertNotSame(buffer12, buffer4);
      assertNotSame(buffer12, buffer10);
      assertNotSame(buffer12, buffer1);
      assertNotSame(buffer12, buffer5);
      assertNotSame(buffer12, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer9);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer8);
      assertNotSame(buffer0, buffer12);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer11);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer10);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer11);
      assertNotSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer8);
      assertNotSame(buffer1, buffer12);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer10);
      assertNotSame(buffer1, buffer9);
      assertNotSame(buffer1, buffer6);
      assertSame(buffer1, buffer0);
      assertSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertNotSame(buffer7, buffer5);
      assertNotSame(buffer7, buffer2);
      assertNotSame(buffer7, buffer3);
      assertSame(buffer7, buffer6);
      assertSame(buffer7, buffer12);
      assertNotSame(buffer7, buffer4);
      assertNotSame(buffer7, buffer10);
      assertNotSame(buffer7, buffer8);
      assertNotSame(buffer7, buffer1);
      assertNotSame(buffer7, buffer0);
      assertNotSame(buffer7, buffer11);
      assertNotSame(buffer7, buffer9);
      assertNotSame(realBufferedSink1, realBufferedSink3);
      assertSame(realBufferedSink1, realBufferedSink2);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(buffer4, buffer9);
      assertNotSame(buffer4, buffer10);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer8);
      assertNotSame(buffer4, buffer6);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer11);
      assertNotSame(buffer4, buffer7);
      assertNotSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer12);
      assertNotSame(buffer11, buffer7);
      assertNotSame(buffer11, buffer2);
      assertNotSame(buffer11, buffer12);
      assertSame(buffer11, buffer4);
      assertSame(buffer11, buffer1);
      assertNotSame(buffer11, buffer3);
      assertNotSame(buffer11, buffer8);
      assertNotSame(buffer11, buffer10);
      assertNotSame(buffer11, buffer9);
      assertSame(buffer11, buffer0);
      assertNotSame(buffer11, buffer6);
      assertNotSame(buffer11, buffer5);
      assertFalse(buffer12.equals((Object)buffer9));
      assertFalse(buffer12.equals((Object)buffer11));
      assertFalse(buffer12.equals((Object)buffer3));
      assertFalse(buffer12.equals((Object)buffer0));
      assertFalse(buffer12.equals((Object)buffer4));
      assertFalse(buffer12.equals((Object)buffer8));
      assertFalse(buffer12.equals((Object)buffer10));
      assertFalse(buffer12.equals((Object)buffer1));
      assertFalse(buffer12.equals((Object)buffer5));
      assertFalse(buffer12.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer9));
      assertFalse(buffer0.equals((Object)buffer8));
      assertFalse(buffer0.equals((Object)buffer12));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer10));
      assertFalse(boolean1 == boolean0);
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer8));
      assertFalse(buffer1.equals((Object)buffer12));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer10));
      assertFalse(buffer1.equals((Object)buffer9));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(buffer7.equals((Object)buffer5));
      assertFalse(buffer7.equals((Object)buffer2));
      assertFalse(buffer7.equals((Object)buffer3));
      assertFalse(buffer7.equals((Object)buffer4));
      assertFalse(buffer7.equals((Object)buffer10));
      assertFalse(buffer7.equals((Object)buffer8));
      assertFalse(buffer7.equals((Object)buffer1));
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer9));
      assertFalse(buffer7.equals((Object)buffer11));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink3));
      assertFalse(buffer4.equals((Object)buffer9));
      assertFalse(buffer4.equals((Object)buffer10));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer8));
      assertFalse(buffer4.equals((Object)buffer6));
      assertFalse(buffer4.equals((Object)buffer7));
      assertFalse(buffer4.equals((Object)buffer5));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer12));
      assertFalse(buffer11.equals((Object)buffer7));
      assertFalse(buffer11.equals((Object)buffer2));
      assertFalse(buffer11.equals((Object)buffer12));
      assertFalse(buffer11.equals((Object)buffer3));
      assertFalse(buffer11.equals((Object)buffer8));
      assertFalse(buffer11.equals((Object)buffer10));
      assertFalse(buffer11.equals((Object)buffer9));
      assertFalse(buffer11.equals((Object)buffer6));
      assertFalse(buffer11.equals((Object)buffer5));
      assertFalse(boolean1);
      assertEquals(0L, buffer12.completeSegmentByteCount());
      assertEquals(38L, buffer12.size());
      assertFalse(buffer12.exhausted());
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(9L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertFalse(buffer7.exhausted());
      assertEquals(38L, buffer7.size());
      assertEquals(9L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer11.exhausted());
      assertEquals(9L, buffer11.size());
      assertEquals(0L, buffer11.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeString("vSRk!^i", charset0);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertNotNull(realBufferedSink1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      String string0 = realBufferedSink0.buffer.toString();
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertNotNull(string0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals("[text=vSRk!^i]", string0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      MockFile mockFile0 = new MockFile("vSRk!^i", "vSRk!^i");
      assertNotNull(mockFile0);
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/vSRk!^i", mockFile0.getParent());
      assertEquals("vSRk!^i", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/vSRk!^i/vSRk!^i", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/vSRk!^i", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals("vSRk!^i", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/vSRk!^i/vSRk!^i", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      
      long long0 = buffer1.indexOf((byte)5, 10L, (long) (byte)101);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer1, buffer0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertEquals((-1L), long0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      assertNotNull(objectOutputStream0);
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/vSRk!^i", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals("vSRk!^i", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/vSRk!^i/vSRk!^i", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      Buffer buffer2 = buffer1.copyTo((OutputStream) objectOutputStream0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/vSRk!^i", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals("vSRk!^i", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/vSRk!^i/vSRk!^i", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(7L, buffer2.size());
      
      Pipe pipe0 = new Pipe(10L);
      assertNotNull(pipe0);
      
      Buffer buffer3 = pipe0.buffer;
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      InputStream inputStream0 = buffer3.inputStream();
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotNull(inputStream0);
      assertFalse(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      boolean boolean2 = buffer0.request((byte)5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(boolean2);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      buffer2.clear();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/vSRk!^i", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals("vSRk!^i", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/vSRk!^i/vSRk!^i", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      
      Buffer buffer4 = realBufferedSink0.buffer;
      assertSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertSame(buffer4, buffer1);
      assertNotNull(buffer4);
      assertTrue(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer0));
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertSame(uS_ASCII0, charset0);
      assertNotNull(uS_ASCII0);
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      
      US_ASCII uS_ASCII1 = (US_ASCII)Charset.defaultCharset();
      assertSame(uS_ASCII1, uS_ASCII0);
      assertSame(uS_ASCII1, charset0);
      assertNotNull(uS_ASCII1);
      assertEquals("US-ASCII", uS_ASCII1.name());
      assertTrue(uS_ASCII1.isRegistered());
      assertEquals("US-ASCII", uS_ASCII1.toString());
      assertTrue(uS_ASCII1.canEncode());
      assertEquals("US-ASCII", uS_ASCII1.displayName());
      
      RealBufferedSink realBufferedSink2 = (RealBufferedSink)realBufferedSink0.writeString("{Pq51Pkb,z/z@n!DT", (Charset) uS_ASCII1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(uS_ASCII1, uS_ASCII0);
      assertSame(uS_ASCII1, charset0);
      assertSame(realBufferedSink2, realBufferedSink1);
      assertSame(realBufferedSink2, realBufferedSink0);
      assertNotNull(realBufferedSink2);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals("US-ASCII", uS_ASCII1.name());
      assertTrue(uS_ASCII1.isRegistered());
      assertEquals("US-ASCII", uS_ASCII1.toString());
      assertTrue(uS_ASCII1.canEncode());
      assertEquals("US-ASCII", uS_ASCII1.displayName());
      
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(realBufferedSink0);
      assertNotNull(realBufferedSink3);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer5 = realBufferedSink1.buffer;
      assertSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer3);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer0);
      assertNotNull(buffer5);
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer0));
      assertEquals(17L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      
      ByteString byteString0 = buffer5.sha256();
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(realBufferedSink0, realBufferedSink2);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(charset0, uS_ASCII1);
      assertSame(charset0, uS_ASCII0);
      assertNotSame(realBufferedSink1, realBufferedSink3);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertSame(realBufferedSink1, realBufferedSink2);
      assertSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer3);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer0);
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink3));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(17L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      
      Buffer buffer6 = buffer3.writeUtf8CodePoint((byte)5);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer2);
      assertSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer3, buffer5);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer6);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotNull(buffer6);
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(1L, buffer6.size());
      assertFalse(buffer6.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(1L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      Buffer buffer7 = realBufferedSink1.buffer.write(byteString0);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer7);
      assertSame(realBufferedSink0, realBufferedSink2);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(charset0, uS_ASCII1);
      assertSame(charset0, uS_ASCII0);
      assertNotSame(realBufferedSink1, realBufferedSink3);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertSame(realBufferedSink1, realBufferedSink2);
      assertSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer6);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer0);
      assertSame(buffer5, buffer7);
      assertSame(buffer7, buffer4);
      assertNotSame(buffer7, buffer0);
      assertSame(buffer7, buffer5);
      assertNotSame(buffer7, buffer3);
      assertNotSame(buffer7, buffer6);
      assertSame(buffer7, buffer2);
      assertSame(buffer7, buffer1);
      assertNotNull(buffer7);
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink3));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer3));
      assertFalse(buffer7.equals((Object)buffer6));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(49L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertEquals(49L, buffer7.size());
      assertFalse(buffer7.exhausted());
      
      int int0 = buffer4.readUtf8CodePoint();
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer4, buffer6);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer7);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer5);
      assertSame(realBufferedSink0, realBufferedSink2);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer4.equals((Object)buffer6));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertEquals(123, int0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer4.exhausted());
      assertEquals(48L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      
      int int1 = buffer5.hashCode();
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer7);
      assertSame(realBufferedSink0, realBufferedSink2);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(charset0, uS_ASCII1);
      assertSame(charset0, uS_ASCII0);
      assertNotSame(realBufferedSink1, realBufferedSink3);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertSame(realBufferedSink1, realBufferedSink2);
      assertSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer6);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer0);
      assertSame(buffer5, buffer7);
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink3));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(int1 == int0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(buffer5.exhausted());
      assertEquals(48L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      
      Buffer buffer8 = buffer3.buffer();
      assertNotSame(buffer8, buffer0);
      assertNotSame(buffer8, buffer4);
      assertNotSame(buffer8, buffer2);
      assertNotSame(buffer8, buffer5);
      assertSame(buffer8, buffer3);
      assertSame(buffer8, buffer6);
      assertNotSame(buffer8, buffer1);
      assertNotSame(buffer8, buffer7);
      assertNotSame(buffer3, buffer5);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer6);
      assertSame(buffer3, buffer8);
      assertNotSame(buffer3, buffer7);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotNull(buffer8);
      assertFalse(buffer8.equals((Object)buffer0));
      assertFalse(buffer8.equals((Object)buffer4));
      assertFalse(buffer8.equals((Object)buffer2));
      assertFalse(buffer8.equals((Object)buffer5));
      assertFalse(buffer8.equals((Object)buffer1));
      assertFalse(buffer8.equals((Object)buffer7));
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer7));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertEquals(0L, buffer8.completeSegmentByteCount());
      assertEquals(1L, buffer8.size());
      assertFalse(buffer8.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(1L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      OutputStream outputStream0 = buffer6.outputStream();
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer7);
      assertSame(buffer6, buffer3);
      assertSame(buffer6, buffer8);
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer3, buffer5);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer6);
      assertSame(buffer3, buffer8);
      assertNotSame(buffer3, buffer7);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotNull(outputStream0);
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer7));
      assertFalse(buffer6.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer7));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(1L, buffer6.size());
      assertFalse(buffer6.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(1L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.copyTo((Buffer) null, (long) (byte)101, 1000000000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeLongLe(2703L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      String string0 = buffer1.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(string0);
      assertEquals("\uFFFD", string0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      buffer0.flush();
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      
      Buffer buffer2 = buffer1.clone();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(6L, buffer2.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer3 = buffer2.writeLong(2703L);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(14L, buffer2.size());
      assertEquals(6L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(6L, buffer3.completeSegmentByteCount());
      assertEquals(14L, buffer3.size());
      assertFalse(buffer3.exhausted());
      
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.emitCompleteSegments();
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertNotNull(realBufferedSink1);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer4 = buffer0.writeUtf8("\uFFFD");
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer1);
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(9L, buffer4.size());
      assertFalse(buffer4.exhausted());
      
      Pipe pipe0 = new Pipe(1186L);
      assertNotNull(pipe0);
      
      Buffer buffer5 = pipe0.buffer;
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer0);
      assertNotNull(buffer5);
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer0));
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      
      InputStream inputStream0 = buffer2.inputStream();
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer4);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertNotNull(inputStream0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer5));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(9L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(14L, buffer2.size());
      assertEquals(6L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      buffer5.clear();
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer0);
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer0));
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      
      Buffer buffer6 = realBufferedSink1.buffer;
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer1);
      assertNotNull(buffer6);
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer0));
      assertTrue(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer1));
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(0L, buffer6.size());
      assertTrue(buffer6.exhausted());
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertNotNull(uS_ASCII0);
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      
      US_ASCII uS_ASCII1 = (US_ASCII)Charset.defaultCharset();
      assertSame(uS_ASCII1, uS_ASCII0);
      assertNotNull(uS_ASCII1);
      assertTrue(uS_ASCII1.isRegistered());
      assertEquals("US-ASCII", uS_ASCII1.name());
      assertEquals("US-ASCII", uS_ASCII1.toString());
      assertEquals("US-ASCII", uS_ASCII1.displayName());
      assertTrue(uS_ASCII1.canEncode());
      
      RealBufferedSink realBufferedSink2 = (RealBufferedSink)realBufferedSink0.writeString("=(/<&EQ7V,.inU@8)0,", (Charset) uS_ASCII0);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer4);
      assertSame(realBufferedSink2, realBufferedSink1);
      assertSame(realBufferedSink2, realBufferedSink0);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer6);
      assertSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(uS_ASCII0, uS_ASCII1);
      assertNotNull(realBufferedSink2);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(9L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(buffer5);
      assertNotNull(realBufferedSink3);
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer0));
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      
      Buffer buffer7 = realBufferedSink1.buffer;
      assertSame(buffer7, buffer6);
      assertNotSame(buffer7, buffer1);
      assertNotSame(buffer7, buffer3);
      assertNotSame(buffer7, buffer0);
      assertNotSame(buffer7, buffer5);
      assertNotSame(buffer7, buffer2);
      assertNotSame(buffer7, buffer4);
      assertNotNull(buffer7);
      assertFalse(buffer7.equals((Object)buffer1));
      assertFalse(buffer7.equals((Object)buffer3));
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer5));
      assertFalse(buffer7.equals((Object)buffer2));
      assertFalse(buffer7.equals((Object)buffer4));
      assertFalse(buffer7.exhausted());
      assertEquals(19L, buffer7.size());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      
      ByteString byteString0 = buffer4.sha256();
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer7);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer5);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer6);
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer7));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer5));
      assertFalse(buffer4.equals((Object)buffer6));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(9L, buffer4.size());
      assertFalse(buffer4.exhausted());
      
      Buffer buffer8 = realBufferedSink3.buffer.writeUtf8CodePoint(37);
      assertNotSame(realBufferedSink3, realBufferedSink1);
      assertNotSame(realBufferedSink3, realBufferedSink2);
      assertNotSame(realBufferedSink3, realBufferedSink0);
      assertNotSame(buffer8, buffer2);
      assertNotSame(buffer8, buffer0);
      assertNotSame(buffer8, buffer7);
      assertNotSame(buffer8, buffer1);
      assertNotSame(buffer8, buffer3);
      assertNotSame(buffer8, buffer5);
      assertNotSame(buffer8, buffer4);
      assertNotSame(buffer8, buffer6);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer7);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer8);
      assertNotNull(buffer8);
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertFalse(buffer8.equals((Object)buffer2));
      assertFalse(buffer8.equals((Object)buffer0));
      assertFalse(buffer8.equals((Object)buffer7));
      assertFalse(buffer8.equals((Object)buffer1));
      assertFalse(buffer8.equals((Object)buffer3));
      assertFalse(buffer8.equals((Object)buffer5));
      assertFalse(buffer8.equals((Object)buffer4));
      assertFalse(buffer8.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer7));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer0));
      assertEquals(0L, buffer8.completeSegmentByteCount());
      assertFalse(buffer8.exhausted());
      assertEquals(1L, buffer8.size());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      
      Buffer buffer9 = realBufferedSink3.buffer.write(byteString0);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer9);
      assertNotSame(buffer0, buffer8);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer7);
      assertNotSame(realBufferedSink3, realBufferedSink1);
      assertNotSame(realBufferedSink3, realBufferedSink2);
      assertNotSame(realBufferedSink3, realBufferedSink0);
      assertNotSame(buffer9, buffer4);
      assertNotSame(buffer9, buffer2);
      assertSame(buffer9, buffer8);
      assertNotSame(buffer9, buffer3);
      assertNotSame(buffer9, buffer7);
      assertNotSame(buffer9, buffer1);
      assertNotSame(buffer9, buffer5);
      assertNotSame(buffer9, buffer6);
      assertNotSame(buffer9, buffer0);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer8);
      assertNotSame(buffer4, buffer9);
      assertNotSame(buffer4, buffer7);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer5);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer6);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer7);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer9);
      assertNotSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer8);
      assertNotNull(buffer9);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer8));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertFalse(buffer9.equals((Object)buffer4));
      assertFalse(buffer9.equals((Object)buffer2));
      assertFalse(buffer9.equals((Object)buffer3));
      assertFalse(buffer9.equals((Object)buffer7));
      assertFalse(buffer9.equals((Object)buffer1));
      assertFalse(buffer9.equals((Object)buffer5));
      assertFalse(buffer9.equals((Object)buffer6));
      assertFalse(buffer9.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer8));
      assertFalse(buffer4.equals((Object)buffer7));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer5));
      assertFalse(buffer4.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer7));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer8));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertFalse(buffer9.exhausted());
      assertEquals(33L, buffer9.size());
      assertEquals(0L, buffer9.completeSegmentByteCount());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(9L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      int int1 = buffer2.hashCode();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer9);
      assertNotSame(buffer0, buffer8);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer1, buffer9);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer7);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer8);
      assertNotSame(buffer1, buffer6);
      assertNotSame(buffer2, buffer8);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer9);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer7);
      assertNotSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer6);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer9));
      assertFalse(buffer0.equals((Object)buffer8));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer9));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer8));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(buffer2.equals((Object)buffer8));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer9));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer7));
      assertFalse(buffer2.equals((Object)buffer5));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer6));
      assertFalse(int1 == int0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(9L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(14L, buffer2.size());
      assertEquals(6L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      Buffer buffer10 = buffer4.buffer();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer9);
      assertSame(buffer0, buffer10);
      assertNotSame(buffer0, buffer8);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer10, buffer8);
      assertNotSame(buffer10, buffer3);
      assertSame(buffer10, buffer4);
      assertNotSame(buffer10, buffer7);
      assertNotSame(buffer10, buffer9);
      assertNotSame(buffer10, buffer2);
      assertNotSame(buffer10, buffer5);
      assertSame(buffer10, buffer0);
      assertSame(buffer10, buffer1);
      assertNotSame(buffer10, buffer6);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer8);
      assertNotSame(buffer4, buffer9);
      assertNotSame(buffer4, buffer7);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer5);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer10);
      assertNotSame(buffer4, buffer6);
      assertNotNull(buffer10);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer9));
      assertFalse(buffer0.equals((Object)buffer8));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer10.equals((Object)buffer8));
      assertFalse(buffer10.equals((Object)buffer3));
      assertFalse(buffer10.equals((Object)buffer7));
      assertFalse(buffer10.equals((Object)buffer9));
      assertFalse(buffer10.equals((Object)buffer2));
      assertFalse(buffer10.equals((Object)buffer5));
      assertFalse(buffer10.equals((Object)buffer6));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer8));
      assertFalse(buffer4.equals((Object)buffer9));
      assertFalse(buffer4.equals((Object)buffer7));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer5));
      assertFalse(buffer4.equals((Object)buffer6));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertEquals(0L, buffer10.completeSegmentByteCount());
      assertEquals(9L, buffer10.size());
      assertFalse(buffer10.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(9L, buffer4.size());
      assertFalse(buffer4.exhausted());
      
      OutputStream outputStream0 = realBufferedSink0.buffer.outputStream();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer9);
      assertSame(buffer0, buffer10);
      assertNotSame(buffer0, buffer8);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer1, buffer9);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer7);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer8);
      assertNotSame(buffer1, buffer6);
      assertSame(buffer1, buffer10);
      assertSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertNotNull(outputStream0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer9));
      assertFalse(buffer0.equals((Object)buffer8));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer9));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer8));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(9L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeLongLe(2710L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      
      String string0 = buffer1.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(string0);
      assertEquals("\uFFFD", string0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      Buffer buffer2 = buffer0.writeShortLe(2865);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      long long0 = buffer2.readLongLe();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(806425808276029440L, long0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      Buffer buffer3 = realBufferedSource0.buffer();
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotNull(buffer3);
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      boolean boolean1 = realBufferedSource0.buffer.equals(buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer3));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      Buffer buffer4 = buffer2.writeByte(2865);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer4);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(1L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      
      int int0 = buffer_UnsafeCursor0.next();
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertFalse(buffer0.equals((Object)buffer3));
      assertEquals(1, int0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      Buffer buffer5 = buffer2.copyTo((OutputStream) byteArrayOutputStream0);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer4);
      assertSame(buffer5, buffer4);
      assertSame(buffer5, buffer0);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer3);
      assertNotNull(buffer5);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("1", byteArrayOutputStream0.toString());
      assertFalse(buffer5.exhausted());
      assertEquals(1L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      
      Buffer buffer6 = realBufferedSource0.buffer;
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer2);
      assertSame(buffer6, buffer3);
      assertNotNull(buffer6);
      assertFalse(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer1));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer2));
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertTrue(buffer6.exhausted());
      assertEquals(0L, buffer6.size());
      
      int int1 = buffer_UnsafeCursor0.next();
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer6);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertEquals(1L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      
      // Undeclared exception!
      try { 
        buffer5.read((byte[]) null, 95, (-1956));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Pipe pipe0 = new Pipe(1000000L);
      assertNotNull(pipe0);
      
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      pipe0.sourceClosed = true;
      // Undeclared exception!
      try { 
        buffer0.read((Buffer) null, 1000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Pipe pipe0 = new Pipe(99999999999999994L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      int int0 = 109;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      
      int int1 = ObjectStreamConstants.baseWireHandle;
      assertFalse(int1 == int0);
      assertEquals(8257536, int1);
      
      Buffer buffer1 = realBufferedSink0.buffer.write(byteString0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertEquals(32L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      assertNotNull(realBufferedSink1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer2 = realBufferedSink1.buffer();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      Buffer buffer3 = buffer1.writeUtf8CodePoint(109);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotNull(buffer3);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(33L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(33L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      
      int int2 = buffer3.readUtf8CodePoint();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(65533, int2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertEquals(31L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(31L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      
      int int3 = buffer0.hashCode();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertEquals(31L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer4 = realBufferedSink1.buffer;
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer2);
      assertNotNull(buffer4);
      assertTrue(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      
      HashingSource hashingSource1 = HashingSource.md5(buffer4);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer2);
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertTrue(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      
      ByteString byteString1 = realBufferedSink0.buffer.sha256();
      assertNotSame(byteString1, byteString0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertEquals(32, byteString1.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        buffer3.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xffffffc4
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeString("|SRk!^i", charset0);
      assertNotSame(buffer1, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotNull(bufferedSink0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      String string0 = realBufferedSink0.buffer.toString();
      assertNotSame(buffer1, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotNull(string0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals("[text=|SRk!^i]", string0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      ByteString byteString0 = buffer0.readByteString();
      assertNotSame(buffer0, buffer1);
      assertNotNull(byteString0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      
      ByteString byteString1 = realBufferedSink0.buffer.md5();
      assertNotSame(buffer1, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(16, byteString1.size());
      
      MockFile mockFile0 = new MockFile("b<");
      assertNotNull(mockFile0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("b<", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("b<", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      
      MockFile mockFile1 = new MockFile("b<", "b<");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(mockFile1.isFile());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/b</b<", mockFile1.toString());
      assertEquals("b<", mockFile1.getName());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.canRead());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/b<", mockFile1.getParent());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      assertNotSame(buffer1, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotNull(outputStream0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      Buffer buffer2 = realBufferedSink0.buffer.writeTo(outputStream0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.exhausted());
      assertEquals(7L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      long long0 = buffer1.completeSegmentByteCount();
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, long0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x7c
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeString("vSRk!^i", charset0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotNull(bufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      
      Buffer buffer1 = ((RealBufferedSink) bufferedSink0).buffer.writeIntLe(2073432487);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals(11L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.exhausted());
      assertEquals(11L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      String string0 = realBufferedSink0.buffer.toString();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotNull(string0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals("[hex=7653526b215e69a711967b]", string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      MockFile mockFile0 = new MockFile("vSRk!^i", "vSRk!^i");
      assertNotNull(mockFile0);
      assertEquals("vSRk!^i", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/vSRk!^i/vSRk!^i", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/vSRk!^i", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      assertTrue(mockFile0.exists());
      assertEquals("vSRk!^i", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/vSRk!^i/vSRk!^i", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/vSRk!^i", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      long long0 = buffer2.indexOf((byte)5, 10L, (long) (byte)101);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals((-1L), long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(11L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      assertNotNull(objectOutputStream0);
      assertTrue(mockFile0.exists());
      assertEquals("vSRk!^i", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/vSRk!^i/vSRk!^i", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/vSRk!^i", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      Buffer buffer3 = buffer2.copyTo((OutputStream) objectOutputStream0);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(11L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(mockFile0.exists());
      assertEquals("vSRk!^i", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/vSRk!^i/vSRk!^i", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/vSRk!^i", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(11L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(2, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteString0.size());
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      assertNotNull(hashingSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      HashingSink hashingSink1 = HashingSink.hmacSha1(buffer0, byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotNull(hashingSink1);
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteString0.size());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      Buffer buffer1 = buffer0.writeShortLe(8257536);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      
      Timeout timeout0 = hashingSource0.timeout();
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertSame(buffer0, buffer1);
      assertNotNull(timeout0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      
      int int1 = buffer1.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      
      ByteString byteString1 = buffer0.sha256();
      assertSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(32, byteString1.size());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      assertNotNull(realBufferedSink0);
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      
      EvoSuiteFile evoSuiteFile0 = null;
      Buffer buffer2 = realBufferedSink0.buffer();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      
      ByteString byteString2 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString1));
      assertTrue(byteString2.equals((Object)byteString0));
      assertEquals(2, byteString2.size());
      
      Buffer buffer3 = buffer2.writeUtf8("-9223372036854775808");
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(20L, buffer3.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(20L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      byte byte0 = (byte)97;
      long long0 = buffer3.indexOf((byte)97);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals((-1L), long0);
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(20L, buffer3.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(20L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(20L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      int int2 = buffer_UnsafeCursor0.next();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertEquals(20, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(20, int2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(20L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      long long1 = buffer_UnsafeCursor0.resizeBuffer(0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(long1 == long0);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(20L, long1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      buffer1.flush();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = buffer0.clone();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertEquals(2L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      buffer0.flush();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      Buffer buffer3 = buffer1.writeLongLe(1737L);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(10L, buffer3.size());
      
      Pipe pipe0 = new Pipe(16L);
      assertNotNull(pipe0);
      
      Buffer buffer4 = pipe0.buffer;
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      
      String string0 = buffer4.readUtf8Line();
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNull(string0);
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      
      Buffer buffer5 = buffer4.writeShortLe(1130);
      assertNotSame(buffer4, buffer0);
      assertSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer1);
      assertSame(buffer5, buffer4);
      assertNotNull(buffer5);
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer1));
      assertEquals(2L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(2L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      
      long long0 = buffer3.readLongLe();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer5);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer5);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer5));
      assertEquals(113848621L, long0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      
      boolean boolean1 = buffer3.equals(buffer2);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer5);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer5));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer5));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertEquals(2L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      
      Buffer buffer6 = (Buffer)buffer3.emit();
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer6);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer5);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer6);
      assertNotSame(buffer3, buffer5);
      assertNotSame(buffer6, buffer4);
      assertSame(buffer6, buffer0);
      assertSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer5);
      assertSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer2);
      assertNotNull(buffer6);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertFalse(buffer6.exhausted());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(2L, buffer6.size());
      
      try { 
        buffer0.require(2803754650828L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(2, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteString0.size());
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      assertNotNull(hashingSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      HashingSink hashingSink1 = HashingSink.hmacSha1(buffer0, byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotNull(hashingSink1);
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteString0.size());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      Buffer buffer1 = buffer0.writeShortLe(8257536);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      Timeout timeout0 = hashingSource0.timeout();
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertSame(buffer0, buffer1);
      assertNotNull(timeout0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      
      int int1 = buffer1.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      
      ByteString byteString1 = buffer0.sha256();
      assertSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(32, byteString1.size());
      
      int int2 = 2676;
      Buffer buffer2 = realBufferedSource0.buffer.writeUtf8CodePoint(2676);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(3L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      int int3 = realBufferedSource0.buffer.readUtf8CodePoint();
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString0, byteString1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(2676, int3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">xw\"4:@kE.u%3,g1%");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Buffer buffer3 = realBufferedSink0.buffer();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      
      ByteString byteString2 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString2);
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(2, byteString2.size());
      
      long long0 = realBufferedSource0.buffer.indexOf(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertEquals((-1L), long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      assertEquals(32, byteString1.size());
      
      Buffer buffer4 = buffer3.writeUtf8("-9223372036854775808");
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertSame(buffer4, buffer3);
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(20L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertFalse(buffer4.exhausted());
      assertEquals(20L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      
      long long1 = buffer4.indexOf((byte)97);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertSame(buffer4, buffer3);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertTrue(long1 == long0);
      assertEquals((-1L), long1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(20L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertFalse(buffer4.exhausted());
      assertEquals(20L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readAndWriteUnsafe();
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(20L, buffer3.size());
      assertFalse(buffer3.exhausted());
      
      int int4 = buffer_UnsafeCursor0.next();
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertEquals(20, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(20, int4);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(20L, buffer3.size());
      assertFalse(buffer3.exhausted());
      
      buffer_UnsafeCursor0.offset = 1000L;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(20L, buffer3.size());
      assertFalse(buffer3.exhausted());
      
      long long2 = buffer_UnsafeCursor0.resizeBuffer(0);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(20L, long2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      
      Buffer buffer5 = buffer_UnsafeCursor0.buffer;
      assertNotSame(buffer5, buffer2);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer1);
      assertSame(buffer5, buffer3);
      assertNotNull(buffer5);
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer1));
      assertTrue(buffer5.equals((Object)buffer2));
      assertEquals(0L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertTrue(buffer5.exhausted());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      String string0 = buffer0.readUtf8Line();
      assertNotSame(buffer0, buffer1);
      assertNull(string0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = new Buffer();
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Segment segment0 = buffer0.writableSegment(46);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotNull(segment0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotNull(hashingSource0);
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotNull(byteString0);
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(16, byteString0.size());
      
      byte[] byteArray0 = new byte[14];
      int int0 = byteString0.lastIndexOf(byteArray0, 46);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals((-1), int0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(16, byteString0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = byteString0.utf8();
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotNull(string1);
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals("\uFFFD\u001D\uFFFD\u064F\u0000\uFFFD\u0004\uFFFD\t\uFFFD\uFFFD\uFFFDB~", string1);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(16, byteString0.size());
      
      Buffer buffer3 = buffer2.writeDecimalLong((-281L));
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotNull(buffer3);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(46, (int)integer0);
      
      HashingSource hashingSource1 = HashingSource.md5(buffer1);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(hashingSource1);
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      ByteString byteString1 = hashingSource1.hash();
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(16, byteString1.size());
      
      Buffer buffer4 = buffer3.writeUtf8("\uFFFD\u001D\uFFFD\u064F\u0000\uFFFD\u0004\uFFFD\t\uFFFD\uFFFD\uFFFDB~");
      assertSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertSame(buffer4, buffer3);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer4);
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(33L, buffer4.size());
      assertEquals(33L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(33L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(33L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      List<Integer> list0 = buffer_UnsafeCursor0.buffer.segmentSizes();
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertNotNull(list0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(33L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer5 = realBufferedSource0.buffer;
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer4);
      assertNotNull(buffer5);
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer2));
      assertTrue(buffer5.equals((Object)buffer1));
      assertTrue(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer4));
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(0L, buffer5.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer5.readAndWriteUnsafe();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer2));
      assertTrue(buffer5.equals((Object)buffer1));
      assertTrue(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(0L, buffer5.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = buffer1.writeDecimalLong((-149L));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(6L, buffer2.size());
      
      buffer1.flush();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      
      Buffer buffer3 = buffer2.clone();
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotNull(buffer3);
      assertTrue(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(6L, buffer2.size());
      assertFalse(buffer3.exhausted());
      assertEquals(6L, buffer3.completeSegmentByteCount());
      assertEquals(6L, buffer3.size());
      
      buffer0.flush();
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertTrue(buffer0.equals((Object)buffer3));
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertTrue(buffer0.equals((Object)buffer3));
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      long long0 = buffer0.readDecimalLong();
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.equals((Object)buffer3));
      assertEquals((-1L), long0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      assertEquals(2, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteString0.size());
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      assertNotNull(hashingSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      buffer0.flush();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeDecimalLong(1223L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      
      Buffer buffer2 = buffer1.clone();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(4L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      buffer1.flush();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(4L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      long long0 = buffer1.readDecimalLong();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertEquals(1223L, long0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      buffer_UnsafeCursor0.buffer.flush();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(4L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer_UnsafeCursor0.buffer.readUnsafe();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(4L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      long long1 = buffer_UnsafeCursor0.buffer.completeSegmentByteCount();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(long1 == long0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertEquals(4L, long1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(4L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Buffer buffer3 = buffer_UnsafeCursor1.buffer;
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.exhausted());
      assertEquals(4L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      
      boolean boolean3 = buffer1.rangeEquals(1347L, byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(boolean3);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteString0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      // Undeclared exception!
      try { 
        buffer2.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 4
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long long0 = 100000000000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(100000000000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(18L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = new Buffer();
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      Buffer buffer3 = buffer1.writeDecimalLong(1248L);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(22L, buffer0.size());
      assertEquals(22L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(22L, buffer3.size());
      
      Buffer buffer4 = buffer2.clone();
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotNull(buffer4);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      
      buffer3.flush();
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(22L, buffer0.size());
      assertEquals(22L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(22L, buffer3.size());
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(22L, buffer0.size());
      assertEquals(22L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Number too large: 10000000000000000012
         //
         verifyException("okio.Buffer", e);
      }
  }
}
