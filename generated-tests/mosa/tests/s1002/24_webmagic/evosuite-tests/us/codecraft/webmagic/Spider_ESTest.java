/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:46:32 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("JCV!B%j&^i6(5");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider0.pipeline(resultItemsCollectorPipeline0);
      // Undeclared exception!
      try { 
        spider0.get("JCV!B%j&^i6(5");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y6i@yP/tY*^g?JH");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      spider1.setExecutorService(forkJoinPool0);
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Site{djomain='");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Site{djomain='", "Site{djomain='");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      List<Request> list0 = spider1.getAll((Collection<String>) synchronousQueue0);
      spider1.startRequest(list0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("1<s;00Gl");
      spider1.getAll((Collection<String>) synchronousQueue0);
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1222, threadFactory0);
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedTransferQueue0, locale_FilteringMode0);
      Spider spider1 = spider0.startUrls(list0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.scheduler(queueScheduler0);
      Spider spider3 = spider2.scheduler(queueScheduler0);
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = ";";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(";");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider.Status spider_Status0 = Spider.Status.Running;
      Page.fail();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(";");
      // Undeclared exception!
      try { 
        spider0.thread((-2109));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      spider0.getStatus();
      spider0.start();
      Request request0 = new Request("");
      Request request1 = request0.addHeader("", "");
      // Undeclared exception!
      try { 
        spider0.onError(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Site{domain='");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getStatus();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Site{domain='");
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("_plus");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler1.getDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      Request request0 = new Request();
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      Spider spider1 = spider0.setUUID("Site{domain='");
      long long0 = spider1.getPageCount();
      assertEquals(0L, long0);
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("JCV!B%j&^i6(5");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider0.clearPipeline();
      // Undeclared exception!
      try { 
        spider0.get("JCV!B%j&^i6(5");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("JCV!B%j&^i6(5");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("JCV!B%j&^i6(5");
      Spider spider1 = spider0.setUUID("JCV!B%j&^i6(5");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      spider1.downloader(phantomJSDownloader0);
      spider0.getStatus();
      spider0.setEmptySleepTime((-3));
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("2r#LZM0aua% ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      spider0.clearPipeline();
      Spider spider1 = spider0.setExitWhenComplete(true);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Site{doman='");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider0.setUUID("Site{doman='");
      // Undeclared exception!
      try { 
        spider0.get("Site{doman='");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("JCV!B%j&^i6(5");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("JCV!B%j&^i6(5");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      Spider spider2 = spider1.scheduler((Scheduler) null);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Site{domain='");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Site{domain='", "Site{domain='");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      List<Request> list0 = spider1.getAll((Collection<String>) synchronousQueue0);
      Spider spider2 = spider1.startRequest(list0);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      List<Pipeline> list1 = spider0.getAll((Collection<String>) synchronousQueue0);
      Spider spider3 = spider1.setPipelines(list1);
      spider3.run();
      spider2.getCollectorPipeline();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Site{domain='");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Site{domain='", "Site{domain='");
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) priorityBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("JCV!B%j&^i6(5");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("JCV!B%j&^i6(5");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      spider1.getSpiderListeners();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[2];
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(true);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      spider0.thread((ExecutorService) forkJoinPool0, 1000);
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      spider0.getStatus();
      Page page0 = Page.fail();
      spider0.extractAndAddRequests(page0, false);
      Page page1 = new Page();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("JV~B%j^iH5");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("y)9]>F");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      Spider spider2 = spider1.thread(5000);
      spider2.setSpawnUrl(false);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("JCdV!B%Si6(c5");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      String[] stringArray0 = null;
      spider0.setEmptySleepTime(1);
      // Undeclared exception!
      try { 
        spider0.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Site{domain='");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Site{domain='", "Site{domain='");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      List<Request> list0 = spider1.getAll((Collection<String>) synchronousQueue0);
      Spider spider2 = spider1.startRequest(list0);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      // Undeclared exception!
      try { 
        spider2.get("TOQ6lfz{a*nkfdV");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Site{domain='");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider.Status spider_Status0 = Spider.Status.Init;
      Request request0 = new Request("");
      Request[] requestArray0 = new Request[3];
      requestArray0[0] = request0;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      request0.setExtras(hashMap0);
      requestArray0[1] = request0;
      requestArray0[2] = request0;
      spider0.getThreadAlive();
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("JCdV!B%Si6(c5");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$3%9 ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("`~eVr;`/xM_0n15J");
      spider0.start();
      spider1.runAsync();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider0.runAsync();
      // Undeclared exception!
      try { 
        spider1.run();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider1.getAll((Collection<String>) synchronousQueue0);
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      LinkedTransferQueue<Runnable> linkedTransferQueue1 = new LinkedTransferQueue<Runnable>();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      spider0.getThreadAlive();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider is already running!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      spider1.getStatus();
      Page.fail();
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Site{domain='");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider.Status spider_Status0 = Spider.Status.Running;
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Site{domain='");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      spider0.getStatus();
      spider0.isSpawnUrl();
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      spider1.addPipeline(collectorPipeline0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      spider0.getStatus();
      spider0.getSite();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider2.getAll((Collection<String>) synchronousQueue0);
      Request[] requestArray0 = new Request[1];
      String string0 = "{7";
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("{7");
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider1.getAll((Collection<String>) synchronousQueue0);
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      spider1.setSpawnUrl(true);
      spider1.run();
      spider1.getStartTime();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("b");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setUUID("?A/T.p");
      spider0.stop();
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("JCdV!B%Si6(c5");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      Spider.Status.fromValue(1765);
      Spider spider1 = spider0.setSpawnUrl(false);
      // Undeclared exception!
      try { 
        spider1.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      spider0.runAsync();
      spider0.getStatus();
      spider0.sleep(1222);
      spider0.sleep(0);
      // Undeclared exception!
      try { 
        spider0.checkIfRunning();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("4JRH=Sw!>", "");
      spider0.setDownloader(phantomJSDownloader0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      List<Request> list0 = spider1.getAll((Collection<String>) synchronousQueue0);
      spider0.startRequest(list0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("4JRH=Sw!>");
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider1.setSpiderListeners(linkedList0);
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      spider0.getStatus();
      spider2.sleep(1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      spider0.getStatus();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      spider0.downloader = (Downloader) phantomJSDownloader0;
      Request request0 = new Request("");
      String[] stringArray0 = new String[0];
      spider0.test(stringArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      spider0.getStatus();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      spider0.downloader = (Downloader) phantomJSDownloader0;
      Request request0 = new Request("");
      request0.setUrl("");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("JCV!B%j&^i6(5");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("JCV!B%j&^i6(5");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Site{domain='");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getStatus();
      Page.fail();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Site{domain='");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      spider1.getStatus();
      FilePipeline filePipeline0 = new FilePipeline("Site{domain='");
      spider1.pipeline(filePipeline0);
      spider1.getScheduler();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("JV~B%j^iH5");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("JV~B%j^iH5");
      spider0.setScheduler(fileCacheQueueScheduler0);
      spider0.isExitWhenComplete();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("JCV!B%j&^i6(5", "JCV!B%j&^i6(5");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("iKe1Hhh?");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadGroup threadGroup0 = new ThreadGroup("JCV!B%j&^i6(5");
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(921, forkJoinPool_ForkJoinWorkerThreadFactory0, threadGroup0, false);
      spider0.setExecutorService(forkJoinPool0);
      spider0.setDownloader(phantomJSDownloader0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider0.getAll((Collection<String>) synchronousQueue0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("iKe1Hhh?");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Site{domain='");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Site{domain='", "Site{domain='");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      List<Request> list0 = spider1.getAll((Collection<String>) synchronousQueue0);
      Spider spider2 = spider1.startRequest(list0);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      spider2.run();
      spider1.run();
  }
}
