/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 22:53:17 GMT 2018
 */

package wheel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.time.DateTimeException;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.time.chrono.HijrahDate;
import java.time.chrono.JapaneseDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;
import wheel.ErrorPage;
import wheel.components.Component;
import wheel.components.ElExpression;
import wheel.components.StandaloneComponent;
import wheel.util.DynamicSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DynamicSelectModel_ESTest extends DynamicSelectModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ElExpression elExpression0 = new ElExpression("vG|O!&Pw|]X/-(#bo");
      DynamicSelectModel dynamicSelectModel0 = null;
      try {
        dynamicSelectModel0 = new DynamicSelectModel(elExpression0, elExpression0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.label("I8L!\"d<<mvt{,URu]=");
      dynamicSelectModel1.enumeration("");
      dynamicSelectModel0.translator("'");
      // Undeclared exception!
      try { 
        dynamicSelectModel1.translateValue("Caused by: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression .values() to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.reset();
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getOptionCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      dynamicSelectModel0.empty(mockJapaneseDate0);
      dynamicSelectModel0.reset();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.translator("");
      String string0 = "";
      dynamicSelectModel1.value("");
      // Undeclared exception!
      try { 
        dynamicSelectModel1.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.collection("++");
      // Undeclared exception!
      try { 
        dynamicSelectModel0.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Label attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("getMessage");
      dynamicSelectModel1.validate();
      dynamicSelectModel1.reset();
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      String string0 = "@|pxDER";
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.translator("@|pxDER");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.enumeration("@|pxDER");
      dynamicSelectModel2.empty("@|pxDER");
      dynamicSelectModel1.validate();
      // Undeclared exception!
      try { 
        dynamicSelectModel1.getOptionCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression @|pxDER.values() to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value("startTag() must be called before attribute()");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.label("startTag() must be called before attribute()");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.collection("");
      dynamicSelectModel3.getComponent();
      dynamicSelectModel2.setComponent((Component) null);
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel3.empty((Object) null);
      assertSame(dynamicSelectModel4, dynamicSelectModel1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.empty(mockThaiBuddhistDate0);
      Object object0 = new Object();
      dynamicSelectModel1.getTopLevelComponent();
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel0.collection("");
      // Undeclared exception!
      try { 
        dynamicSelectModel2.translateValue("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression  evaluated to null. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.collection("org.mvel.ast.WhileNode");
      Object object0 = new Object();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.empty(object0);
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.value("");
      // Undeclared exception!
      try { 
        dynamicSelectModel2.getOptionCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression org.mvel.ast.WhileNode evaluated to an object that is not an instance of Collection or Object[]. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("[]");
      dynamicSelectModel1.getOptionCount();
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel0.value("[]");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.empty(mockJapaneseDate0);
      dynamicSelectModel2.getTopLevelComponent();
      dynamicSelectModel3.setTopLevelComponent((StandaloneComponent) null);
      assertSame(dynamicSelectModel3, dynamicSelectModel1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.collection("[]");
      int int0 = ObjectStreamConstants.baseWireHandle;
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value("[]");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      dynamicSelectModel1.translateValue("");
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      JapaneseDate japaneseDate0 = MockJapaneseDate.from(hijrahDate0);
      Chronology chronology0 = japaneseDate0.getChronology();
      ChronoLocalDate chronoLocalDate0 = chronology0.dateNow();
      // Undeclared exception!
      try { 
        ZoneId.from(chronoLocalDate0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain ZoneId from TemporalAccessor: Japanese Heisei 30-07-16 of type java.time.chrono.JapaneseDate
         //
         verifyException("java.time.ZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("[]");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      dynamicSelectModel1.empty(mockThaiBuddhistDate0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel0.value("[]");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      dynamicSelectModel2.translateValue(" to create a value for dynamic ISelectModel. Index was ");
      dynamicSelectModel2.collection(" to create a value for dynamic ISelectModel. Index was ");
      dynamicSelectModel0.getOptionCount();
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel0.label("");
      assertSame(dynamicSelectModel3, dynamicSelectModel1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("[]");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Object object0 = new Object();
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel0.empty(object0);
      dynamicSelectModel1.value("[]");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      dynamicSelectModel2.translateValue("org.mvel.util.FastList@0000000026");
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getLabel((-1266));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }
}
