/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:22:05 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.zone.ZoneRulesException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("E\"nj7rO");
      jSONScanner0.scanString();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanInt('*');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 2371;
      JSONScanner jSONScanner0 = new JSONScanner("BtGA.@V~y-IK", 2371);
      jSONScanner0.skipWhitespace();
      char char0 = 'l';
      jSONScanner0.scanUUID('l');
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(41, 2371);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KHL[FLzH~|");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SymbolTable symbolTable0 = new SymbolTable(99);
      JSONScanner jSONScanner0 = new JSONScanner("KHL[FLzH~|");
      assertEquals(0, jSONScanner0.matchStat);
      
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      jSONScanner0.scanEnum(class0, symbolTable0, 'L');
      jSONScanner0.resetStringPosition();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 65279, (-2520));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com", 120);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(120, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(120, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(1372);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - c, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TeSt");
      assertEquals(0, jSONScanner0.token());
      assertEquals('T', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      Locale locale0 = jSONScanner0.getLocale();
      assertEquals(0, jSONScanner0.token());
      assertEquals('T', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(locale0);
      
      jSONScanner0.scanIdent();
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.close();
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.putChar('5');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse new");
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jSONReaderScanner0.nextToken((-1371));
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      jSONReaderScanner0.scanStringArray(list0, 'j');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2824);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled(2824, 2824);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      String string0 = zoneOffset0.getId();
      assertEquals("+18:00", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("'0[O");
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\'', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5p`%N?kd'ZuzG", 3380);
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(3380, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken(3380);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(3380, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char char0 = jSONReaderScanner0.charAt(3380);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(3380, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', char0);
      
      char char1 = JSONLexer.EOI;
      assertEquals('\u001A', char1);
      assertTrue(char1 == char0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(3380, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(64L, long0);
      
      String string0 = jSONReaderScanner0.info();
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(3380, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'<", 1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-1513));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Feature.AllowSingleQuotes is false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("BtGA.@V~y-IK", 2376);
      assertEquals(2376, jSONScanner0.getFeatures());
      assertEquals('B', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.skipWhitespace();
      assertEquals(2376, jSONScanner0.getFeatures());
      assertEquals('B', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      String string0 = jSONScanner0.scanString('o');
      assertEquals(2376, jSONScanner0.getFeatures());
      assertEquals('B', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(string0);
      
      jSONScanner0.putChar('~');
      assertEquals(2376, jSONScanner0.getFeatures());
      assertEquals('B', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat);
      
      int int0 = Calendar.PM;
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, (-1653));
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1653), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1653), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {}, charArray0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1653), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(intArray0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT+18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      jSONReaderScanner0.setTimeZone(timeZone0);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1653), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals("GMT+18:00", timeZone0.getID());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 2824;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2824);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[2] = (byte)12;
      JSONScanner jSONScanner0 = new JSONScanner("4)rG-ojgnp=h>~e10+");
      assertEquals(0, jSONScanner0.token());
      assertEquals('4', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextIdent();
      assertEquals(20, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      double double0 = jSONScanner0.scanDouble('q');
      assertEquals(20, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      assertEquals(20, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotNull(timeZone0);
      
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      jSONScanner0.config(feature0, true);
      assertEquals(20, jSONScanner0.token());
      assertEquals(33757, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.intValue();
      assertEquals(20, jSONScanner0.token());
      assertEquals(33757, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
      
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = ']';
      boolean boolean0 = JSONScanner.charArrayCompare("setter", 39, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', ']'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("setter");
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("Unknown", string0);
      assertNotNull(string0);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', ']'}, charArray0);
      assertNull(bigInteger0);
      
      jSONReaderScanner0.close();
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDouble(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ", (-2478));
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals((-2478), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.tokenName();
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals((-2478), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("Unknown", string0);
      assertNotNull(string0);
      
      char char0 = jSONScanner0.next();
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals((-2478), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('l', char0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      pipedOutputStream0.write((-2090));
      assertEquals(1, pipedInputStream0.available());
      
      int int0 = 120;
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 120);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('T', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      Locale locale0 = jSONScanner0.getLocale();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('T', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. T
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal", 36);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(36, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(36, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      jSONReaderScanner0.scanNumber();
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(36, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 110);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-,l{5~iSq)57.102tv");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONReaderScanner0.lexError("true", (Object[]) null);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextToken(44);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char char0 = jSONReaderScanner0.charAt(44);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', char0);
      
      char char1 = JSONLexer.EOI;
      assertEquals('\u001A', char1);
      assertTrue(char1 == char0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-4L), long0);
      
      int int0 = Calendar.WEEK_OF_MONTH;
      assertEquals(4, int0);
      
      int int1 = Calendar.WEEK_OF_MONTH;
      assertEquals(4, int1);
      assertTrue(int1 == int0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'h', '\u0000'}, charArray0);
      assertNull(floatArray0);
      
      int int2 = (-2523);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-2), 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 110, 1011);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1011, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1011, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 710);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      long long1 = jSONReaderScanner1.scanFieldSymbol(charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0L, long1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(long1 == long0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONReaderScanner1.tokenName();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals("Unknown", string0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      
      BigInteger bigInteger0 = jSONReaderScanner1.scanFieldBigInteger(charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(bigInteger0);
      
      SymbolTable symbolTable0 = new SymbolTable(710);
      assertNotNull(symbolTable0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 18);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = 'j';
      charArray0[2] = 'u';
      charArray0[3] = 'x';
      charArray0[4] = '-';
      charArray0[5] = 'L';
      charArray0[6] = ']';
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'>', 'j', 'u', 'x', '-', 'L', ']'}, charArray0);
      assertNull(floatArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner("m#>)+q:#6-mPDYM>");
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('m', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('m', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      jSONScanner0.scanIdent();
      assertEquals('#', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      
      int int0 = Calendar.WEEK_OF_MONTH;
      assertEquals(4, int0);
      
      int int1 = jSONScanner0.intValue();
      assertEquals('#', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(61, int1);
      assertFalse(int1 == int0);
      
      long long1 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals('#', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONScanner0.info();
      assertEquals('#', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals("pos 1, json : m#>)+q:#6-mPDYM>", string0);
      assertNotNull(string0);
      
      String string1 = jSONScanner0.numberString();
      assertEquals('#', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals("m", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '\\';
      charArray1[1] = '\\';
      charArray1[5] = '\\';
      long long2 = jSONScanner0.longValue();
      assertEquals('#', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(61L, long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      JSONScanner jSONScanner0 = new JSONScanner("ULR?&0[DHWk9=O");
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('U', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      int int0 = 26376;
      SymbolTable symbolTable0 = new SymbolTable(26376);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('?', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("ULR", string0);
      assertNotNull(string0);
      
      int int1 = jSONScanner0.intValue();
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('?', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(37, int1);
      assertFalse(int1 == int0);
      
      SymbolTable symbolTable1 = null;
      try {
        symbolTable1 = new SymbolTable((-205));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("b");
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('b', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('d');
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = jSONReaderScanner0.scanInt('m');
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StringReader stringReader0 = new StringReader("#NWzTn['a+Si4");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('#', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      StringReader stringReader1 = new StringReader("NaN");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader1, 0);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('N', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      int int0 = jSONReaderScanner1.scanInt('j');
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('N', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("zIPoO{}zkN'S$8s{C5");
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('z', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[1];
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      jSONScanner0.setLocale(locale0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('z', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - z, info : pos 0, json : zIPoO{}zkN'S$8s{C5
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken(44);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(6, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      double double0 = jSONReaderScanner0.scanDouble('I');
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(6, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = jSONReaderScanner0.indexOf('u', 44);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(6, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), int0);
      
      int int1 = jSONReaderScanner0.token();
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(6, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(6, int1);
      assertFalse(int1 == int0);
      
      Date date0 = jSONReaderScanner0.scanDate('u');
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(6, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      
      JSONScanner jSONScanner0 = new JSONScanner("true");
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char char0 = jSONScanner0.next();
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('r', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('r', char0);
      
      jSONScanner0.nextIdent();
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int2 = jSONScanner0.intValue();
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(7529, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = '2';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 42, 42);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(42, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '2', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(42, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '2', '\u0000'}, charArray0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(42, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '2', '\u0000'}, charArray0);
      assertNull(intArray0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(42, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '2', '\u0000'}, charArray0);
      
      char char0 = jSONReaderScanner0.charAt(4065);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(42, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('\u0000', char0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '2', '\u0000'}, charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TeSt");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      charArray0[1] = 'x';
      charArray0[2] = '&';
      charArray0[3] = 'z';
      charArray0[4] = '2';
      charArray0[5] = '~';
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'%', 'x', '&', 'z', '2', '~'}, charArray0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      byte byte0 = (byte)52;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)49;
      byte byte1 = (byte)26;
      byteArray0[2] = (byte)26;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)83, (byte)49, (byte)26, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)83, (byte)49, (byte)26, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, (byte)83, (byte)83);
      assertEquals(83, jSONReaderScanner0.getFeatures());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'/', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable((byte)49);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, (-1630));
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-1630), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-1630), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONScanner0);
      
      UUID uUID0 = jSONScanner0.scanUUID('5');
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(uUID0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      jSONScanner0.skipWhitespace();
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('m');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match m - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("{EFGV:^y:tt}efcks", 39);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('{', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(39, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : {pos 0, json : {EFGV:^y:tt}efcks
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\'';
      charArray0[1] = 'D';
      charArray0[2] = 'D';
      charArray0[3] = '\'';
      charArray0[4] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 224, 21);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(21, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\'', 'D', 'D', '\'', 'D'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(21, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\'', 'D', 'D', '\'', 'D'}, charArray0);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      int int0 = 114;
      SymbolTable symbolTable0 = new SymbolTable(114);
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 114);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'g', 'g', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('g');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(3, jSONReaderScanner0.matchStat());
      assertEquals(3, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'g', 'g', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 1689, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char char0 = '\u0084';
      JSONScanner jSONScanner0 = new JSONScanner(".N9#pl");
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('.', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextIdent();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('N', jSONScanner0.getCurrent());
      assertEquals(25, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      PipedReader pipedReader0 = new PipedReader('D');
      assertNotNull(pipedReader0);
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('\u0084', 'D', '\u0084', 'f', 'c', 'f');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nn9", 48);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(48, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextIdent();
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(48, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = 'J';
      charArray0[2] = 'O';
      charArray0[3] = '*';
      charArray0[4] = '&';
      charArray0[5] = '|';
      charArray0[6] = '$';
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'X', 'J', 'O', '*', '&', '|', '$'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WqQCYdQ%^yB%R");
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('W', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken(2081);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('q', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("/4Y:\"O]");
      assertEquals('/', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      SymbolTable symbolTable0 = new SymbolTable(1554);
      assertNotNull(symbolTable0);
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('q', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SymbolTable symbolTable1 = new SymbolTable(435);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertNotNull(symbolTable1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      charArray0[1] = 'y';
      charArray0[2] = 'r';
      charArray0[3] = 'w';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'$', 'y', 'r', 'w'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.np = 0;
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'$', 'y', 'r', 'w'}, charArray0);
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'$', 'y', 'r', 'w'}, charArray0);
      assertNull(intArray0);
      
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), int0);
      assertArrayEquals(new char[] {'$', 'y', 'r', 'w'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.google.common.collect.LinkedListMultimap");
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'p';
      SymbolTable symbolTable0 = new SymbolTable(122);
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 73, (-1093));
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1093), jSONReaderScanner0.getFeatures());
      assertEquals('o', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'o', 'o', 'p', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1093), jSONReaderScanner0.getFeatures());
      assertEquals('o', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'o', 'o', 'p', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.nextToken();
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-1093), jSONReaderScanner0.getFeatures());
      assertEquals('o', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'o', 'o', 'p', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-1093), jSONReaderScanner0.getFeatures());
      assertEquals('o', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'o', 'o', 'p', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(collection0);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled((-1), (-1093));
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-1093), jSONReaderScanner0.getFeatures());
      assertEquals('o', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'o', 'o', 'p', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state. ", 2);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken(2);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char char0 = File.separatorChar;
      assertEquals('/', char0);
      
      Date date0 = jSONReaderScanner0.scanDate('/');
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-1227), 58);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 2856);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(2856, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(2856, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Date date0 = jSONReaderScanner0.scanDate('@');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(2856, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(date0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      int[] intArray0 = JSONLexerBase.digits;
      assertNotNull(intArray0);
      
      char char0 = 'L';
      jSONReaderScanner0.sp = 0;
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(2856, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 2856);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~y1*Zm");
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.stringDefaultValue = "~y1*Zm";
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("~y1*Zm", jSONReaderScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("~y1*Zm", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'u'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "false");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('~');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals("~y1*Zm", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      
      boolean boolean2 = jSONReaderScanner0.isEnabled(318, 3832);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals("~y1*Zm", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      char char0 = jSONReaderScanner0.next();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals("~y1*Zm", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('y', char0);
      
      Calendar calendar0 = jSONReaderScanner0.getCalendar();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals("~y1*Zm", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(calendar0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      String string0 = zoneOffset0.toString();
      assertEquals("-18:00", string0);
      assertNotNull(string0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-18:00");
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      char char0 = '\\';
      charArray0[1] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3510);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'t', '\\'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      String string0 = jSONReaderScanner0.scanString('w');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'t', '\\'}, charArray0);
      assertNull(string0);
      
      int int0 = jSONReaderScanner0.token();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'t', '\\'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable('g');
      assertNotNull(symbolTable0);
      
      boolean boolean0 = JSONScanner.checkDate('u', 'F', '/', '!', 'g', '.', Integer.MAX_VALUE, (-782));
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("KQ;@Jxz<Xa");
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('K', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.putChar('=');
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('K', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      String string0 = jSONScanner0.info();
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('K', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("pos 0, json : KQ;@Jxz<Xa", string0);
      assertNotNull(string0);
      
      char char0 = jSONScanner0.getCurrent();
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('K', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('K', char0);
      
      int int0 = jSONScanner0.getFeatures();
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('K', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, int0);
      
      float float0 = jSONScanner0.scanFloat('F');
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('K', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      
      JSONScanner jSONScanner1 = new JSONScanner("error parse true");
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('e', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      // Undeclared exception!
      try { 
        jSONScanner1.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. e
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 69);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(69, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken(69);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(69, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(9, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char char0 = jSONReaderScanner0.charAt(677);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(69, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(9, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', char0);
      
      char char1 = jSONReaderScanner0.getCurrent();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(69, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(9, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', char1);
      assertTrue(char1 == char0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(69, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(9, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(1035, (-766));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -766
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 't';
      charArray0[4] = '!';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 314);
      assertEquals('Z', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', 't', '!'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      float float0 = jSONReaderScanner0.scanFloat('>');
      assertEquals('Z', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', 't', '!'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("aoKB><utS;/<", 0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('a', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      int int0 = jSONScanner0.scanInt('A');
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('a', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
      
      jSONScanner0.nextIdent();
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('>', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      
      double double0 = jSONScanner0.scanDouble('A');
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('>', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('>', jSONScanner0.getCurrent());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotNull(timeZone0);
      
      int int1 = jSONScanner0.intValue();
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('>', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(5557, int1);
      assertFalse(int1 == int0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("aoKB><utS;/<");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.scanLong('9');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      
      boolean boolean1 = jSONReaderScanner0.isEnabled(44, 5557);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("x~Za<jVb%xMa");
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char char0 = '|';
      int int0 = 84;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. ~
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan false error", 0);
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.scanLong('z');
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = 'x';
      charArray0[2] = 'J';
      charArray0[4] = 'Z';
      charArray0[5] = 'p';
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'~', 'x', 'J', '\u0000', 'Z', 'p'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      charArray0[1] = 'y';
      charArray0[2] = 'r';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'$', 'y', 'r', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('=');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'$', 'y', 'r', '\u0000'}, charArray0);
      
      long long0 = jSONReaderScanner0.scanLong('r');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'$', 'y', 'r', '\u0000'}, charArray0);
      
      charArray0[2] = 'y';
      long long1 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertArrayEquals(new char[] {'$', 'y', 'y', '\u0000'}, charArray0);
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'$', 'y', 'y', '\u0000'}, charArray0);
      assertNull(intArray0);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 413, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "\\pgZ~o!|cL";
      JSONScanner jSONScanner0 = new JSONScanner("pgZ~o!|cL");
      assertFalse(jSONScanner0.isEOF());
      assertEquals('p', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[4];
      charArray0[3] = '\u0000';
      boolean boolean1 = jSONScanner0.scanFieldBoolean(charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('p', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('p', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = jSONScanner0.scanType("V");
      assertFalse(jSONScanner0.isEOF());
      assertEquals('p', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-2), int0);
      
      jSONScanner0.nextIdent();
      assertFalse(jSONScanner0.isEOF());
      assertEquals('~', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=Eo");
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("{SM:*3");
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('{', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      int int1 = jSONScanner0.intValue();
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('{', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : {pos 0, json : {SM:*3
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 110, 110);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      JSONScanner jSONScanner0 = new JSONScanner(".", 110);
      assertEquals('.', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(110, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.hasSpecial = true;
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      char char0 = jSONScanner0.next();
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(110, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('\u001A', char0);
      
      int int1 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = 2825;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      String string0 = "UL\\R?&0[DHWk9=O";
      JSONScanner jSONScanner0 = new JSONScanner("ULR?&0[DHWk9=O", 2825);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(2825, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('U', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(26376);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6j3HyUS*{ljf/!");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("6j3HyUS*{ljf/!", 3681);
      assertEquals('6', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(3681, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.nextToken(8192);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      char char0 = jSONReaderScanner0.charAt(0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('6', char0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      long long0 = jSONReaderScanner1.longValue();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('6', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(3681, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      int int1 = 1035;
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = '6';
      charArray0[5] = '6';
      charArray0[6] = '6';
      charArray0[7] = '6';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"knjEp*=NDo");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      charArray0[1] = 'I';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '+';
      charArray0[5] = 'R';
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'+', 'I', '\'', '\'', '+', 'R'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('8');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "scan false error";
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan false error", 0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.scanLong('z');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = 'x';
      String string1 = jSONReaderScanner0.scanFieldString(charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'~', 'x', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(string1);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\r?&", (-2620));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-2620), jSONReaderScanner1.getFeatures());
      assertEquals('\r', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      int int1 = 404;
      boolean boolean0 = jSONReaderScanner0.isEnabled(404, (-2147483589));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=Eo", 48);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("SM:*3");
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('S', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      int int0 = jSONScanner0.intValue();
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('S', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 102, 48);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(48, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('\'', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'\'', '\'', '\''}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertArrayEquals(new char[] {'\'', '\'', '\''}, charArray0);
      assertNull(string0);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertArrayEquals(new char[] {'\'', '\'', '\''}, charArray0);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('T', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanFieldDecimal(charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('T', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(bigDecimal0);
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('T', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(string0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertFalse(set0.isEmpty());
      assertEquals(597, set0.size());
      assertNotNull(set0);
      
      jSONScanner0.scanStringArray(set0, '@');
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('T', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(set0.isEmpty());
      assertEquals(597, set0.size());
      assertEquals((-1), jSONScanner0.matchStat);
      
      char char0 = '9';
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('~', 'T', 'W', 'n', '@');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("ULR?&0[DHWk9=O");
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(26376);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(18, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('?', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("ULR", string0);
      assertNotNull(string0);
      
      JSONScanner jSONScanner1 = new JSONScanner("new", 2825);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(2825, jSONScanner1.getFeatures());
      assertEquals('n', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      float float0 = jSONScanner1.scanFloat('9');
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(2825, jSONScanner1.getFeatures());
      assertEquals('n', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals((-1), jSONScanner1.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONScanner jSONScanner2 = new JSONScanner("\"", 0);
      assertEquals(0, jSONScanner2.token());
      assertEquals('\"', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertNotNull(jSONScanner2);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ULR?&0[DHWk9=O", 61);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(61, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('U', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      float float1 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(61, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('U', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner2.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 110;
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      JSONScanner jSONScanner0 = new JSONScanner(".", 110);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('.', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(110, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      int int1 = jSONScanner0.token();
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('.', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(110, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      JSONScanner jSONScanner1 = new JSONScanner(".");
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('.', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      int int2 = 3786;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".", 3786);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(3786, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONScanner0.scanNumber();
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(110, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(3, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "-,l{5~iSq)57.102tv6";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-,l{5~iSq)57.102tv6");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char char0 = 'h';
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = '7';
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'h', '7'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("E\"nj7rO");
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('E', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.scanNumber();
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(3, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONReaderScanner0.copyTo(0, 0, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'h', '7'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy((-1791008140), charArray0, 10, 3366);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = 'y';
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      charArray0[3] = 'j';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'y', 'y');
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(121, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', 'y', 'y', 'j'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.np = 675;
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(121, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(121, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', 'y', 'y', 'j'}, charArray0);
      assertNotNull(string0);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(121, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'\u0000', 'y', 'y', 'j'}, charArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(675);
      assertNotNull(symbolTable0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 2825;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 2825);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(2825, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(2825, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {}, charArray0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(2825, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(intArray0);
      
      int int1 = 117;
      JSONScanner jSONScanner0 = new JSONScanner("-Ic`A;XCJ?0", 117);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(117, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      int int2 = jSONScanner0.token();
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(117, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(2825, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(date0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("-Ic`A;XCJ?0", 0);
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      float float0 = jSONReaderScanner1.scanFieldFloat(charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      
      char char0 = jSONReaderScanner1.charAt(648);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals('\u0000', char0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('I', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(117, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, 648);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("y");
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.np = 31;
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      String string0 = jSONReaderScanner0.subString(31, 31);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      jSONReaderScanner0.bp = 31;
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.setToken(1726);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1726, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloatArray(charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'<");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.putChar('!');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("  +c%fX$[qsJ>;zOJ/", 1473);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1473, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      int int0 = jSONScanner0.scanType("  +c%fX$[qsJ>;zOJ/");
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1473, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-2), int0);
      
      jSONScanner0.scanIdent();
      assertEquals(0, jSONScanner0.pos());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1473, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int1 = jSONReaderScanner0.scanInt('v');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = Calendar.WEEK_OF_MONTH;
      assertEquals(4, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      
      int int3 = Calendar.SHORT_STANDALONE;
      assertEquals(32769, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(1473, charArray0, (-412), 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",dG!");
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(",dG!", 20);
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(',', jSONReaderScanner1.getCurrent());
      assertEquals(20, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner1.nextToken(0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(16, jSONReaderScanner1.token());
      assertEquals('d', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(20, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 24, 20);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(20, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner2);
      
      char char0 = jSONReaderScanner2.charAt(5);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(20, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals('\u0000', char0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      char char1 = jSONReaderScanner2.getCurrent();
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(20, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals('\u0000', char1);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertTrue(char1 == char0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      long long0 = jSONReaderScanner1.longValue();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertEquals(16, jSONReaderScanner1.token());
      assertEquals('d', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(20, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = '7';
      charArray0[2] = 'u';
      char char0 = 'q';
      charArray0[4] = 'q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("b", 6155);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('b', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(6155, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('b', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(6155, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", string0);
      assertNotNull(string0);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('b', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(6155, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'r', '7', 'u', '\u0000', 'q', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(1177);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[7];
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      JSONScanner jSONScanner0 = new JSONScanner(")09BPdUE(o=0", 8);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(8, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(')', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 110);
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      String string0 = jSONReaderScanner0.subString(8, 0);
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSONScanner0;
      String string1 = jSONReaderScanner0.scanString(':');
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(string1);
      
      objectArray0[1] = (Object) jSONReaderScanner0;
      jSONScanner0.lexError("[I<mP-+B<G4", objectArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(8, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(')', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("");
      assertTrue(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      JSONScanner jSONScanner2 = new JSONScanner("null");
      assertEquals('n', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertNotNull(jSONScanner2);
      
      jSONScanner2.config(feature0, true);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertEquals('n', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      jSONScanner2.scanStringArray(arrayList0, 'X');
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals('n', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals((-1), jSONScanner2.matchStat());
      assertEquals((-1), jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - n, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[0];
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      JSONScanner jSONScanner0 = new JSONScanner("ULR?&0[DHWk9=O");
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(26376);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('?', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("ULR", string0);
      assertNotNull(string0);
      
      int int0 = jSONScanner0.token();
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('?', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(18, int0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ULR?&0[DHWk9=O");
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('U', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('U', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - U, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 2825);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(2825, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(2825, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {}, charArray0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(2825, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(intArray0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      JSONScanner jSONScanner0 = new JSONScanner("ULR?&0[DHWk9=O", 0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(2825, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      JSONScanner jSONScanner0 = new JSONScanner("Dmol=A$)6(<N");
      assertEquals('D', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(26376);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("Dmol", string0);
      assertNotNull(string0);
      
      int int0 = jSONScanner0.token();
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(18, int0);
      
      JSONScanner jSONScanner1 = new JSONScanner("UL", 123);
      assertEquals(0, jSONScanner1.token());
      assertEquals('U', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(123, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Q5Ubq@", 117);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('Q', jSONReaderScanner0.getCurrent());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      int int1 = jSONScanner0.scanInt('9');
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 110, 110);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'K';
      charArray1[1] = 'G';
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'K', 'G'}, charArray1);
      
      JSONScanner jSONScanner0 = new JSONScanner("\r?&");
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('\r', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.putChar('{');
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('\r', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('\r', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\r?&", (-2));
      assertEquals('\r', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.nextToken(4933);
      assertNotSame(charArray0, charArray1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      char char1 = jSONReaderScanner1.getCurrent();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('\r', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('\r', char1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(char1 == char0);
      
      long long0 = jSONReaderScanner1.longValue();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('\r', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StringReader stringReader0 = new StringReader("KHL[FLzH~|");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('K', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('K', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('K', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      
      double double0 = jSONReaderScanner0.scanDouble('B');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('K', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      
      stringReader0.reset();
      JSONScanner jSONScanner0 = new JSONScanner("yOj1^bgqjPM2H? |V", 99999);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('y', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(99999, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('y', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(99999, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      String string0 = zoneOffset0.getId();
      assertEquals("+18:00", string0);
      assertNotNull(string0);
      
      String string1 = zoneOffset0.toString();
      assertEquals("+18:00", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+18:00", 9);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(9, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('N');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(9, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("6c`D", 65279);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(65279, jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(65279, jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(65279, jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      float float1 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(9, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONScanner0.scanNumber();
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(65279, jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      
      boolean boolean2 = JSONScanner.checkDate('v', 'N', 's', 'X', 'N', 'W', (-1), (-1));
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      char char0 = JSONLexer.EOI;
      assertEquals('\u001A', char0);
      
      String string2 = jSONScanner0.scanString('X');
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(65279, jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("'Ms8h#*s[");
      assertEquals('\'', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals('\'', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'Ms8h#*s[");
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("false");
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('f', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      // Undeclared exception!
      try { 
        jSONScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-,l{5~iSq)57.102tv");
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Tp3H=iu?r}]e8=N@.oG", 111);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('T', jSONReaderScanner1.getCurrent());
      assertEquals(111, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner1.nextToken(44);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(111, jSONReaderScanner1.getFeatures());
      assertEquals('=', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      char char0 = jSONReaderScanner1.charAt(44);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(111, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('=', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('\u001A', char0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      char char1 = jSONReaderScanner1.getCurrent();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(111, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('=', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('=', char1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(char1 == char0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      SymbolTable symbolTable0 = new SymbolTable('g');
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('g');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours((-1));
      assertNotNull(zoneOffset0);
      
      StringReader stringReader0 = new StringReader("fastjson.parser.autoTypeAccept");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-1));
      assertEquals(0L, long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('f', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      int int0 = jSONReaderScanner1.intValue();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('f', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, int0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("%", 0);
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('%', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 110, 1011);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1011, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 110);
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(110, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean0 = jSONReaderScanner1.scanBoolean('G');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(110, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(boolean0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("false");
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("false");
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('f', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      
      jSONReaderScanner2.nextToken(8192);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertEquals(7, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals('\u001A', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-691), 4059);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[4];
      SymbolTable symbolTable0 = new SymbolTable(4);
      assertNotNull(symbolTable0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.ASMUtils");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(bigDecimal0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)18}, byteArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("fastjson.parser.autoTypeAccept", 14);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(14, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('f', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("SM");
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('M', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 4, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "-,l{5~iSq)57.102tv6";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-,l{5~iSq)57.102tv6");
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.scanLong(')');
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      
      char char0 = 'h';
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'h', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("-,l{5~iSq)57.102tv6", '7');
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(55, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(55, jSONScanner0.getFeatures());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONReaderScanner0.copyTo(0, 0, charArray0);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'h', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy((-1791008123), charArray0, 10, 3374);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2Wm`#n");
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('2', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char char0 = 'S';
      long long0 = jSONReaderScanner0.scanLong('S');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('2', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(2L, long0);
      
      char char1 = '_';
      int int0 = jSONReaderScanner0.scanInt('_');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('2', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      char char0 = '\\';
      charArray0[1] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3510);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'n', '\\'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      String string0 = jSONReaderScanner0.scanString('w');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'n', '\\'}, charArray0);
      assertNull(string0);
      
      int int0 = jSONReaderScanner0.token();
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'n', '\\'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      String string0 = zoneOffset0.getId();
      assertEquals("-18:00", string0);
      assertNotNull(string0);
      
      String string1 = zoneOffset0.getId();
      assertEquals("-18:00", string1);
      assertNotNull(string1);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ZoneOffset zoneOffset1 = ZoneOffset.ofHours(16);
      assertNotSame(zoneOffset1, zoneOffset0);
      assertFalse(zoneOffset1.equals((Object)zoneOffset0));
      assertNotNull(zoneOffset1);
      
      StringReader stringReader0 = new StringReader("-18:00");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-721L));
      assertEquals(0L, long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-18:00");
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      int int0 = Calendar.TUESDAY;
      assertEquals(3, int0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("%", 116);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(116, jSONReaderScanner1.getFeatures());
      assertEquals('%', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.nextToken(3);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(':', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      char char0 = jSONReaderScanner1.charAt(14);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(116, jSONReaderScanner1.getFeatures());
      assertEquals('%', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('\u0000', char0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      char char1 = jSONReaderScanner0.getCurrent();
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(':', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(':', char1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(char1 == char0);
      
      long long1 = jSONReaderScanner1.longValue();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(116, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('%', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0L, long1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      JSONScanner jSONScanner0 = new JSONScanner("error parse false");
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("b");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('b', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("null");
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      jSONScanner1.nextIdent();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(8, jSONScanner1.token());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nkcf0hPD2a7i5", 0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.scanLong('z');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(string0);
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((String) null, 48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 20, 20);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      char char0 = '*';
      JSONScanner jSONScanner0 = new JSONScanner("create asm deserializer error, ", 0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      
      jSONReaderScanner0.nextToken(0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("C", 0);
      assertEquals('C', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      jSONScanner0.putChar('/');
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 2107);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      SymbolTable symbolTable0 = new SymbolTable('g');
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'g');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'g', 'g', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      String string0 = jSONReaderScanner0.scanString('g');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'g', 'g', '\u0000', '\u0000'}, charArray0);
      assertNull(string0);
      
      char char0 = 'k';
      Date date0 = jSONReaderScanner0.scanDate('k');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'g', 'g', '\u0000', '\u0000'}, charArray0);
      assertNull(date0);
      
      JSONScanner jSONScanner0 = new JSONScanner("scan false error");
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('s', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'g', 'g', '\u0000', '\u0000'}, charArray0);
      
      String string1 = "x\"a,^>{[c";
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(" - ");
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(' ', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner1.nextToken((-245));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(1, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals(' ', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray1, 1817, 1817);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("error parse null", 100);
      assertEquals(0, jSONScanner0.token());
      assertEquals(100, jSONScanner0.getFeatures());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      int int0 = jSONScanner0.scanInt('A');
      assertEquals(0, jSONScanner0.token());
      assertEquals(100, jSONScanner0.getFeatures());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
      
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      assertEquals(0, jSONScanner0.token());
      assertEquals(100, jSONScanner0.getFeatures());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotNull(timeZone0);
      
      int int1 = jSONScanner0.intValue();
      assertEquals(0, jSONScanner0.token());
      assertEquals(100, jSONScanner0.getFeatures());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      char char0 = jSONScanner0.next();
      assertEquals('r', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(100, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('r', char0);
      
      float float0 = jSONScanner0.scanFloat('R');
      assertEquals('r', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(100, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      
      long long0 = jSONScanner0.scanLong('l');
      assertEquals('r', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(100, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
      
      int int2 = jSONScanner0.intValue();
      assertEquals('r', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(100, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals('r', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(100, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '4', '4');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(52, jSONReaderScanner0.getFeatures());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'4', '4', '4', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('=');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(52, jSONReaderScanner0.getFeatures());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'4', '4', '4', '\u0000'}, charArray0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(52, jSONReaderScanner0.getFeatures());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'4', '4', '4', '\u0000'}, charArray0);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '4';
      charArray0[0] = '4';
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte)83;
      byteArray0[8] = (byte)46;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)40, (byte) (-1), (byte)125, (byte)18, (byte)110, (byte)83, (byte) (-122), (byte)83, (byte)46}, byteArray0);
      
      charArray1[2] = 'd';
      int int0 = jSONReaderScanner0.scanInt('1');
      assertNotSame(charArray0, charArray1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(52, jSONReaderScanner0.getFeatures());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(444, int0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'4', '4', '4', '\u0000'}, charArray0);
      
      charArray1[1] = '1';
      charArray1[4] = '4';
      charArray1[5] = '=';
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(52, jSONReaderScanner0.getFeatures());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'4', '4', '4', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'4', '1', 'd', '\u0000', '4', '='}, charArray1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 4, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 43, 43);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(43, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("tp3h", 43);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('t', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(43, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.setToken(0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('t', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(43, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = JSONScanner.checkDate('&', 'V', 'U', ':', 'x', ':', 43, (-4274));
      assertFalse(boolean0);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(43, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9FTWVL,K6p70", 68);
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(68, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '~';
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ", 68);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(68, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken(0);
      assertEquals(1, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('l', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(68, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      String string0 = jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(68, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("illegal", string0);
      assertNotNull(string0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("0Dn4sfn{");
      assertEquals('0', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      int int0 = Calendar.SHORT_STANDALONE;
      assertEquals(32769, int0);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('~');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(68, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      jSONReaderScanner1.nextToken(1800);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(3, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("g\"?6j['bq!,");
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('g', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.charAt((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "new";
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[5];
      charArray0[2] = '*';
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(timeZone0);
      
      int int0 = Calendar.AUGUST;
      assertEquals(7, int0);
      
      String string1 = jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("new", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("new");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 40;
      JSONScanner jSONScanner0 = new JSONScanner("NN9");
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('N', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      double double0 = jSONScanner0.scanDouble('9');
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('N', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      
      JSONScanner jSONScanner1 = new JSONScanner("@vG|+e", 45380);
      assertEquals('@', jSONScanner1.getCurrent());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(45380, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = 'N';
      charArray0[2] = '9';
      charArray0[3] = 'Q';
      charArray0[4] = '\\';
      charArray0[5] = '9';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("KHL[FLzH~|");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('K', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("KHL[FLzH~|", 0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('K', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("NN9");
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('N', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner1.nextToken(0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      boolean boolean1 = jSONReaderScanner0.matchField(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('H', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      double double0 = jSONReaderScanner1.scanDouble('P');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      boolean boolean2 = jSONReaderScanner0.scanBoolean('Q');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('H', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean2);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      String string0 = zoneOffset0.getId();
      assertEquals("-18:00", string0);
      assertNotNull(string0);
      
      String string1 = zoneOffset0.getId();
      assertEquals("-18:00", string1);
      assertNotNull(string1);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StringReader stringReader0 = new StringReader("scan false error");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-57L));
      assertEquals(0L, long0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[0];
      String string2 = jSONReaderScanner0.scanFieldString(charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string2);
      
      double double0 = jSONReaderScanner0.scanDouble('}');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Tp3H=iu?r}]e8=N@.oG", '0');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONReaderScanner0.nextToken(1139);
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char char0 = jSONReaderScanner0.charAt(20);
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', char0);
      
      char char1 = Locale.UNICODE_LOCALE_EXTENSION;
      assertEquals('u', char1);
      assertFalse(char1 == char0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(19405L, long0);
      
      boolean boolean1 = jSONReaderScanner0.isRef();
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = jSONReaderScanner0.scanBoolean('%');
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      jSONReaderScanner0.nextToken(93);
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      char char2 = JSONLexer.EOI;
      assertEquals('\u001A', char2);
      assertTrue(char2 == char0);
      assertFalse(char2 == char1);
      
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare((String) null, 93, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NN9");
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('N', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      double double0 = jSONScanner0.scanDouble('9');
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('N', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ebnj7ro");
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("com.alibaba.fastjson.JSON");
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('c', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner1.nextToken(26);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals('o', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      JSONScanner jSONScanner1 = new JSONScanner("true");
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertEquals('t', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      jSONScanner1.nextIdent();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(989, jSONScanner1.getFeatures());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(6, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      String string0 = zoneOffset0.getId();
      assertEquals("-18:00", string0);
      assertNotNull(string0);
      
      String string1 = zoneOffset0.toString();
      assertEquals("-18:00", string1);
      assertNotNull(string1);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StringReader stringReader0 = new StringReader("#NWzTn['a+Si4");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-57L));
      assertEquals(0L, long0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('#', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('#', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled(0, 0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('#', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("#NWzTn['a+Si4");
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('#', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      jSONReaderScanner1.setLocale(locale0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('#', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      assertFalse(boolean0);
      
      byte byte0 = (byte) (-46);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)28, (byte)0}, byteArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(99);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner("\"");
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      // Undeclared exception!
      jSONScanner0.scanEnum(class0, symbolTable0, 'L');
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StringReader stringReader0 = new StringReader("{mE!bNKB++ZiF");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('{', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cl");
      assertFalse(boolean0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('{', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      
      stringReader0.reset();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{mE!bNKB++ZiF");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("LECZ=z", 100);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('L', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(100, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.nextToken(55);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(12, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      char char0 = jSONReaderScanner1.charAt(5409);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('L', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(100, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('\u0000', char0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      char char1 = JSONLexer.EOI;
      assertEquals('\u001A', char1);
      assertFalse(char1 == char0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(12, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      String string0 = jSONReaderScanner1.info();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('L', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(100, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals("", string0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      SymbolTable symbolTable0 = new SymbolTable(114);
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 114);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'g', 'g', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('L');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'g', 'g', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(bigDecimal0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("hm", (-1));
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('h', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextIdent();
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean1 = jSONScanner0.isRef();
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double double0 = jSONScanner0.scanDouble('[');
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      
      JSONScanner jSONScanner1 = new JSONScanner("null", 60);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(60, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      int int0 = jSONScanner1.intValue();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(60, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, int0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      int int1 = Calendar.YEAR;
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      Date date0 = jSONScanner0.scanDate('g');
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNull(date0);
      
      char char0 = jSONScanner0.getCurrent();
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('\u001A', char0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      int int2 = jSONScanner1.getFeatures();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(60, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(60, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      float float0 = jSONScanner1.scanFloat('L');
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(60, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONScanner jSONScanner2 = new JSONScanner("aoKB");
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertEquals('a', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner2);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26, 40);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)28;
      byteArray0[0] = (byte) (-46);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-46), (byte)28, (byte)28, (byte) (-46), (byte)28, (byte)0, (byte)0}, byteArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(430);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner("n4o;yC%NWmr'FC{");
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      Enum<?> enum0 = jSONScanner0.scanEnum(class0, symbolTable0, 'L');
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(enum0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      String string0 = zoneOffset0.toString();
      assertEquals("-18:00", string0);
      assertNotNull(string0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StringReader stringReader0 = new StringReader("-18:00");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lSb&DVuc=t=p-P<w]", (-716));
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals((-716), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('3');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals((-716), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("\"");
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.nextToken(2724);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-716), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 2724, 65279);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '!';
      charArray0[2] = '!';
      StringReader stringReader0 = new StringReader("6j3HyUS*{ljf/!");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      
      stringReader0.reset();
      float float0 = jSONReaderScanner0.scanFloat('9');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(6.0F, float0, 0.01F);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("BeanToArray");
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('B', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean0 = JSONScanner.charArrayCompare("undefined", 0, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'/', '!', '!'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("d_L0j");
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('d', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner2.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-,l{5~iSq)57.102tv6");
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '7';
      charArray0[5] = '7';
      charArray0[6] = '7';
      charArray0[7] = '#';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 25);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(25, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'7', '7', '7', '7', '7', '7', '7', '#'}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('T');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNull(bigDecimal0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("-,l{5~iSq)57.102tv6", 25);
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(25, jSONReaderScanner2.getFeatures());
      assertEquals('-', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArray0, 2048, 25);
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(25, jSONReaderScanner3.getFeatures());
      assertEquals('7', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.token());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'7', '7', '7', '7', '7', '7', '7', '#'}, charArray0);
      assertNotNull(jSONReaderScanner3);
      
      jSONReaderScanner3.nextToken(54);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertEquals('#', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(25, jSONReaderScanner3.getFeatures());
      assertEquals(2, jSONReaderScanner3.token());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'7', '7', '7', '7', '7', '7', '7', '#'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner2.charAt((-1574));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1574
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[0] = 'r';
      charArray0[1] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'r', 'r');
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(114, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('r');
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(114, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(3, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(3, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("NotWriteDefaultValue");
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('N', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('N', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      
      jSONReaderScanner0.nextToken(3);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(114, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(3, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(3, jSONReaderScanner0.matchStat);
      
      String string0 = jSONScanner0.scanSymbol((SymbolTable) null);
      assertEquals(18, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals("NotWriteDefaultValue", string0);
      assertNotNull(string0);
      
      SymbolTable symbolTable0 = new SymbolTable(1259);
      assertNotNull(symbolTable0);
      
      CharBuffer charBuffer0 = null;
      jSONScanner0.scanString();
      int int0 = 33;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, jSONScanner0.matchStat, int0);
      charArrayReader0.read(charBuffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      String string1 = "u%`gCG0:tI@gA:d]d'";
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0, string1);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(inputStreamReader0);
      jSONScanner0.nextToken();
      int int1 = 487;
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, int1, jSONReaderScanner0.matchStat);
      jSONScanner1.scanFieldFloatArray2(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4o)-W5/csO-}p");
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char char0 = 'h';
      SymbolTable symbolTable0 = new SymbolTable(582);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'l');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan false error", 0);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("scan false error", (-1795804764));
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-1795804764), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextIdent();
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-1795804764), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      Locale locale0 = Locale.lookup(linkedList0, hashSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNull(locale0);
      
      jSONScanner0.setLocale((Locale) null);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-1795804764), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1795804764), jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("t");
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      JSONScanner jSONScanner1 = new JSONScanner("t", (-102));
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals((-102), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('t', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      // Undeclared exception!
      try { 
        jSONScanner1.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-,l{5~iSq)57.102tv6");
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = '7';
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'h', '7'}, charArray0);
      assertNull(bigInteger0);
      
      float float0 = jSONReaderScanner0.scanFloat('R');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = jSONReaderScanner0.scanDouble('h');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      
      JSONScanner jSONScanner0 = new JSONScanner("yOj1^bgqjPM2H? |V", (-1));
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('y', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('y', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'h', '7'}, charArray0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt(99999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99999
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 8192);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(8192, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("`:+0,8xM", 19);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(19, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('`', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken();
      assertFalse(jSONScanner0.isEOF());
      assertEquals(':', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(19, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextIdent();
      assertFalse(jSONScanner0.isEOF());
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(19, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(17, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = Calendar.WEEK_OF_MONTH;
      assertEquals(4, int0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, (-1457));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals((-1457), jSONReaderScanner1.getFeatures());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 67;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9FTWVL,K6p70", 67);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals(67, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[9];
      char char0 = 'L';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('L');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pgz");
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      
      JSONScanner jSONScanner0 = new JSONScanner("tf3");
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char char0 = '%';
      jSONReaderScanner0.putChar('%');
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long long0 = jSONScanner0.scanLong('&');
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
      
      JSONScanner jSONScanner1 = new JSONScanner("8`:Ri07");
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('8', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      int int0 = jSONScanner1.intValue();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('8', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, int0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONScanner jSONScanner2 = new JSONScanner("sq", (-1));
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertEquals('s', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals((-1), jSONScanner2.getFeatures());
      assertEquals("", jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner2);
      
      BigDecimal bigDecimal0 = jSONScanner1.scanDecimal('7');
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertEquals(0, jSONScanner1.token());
      assertEquals('8', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals((-1), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertNull(bigDecimal0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.charArrayCompare((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)28;
      byteArray0[0] = (byte) (-46);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-46), (byte)28, (byte)28, (byte) (-46), (byte)28, (byte)0, (byte)0}, byteArray0);
      
      String string0 = "syntax error";
      JSONScanner jSONScanner0 = new JSONScanner("syntax error");
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('s', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      int int0 = jSONScanner0.scanFieldInt(charArray0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('s', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int1 = jSONScanner0.pos();
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('s', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, Integer.MIN_VALUE, (byte)28);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'0[O");
      assertFalse(boolean0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT+18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("t=&>iO");
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      int int0 = 2;
      int int1 = 20;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 1352);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(1352, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("hl");
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('h', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONReaderScanner0.putChar(',');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(1352, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONScanner jSONScanner2 = new JSONScanner("AllowSingleQuotes");
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals('A', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner2);
      
      long long0 = jSONScanner2.scanFieldSymbol(charArray0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertFalse(jSONScanner2.isEOF());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals((-2), jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals('A', jSONScanner2.getCurrent());
      assertEquals((-2), jSONScanner2.matchStat);
      assertEquals(0L, long0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONScanner2.scanIdent();
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals((-2), jSONScanner2.matchStat());
      assertEquals(18, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertTrue(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals((-2), jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      int int0 = jSONReaderScanner0.scanInt('z');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(1352, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      
      int int1 = Calendar.WEEK_OF_MONTH;
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(1352, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(floatArray0);
      
      JSONScanner jSONScanner3 = new JSONScanner("InternFieldNames", 4);
      assertEquals(0, jSONScanner3.token());
      assertEquals(0, jSONScanner3.pos());
      assertNull(jSONScanner3.stringDefaultValue());
      assertFalse(jSONScanner3.isEOF());
      assertEquals(4, jSONScanner3.getFeatures());
      assertEquals('I', jSONScanner3.getCurrent());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals(0, jSONScanner3.matchStat);
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner3);
      
      int int2 = jSONScanner2.intValue();
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner3);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals((-2), jSONScanner2.matchStat());
      assertEquals(18, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertTrue(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals((-2), jSONScanner2.matchStat);
      assertEquals(236701, int2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner3));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        jSONScanner1.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - h, info : pos 0, json : hl
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 1352);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1352, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("hl");
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('h', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONReaderScanner0.putChar('w');
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1352, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONScanner jSONScanner2 = new JSONScanner("AllowSingleQuotes", 1352);
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(1352, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.token());
      assertEquals('A', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertNotNull(jSONScanner2);
      
      long long0 = jSONScanner2.scanFieldSymbol(charArray0);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertEquals(0, jSONScanner2.pos());
      assertEquals((-2), jSONScanner2.matchStat());
      assertEquals(1352, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.token());
      assertEquals('A', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals((-2), jSONScanner2.matchStat);
      assertEquals(0L, long0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONScanner2.scanIdent();
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertTrue(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.pos());
      assertEquals((-2), jSONScanner2.matchStat());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals(1352, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(18, jSONScanner2.token());
      assertEquals((-2), jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      int int0 = jSONReaderScanner0.scanInt('z');
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1352, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      
      int int1 = Calendar.WEEK_OF_MONTH;
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1352, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(floatArray0);
      
      char char0 = jSONReaderScanner0.charAt(1352);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1352, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('\u0000', char0);
      
      char char1 = jSONReaderScanner0.getCurrent();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1352, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('n', char1);
      assertFalse(char1 == char0);
      
      long long1 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1352, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(62L, long1);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 32;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed single-quote string");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken(32);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = null;
      jSONReaderScanner0.lexError("'0[O", (Object[]) null);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, 'd');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '!';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 20, 20);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'/', '!'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('/');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'/', '!'}, charArray0);
      assertNull(bigDecimal0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("scan true error", '/');
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(47, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(47, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean1 = jSONScanner0.isRef();
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(47, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double double0 = jSONScanner0.scanDouble('M');
      assertEquals(18, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(47, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      
      jSONScanner0.skipWhitespace();
      assertEquals(18, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(47, jSONScanner0.getFeatures());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9FTWVL,K6p70", 48);
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '~';
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'~'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ", 82);
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(82, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      StringReader stringReader0 = new StringReader("[h3TdDhEX)#8Z6d");
      assertNotNull(stringReader0);
      
      jSONReaderScanner0.nextToken(117);
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int1 = jSONScanner0.intValue();
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(82, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(82, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'~'}, charArray0);
      
      String string0 = jSONScanner0.info();
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(82, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals("pos 0, json : illegal state. ", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("y");
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      String string0 = jSONReaderScanner0.subString(31, 31);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      boolean boolean3 = jSONReaderScanner0.scanBoolean('0');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean3);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      jSONReaderScanner1.nextToken(0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(8, jSONReaderScanner1.token());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      char char0 = jSONReaderScanner1.charAt(0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(8, jSONReaderScanner1.token());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('\u001A', char0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      boolean boolean4 = JSONScanner.charArrayCompare("@}# {k,1T#DX0H`Mq", 2316, charArray0);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      char char1 = JSONLexer.EOI;
      assertEquals('\u001A', char1);
      assertTrue(char1 == char0);
      
      boolean boolean5 = jSONReaderScanner1.isBlankInput();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(8, jSONReaderScanner1.token());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(boolean5);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = 's';
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'.', 's', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = Calendar.DATE;
      assertEquals(5, int0);
      
      jSONScanner0.nextIdent();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(9, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner(";c1\"mK", (-1175));
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1175), jSONScanner0.getFeatures());
      assertEquals(';', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";c1\"mK");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1175), jSONScanner0.getFeatures());
      assertEquals(24, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('c', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      // Undeclared exception!
      try { 
        Charset.forName(";c1\"mK");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ;c1\"mK
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[4] = 'V';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HL");
      assertFalse(boolean0);
      
      int int0 = 17;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 17);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {')', ')', '\u0000', '\u0000', 'V', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {')', ')', '\u0000', '\u0000', 'V', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(11, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {')', ')', '\u0000', '\u0000', 'V', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("y");
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      String string0 = jSONReaderScanner0.subString(31, 31);
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      JSONScanner jSONScanner0 = new JSONScanner("lSb&DVuc=t=p-P<w]", '3');
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(51, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("<", 0);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('<', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.nextToken(6);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      jSONScanner0.sp = 0;
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(51, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('l', jSONScanner0.getCurrent());
      
      JSONScanner jSONScanner1 = new JSONScanner("<");
      assertEquals('<', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanFieldDecimal(charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('<', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigDecimal0);
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "y");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lSb&DVuc=t=p-P<w]", (-716));
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-716), jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("y");
      assertEquals('y', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("y");
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('y', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONScanner jSONScanner2 = new JSONScanner(")", 125);
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(')', jSONScanner2.getCurrent());
      assertEquals(125, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertNotNull(jSONScanner2);
      
      boolean boolean2 = jSONScanner0.isBlankInput();
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals('y', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean2);
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      boolean boolean3 = jSONScanner1.isEnabled(9, 125);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('y', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertTrue(boolean3);
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      String string0 = zoneOffset0.toString();
      assertEquals("-18:00", string0);
      assertNotNull(string0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = "int";
      StringReader stringReader0 = new StringReader("int");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{oU<JKq''hW&|");
      assertFalse(boolean0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      
      stringReader0.reset();
      float float0 = jSONReaderScanner0.scanFloat('');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      
      jSONReaderScanner0.nextToken(3737);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('l');
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      
      char[] charArray0 = null;
      int int1 = jSONReaderScanner0.indexOf('J', 3737);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = jSONReaderScanner0.token();
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Date date0 = jSONReaderScanner0.scanDate('');
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 84);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = (-716);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("create instance error", (-716));
      assertEquals((-716), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('3');
      assertEquals((-716), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char char0 = 'D';
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-716), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(date0);
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-716), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(intArray0);
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'f', '\u0000', 'f', 'f'}, charArray0);
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(20, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'f', '\u0000', 'f', 'f'}, charArray0);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'f';
      charArray1[1] = 'f';
      charArray1[2] = 'f';
      charArray1[3] = 'f';
      charArray1[4] = 'f';
      charArray1[5] = 'f';
      BigDecimal bigDecimal0 = jSONScanner0.scanFieldDecimal(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(20, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'f', '\u0000', 'f', 'f'}, charArray0);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f', 'f', 'f'}, charArray1);
      assertNull(bigDecimal0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'f', '\u0000', 'f', 'f'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertNotSame(charArray0, charArray1);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'f', '\u0000', 'f', 'f'}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("(lhA]YY", 0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals('(', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      char char0 = jSONScanner1.next();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('l', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals('l', char0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'f', '\u0000', 'f', 'f'}, charArray0);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan false error", 0);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sq");
      assertFalse(boolean0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      
      StringReader stringReader0 = new StringReader("\"PRGWf,/}FvMxXd");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      float float0 = jSONReaderScanner0.scanFloat('z');
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      
      jSONReaderScanner0.nextToken((-1795804786));
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('z');
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      float float1 = jSONReaderScanner0.scanFloat('z');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(float1, float0, 0.01F);
      
      double double1 = jSONReaderScanner1.scanDouble('&');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0.0, double1, 0.01);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      String string0 = zoneOffset0.getId();
      assertEquals("-18:00", string0);
      assertNotNull(string0);
      
      String string1 = zoneOffset0.getId();
      assertEquals("-18:00", string1);
      assertNotNull(string1);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-18:00");
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = '^';
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'~', '^'}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string2 = zoneOffset0.toString();
      assertEquals("-18:00", string2);
      assertNotNull(string2);
      
      Date date0 = jSONReaderScanner0.scanDate('R');
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'~', '^'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("f<kjEK!JE}1I0>");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      StringReader stringReader0 = new StringReader("Tp3H=iu?r}]e8=N@.oG");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 392);
      assertEquals('0', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      float float0 = jSONReaderScanner1.scanFloat('0');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('0', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'0'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("scan null error", 392);
      assertEquals(392, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('s', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.setToken(0);
      assertEquals(392, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('s', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = JSONScanner.checkDate(':', '?', 'l', 'V', '&', '&', 0, 44);
      assertFalse(boolean0);
      
      boolean boolean1 = jSONReaderScanner1.scanFieldBoolean(charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('0', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'0'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = '0';
      charArray0[1] = '2';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 722, (-1793));
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1793), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1793), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1793), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('H');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1793), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)3;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)3, (byte)49, (byte)3, (byte)3, (byte)49, (byte)3, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      char char1 = jSONReaderScanner0.getCurrent();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1793), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('0', char1);
      assertFalse(char1 == char0);
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-437), 722);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      String string0 = zoneOffset0.getId();
      assertEquals("+18:00", string0);
      assertNotNull(string0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT+18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ZoneOffset zoneOffset1 = ZoneOffset.ofHours(16);
      assertNotSame(zoneOffset1, zoneOffset0);
      assertFalse(zoneOffset1.equals((Object)zoneOffset0));
      assertNotNull(zoneOffset1);
      
      StringReader stringReader0 = new StringReader("+18:00");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-57L));
      assertEquals(0L, long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+18:00", 16);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(16, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(16, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("%", 116);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(116, jSONReaderScanner1.getFeatures());
      assertEquals('%', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.nextToken(0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(':', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(16, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      char char0 = jSONReaderScanner1.charAt(14);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(116, jSONReaderScanner1.getFeatures());
      assertEquals('%', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('\u0000', char0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      char char1 = jSONReaderScanner0.getCurrent();
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(':', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(16, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(':', char1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(char1 == char0);
      
      long long1 = jSONReaderScanner1.longValue();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(116, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('%', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0L, long1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=Eo", 48);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("SM:*3");
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      int int1 = jSONScanner0.intValue();
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string0 = jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(':', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("SM", string0);
      assertNotNull(string0);
      
      JSONScanner jSONScanner1 = new JSONScanner("}\"SaDM'\u0002", 2792);
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('}', jSONScanner1.getCurrent());
      assertEquals(2792, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      BigDecimal bigDecimal0 = new BigDecimal((-195));
      assertEquals((byte)61, bigDecimal0.byteValue());
      assertEquals((short) (-195), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      int int2 = jSONReaderScanner1.intValue();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, int2);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner2 = new JSONScanner("h", 0);
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.getFeatures());
      assertEquals('h', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner2);
      
      char char0 = jSONScanner0.next();
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('*', char0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      
      String string1 = jSONReaderScanner1.scanFieldString(charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string1);
      
      jSONScanner1.nextIdent();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(13, jSONScanner1.token());
      assertEquals(2792, jSONScanner1.getFeatures());
      assertEquals('\"', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      SymbolTable symbolTable0 = new SymbolTable('f');
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'f');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'f', 'f', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      StringReader stringReader0 = new StringReader("D@Kc$^OhO$g9Ho%ni");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("}Be%gfN?p5");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int0 = 93;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, 93);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('D', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(93, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      float float0 = jSONReaderScanner0.scanFloat('f');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertArrayEquals(new char[] {'f', 'f', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((int) 'f');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[7];
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("t");
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('\u0000');
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = Calendar.LONG;
      assertEquals(2, int0);
      
      int int1 = Calendar.WEEK_OF_MONTH;
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      JSONScanner jSONScanner0 = new JSONScanner("scan false error", 440);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(440, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      int int2 = jSONScanner0.intValue();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(440, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";bcgKWM");
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(";bcgKWM", (byte)106);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(';', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(106, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jSONReaderScanner1.nextToken(7);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(24, jSONReaderScanner1.token());
      assertEquals('b', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(106, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      char char0 = jSONReaderScanner0.charAt(1207);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u0000', char0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      char char1 = JSONLexer.EOI;
      assertEquals('\u001A', char1);
      assertFalse(char1 == char0);
      
      JSONScanner jSONScanner0 = new JSONScanner(";bcgKWM");
      assertFalse(jSONScanner0.isEOF());
      assertEquals(';', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable('I');
      assertNotNull(symbolTable0);
      
      int int0 = 2784;
      // Undeclared exception!
      try { 
        jSONReaderScanner1.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "float overflow : ";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("float overflow : ");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('N');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 110, 1011);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1011, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.sp = 110;
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1011, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed single-quote string");
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      SymbolTable symbolTable0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, 'd');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken(44);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(6, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      double double0 = jSONReaderScanner0.scanDouble('I');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(6, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = jSONReaderScanner0.indexOf('u', 44);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(6, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), int0);
      
      int int1 = jSONReaderScanner0.token();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(6, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(6, int1);
      assertFalse(int1 == int0);
      
      int int2 = jSONReaderScanner0.intValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(6, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(6, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      
      double double1 = jSONReaderScanner0.scanDouble('u');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(6, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JSONScanner jSONScanner0 = new JSONScanner("yOj1^bgqjPM2H? |V", 43);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(43, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('y', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(43, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('y', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string0);
      
      SymbolTable symbolTable0 = new SymbolTable(44);
      assertNotNull(symbolTable0);
      
      String string1 = jSONReaderScanner0.scanSymbol(symbolTable0);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = 20;
      char[] charArray0 = new char[10];
      charArray0[0] = '/';
      charArray0[1] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 20, 20);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'/', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('.');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'/', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("WriteDateUseDateFormat", '/');
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('W', jSONScanner0.getCurrent());
      assertEquals(47, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('W', jSONScanner0.getCurrent());
      assertEquals(47, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'/', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      jSONReaderScanner0.nextToken((-1));
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'/', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = "C";
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char char0 = '\\';
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 40);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\\', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\\', '\\', '\\'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      char char1 = 'w';
      String string0 = jSONReaderScanner0.scanString('\\');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\\', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\\', '\\', '\\'}, charArray0);
      assertNull(string0);
      
      int int0 = jSONReaderScanner0.token();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\\', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'\\', '\\', '\\'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char char0 = '7';
      jSONReaderScanner0.nextToken(44);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(6, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.IOUtils");
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextIdent();
      assertFalse(jSONScanner0.isEOF());
      assertEquals('.', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      Number number0 = jSONScanner0.integerValue();
      assertFalse(jSONScanner0.isEOF());
      assertEquals('.', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(5791, number0);
      assertNotNull(number0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      assertTrue(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      SymbolTable symbolTable0 = new SymbolTable(78);
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner(charArray0, (-2035), 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      String string0 = zoneOffset0.getId();
      assertEquals("-18:00", string0);
      assertNotNull(string0);
      
      String string1 = zoneOffset0.getId();
      assertEquals("-18:00", string1);
      assertNotNull(string1);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-18:00");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[2];
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONScanner jSONScanner0 = new JSONScanner("-18:00");
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '~';
      charArray1[1] = '~';
      charArray1[2] = '~';
      int[] intArray0 = jSONScanner0.scanFieldIntArray(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'~', '~', '~'}, charArray1);
      assertNull(intArray0);
      
      UUID uUID0 = jSONScanner0.scanFieldUUID(charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNull(uUID0);
      
      jSONScanner0.putChar('~');
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      
      int int0 = Calendar.FIELD_COUNT;
      assertEquals(17, int0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("TreeSet", 78);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(78, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('T', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("Rs`LP\"");
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('R', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      
      jSONReaderScanner2.nextToken(17);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(1, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('s', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray1, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("E\"nj7rO");
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      JSONScanner jSONScanner0 = new JSONScanner("setter not found, class ");
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('s', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("illegal.char");
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('i', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.putChar('%');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('s', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'h', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("setter not found, class ", (-2));
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-2), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals('s', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      JSONScanner jSONScanner2 = new JSONScanner(charArray0, 0, (-2));
      assertEquals("", jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertTrue(jSONScanner2.isEOF());
      assertEquals((-2), jSONScanner2.getFeatures());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertArrayEquals(new char[] {'h', '\u0000'}, charArray0);
      assertNotNull(jSONScanner2);
      
      int int0 = jSONScanner2.scanType("illegal.char");
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertEquals("", jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertTrue(jSONScanner2.isEOF());
      assertEquals((-2), jSONScanner2.getFeatures());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      assertEquals((-2), int0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertArrayEquals(new char[] {'h', '\u0000'}, charArray0);
      
      jSONScanner0.scanIdent();
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      int int1 = jSONReaderScanner0.scanInt('K');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(int1 == int0);
      
      int int2 = Calendar.WEEK_OF_MONTH;
      assertEquals(4, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      long long1 = jSONScanner1.scanFieldSymbol(charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertFalse(jSONScanner1.isEOF());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-2), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals('s', jSONScanner1.getCurrent());
      assertEquals((-2), jSONScanner1.matchStat);
      assertEquals(0L, long1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertTrue(long1 == long0);
      assertArrayEquals(new char[] {'h', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner3 = new JSONScanner("test", (-2243));
      assertEquals(0, jSONScanner3.token());
      assertEquals('t', jSONScanner3.getCurrent());
      assertEquals(0, jSONScanner3.pos());
      assertEquals((-2243), jSONScanner3.getFeatures());
      assertFalse(jSONScanner3.isEOF());
      assertEquals("", jSONScanner3.stringDefaultValue());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals(0, jSONScanner3.matchStat);
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertNotNull(jSONScanner3);
      
      char char0 = jSONScanner1.next();
      assertNotSame(jSONScanner1, jSONScanner3);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertFalse(jSONScanner1.isEOF());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-2), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('e', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals((-2), jSONScanner1.matchStat);
      assertEquals('e', char0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner3));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      
      jSONScanner0.nextIdent();
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner3);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner3));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      int int3 = jSONScanner2.intValue();
      assertNotSame(jSONScanner2, jSONScanner3);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertEquals("", jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertTrue(jSONScanner2.isEOF());
      assertEquals((-2), jSONScanner2.getFeatures());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      assertEquals(0, int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner3));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertArrayEquals(new char[] {'h', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("xsAiXDSaUx>N*s$R", (-1241));
      assertEquals((-1241), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('x', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[5];
      char char0 = '6';
      charArray0[0] = '6';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = '9';
      int[] intArray0 = jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-1241), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('x', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'6', '9', '9', '9', '9'}, charArray0);
      assertNull(intArray0);
      
      UUID uUID0 = jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-1241), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('x', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'6', '9', '9', '9', '9'}, charArray0);
      assertNull(uUID0);
      
      jSONScanner0.putChar('9');
      assertEquals((-1241), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('x', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      
      int int0 = Calendar.FIELD_COUNT;
      assertEquals(17, int0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-1241), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('x', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'6', '9', '9', '9', '9'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xsAiXDSaUx>N*s$R", 606);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(606, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("TreeSet");
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('T', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner1.nextToken(78);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(22, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = (-575);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WqQCYdQ%^yB%R");
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('W', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      SymbolTable symbolTable0 = null;
      jSONReaderScanner0.lexError("/4Y:\"O]", (Object[]) null);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('W', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char char0 = 'T';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, 'T');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken(44);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(6, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("true");
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanDecimal(' ');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(bigDecimal0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("true", 108);
      assertEquals(108, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('t', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      
      double double0 = jSONReaderScanner1.scanDouble(' ');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      
      boolean boolean1 = jSONReaderScanner2.scanBoolean('u');
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertEquals(108, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('t', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertTrue(boolean1);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertTrue(boolean1 == boolean0);
      
      String string0 = "nwztn";
      // Undeclared exception!
      try { 
        ZoneId.of("nwztn");
        fail("Expecting exception: ZoneRulesException");
      
      } catch(ZoneRulesException e) {
         //
         // Unknown time-zone ID: nwztn
         //
         verifyException("java.time.zone.ZoneRulesProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=Eo");
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("SM:*3");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken(11);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(':', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.intValue();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(':', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(379, int0);
      
      JSONScanner jSONScanner1 = new JSONScanner("}\"SaDM'\u0002", 2792);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(2792, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('}', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      int int1 = jSONScanner1.scanType("l)m;");
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(2792, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('}', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals((-2), int1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        jSONScanner1.scanSymbol((SymbolTable) null, 'U');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = "zt_#h4#fPorf\\d6T~}N";
      JSONScanner jSONScanner0 = new JSONScanner("zt_#h4#fPorfd6T~}N", 20);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('z', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(20, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      int int0 = jSONScanner0.scanType("U!@J#");
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('z', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(20, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-2), int0);
      
      char char0 = 'A';
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, 'A');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      SymbolTable symbolTable0 = new SymbolTable('g');
      assertNotNull(symbolTable0);
      
      String string0 = "fastjson.parser.autoTypeAccept";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('g');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours((-1));
      assertNotNull(zoneOffset0);
      
      StringReader stringReader0 = new StringReader("fastjson.parser.autoTypeAccept");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-1));
      assertEquals(0L, long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('f', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      int int0 = jSONReaderScanner1.intValue();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('f', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, int0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('g');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ZoneId.of("java.time.LocalDateTime");
        fail("Expecting exception: ZoneRulesException");
      
      } catch(ZoneRulesException e) {
         //
         // Unknown time-zone ID: java.time.LocalDateTime
         //
         verifyException("java.time.zone.ZoneRulesProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = '\u0000';
      charArray0[2] = 'F';
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(timeZone0);
      
      int int0 = jSONScanner0.intValue();
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int0);
      
      char char0 = jSONScanner0.next();
      assertEquals(0, jSONScanner0.token());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('e', char0);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      JSONScanner jSONScanner1 = new JSONScanner("new", '.');
      assertEquals(46, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals('n', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      BigDecimal bigDecimal0 = jSONScanner1.scanDecimal('(');
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(46, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals('n', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(bigDecimal0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int1 = Calendar.LONG_FORMAT;
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      jSONScanner0.putChar('F');
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.token());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      char[] charArray1 = new char[18];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[1] = '.';
      byte[] byteArray0 = new byte[0];
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONScanner1.newCollectionByType(class0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(46, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals('n', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(collection0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 2);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(2, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'F', '\u0000', '\u0000'}, charArray0);
      
      jSONScanner0.scanNumber();
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('w', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(3, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        jSONScanner1.newCollectionByType(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = ",illegal.char";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",illegal.char");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.scanLong(')');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'o';
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'\u0000', 'o'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("EOF error");
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('E', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(3, jSONScanner0.token());
      assertEquals('O', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(15, 15, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      String string0 = zoneOffset0.getId();
      assertEquals("-18:00", string0);
      assertNotNull(string0);
      
      String string1 = zoneOffset0.getId();
      assertEquals("-18:00", string1);
      assertNotNull(string1);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-18:00");
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[2];
      int int0 = 20;
      JSONScanner jSONScanner0 = new JSONScanner("BrowserCompatible");
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('B', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNull(bigDecimal0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("-18:00", 47);
      assertEquals(47, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      float float0 = jSONReaderScanner1.scanFieldFloat(charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(47, jSONReaderScanner1.getFeatures());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('r', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, 79, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26, 40);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("not found", (-1533));
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals((-1533), jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextIdent();
      assertEquals((-1533), jSONScanner0.getFeatures());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean1 = jSONScanner0.isRef();
      assertEquals((-1533), jSONScanner0.getFeatures());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double double0 = jSONScanner0.scanDouble('H');
      assertEquals((-1533), jSONScanner0.getFeatures());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      
      JSONScanner jSONScanner1 = new JSONScanner("not found", (-1533));
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals((-1533), jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(*RH+D_$oH");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = jSONScanner0.intValue();
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals((-1533), jSONScanner0.getFeatures());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(6898, int0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      int int1 = Calendar.YEAR;
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONScanner jSONScanner2 = new JSONScanner("r$lI^Hds:", (-1533));
      assertEquals("", jSONScanner2.stringDefaultValue());
      assertEquals('r', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals((-1533), jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertNotNull(jSONScanner2);
      
      Date date0 = jSONScanner0.scanDate('Y');
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertEquals((-1533), jSONScanner0.getFeatures());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertNull(date0);
      
      char char0 = jSONScanner1.getCurrent();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals((-1533), jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals('n', char0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      
      int int2 = jSONScanner1.getFeatures();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals((-1533), jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals((-1533), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      
      JSONScanner jSONScanner3 = new JSONScanner("(*RH+D_$oH", (-1533));
      assertEquals(0, jSONScanner3.token());
      assertFalse(jSONScanner3.isEOF());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals('(', jSONScanner3.getCurrent());
      assertEquals((-1533), jSONScanner3.getFeatures());
      assertEquals(0, jSONScanner3.pos());
      assertEquals("", jSONScanner3.stringDefaultValue());
      assertEquals(0, jSONScanner3.matchStat);
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertNotNull(jSONScanner3);
      
      jSONScanner3.sp = (-2550);
      assertEquals(0, jSONScanner3.token());
      assertFalse(jSONScanner3.isEOF());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals('(', jSONScanner3.getCurrent());
      assertEquals((-1533), jSONScanner3.getFeatures());
      assertEquals(0, jSONScanner3.pos());
      assertEquals("", jSONScanner3.stringDefaultValue());
      
      jSONScanner3.nextToken();
      assertNotSame(jSONScanner3, jSONScanner0);
      assertNotSame(jSONScanner3, jSONScanner2);
      assertNotSame(jSONScanner3, jSONScanner1);
      assertFalse(jSONScanner3.isEOF());
      assertEquals(10, jSONScanner3.token());
      assertEquals('*', jSONScanner3.getCurrent());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals((-1533), jSONScanner3.getFeatures());
      assertEquals(0, jSONScanner3.pos());
      assertEquals("", jSONScanner3.stringDefaultValue());
      assertEquals(0, jSONScanner3.matchStat);
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      
      float float0 = jSONScanner3.scanFloat('H');
      assertNotSame(jSONScanner3, jSONScanner0);
      assertNotSame(jSONScanner3, jSONScanner2);
      assertNotSame(jSONScanner3, jSONScanner1);
      assertFalse(jSONScanner3.isEOF());
      assertEquals((-1), jSONScanner3.matchStat());
      assertEquals(10, jSONScanner3.token());
      assertEquals('*', jSONScanner3.getCurrent());
      assertEquals((-1533), jSONScanner3.getFeatures());
      assertEquals(0, jSONScanner3.pos());
      assertEquals("", jSONScanner3.stringDefaultValue());
      assertEquals((-1), jSONScanner3.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      SymbolTable symbolTable0 = new SymbolTable('g');
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      assertNotNull(zoneOffset0);
      
      StringReader stringReader0 = new StringReader("fastjson.parser.autoTypeAccept");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(0);
      assertEquals(0L, long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      assertEquals('f', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      int int0 = jSONReaderScanner1.intValue();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('f', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, int0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('g');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(boolean1 == boolean0);
      
      int int1 = 18;
      jSONReaderScanner0.nextToken(18);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.charAt((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "y";
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("y", 9);
      assertEquals('y', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(9, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken(9);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertEquals(9, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-2182));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONArray");
      assertFalse(boolean0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      String string0 = zoneOffset0.getId();
      assertEquals("+18:00", string0);
      assertNotNull(string0);
      
      JSONScanner jSONScanner0 = new JSONScanner("Ec`D", 65279);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(65279, jSONScanner0.getFeatures());
      assertEquals('E', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Ec`D");
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      float float0 = jSONReaderScanner0.scanFloat('4');
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Wc", 49);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(49, jSONReaderScanner1.getFeatures());
      assertEquals('W', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.nextToken(10);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      char char0 = JSONLexer.EOI;
      assertEquals('\u001A', char0);
      
      long long0 = jSONReaderScanner1.longValue();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(49, jSONReaderScanner1.getFeatures());
      assertEquals('W', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      boolean boolean1 = jSONScanner0.isEOF();
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(65279, jSONScanner0.getFeatures());
      assertEquals('E', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char char1 = jSONScanner0.charAt(65279);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(65279, jSONScanner0.getFeatures());
      assertEquals('E', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('\u001A', char1);
      assertTrue(char1 == char0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9FTWVL,K6p70", 48);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[1];
      char char0 = '~';
      charArray0[0] = '~';
      String string0 = "illegal state. ";
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ", 48);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(48, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken(0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(48, jSONScanner0.getFeatures());
      assertEquals('l', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      String string1 = jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(48, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("illegal", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      String string0 = zoneOffset0.getId();
      assertEquals("-18:00", string0);
      assertNotNull(string0);
      
      String string1 = zoneOffset0.getId();
      assertEquals("-18:00", string1);
      assertNotNull(string1);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-18:00");
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken(2);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(':', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      char char1 = jSONReaderScanner0.getCurrent();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(':', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(':', char1);
      assertFalse(char1 == char0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[1] = ':';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      charArray0[5] = ':';
      charArray0[6] = ':';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 45);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('x', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'x', ':', 'x', 'x', 'x', ':', ':'}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      long long0 = jSONReaderScanner0.longValue();
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(':', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-18L), long0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      boolean boolean1 = JSONScanner.charArrayCompare("-18:00", 2, charArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'x', ':', 'x', 'x', 'x', ':', ':'}, charArray0);
      
      jSONReaderScanner0.nextToken();
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(3, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(17, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.subString((-317), (-774));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -774
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('[');
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("new", (-732));
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-732), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      int int0 = jSONScanner0.token();
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-732), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int0);
      
      JSONScanner jSONScanner1 = new JSONScanner("tp3h");
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('t', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigDecimal0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("tp3h");
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      int int1 = jSONReaderScanner1.scanInt('%');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, int1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(int1 == int0);
      
      int int2 = Calendar.LONG;
      assertEquals(2, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = Calendar.WEEK_OF_MONTH;
      assertEquals(4, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      float[] floatArray0 = jSONReaderScanner1.scanFieldFloatArray(charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      
      int int4 = jSONScanner1.intValue();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('t', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, int4);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '[';
      charArray1[1] = '[';
      charArray1[2] = '%';
      long long0 = jSONScanner1.scanFieldSymbol(charArray1);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(charArray1, charArray0);
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('t', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals((-2), jSONScanner1.matchStat);
      assertEquals(0L, long0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'[', '[', '%'}, charArray1);
      
      int int5 = jSONScanner1.getFeatures();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('t', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals((-2), jSONScanner1.matchStat);
      assertEquals(989, int5);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray1, (-2528));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26, 40);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("not found", (-1533));
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1533), jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1533), jSONScanner0.getFeatures());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean1 = jSONScanner0.isRef();
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1533), jSONScanner0.getFeatures());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("not found");
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      Date date0 = jSONReaderScanner1.scanDate('S');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(date0);
      
      char char0 = 'T';
      boolean boolean2 = JSONScanner.checkDate('W', '8', 'q', 'W', 'T', '>', 55314, 197);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean3);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[][] floatArray0 = jSONReaderScanner1.scanFieldFloatArray2(charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '>';
      charArray1[1] = 'W';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray1, 2198);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('>', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'>', 'W'}, charArray1);
      assertNotNull(jSONReaderScanner2);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner2.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = 'g';
      charArray0[0] = 'g';
      SymbolTable symbolTable0 = new SymbolTable('g');
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      assertNotNull(zoneOffset0);
      
      StringReader stringReader0 = new StringReader("fastjson.parser.autoTypeAccept");
      assertNotNull(stringReader0);
      
      String string0 = "java.util.OptionalLong";
      double double0 = jSONReaderScanner0.scanDouble('%');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'g', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 70, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lSb&DVuc=t=p-P<w]", (-716));
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-716), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean2 = jSONReaderScanner0.scanBoolean('3');
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-716), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JSONScanner jSONScanner0 = new JSONScanner("lSb&DVuc=t=p-P<w]", '3');
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(51, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      int int0 = jSONScanner0.token();
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(51, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int0);
      
      JSONScanner jSONScanner1 = new JSONScanner("");
      assertTrue(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      boolean boolean3 = JSONScanner.checkDate('J', '!', '=', 'y', '7', 'I', (-1268), 1258);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-716), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-716), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals("", string0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string0);
      
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      jSONReaderScanner0.config(feature0, true);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-716), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      jSONReaderScanner0.skipWhitespace();
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-716), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "y");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("y");
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("lSb&DVuc=t=p-P<w]", '3');
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(51, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", 0);
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.nextToken(6);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      jSONScanner0.sp = 0;
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(51, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      
      JSONScanner jSONScanner1 = new JSONScanner("");
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanFieldDecimal(charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigDecimal0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("-");
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('-', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArrayReader0);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArrayReader0, 3600);
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(0, jSONReaderScanner3.token());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertTrue(jSONReaderScanner3.isEOF());
      assertEquals(3600, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals('\u0000', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner3);
      
      int int0 = jSONReaderScanner2.scanInt('3');
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner3);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('-', jSONReaderScanner2.getCurrent());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertEquals(0, int0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner3));
      
      int int1 = Calendar.WEEK_OF_MONTH;
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      int int2 = Calendar.WEEK_OF_MONTH;
      assertEquals(4, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      float[] floatArray0 = jSONReaderScanner3.scanFieldFloatArray(charArray0);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals((-2), jSONReaderScanner3.matchStat());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertTrue(jSONReaderScanner3.isEOF());
      assertEquals(3600, jSONReaderScanner3.getFeatures());
      assertEquals('\u0000', jSONReaderScanner3.getCurrent());
      assertEquals((-2), jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      
      int int3 = jSONScanner0.intValue();
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(51, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      long long0 = jSONScanner1.scanFieldSymbol(charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals((-1), jSONScanner1.matchStat);
      assertEquals(0L, long0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      
      int int4 = jSONScanner0.getFeatures();
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(51, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(51, int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("m#>)+q:#6-mPDYM>", 20);
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNull(bigInteger0);
      
      JSONScanner jSONScanner0 = new JSONScanner("m#>)+q:#6-mPDYM>");
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('m', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONReaderScanner0.putChar('\\');
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('m', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      jSONScanner0.scanIdent();
      assertEquals('#', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanInt('\\');
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      
      int int1 = Calendar.WEEK_OF_MONTH;
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNull(floatArray0);
      
      int int2 = jSONScanner0.intValue();
      assertEquals('#', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(61, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"m\", 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      SymbolTable symbolTable0 = new SymbolTable(114);
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 114);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'g', 'g', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-22);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-22)}, byteArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken(16);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(9, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 3, json : new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WqQCYdQ%^yB%R");
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('W', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken(2081);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('q', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("/4Y:\"O]");
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('/', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      SymbolTable symbolTable0 = new SymbolTable(1554);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanSymbol(symbolTable0, 'k');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONArray");
      assertFalse(boolean0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      String string0 = zoneOffset0.getId();
      assertEquals("+18:00", string0);
      assertNotNull(string0);
      
      int int0 = 65279;
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+18:00", 9);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(9, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('N');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(9, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("6c`D", 65279);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(65279, jSONScanner0.getFeatures());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(65279, jSONScanner0.getFeatures());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.nextToken(9);
      assertEquals(2, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(9, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(':', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("6c`D");
      assertEquals('6', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      Date date0 = jSONReaderScanner1.scanFieldDate(charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('6', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(date0);
      
      float float1 = jSONReaderScanner1.scanFloat('4');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('6', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(6.0F, float1, 0.01F);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotEquals(float1, float0, 0.01F);
      
      int int1 = 10;
      String string1 = "Wc";
      int int2 = 49;
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithColon((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 6, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("KHL[FLzH~|");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('K', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("KHL[FLzH~|", 0);
      assertEquals('K', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("[-");
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('[', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner1.nextToken(0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(14, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      boolean boolean1 = jSONReaderScanner0.matchField(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('H', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      double double0 = jSONReaderScanner1.scanDouble('X');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(14, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      boolean boolean2 = jSONReaderScanner0.scanBoolean('Q');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('H', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean2);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '^';
      charArray0[1] = '_';
      charArray0[2] = 'X';
      charArray0[3] = 'B';
      charArray0[4] = 'u';
      JSONScanner jSONScanner0 = new JSONScanner("false");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONReaderScanner0.putChar('_');
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'^', '_', 'X', 'B', 'u', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONScanner0.scanIdent();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(7, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanInt('X');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      
      int int1 = Calendar.WEEK_OF_MONTH;
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'^', '_', 'X', 'B', 'u', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(floatArray0);
      
      int int2 = jSONScanner0.intValue();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(7, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(595723, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"f\", 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=Eo", 42);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertEquals(42, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("SM:*3");
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      int int0 = jSONScanner0.intValue();
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int0);
      
      JSONScanner jSONScanner1 = new JSONScanner("}\"SaDM'\u0002", 2792);
      assertEquals(2792, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals('}', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("SM:*3", 2792);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('S', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(2792, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      JSONScanner jSONScanner2 = new JSONScanner("}\"SaDM'\u0002", (-723));
      assertEquals(0, jSONScanner2.token());
      assertEquals((-723), jSONScanner2.getFeatures());
      assertEquals("", jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals('}', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertNotNull(jSONScanner2);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("", 0);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      
      jSONReaderScanner2.nextToken((-1909079695));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(20, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      JSONScanner jSONScanner3 = new JSONScanner("");
      assertEquals(0, jSONScanner3.token());
      assertTrue(jSONScanner3.isEOF());
      assertEquals(0, jSONScanner3.pos());
      assertEquals(989, jSONScanner3.getFeatures());
      assertEquals('\u001A', jSONScanner3.getCurrent());
      assertEquals(0, jSONScanner3.matchStat());
      assertNull(jSONScanner3.stringDefaultValue());
      assertEquals(0, jSONScanner3.matchStat);
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertNotNull(jSONScanner3);
      
      char[] charArray0 = new char[14];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '3';
      charArray0[6] = '3';
      charArray0[7] = '3';
      jSONScanner1.features = 2;
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals('}', jSONScanner1.getCurrent());
      assertEquals(2, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      
      charArray0[6] = '3';
      SymbolTable symbolTable0 = new SymbolTable(42);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner1.scanSymbol(symbolTable0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner3);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(13, jSONScanner1.token());
      assertEquals('\"', jSONScanner1.getCurrent());
      assertEquals(2, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner3));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9FTWVL,K6p70", 48);
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '~';
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'~'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ", 82);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(82, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(82, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int1 = jSONScanner0.intValue();
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(82, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      jSONScanner0.nextToken(82);
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(82, jSONScanner0.getFeatures());
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      String string0 = jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals(82, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("illegal", string0);
      assertNotNull(string0);
      
      JSONScanner jSONScanner1 = new JSONScanner("}", 0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('}', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      boolean boolean0 = jSONScanner0.scanBoolean('~');
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals(82, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      BigDecimal bigDecimal0 = new BigDecimal((-2));
      assertEquals((byte) (-2), bigDecimal0.byteValue());
      assertEquals((short) (-2), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '~';
      charArray1[1] = '~';
      int int2 = 41;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 41);
      assertEquals('~', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'~', '~'}, charArray1);
      assertNotNull(jSONReaderScanner1);
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      Enum<?> enum0 = jSONReaderScanner1.scanEnum(class0, (SymbolTable) null, '~');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(charArray1, charArray0);
      assertEquals('~', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'~', '~'}, charArray1);
      assertNull(enum0);
      
      jSONReaderScanner1.nextToken(82);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(charArray1, charArray0);
      assertEquals('~', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'~', '~'}, charArray1);
      
      SymbolTable symbolTable0 = new SymbolTable(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9FTWVL,K6p70", 67);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals(67, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[9];
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals(67, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("9FTWVL,K6p70", 41);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(41, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('9', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken(87);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(3, jSONScanner0.token());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(41, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      String string0 = jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      assertEquals(',', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(41, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("TWVL", string0);
      assertNotNull(string0);
      
      JSONScanner jSONScanner1 = new JSONScanner("TWVL", 93);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals('T', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(93, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      Date date0 = jSONReaderScanner0.scanDate('v');
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(67, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'v';
      charArray1[1] = 'v';
      charArray1[2] = 'v';
      charArray1[3] = 'v';
      charArray1[4] = 'v';
      charArray1[5] = 'v';
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(67, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'v', 'v', 'v', 'v', 'v', 'v', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNull(uUID0);
      
      // Undeclared exception!
      try { 
        jSONScanner1.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Ut<FK{{C;&7(j_I");
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('U', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 0);
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('U', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('t');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('U', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      JSONScanner jSONScanner0 = new JSONScanner("Ut<FK{{C;&7(j_I", (-1089595642));
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals((-1089595642), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals((-1089595642), jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner1.nextToken((-1));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(20, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("0x/+n]7&UbtCgtOJ", 0);
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('0', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.token());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('U', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(date0);
      
      float float1 = jSONReaderScanner2.scanFloat('P');
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals('0', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.token());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(float1, float0, 0.01F);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("%_32}qvp5y<XN>(^G", (-3));
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals((-3), jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals("", jSONReaderScanner3.stringDefaultValue());
      assertEquals('%', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertNotNull(jSONReaderScanner3);
      
      jSONReaderScanner2.nextToken(101);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner3);
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(2, jSONReaderScanner2.token());
      assertEquals('x', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner3));
      
      // Undeclared exception!
      try { 
        ZoneId.of("DRSY");
        fail("Expecting exception: ZoneRulesException");
      
      } catch(ZoneRulesException e) {
         //
         // Unknown time-zone ID: DRSY
         //
         verifyException("java.time.zone.ZoneRulesProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9FTWVL,K6p70");
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("'&H*%}'fsW=");
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\'', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      BigDecimal bigDecimal0 = new BigDecimal(72);
      assertEquals((byte)72, bigDecimal0.byteValue());
      assertEquals((short)72, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      StringReader stringReader0 = new StringReader("fastjson.parser.autoTypeAccept");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-2006));
      assertEquals(0L, long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("'&H*%}'fsW=");
      assertEquals(0, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('\'', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('T');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(boolean1 == boolean0);
      
      jSONReaderScanner1.nextToken(72);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(4, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('f', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      
      char char0 = JSONLexer.EOI;
      assertEquals('\u001A', char0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = '\u001A';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "y");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("y");
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("lSb&DVuc=t=p-P<w]", '3');
      assertEquals(0, jSONScanner0.token());
      assertEquals(51, jSONScanner0.getFeatures());
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", 0);
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.nextToken(6);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      jSONScanner0.sp = 0;
      assertEquals(0, jSONScanner0.token());
      assertEquals(51, jSONScanner0.getFeatures());
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner1 = new JSONScanner("");
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      jSONScanner0.token = (-529);
      assertEquals((-529), jSONScanner0.token());
      assertEquals(51, jSONScanner0.getFeatures());
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanFieldDecimal(charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigDecimal0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("-");
      assertEquals(0, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('-', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      
      jSONScanner0.stringDefaultValue = "Set";
      assertEquals((-529), jSONScanner0.token());
      assertEquals(51, jSONScanner0.getFeatures());
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals("Set", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArrayReader0);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArrayReader0, 3600);
      assertEquals(0, jSONReaderScanner3.pos());
      assertTrue(jSONReaderScanner3.isEOF());
      assertEquals('\u0000', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(3600, jSONReaderScanner3.getFeatures());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner3);
      
      int int0 = jSONReaderScanner2.scanInt('3');
      assertNotSame(jSONReaderScanner2, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('-', jSONReaderScanner2.getCurrent());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertEquals(0, int0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      int int1 = Calendar.MILLISECOND;
      assertEquals(14, int1);
      assertFalse(int1 == int0);
      
      int int2 = Calendar.WEEK_OF_MONTH;
      assertEquals(4, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = jSONScanner0.intValue();
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals((-529), jSONScanner0.token());
      assertEquals(51, jSONScanner0.getFeatures());
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals("Set", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int3);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      jSONReaderScanner0.nextToken(14);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      
      char char0 = jSONReaderScanner0.charAt(0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', char0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      
      boolean boolean2 = JSONScanner.charArrayCompare("lSb&DVuc=t=p-P<w]", 11, charArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      char char1 = JSONLexer.EOI;
      assertEquals('\u001A', char1);
      assertTrue(char1 == char0);
      
      boolean boolean3 = jSONReaderScanner0.isBlankInput();
      assertNotSame(jSONReaderScanner0, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean3);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("false");
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('f', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0, 0);
      assertEquals(0, jSONReaderScanner2.token());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner2);
      
      char char0 = 't';
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      char char1 = 'j';
      boolean boolean0 = jSONReaderScanner0.scanBoolean('j');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      JSONScanner jSONScanner0 = new JSONScanner("false", 0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("expect ':' at ");
      assertFalse(jSONScanner1.isEOF());
      assertEquals('e', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      float float0 = jSONScanner1.scanFieldFloat(charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.isEOF());
      assertEquals('e', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals((-2), jSONScanner1.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner2.nextToken((-1));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(20, jSONReaderScanner2.token());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner2.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }
}
