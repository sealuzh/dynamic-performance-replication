/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:24:27 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Array;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.ATHROW;
import org.apache.bcel.generic.BASTORE;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BREAKPOINT;
import org.apache.bcel.generic.CALOAD;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.D2I;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DALOAD;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DREM;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.DUP2_X1;
import org.apache.bcel.generic.DUP2_X2;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.DUP_X2;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.F2L;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FALOAD;
import org.apache.bcel.generic.FASTORE;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.FRETURN;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2B;
import org.apache.bcel.generic.I2C;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.I2F;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IALOAD;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.IASTORE;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGE;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMPDEP1;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.INVOKEINTERFACE;
import org.apache.bcel.generic.INVOKEVIRTUAL;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.IRETURN;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.ISHR;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2D;
import org.apache.bcel.generic.L2F;
import org.apache.bcel.generic.L2I;
import org.apache.bcel.generic.LADD;
import org.apache.bcel.generic.LALOAD;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LASTORE;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.LDC_W;
import org.apache.bcel.generic.LDIV;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.LOOKUPSWITCH;
import org.apache.bcel.generic.LOR;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.MONITORENTER;
import org.apache.bcel.generic.MONITOREXIT;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.POP;
import org.apache.bcel.generic.POP2;
import org.apache.bcel.generic.PUTFIELD;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.ReferenceType;
import org.apache.bcel.generic.SASTORE;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.SWAP;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstConstraintVisitor_ESTest extends InstConstraintVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      bREAKPOINT0.copy();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBREAKPOINT(bREAKPOINT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      instConstraintVisitor0.visitJSR_W(jSR_W0);
      assertEquals(0, jSR_W0.getIndex());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DLOAD dLOAD0 = new DLOAD(14);
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      assertEquals((short)24, dLOAD0.getCanonicalTag());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FCMPL fCMPL0 = new FCMPL();
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      IMPDEP2 iMPDEP2_1 = new IMPDEP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP2(iMPDEP2_1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP2.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ILOAD iLOAD0 = new ILOAD(5);
      instConstraintVisitor0.visitILOAD(iLOAD0);
      assertEquals((short)21, iLOAD0.getCanonicalTag());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FSTORE fSTORE0 = new FSTORE(128);
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      assertEquals((short)56, fSTORE0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitISTORE((ISTORE) null);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2, 2);
      DREM dREM0 = new DREM();
      L2I l2I0 = new L2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2I(l2I0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F((L2F) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(36);
      instConstraintVisitor0.visitInvokeInstruction(iNVOKEDYNAMIC0);
      assertEquals(36, iNVOKEDYNAMIC0.getIndex());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      CALOAD cALOAD0 = new CALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCALOAD(cALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FCONST fCONST0 = new FCONST(0.0F);
      fCONST0.getValue();
      instConstraintVisitor0.visitFCONST(fCONST0);
      DALOAD dALOAD0 = new DALOAD();
      assertEquals("daload", dALOAD0.getName());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCONST dCONST0 = new DCONST(0.0);
      instConstraintVisitor0.visitDCONST(dCONST0);
      ATHROW aTHROW0 = new ATHROW();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW(aTHROW0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitJSR((JSR) null);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(30, 30);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEINTERFACE(iNVOKEINTERFACE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BIPUSH bIPUSH0 = new BIPUSH((byte)1);
      instConstraintVisitor0.visitBIPUSH(bIPUSH0);
      assertEquals((short)16, bIPUSH0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitSIPUSH((SIPUSH) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LLOAD lLOAD0 = new LLOAD(464);
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      assertEquals((short)22, lLOAD0.getCanonicalTag());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(545);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCPInstruction(aNEWARRAY0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ALOAD aLOAD0 = new ALOAD(255);
      instConstraintVisitor0.visitALOAD(aLOAD0);
      ISUB iSUB0 = new ISUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISUB(iSUB0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(1086);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEDYNAMIC(iNVOKEDYNAMIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INVOKEDYNAMIC instruction is not supported at this time
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitLSTORE((LSTORE) null);
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP1(iMPDEP1_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP1.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LSHL lSHL0 = new LSHL();
      ISUB iSUB0 = new ISUB();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitGOTO_W((GOTO_W) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FRETURN fRETURN0 = new FRETURN();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(3, 3);
      SASTORE sASTORE0 = new SASTORE();
      LLOAD lLOAD0 = new LLOAD(30);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      ICONST iCONST0 = new ICONST(3);
      ICONST iCONST1 = new ICONST(3);
      instConstraintVisitor0.visitICONST(iCONST0);
      assertEquals("iconst_3", iCONST0.getName());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DSTORE dSTORE0 = new DSTORE(133);
      dSTORE0.toString();
      instConstraintVisitor0.visitDSTORE(dSTORE0);
      InstructionList instructionList0 = new InstructionList();
      instructionList0.append(instructionList0);
      IFGE iFGE0 = new IFGE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGE(iFGE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(1);
      instConstraintVisitor0.visitGETSTATIC(gETSTATIC0);
      FMUL fMUL0 = new FMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFMUL(fMUL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GOTO gOTO0 = new GOTO((InstructionHandle) null);
      instConstraintVisitor0.visitGOTO(gOTO0);
      assertEquals(3, gOTO0.getLength());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FRETURN fRETURN0 = new FRETURN();
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1277), 173);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(173, 114);
      InstructionList instructionList0 = new InstructionList();
      LocalVariables localVariables0 = new LocalVariables(173);
      int int0 = 782;
      ObjectType objectType0 = ObjectType.getInstance("NiSh)]S]2N");
      OperandStack operandStack0 = new OperandStack(782, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLT((IFLT) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = new INVOKEVIRTUAL(0);
      INVOKEVIRTUAL iNVOKEVIRTUAL1 = new INVOKEVIRTUAL(885);
      iNVOKEVIRTUAL1.setIndex(3976);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(885, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      OperandStack operandStack2 = operandStack1.getClone();
      operandStack2.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      operandStack2.initializeObject(uninitializedObjectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack2);
      instConstraintVisitor0.setFrame(frame0);
      ISHL iSHL0 = new ISHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHL(iSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHL constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables((byte)5);
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((byte)5, objectType0);
      localVariables0.toString();
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY((byte)5, (short)96);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMULTIANEWARRAY(mULTIANEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction MULTIANEWARRAY constraint violated: The '96' upper stack types should be 'int' but aren't.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FRETURN fRETURN0 = new FRETURN();
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1309), 173);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      InstructionList instructionList0 = new InstructionList();
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      LocalVariables localVariables0 = new LocalVariables(173);
      ObjectType objectType0 = ObjectType.getInstance("NiSh)]S]2N");
      OperandStack operandStack0 = new OperandStack(173, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDASTORE(dASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DASTORE constraint violated: The value at the stack top is not of type 'double', but of type 'NiSh)]S]2N'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FRETURN fRETURN0 = new FRETURN();
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      LocalVariables localVariables0 = new LocalVariables(173);
      ObjectType objectType0 = ObjectType.getInstance("NiSh)]S]2N");
      OperandStack operandStack0 = new OperandStack(173, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      operandStack0.merge(operandStack1);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(173, (short)3846);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEWARRAY((NEWARRAY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      LocalVariables localVariables0 = new LocalVariables(28);
      ObjectType objectType0 = ObjectType.getInstance("'pU`%U[ZDDr#gE4}6");
      Class<IFNE>[] classArray0 = (Class<IFNE>[]) Array.newInstance(Class.class, 2);
      Class<IFNE> class0 = IFNE.class;
      classArray0[0] = class0;
      OperandStack operandStack0 = new OperandStack(28, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.equals(objectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      OperandStack operandStack1 = new OperandStack(28, objectType0);
      I2L i2L0 = new I2L();
      ISHL iSHL0 = new ISHL();
      FALOAD fALOAD0 = new FALOAD();
      // Undeclared exception!
      try { 
        fALOAD0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FALOAD constraint violated: Cannot consume 2 stack slots: only 1 slot(s) left on stack!
         // Stack:
         // Slots used: 1 MaxStack: 28.
         // 'pU`%U[ZDDr#gE4}6 (Size: 1)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      short short0 = Constants.ILOAD_3;
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      LocalVariables localVariables0 = new LocalVariables((short)29);
      ObjectType objectType0 = ObjectType.getInstance("NiSh)]S]2N");
      OperandStack operandStack0 = new OperandStack(3486, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      operandStack0.merge(operandStack1);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      I2S i2S0 = new I2S();
      I2S i2S1 = new I2S();
      i2S0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2S(i2S1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2S constraint violated: The value at the stack top is not of type 'int', but of type 'NiSh)]S]2N'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("");
      LocalVariables localVariables0 = new LocalVariables(38);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables2.getClone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      localVariables1.getClone();
      OperandStack operandStack0 = new OperandStack(1912, objectType0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      instructionList0.toString();
      DCMPG dCMPG0 = new DCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPG(dCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPG constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DMUL dMUL0 = new DMUL();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(173, 352);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(1016, 663);
      InstructionList instructionList0 = new InstructionList();
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      LocalVariables localVariables0 = new LocalVariables(173);
      ObjectType objectType0 = new ObjectType("NoMYFHX");
      OperandStack operandStack0 = new OperandStack(29, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack1.merge(operandStack0);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      assertEquals((short)194, mONITORENTER0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(5);
      ObjectType objectType0 = ObjectType.getInstance("z+");
      OperandStack operandStack0 = new OperandStack(5, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      ATHROW aTHROW0 = new ATHROW();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW(aTHROW0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Missing class: java.lang.ClassNotFoundException: Exception while looking for class z+: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: z+.class
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(5);
      ObjectType objectType0 = ObjectType.getInstance("z+");
      OperandStack operandStack0 = new OperandStack(5, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDIV(lDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDIV constraint violated: The value at the stack top is not of type 'long', but of type 'z+'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DMUL dMUL0 = new DMUL();
      FNEG fNEG0 = new FNEG();
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      ObjectType objectType0 = new ObjectType("l#1");
      OperandStack operandStack0 = new OperandStack(957, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(54, (short)864);
      DASTORE dASTORE0 = new DASTORE();
      F2L f2L0 = new F2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2L(f2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2L constraint violated: The value at the stack top is not of type 'float', but of type 'l#1'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(215);
      ObjectType objectType0 = ObjectType.getInstance("z+");
      OperandStack operandStack0 = new OperandStack(215, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      FMUL fMUL0 = new FMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFMUL(fMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FMUL constraint violated: The value at the stack top is not of type 'float', but of type 'z+'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DCMPG dCMPG0 = new DCMPG();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InstructionList instructionList0 = new InstructionList();
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      ISTORE iSTORE1 = (ISTORE)InstructionConstants.ISTORE_1;
      ObjectType objectType0 = ObjectType.getInstance(".");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      OperandStack operandStack0 = new OperandStack(52, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      LocalVariables localVariables0 = new LocalVariables(29);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      localVariables0.getClone();
      operandStack1.merge(operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FCMPG fCMPG0 = new FCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPG(fCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPG constraint violated: The value at the stack top is not of type 'float', but of type '.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=");
      LocalVariables localVariables0 = new LocalVariables(38);
      ObjectType objectType0 = ObjectType.getInstance("z+");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      FALOAD fALOAD0 = new FALOAD();
      FREM fREM0 = new FREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFREM(fREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FREM constraint violated: The value at the stack top is not of type 'float', but of type 'z+'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DMUL dMUL0 = new DMUL();
      FNEG fNEG0 = new FNEG();
      InstructionList instructionList0 = new InstructionList();
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      ObjectType objectType0 = ObjectType.getInstance("l#1");
      OperandStack operandStack0 = new OperandStack(957, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack1.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      short short0 = (short)837;
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(125, (short)837);
      DASTORE dASTORE0 = new DASTORE();
      F2L f2L0 = new F2L();
      LSHL lSHL0 = new LSHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHL(lSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHL constraint violated: The value at the stack top is not of type 'int', but of type 'l#1'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitTABLESWITCH((TABLESWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(26);
      localVariables0.clone();
      ObjectType objectType0 = ObjectType.getInstance("z+");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      INEG iNEG0 = new INEG();
      D2L d2L0 = new D2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2L(d2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2L constraint violated: The value at the stack top is not of type 'double', but of type 'z+'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(13);
      ObjectType objectType0 = ObjectType.getInstance("#~.O9wH-_?# %0{Y#c;");
      OperandStack operandStack0 = new OperandStack(13, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack0.merge(operandStack1);
      Pattern.quote("#~.O9wH-_?# %0{Y#c;");
      instConstraintVisitor0.setFrame(frame0);
      DMUL dMUL0 = new DMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDMUL(dMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DMUL constraint violated: The value at the stack top is not of type 'double', but of type '#~.O9wH-_?# %0{Y#c'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectType objectType0 = ObjectType.getInstance("z+");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      LocalVariables localVariables0 = new LocalVariables(38);
      operandStack0.clone();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L#xwkgYX=Gh6pO]");
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables0.toString();
      LocalVariables localVariables2 = localVariables0.getClone();
      frame0.clone();
      localVariables2.getClone();
      operandStack0.getClone();
      operandStack0.push(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      LSUB lSUB0 = new LSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSUB(lSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSUB constraint violated: The value at the stack top is not of type 'long', but of type 'z+'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(42);
      ObjectType objectType0 = ObjectType.getInstance("RbuEcD>3.!i|zkhKcxL");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OperandStack operandStack0 = new OperandStack(35, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      FRETURN fRETURN0 = new FRETURN();
      ISUB iSUB0 = new ISUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISUB(iSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISUB constraint violated: The value at the stack top is not of type 'int', but of type 'RbuEcD>3.!i|zkhKcxL'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(38);
      ObjectType objectType0 = ObjectType.getInstance("zJ+");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      FRETURN fRETURN0 = new FRETURN();
      fRETURN0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFRETURN(fRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FRETURN constraint violated: The value at the stack top is not of type 'float', but of type 'zJ+'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FRETURN fRETURN0 = new FRETURN();
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      LocalVariables localVariables0 = new LocalVariables(173);
      ObjectType objectType0 = ObjectType.getInstance("NiSh)]S]2N");
      OperandStack operandStack0 = new OperandStack(173, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      operandStack0.merge(operandStack1);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(173, (short)3846);
      instConstraintVisitor0.visitStackConsumer(fRETURN0);
      assertEquals(1, fRETURN0.getLength());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(38);
      ObjectType objectType0 = new ObjectType("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack1.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = new ARETURN();
      DASTORE dASTORE0 = new DASTORE();
      DREM dREM0 = new DREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM(dREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DREM constraint violated: The value at the stack top is not of type 'double', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      InstructionList instructionList0 = new InstructionList();
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      LocalVariables localVariables0 = new LocalVariables(173);
      ObjectType objectType0 = ObjectType.getInstance("NiSh_)S}]2N");
      OperandStack operandStack0 = new OperandStack(173, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      operandStack0.toString();
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      IREM iREM0 = new IREM();
      iREM0.toString(true);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIREM(iREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IREM constraint violated: The value at the stack top is not of type 'int', but of type 'NiSh_)S}]2N'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      LocalVariables localVariables0 = new LocalVariables((byte)5);
      ObjectType objectType0 = new ObjectType("umVj5%S#'");
      OperandStack operandStack0 = new OperandStack((byte)5, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack2 = operandStack1.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      Frame frame0 = new Frame(localVariables1, operandStack2);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIDIV((IDIV) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables((byte)5);
      localVariables0.getClone();
      ObjectType.getInstance("If stack top's size is 1 and stack next-to-top's size is 1, stack next-to-next-to-top's size must also be 1, but is: '");
      ObjectType objectType0 = ObjectType.getInstance("If stack top's size is 1 and stack next-to-top's size is 1, stack next-to-next-to-top's size must also be 1, but is: '");
      OperandStack operandStack0 = new OperandStack((byte)5, objectType0);
      localVariables0.getClone();
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame1 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame1);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      IRETURN iRETURN0 = new IRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIRETURN(iRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IRETURN constraint violated: The value at the stack top is not of type 'int', but of type 'If stack top's size is 1 and stack next-to-top's size is 1, stack next-to-next-to-top's size must also be 1, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(37);
      ObjectType objectType0 = ObjectType.getInstance("/~.O9wH-~_?#_%0{Y#c;");
      localVariables0.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(887, objectType0);
      operandStack0.push(objectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables1.getClone();
      Frame frame0 = new Frame(localVariables2, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      frame0.getClone();
      POP2 pOP2_0 = new POP2();
      DUP_X1 dUP_X1_0 = new DUP_X1();
      instConstraintVisitor0.visitDUP_X1(dUP_X1_0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPOP2(pOP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction POP2 constraint violated: Stack top size should be 2 but stack top is '.~.O9wH-~_?#_%0{Y#c' of size '1'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(42);
      ObjectType objectType0 = new ObjectType("private");
      OperandStack operandStack0 = new OperandStack(42);
      OperandStack operandStack1 = new OperandStack(42, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      OperandStack operandStack2 = new OperandStack(42, objectType0);
      ObjectType objectType1 = new ObjectType("private");
      operandStack1.getClone();
      Frame frame1 = new Frame(localVariables0, operandStack2);
      instConstraintVisitor0.setFrame(frame1);
      DASTORE dASTORE0 = new DASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitGETFIELD((GETFIELD) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(54);
      ReferenceType referenceType0 = Type.NULL;
      localVariables0.set(38, referenceType0);
      ObjectType objectType0 = new ObjectType("#.O9wH-_?# %0{Y#c");
      OperandStack operandStack0 = new OperandStack(54, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Object object0 = new Object();
      frame0.equals(operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      SASTORE sASTORE0 = new SASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSASTORE(sASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction SASTORE constraint violated: The value at the stack top is not of type 'int', but of type '#.O9wH-_?# %0{Y#c'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(5);
      ObjectType objectType0 = ObjectType.getInstance("z+");
      OperandStack operandStack0 = new OperandStack(5, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      IFNE iFNE0 = new IFNE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFNE(iFNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFNE constraint violated: The value at the stack top is not of type 'int', but of type 'z+'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FRETURN fRETURN0 = new FRETURN();
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1309), 173);
      ConstantMethodref constantMethodref1 = new ConstantMethodref((-1309), 173);
      InstructionList instructionList0 = new InstructionList();
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      LocalVariables localVariables0 = new LocalVariables(173);
      ObjectType objectType0 = ObjectType.getInstance("NiSh)S}]2N");
      OperandStack operandStack0 = new OperandStack(173, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      frame0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instConstraintVisitor0.setFrame(frame0);
      FDIV fDIV0 = new FDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFDIV(fDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FDIV constraint violated: The value at the stack top is not of type 'float', but of type 'NiSh)S}]2N'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(13);
      ObjectType objectType0 = ObjectType.getInstance("#~.O9wH-_?# %0{Y#c;");
      OperandStack operandStack0 = new OperandStack(13, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(13);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      I2C i2C0 = new I2C();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2C((I2C) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(42);
      ObjectType objectType0 = ObjectType.getInstance("private");
      OperandStack operandStack0 = new OperandStack(42, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(218);
      OperandStack operandStack1 = new OperandStack(218, objectType0);
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(218);
      FMUL fMUL0 = new FMUL();
      DSUB dSUB0 = new DSUB();
      INSTANCEOF iNSTANCEOF1 = new INSTANCEOF(42);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF(iNSTANCEOF0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = new INVOKEVIRTUAL(0);
      iNVOKEVIRTUAL0.setIndex(3975);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(885, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      OperandStack operandStack2 = operandStack1.getClone();
      operandStack2.getClone();
      Frame.getThis();
      operandStack2.initializeObject((UninitializedObjectType) null);
      Frame frame0 = new Frame((LocalVariables) null, operandStack2);
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2D((L2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      LocalVariables localVariables0 = new LocalVariables(28);
      ObjectType objectType0 = ObjectType.getInstance("JpUh`%U[ZDDr#gE46");
      OperandStack operandStack0 = new OperandStack(28, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LRETURN lRETURN0 = new LRETURN();
      F2I f2I0 = new F2I();
      f2I0.copy();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2I(f2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2I constraint violated: The value at the stack top is not of type 'float', but of type 'JpUh`%U[ZDDr#gE46'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1);
      localVariables0.toString();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      L2I l2I0 = new L2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2I(l2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2I constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(556);
      ObjectType objectType0 = ObjectType.getInstance("z+");
      OperandStack operandStack0 = new OperandStack(556, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      FRETURN fRETURN0 = new FRETURN();
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      ObjectType.getInstance("$D:H6A]y]jP@w+*m");
      OperandStack operandStack1 = new OperandStack(556, objectType0);
      IADD iADD0 = new IADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIADD(iADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IADD constraint violated: The value at the stack top is not of type 'int', but of type 'z+'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      ObjectType objectType0 = new ObjectType("#jxi#a;'Mye%-");
      OperandStack operandStack0 = new OperandStack(29, objectType0);
      operandStack0.getClone();
      LocalVariables localVariables0 = new LocalVariables(29);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables2.getClone();
      localVariables1.clone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstructionList instructionList0 = new InstructionList();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOR((LOR) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(30);
      ObjectType objectType0 = ObjectType.getInstance("z+");
      OperandStack operandStack0 = new OperandStack(30, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      DNEG dNEG0 = new DNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDNEG(dNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DNEG constraint violated: The value at the stack top is not of type 'double', but of type 'z+'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(26);
      ObjectType objectType0 = ObjectType.getInstance("z+");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      DNEG dNEG0 = new DNEG();
      I2D i2D0 = new I2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2D constraint violated: The value at the stack top is not of type 'int', but of type 'z+'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(42);
      ObjectType objectType0 = ObjectType.getInstance("private");
      OperandStack operandStack0 = new OperandStack(42, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(42);
      ARETURN aRETURN0 = new ARETURN();
      operandStack0.push(objectType0);
      LNEG lNEG0 = new LNEG();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      I2D i2D0 = new I2D();
      IXOR iXOR0 = new IXOR();
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      DCMPL dCMPL0 = new DCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      dCMPL0.consumeStack(constantPoolGen0);
      DCMPL dCMPL1 = new DCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPL(dCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPL constraint violated: The value at the stack top is not of type 'double', but of type 'private'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      ObjectType objectType0 = new ObjectType("D7luVL");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      operandStack0.getClone();
      OperandStack operandStack1 = new OperandStack(38, objectType0);
      LocalVariables localVariables0 = new LocalVariables(38);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      LCMP lCMP0 = new LCMP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLCMP(lCMP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LCMP constraint violated: The value at the stack top is not of type 'long', but of type 'D7luVL'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DMUL dMUL0 = new DMUL();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1014, 173);
      InstructionList instructionList0 = new InstructionList();
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      LocalVariables localVariables0 = new LocalVariables(173);
      ObjectType objectType0 = ObjectType.getInstance("mo5.H");
      int int0 = 29;
      OperandStack operandStack0 = new OperandStack(29, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack1.merge(operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      D2I d2I0 = new D2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2I(d2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2I constraint violated: The value at the stack top is not of type 'double', but of type 'mo5.H'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(38);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5~D{D4_c6@bnl .N");
      ObjectType objectType0 = new ObjectType("+");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      operandStack0.equals(objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FRETURN fRETURN0 = new FRETURN();
      InstructionList instructionList0 = new InstructionList();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG(fNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FNEG constraint violated: The value at the stack top is not of type 'float', but of type '+'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(38);
      ObjectType objectType0 = ObjectType.getInstance("+");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      InstructionList instructionList0 = new InstructionList();
      ISTORE iSTORE0 = new ISTORE(38);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIAND((IAND) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      LocalVariables localVariables0 = new LocalVariables(28);
      ObjectType objectType0 = ObjectType.getInstance("JpU`%U[ZDDr#gE46");
      Class<IFNE>[] classArray0 = (Class<IFNE>[]) Array.newInstance(Class.class, 2);
      Class<IFNE> class0 = IFNE.class;
      classArray0[0] = class0;
      OperandStack operandStack0 = new OperandStack(28, objectType0);
      OperandStack operandStack1 = new OperandStack(28, objectType0);
      operandStack1.clone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      frame0.equals(objectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      OperandStack operandStack2 = new OperandStack(3846, objectType0);
      I2L i2L0 = new I2L();
      LXOR lXOR0 = new LXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLXOR(lXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LXOR constraint violated: The value at the stack top is not of type 'long', but of type 'JpU`%U[ZDDr#gE46'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables((byte)5);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack((byte)5, objectType0);
      ObjectType.getInstance("T96X<RN#'3@");
      ObjectType objectType1 = new ObjectType("");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      operandStack0.getClone();
      Frame frame1 = frame0.getClone();
      frame0.toString();
      frame0.toString();
      frame0.equals("");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      LRETURN lRETURN0 = new LRETURN();
      lRETURN0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLRETURN(lRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LRETURN constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(54);
      ObjectType objectType0 = ObjectType.getInstance("#~.O9wH-_?# %0{Y#c;");
      OperandStack operandStack0 = new OperandStack(54, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(1077);
      ARETURN aRETURN0 = new ARETURN();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      DASTORE dASTORE0 = new DASTORE();
      ISTORE iSTORE0 = new ISTORE(54);
      Boolean boolean0 = Boolean.TRUE;
      F2L f2L0 = new F2L();
      POP pOP0 = new POP();
      instConstraintVisitor0.visitPOP(pOP0);
      IALOAD iALOAD0 = new IALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIALOAD(iALOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IALOAD constraint violated: The 'index' is not of type int but of type #~.O9wH-_?# %0{Y#c.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)5;
      LocalVariables localVariables0 = new LocalVariables((byte)5);
      ObjectType objectType0 = ObjectType.getInstance("umVj5%S#'");
      OperandStack operandStack0 = new OperandStack((byte)5, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.merge(localVariables0);
      frame0.toString();
      Class<Integer> class0 = Integer.TYPE;
      Class<Integer> class1 = Integer.TYPE;
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Local Variables:\n0: <unknown object>\n1: <unknown object>\n2: <unknown object>\n3: <unknown object>\n4: <unknown object>\nOperandStack:\nSlots used: 1 MaxStack: 5.\numVj5%S#' (Size: 1)\n");
      INEG iNEG0 = new INEG();
      Pattern.quote("Local Variables:\n0: <unknown object>\n1: <unknown object>\n2: <unknown object>\n3: <unknown object>\n4: <unknown object>\nOperandStack:\nSlots used: 1 MaxStack: 5.\numVj5%S#' (Size: 1)\n");
      LALOAD lALOAD0 = new LALOAD();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.findHandle(114);
      IFGT iFGT0 = new IFGT((InstructionHandle) null);
      iFGT0.copy();
      iFGT0.negate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iFGT0.copy();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGT(iFGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFGT constraint violated: The value at the stack top is not of type 'int', but of type 'umVj5%S#''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(4);
      ObjectType objectType0 = ObjectType.getInstance("z+");
      OperandStack operandStack0 = new OperandStack(4, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      InstructionList instructionList0 = new InstructionList();
      LocalVariables localVariables1 = new LocalVariables(4);
      DADD dADD0 = new DADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDADD(dADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DADD constraint violated: The value at the stack top is not of type 'double', but of type 'z+'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("z+");
      OperandStack operandStack0 = new OperandStack(29, objectType0);
      operandStack0.getClone();
      OperandStack operandStack1 = new OperandStack(29, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(29);
      operandStack0.push(objectType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z+");
      frame0.getClone();
      I2S i2S0 = new I2S();
      objectType0.toString();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARRAYLENGTH(aRRAYLENGTH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ARRAYLENGTH constraint violated: The 'arrayref' does not refer to an array but is of type z+.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DCMPG dCMPG0 = new DCMPG();
      LSUB lSUB0 = new LSUB();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'8 ]x`o'R~i,GMT!cO");
      LocalVariables localVariables0 = new LocalVariables(119);
      ObjectType objectType0 = ObjectType.getInstance("z+");
      OperandStack operandStack0 = new OperandStack(119, objectType0);
      OperandStack operandStack1 = new OperandStack(1633, objectType0);
      operandStack1.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      FRETURN fRETURN0 = new FRETURN();
      ObjectType objectType1 = new ObjectType("\"1awx[DKRC)vRZ");
      OperandStack operandStack2 = new OperandStack(211, objectType1);
      ASTORE aSTORE0 = (ASTORE)InstructionConstants.ASTORE_1;
      instConstraintVisitor0.visitLocalVariableInstruction(aSTORE0);
      assertEquals(1, aSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(38);
      ObjectType objectType0 = ObjectType.getInstance("z+");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      operandStack0.merge(operandStack0);
      String string0 = Constants.CONSTRUCTOR_NAME;
      instConstraintVisitor0.setFrame(frame0);
      Pattern.quote("<init>");
      FSUB fSUB0 = new FSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFSUB(fSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSUB constraint violated: The value at the stack top is not of type 'float', but of type 'z+'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(38);
      ObjectType objectType0 = ObjectType.getInstance("#~.O9wH-_?# %0{Y#c;");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(38);
      ObjectType.getInstance(">");
      IUSHR iUSHR0 = new IUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIUSHR(iUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IUSHR constraint violated: The value at the stack top is not of type 'int', but of type '#~.O9wH-_?# %0{Y#c'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      ObjectType objectType0 = new ObjectType("z+");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      operandStack0.getClone();
      operandStack0.getClone();
      operandStack0.getClone();
      LocalVariables localVariables0 = new LocalVariables(38);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InstructionList instructionList0 = new InstructionList();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      MONITOREXIT mONITOREXIT1 = new MONITOREXIT();
      F2D f2D0 = new F2D();
      DUP2 dUP2_0 = new DUP2();
      ISHR iSHR0 = new ISHR();
      ISHR iSHR1 = new ISHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHR(iSHR1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHR constraint violated: The value at the stack top is not of type 'int', but of type 'z+'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(54);
      ObjectType objectType0 = new ObjectType("#~.O9wH-_?# %0{Y#c;");
      OperandStack operandStack0 = new OperandStack(54, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      localVariables0.getClone();
      UninitializedObjectType uninitializedObjectType1 = Frame.getThis();
      FileSystemHandling.shouldAllThrowIOExceptions();
      instConstraintVisitor0.setFrame(frame0);
      OperandStack operandStack1 = new OperandStack(54, uninitializedObjectType1.CLASS);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#~.O9wH-_?# %0{Y#c;");
      operandStack0.push(objectType0);
      Boolean boolean0 = Boolean.FALSE;
      InstructionList instructionList0 = new InstructionList();
      DUP dUP0 = new DUP();
      LocalVariables localVariables1 = new LocalVariables(54);
      I2F i2F0 = new I2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2F(i2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2F constraint violated: The value at the stack top is not of type 'int', but of type '#~.O9wH-_?# %0{Y#c'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("z+");
      OperandStack operandStack0 = new OperandStack(29, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      OperandStack operandStack2 = new OperandStack(29, objectType0);
      LocalVariables localVariables0 = new LocalVariables(29);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      localVariables1.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      DASTORE dASTORE0 = new DASTORE();
      Frame frame1 = new Frame(localVariables1, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFASTORE((FASTORE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(50);
      ReferenceType referenceType0 = Type.NULL;
      localVariables0.set(38, referenceType0);
      ObjectType objectType0 = new ObjectType("#.O9wH-_?# %0{Y#c");
      OperandStack operandStack0 = new OperandStack(50, objectType0);
      Frame frame0 = new Frame(38, 50);
      Object object0 = new Object();
      operandStack0.push(referenceType0);
      frame0.equals(operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(38);
      ARETURN aRETURN0 = new ARETURN();
      IINC iINC0 = new IINC(38, 50);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(50);
      ReferenceType referenceType0 = Type.NULL;
      localVariables0.set(38, referenceType0);
      ObjectType objectType0 = new ObjectType("#.O9wH-_?# %0{Y#c");
      OperandStack operandStack0 = new OperandStack(50, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#.O9wH-_?# %0{Y#c");
      Object object0 = new Object();
      operandStack0.push(referenceType0);
      frame0.equals(operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(38);
      ARETURN aRETURN0 = new ARETURN();
      IINC iINC0 = new IINC(38, 50);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not of type int but of type <null object>.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setMethodGen((MethodGen) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(38);
      ObjectType objectType0 = ObjectType.getInstance("#~.O9wH-_?# %0{Y#c;");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(38);
      ObjectType.getInstance(">");
      I2D i2D0 = new I2D();
      IMUL iMUL0 = new IMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMUL(iMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IMUL constraint violated: The value at the stack top is not of type 'int', but of type '#~.O9wH-_?# %0{Y#c'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(42);
      ObjectType.getInstance("z+");
      ObjectType objectType0 = ObjectType.getInstance("z+");
      OperandStack operandStack0 = new OperandStack(42, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      FRETURN fRETURN0 = new FRETURN();
      ObjectType.getInstance("PoDl<{&vDGb56$H7WsS");
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGE((IFGE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(38);
      ObjectType objectType0 = new ObjectType("#~.O9wH-_?# %0{Y#c;");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      operandStack0.getClone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(38);
      ARETURN aRETURN0 = new ARETURN();
      ARETURN aRETURN1 = new ARETURN();
      aRETURN1.getType();
      operandStack0.push(objectType0);
      LNEG lNEG0 = new LNEG();
      lNEG0.toString();
      DRETURN dRETURN0 = new DRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDRETURN(dRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DRETURN constraint violated: The value at the stack top is not of type 'double', but of type '#~.O9wH-_?# %0{Y#c'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DCMPG dCMPG0 = new DCMPG();
      LocalVariables localVariables0 = new LocalVariables(38);
      ObjectType objectType0 = ObjectType.getInstance("'8 }u]x`o'R~i,GMT!cO");
      localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(5, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      LocalVariables localVariables1 = new LocalVariables(38);
      OperandStack operandStack1 = new OperandStack(38, objectType0);
      OperandStack operandStack2 = new OperandStack(5, objectType0);
      localVariables0.clone();
      DUP2 dUP2_0 = new DUP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLREM((LREM) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      InstructionList instructionList0 = new InstructionList();
      LocalVariables localVariables0 = new LocalVariables(173);
      ObjectType objectType0 = ObjectType.getInstance("NiSh_)S}]2N");
      OperandStack operandStack0 = new OperandStack(173, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.toString();
      Pattern.quote("NiSh_)S}]2N");
      instConstraintVisitor0.setFrame(frame0);
      IREM iREM0 = new IREM();
      L2F l2F0 = new L2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F(l2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2F constraint violated: The value at the stack top is not of type 'long', but of type 'NiSh_)S}]2N'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(38);
      ObjectType objectType0 = ObjectType.getInstance("#~.O9wH-_?# %0{Y#c;");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      operandStack0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(38);
      ObjectType objectType1 = new ObjectType("#~.O9wH-_?# %0{Y#c;");
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLE((IFLE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      int int0 = 38;
      LocalVariables localVariables0 = new LocalVariables(38);
      ObjectType objectType0 = new ObjectType("#~.O9wH-_?# %0{Y#c;");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(38);
      ARETURN aRETURN0 = new ARETURN();
      ARETURN aRETURN1 = new ARETURN();
      aRETURN1.getType();
      operandStack0.push(objectType0);
      LNEG lNEG0 = new LNEG();
      lNEG0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLNEG(lNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LNEG constraint violated: The value at the stack top is not of type 'long', but of type '#~.O9wH-_?# %0{Y#c'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      ObjectType objectType0 = new ObjectType("z+");
      OperandStack operandStack0 = new OperandStack(29, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(29);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      fNEG0.dump(dataOutputStream0);
      OperandStack operandStack2 = new OperandStack(29, objectType0);
      LocalVariables localVariables0 = new LocalVariables(29);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      localVariables0.clone();
      localVariables1.clone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      operandStack1.getClone();
      InstructionList instructionList1 = new InstructionList();
      IOR iOR0 = new IOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIOR(iOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IOR constraint violated: The value at the stack top is not of type 'int', but of type 'z+'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(42);
      ObjectType objectType0 = ObjectType.getInstance("CKGkMe");
      OperandStack operandStack0 = new OperandStack(42);
      OperandStack operandStack1 = new OperandStack(42, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      FRETURN fRETURN0 = new FRETURN();
      OperandStack operandStack2 = new OperandStack(5, objectType0);
      LocalVariables localVariables1 = new LocalVariables(5);
      Frame frame1 = new Frame(localVariables0, operandStack1);
      IADD iADD0 = new IADD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(42);
      LMUL lMUL0 = new LMUL();
      lMUL0.consumeStack(constantPoolGen0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLMUL(lMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LMUL constraint violated: The value at the stack top is not of type 'long', but of type 'CKGkMe'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      LocalVariables localVariables0 = new LocalVariables(28);
      ObjectType objectType0 = ObjectType.getInstance("JpUh`%U[ZDDr#gE46");
      OperandStack operandStack0 = new OperandStack(1070, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LRETURN lRETURN0 = new LRETURN();
      F2I f2I0 = new F2I();
      f2I0.copy();
      DDIV dDIV0 = new DDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV(dDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DDIV constraint violated: The value at the stack top is not of type 'double', but of type 'JpUh`%U[ZDDr#gE46'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      LocalVariables localVariables0 = new LocalVariables(28);
      ObjectType objectType0 = ObjectType.getInstance("JpU`%U[ZDDr#gE46");
      Class<IFNE>[] classArray0 = (Class<IFNE>[]) Array.newInstance(Class.class, 2);
      Class<IFNE> class0 = IFNE.class;
      classArray0[0] = class0;
      OperandStack operandStack0 = new OperandStack(28, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.equals(objectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      OperandStack operandStack1 = new OperandStack(3846, objectType0);
      I2L i2L0 = new I2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2L(i2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2L constraint violated: The value at the stack top is not of type 'int', but of type 'JpU`%U[ZDDr#gE46'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      ObjectType objectType0 = new ObjectType("z+");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      operandStack0.getClone();
      OperandStack operandStack1 = new OperandStack(38);
      LocalVariables localVariables0 = new LocalVariables(38);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DCMPL dCMPL0 = new DCMPL();
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) dASTORE0);
      IFNULL iFNULL0 = new IFNULL(instructionHandle0);
      IFNULL iFNULL1 = new IFNULL(instructionHandle0);
      instConstraintVisitor0.visitIFNULL(iFNULL1);
      LSHR lSHR0 = new LSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHR(lSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHR constraint violated: The value at the stack top is not of type 'int', but of type 'z+'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(42);
      ObjectType objectType0 = ObjectType.getInstance("private");
      OperandStack operandStack0 = new OperandStack(42, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(218);
      OperandStack operandStack1 = new OperandStack(218, objectType0);
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(218);
      FMUL fMUL0 = new FMUL();
      DSUB dSUB0 = new DSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDSUB(dSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSUB constraint violated: The value at the stack top is not of type 'double', but of type 'private'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables((byte)5);
      ObjectType objectType0 = new ObjectType("umVj5%S#'");
      OperandStack operandStack0 = new OperandStack((byte)5, objectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "umVj5%S#'");
      localVariables0.toString();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      operandStack0.clone();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "umVj5%S#'");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DNEG dNEG0 = new DNEG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      INEG iNEG0 = new INEG();
      INEG iNEG1 = new INEG();
      ISTORE iSTORE0 = new ISTORE((byte)5);
      iSTORE0.consumeStack(constantPoolGen0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLocalVariableInstruction(iSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISTORE constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(42);
      LocalVariables localVariables1 = new LocalVariables(42);
      localVariables1.clone();
      localVariables0.merge(localVariables1);
      ObjectType objectType0 = ObjectType.getInstance("private");
      OperandStack operandStack0 = new OperandStack(42);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack1 = new OperandStack(42, objectType0);
      Frame.getThis();
      operandStack1.initializeObject((UninitializedObjectType) null);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables2 = new LocalVariables(42);
      OperandStack operandStack2 = new OperandStack(243, objectType0);
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(243);
      FMUL fMUL0 = new FMUL();
      DSUB dSUB0 = new DSUB();
      F2I f2I0 = new F2I();
      F2I f2I1 = new F2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLE((IF_ICMPLE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables((byte)25);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack((byte)25, objectType0);
      ObjectType objectType1 = new ObjectType("");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      operandStack0.getClone();
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      IXOR iXOR0 = new IXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIXOR(iXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IXOR constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 1641;
      LocalVariables localVariables0 = new LocalVariables(1641);
      ObjectType objectType0 = new ObjectType("#~.O9wH-_?# %0{Y#c;");
      OperandStack operandStack0 = new OperandStack(1641, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      localVariables0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.getClone();
      operandStack0.push(objectType0);
      LASTORE lASTORE0 = new LASTORE();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      D2F d2F0 = new D2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2F(d2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2F constraint violated: The value at the stack top is not of type 'double', but of type '#~.O9wH-_?# %0{Y#c'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("z+");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      LocalVariables localVariables0 = new LocalVariables(38);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L#xwkgYX=Gh6pO]");
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables0.toString();
      DASTORE dASTORE0 = new DASTORE();
      frame0.clone();
      localVariables0.getClone();
      InstructionList instructionList0 = new InstructionList();
      localVariables1.getClone();
      operandStack0.getClone();
      operandStack0.push(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InstructionList instructionList1 = new InstructionList();
      localVariables0.getClone();
      instructionList0.copy();
      instructionList1.insert(instructionList0);
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE((InstructionHandle) null);
      instConstraintVisitor0.visitIF_ACMPNE(iF_ACMPNE0);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      INEG iNEG0 = new INEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINEG(iNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction INEG constraint violated: The value at the stack top is not of type 'int', but of type 'z+'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(37);
      ObjectType objectType0 = ObjectType.getInstance("GJJCA\"4CI");
      OperandStack operandStack0 = new OperandStack(208, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(26);
      operandStack0.push(objectType0);
      LNEG lNEG0 = new LNEG();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      I2D i2D0 = new I2D();
      IXOR iXOR0 = new IXOR();
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      DCMPL dCMPL0 = new DCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      dCMPL0.consumeStack(constantPoolGen0);
      DCMPL dCMPL1 = new DCMPL();
      FADD fADD0 = new FADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFADD(fADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FADD constraint violated: The value at the stack top is not of type 'float', but of type 'GJJCA\"4CI'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      InstructionList instructionList0 = new InstructionList();
      LocalVariables localVariables0 = new LocalVariables(173);
      localVariables0.toString();
      ObjectType objectType0 = ObjectType.getInstance("NiSh_)S}]2N");
      OperandStack operandStack0 = new OperandStack(173, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.toString();
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      Boolean boolean0 = Boolean.FALSE;
      InstructionList instructionList1 = new InstructionList();
      DUP dUP0 = new DUP();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      LAND lAND0 = new LAND();
      lAND0.copy();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLAND(lAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LAND constraint violated: The value at the stack top is not of type 'long', but of type 'NiSh_)S}]2N'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      InstructionList instructionList0 = new InstructionList();
      LocalVariables localVariables0 = new LocalVariables(173);
      localVariables0.toString();
      ObjectType objectType0 = ObjectType.getInstance("NiSh_)S}]2N");
      OperandStack operandStack0 = new OperandStack(173, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.toString();
      operandStack0.push(objectType0);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      IREM iREM0 = new IREM();
      LASTORE lASTORE0 = new LASTORE();
      SWAP sWAP0 = new SWAP();
      instConstraintVisitor0.visitSWAP(sWAP0);
      NOP nOP0 = new NOP();
      instConstraintVisitor0.visitNOP(nOP0);
      instConstraintVisitor0.visitStackInstruction(sWAP0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLASTORE(lASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LASTORE constraint violated: The value at the stack top is not of type 'long', but of type 'NiSh_)S}]2N'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DCMPG dCMPG0 = new DCMPG();
      ObjectType objectType0 = ObjectType.getInstance("'8 }u]x`o'R~i,GMT!cO");
      LocalVariables localVariables0 = new LocalVariables(3);
      OperandStack operandStack0 = new OperandStack(3, objectType0);
      operandStack0.push(objectType0);
      LocalVariables localVariables1 = new LocalVariables(3);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame2 = frame1.getClone();
      instConstraintVisitor0.setFrame(frame2);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      DASTORE dASTORE0 = new DASTORE();
      LRETURN lRETURN0 = new LRETURN();
      F2I f2I0 = new F2I();
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE((InstructionHandle) null);
      iF_ICMPNE0.negate();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPNE(iF_ICMPNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPNE constraint violated: The value at the stack top is not of type 'int', but of type ''8 }u]x`o'R~i,GMT!cO'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(75);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValueGen class does not know how to copy this type ");
      LocalVariables localVariables1 = new LocalVariables(75);
      OperandStack operandStack0 = new OperandStack(75);
      OperandStack operandStack1 = new OperandStack(4192, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      FRETURN fRETURN0 = new FRETURN();
      OperandStack operandStack2 = new OperandStack(114, objectType0);
      DUP dUP0 = new DUP();
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT((InstructionHandle) null);
      IF_ICMPGT iF_ICMPGT1 = new IF_ICMPGT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGT(iF_ICMPGT1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPGT constraint violated: The value at the stack top is not of type 'int', but of type 'SimpleElementValueGen class does not know how to copy this type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("z+");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      LocalVariables localVariables0 = new LocalVariables(38);
      OperandStack operandStack1 = operandStack0.getClone();
      LocalVariables localVariables1 = new LocalVariables(38);
      localVariables0.getClone();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      Type.getType(class0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.merge(operandStack1);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = new ARETURN();
      aRETURN0.getType();
      LADD lADD0 = new LADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLADD(lADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LADD constraint violated: The value at the stack top is not of type 'long', but of type 'z+'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(42);
      ObjectType objectType0 = new ObjectType("private");
      OperandStack operandStack0 = new OperandStack(42);
      OperandStack operandStack1 = new OperandStack(42, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      OperandStack operandStack2 = new OperandStack(42, objectType0);
      ObjectType objectType1 = new ObjectType("private");
      OperandStack operandStack3 = new OperandStack(1985);
      Frame frame1 = new Frame(localVariables0, operandStack2);
      instConstraintVisitor0.setFrame(frame1);
      DASTORE dASTORE0 = new DASTORE();
      POP2 pOP2_0 = new POP2();
      DSTORE dSTORE0 = new DSTORE(1587);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(dSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSTORE constraint violated: Stack top type and STOREing Instruction type mismatch: Stack top: 'private'; Instruction type: 'double'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      OperandStack operandStack1 = new OperandStack(38, objectType0);
      OperandStack operandStack2 = operandStack1.getClone();
      LocalVariables localVariables0 = new LocalVariables(38);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      DASTORE dASTORE0 = new DASTORE();
      InstructionList instructionList0 = new InstructionList();
      localVariables1.getClone();
      operandStack2.push(objectType0);
      localVariables1.toString();
      instConstraintVisitor0.setFrame(frame0);
      ISHL iSHL0 = new ISHL();
      Frame frame1 = new Frame(localVariables1, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE1 = new DASTORE();
      ConstantString constantString0 = new ConstantString(38);
      INEG iNEG0 = new INEG();
      INEG iNEG1 = new INEG();
      iNEG1.toString();
      INEG iNEG2 = new INEG();
      instructionList0.copy();
      FADD fADD0 = new FADD();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) iNEG0);
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPEQ(iF_ACMPEQ0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DMUL dMUL0 = new DMUL();
      LocalVariables localVariables0 = new LocalVariables(38);
      ObjectType objectType0 = new ObjectType("#~.O9wH-_?# %0{Y#c;");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(38);
      ARETURN aRETURN0 = new ARETURN();
      ARETURN aRETURN1 = new ARETURN();
      aRETURN0.getType();
      LCONST lCONST0 = new LCONST(0L);
      Type type0 = lCONST0.getType((ConstantPoolGen) null);
      operandStack0.push(type0);
      LNEG lNEG0 = new LNEG();
      GETFIELD gETFIELD0 = new GETFIELD(3480);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitGETFIELD(gETFIELD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction GETFIELD constraint violated: Stack top should be an object reference that's not an array reference, but is 'long'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(38);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5~D{D4_c6@bnl .N");
      ObjectType objectType0 = new ObjectType("5~D{D4_c6@bnl .N");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      operandStack0.equals(objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      FRETURN fRETURN0 = new FRETURN();
      InstructionList instructionList0 = new InstructionList();
      FCMPL fCMPL0 = new FCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPL(fCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPL constraint violated: The value at the stack top is not of type 'float', but of type '5~D{D4_c6@bnl .N'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DMUL dMUL0 = new DMUL();
      int int0 = 38;
      LocalVariables localVariables0 = new LocalVariables(38);
      ObjectType objectType0 = ObjectType.getInstance("'8 ]x`o'R~i,GMT!cO");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      FRETURN fRETURN0 = new FRETURN();
      int int1 = 114;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGE((IF_ICMPGE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(54);
      ObjectType objectType0 = new ObjectType("#~.O9wH-_?# %0{Y#c;");
      OperandStack operandStack0 = new OperandStack(54, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      LocalVariables localVariables1 = new LocalVariables(54);
      Frame.getThis();
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.clone();
      LocalVariables localVariables2 = new LocalVariables(54);
      ARETURN aRETURN0 = new ARETURN();
      operandStack0.push(objectType0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      LCONST lCONST0 = new LCONST(0L);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      lCONST0.consumeStack(constantPoolGen0);
      instConstraintVisitor0.visitLCONST(lCONST0);
      RET rET0 = new RET(46);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRET(rET0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction RET constraint violated: Expecting a ReturnaddressType in local variable 46.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(54);
      ObjectType objectType0 = new ObjectType("#~.O9wH-_?# %0{Y#c;");
      OperandStack operandStack0 = new OperandStack(54, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.getClone();
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.clone();
      localVariables1.getClone();
      ARETURN aRETURN0 = new ARETURN();
      FileSystemHandling.shouldAllThrowIOExceptions();
      operandStack0.push(objectType0);
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables0.set(0, objectType0);
      ObjectType.getInstance("mb!'0<?d*mJv");
      OperandStack operandStack1 = new OperandStack(1625, uninitializedObjectType0.STRING);
      localVariables2.clone();
      FLOAD fLOAD0 = new FLOAD(1062);
      instConstraintVisitor0.visitFLOAD(fLOAD0);
      DUP2 dUP2_0 = new DUP2();
      instConstraintVisitor0.visitDUP2(dUP2_0);
      assertEquals((short)92, dUP2_0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      ObjectType objectType0 = new ObjectType("z+");
      OperandStack operandStack0 = new OperandStack(29, objectType0);
      operandStack0.getClone();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(29);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      fNEG0.dump(dataOutputStream0);
      OperandStack operandStack1 = new OperandStack(29, objectType0);
      LocalVariables localVariables0 = new LocalVariables(29);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      localVariables1.clone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ARETURN aRETURN0 = new ARETURN();
      aRETURN0.getType();
      instConstraintVisitor0.visitARETURN(aRETURN0);
      assertEquals(1, aRETURN0.getLength());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(42);
      ObjectType objectType0 = ObjectType.getInstance("z+");
      OperandStack operandStack0 = new OperandStack(42, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      DASTORE dASTORE0 = new DASTORE();
      FRETURN fRETURN0 = new FRETURN();
      operandStack0.equals(operandStack1);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LASTORE lASTORE0 = new LASTORE();
      NOP nOP0 = new NOP();
      DUP dUP0 = new DUP();
      DNEG dNEG0 = new DNEG();
      I2B i2B0 = new I2B();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2B(i2B0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2B constraint violated: The value at the stack top is not of type 'int', but of type 'z+'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables(62);
      ObjectType objectType0 = new ObjectType("z+");
      localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack(62, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      InstructionList instructionList0 = new InstructionList();
      ISTORE iSTORE0 = new ISTORE(62);
      ObjectType objectType1 = new ObjectType(">");
      operandStack0.getClone();
      IF_ICMPLT iF_ICMPLT0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLT((IF_ICMPLT) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("z");
      OperandStack operandStack0 = new OperandStack(29, objectType0);
      operandStack0.getClone();
      OperandStack operandStack1 = new OperandStack(29, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(29);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z");
      frame0.getClone();
      I2S i2S0 = new I2S();
      F2D f2D0 = new F2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2D(f2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2D constraint violated: The value at the stack top is not of type 'float', but of type 'z'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      ObjectType objectType0 = ObjectType.getInstance("z+");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      operandStack0.getClone();
      OperandStack operandStack1 = new OperandStack(38);
      LocalVariables localVariables0 = new LocalVariables(38);
      LocalVariables localVariables1 = new LocalVariables(38);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Object object0 = frame0.clone();
      localVariables1.merge(localVariables0);
      object0.toString();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      ASTORE aSTORE0 = new ASTORE(151);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      aSTORE0.getType(constantPoolGen0);
      aSTORE0.toString();
      instConstraintVisitor0.visitASTORE(aSTORE0);
      IREM iREM0 = new IREM();
      LLOAD lLOAD0 = new LLOAD(29);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLoadInstruction(lLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LLOAD constraint violated: Read-Access on local variable 29 with unknown content.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(75);
      ObjectType objectType0 = ObjectType.getInstance("SimpleElementValueGen class does not know how to copy this type ");
      LocalVariables localVariables1 = new LocalVariables(75);
      OperandStack operandStack0 = new OperandStack(75);
      OperandStack operandStack1 = new OperandStack(4192, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      FRETURN fRETURN0 = new FRETURN();
      OperandStack operandStack2 = new OperandStack(114, objectType0);
      DUP dUP0 = new DUP();
      IXOR iXOR0 = new IXOR();
      IASTORE iASTORE0 = new IASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIASTORE(iASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IASTORE constraint violated: The value at the stack top is not of type 'int', but of type 'SimpleElementValueGen class does not know how to copy this type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(54);
      ReferenceType referenceType0 = Type.NULL;
      localVariables0.set(38, referenceType0);
      ObjectType objectType0 = new ObjectType("#.O9wH-_?# %0{Y#c");
      OperandStack operandStack0 = new OperandStack(54, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      operandStack0.clone();
      Frame.getThis();
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(54);
      ARETURN aRETURN0 = new ARETURN();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      DASTORE dASTORE0 = new DASTORE();
      LUSHR lUSHR0 = new LUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLUSHR(lUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LUSHR constraint violated: The value at the stack top is not of type 'int', but of type '#.O9wH-_?# %0{Y#c'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(54);
      ObjectType objectType0 = ObjectType.getInstance("#~.O9wH-_?# %0{Y#c;");
      OperandStack operandStack0 = new OperandStack(54, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(1077);
      ARETURN aRETURN0 = new ARETURN();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      DASTORE dASTORE0 = new DASTORE();
      ISTORE iSTORE0 = new ISTORE(54);
      Boolean boolean0 = Boolean.TRUE;
      F2L f2L0 = new F2L();
      IFEQ iFEQ0 = new IFEQ((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFEQ(iFEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFEQ constraint violated: The value at the stack top is not of type 'int', but of type '#~.O9wH-_?# %0{Y#c'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(54);
      ObjectType objectType0 = new ObjectType("#~.O9wH-_?# %0{Y#c;");
      OperandStack operandStack0 = new OperandStack(54, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.getClone();
      LSHL lSHL0 = new LSHL();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      lSHL0.toString(constantPool0);
      frame0.equals(lSHL0);
      localVariables0.getClone();
      localVariables0.getClone();
      Frame.getThis();
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.clone();
      ARETURN aRETURN0 = new ARETURN();
      INEG iNEG0 = new INEG();
      LLOAD lLOAD0 = new LLOAD(214);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLocalVariableInstruction(lLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LLOAD constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(75);
      ObjectType objectType0 = new ObjectType("SimpleElementValueGen class does not know how to copy this type ");
      LocalVariables localVariables1 = new LocalVariables(75);
      OperandStack operandStack0 = new OperandStack(75);
      OperandStack operandStack1 = new OperandStack(4192, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      FRETURN fRETURN0 = new FRETURN();
      OperandStack operandStack2 = new OperandStack(114, objectType0);
      DUP dUP0 = new DUP();
      LocalVariables localVariables2 = new LocalVariables(4192);
      ARETURN aRETURN0 = new ARETURN();
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(196);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitANEWARRAY(aNEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ANEWARRAY constraint violated: The 'count' at the stack top is not of type 'int' but of type 'SimpleElementValueGen class does not know how to copy this type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(47);
      ReferenceType referenceType0 = Type.NULL;
      localVariables0.set(38, referenceType0);
      ObjectType objectType0 = new ObjectType("#.O9wH-_?# %0{Y#c");
      OperandStack operandStack0 = new OperandStack(47, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      operandStack0.getClone();
      Frame.getThis();
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(47);
      ARETURN aRETURN0 = new ARETURN();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      DASTORE dASTORE0 = new DASTORE();
      ISTORE iSTORE0 = new ISTORE(47);
      DUP dUP0 = new DUP();
      DUP dUP1 = new DUP();
      instConstraintVisitor0.visitDUP(dUP1);
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2(dUP2_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(862);
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(27, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      operandStack0.push(objectType0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      I2S i2S0 = new I2S();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InstructionList instructionList0 = new InstructionList();
      instructionList0.getStart();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      InstructionList instructionList1 = new InstructionList(byteArray0);
      instructionList0.getEnd();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PUTFIELD pUTFIELD0 = new PUTFIELD(38);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPUTFIELD(pUTFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(42);
      ObjectType objectType0 = ObjectType.getInstance("private");
      OperandStack operandStack0 = new OperandStack(42, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(42);
      ARETURN aRETURN0 = new ARETURN();
      operandStack0.push(objectType0);
      LNEG lNEG0 = new LNEG();
      D2F d2F0 = new D2F();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      I2D i2D0 = new I2D();
      IXOR iXOR0 = new IXOR();
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X1(dUP2_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FNEG fNEG0 = new FNEG();
      LocalVariables localVariables0 = new LocalVariables((byte)5);
      ObjectType objectType0 = ObjectType.getInstance("If stack top's size is 1 and stack next-to-top's size is 1, stack next-to-next-to-top's size must also be 1, but is: '");
      ObjectType objectType1 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((byte)5, objectType0);
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DNEG dNEG0 = new DNEG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      DASTORE dASTORE0 = new DASTORE();
      operandStack1.getClone();
      operandStack1.getClone();
      operandStack0.push(objectType1);
      LASTORE lASTORE0 = new LASTORE();
      NOP nOP0 = new NOP();
      DUP dUP0 = new DUP();
      DUP_X2 dUP_X2_0 = new DUP_X2();
      instConstraintVisitor0.visitDUP_X2(dUP_X2_0);
      assertEquals(1, dUP_X2_0.getLength());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(75);
      ObjectType objectType0 = new ObjectType("SimpleElementValueGen class does not know how to copy this type ");
      LocalVariables localVariables1 = new LocalVariables(75);
      OperandStack operandStack0 = new OperandStack(75);
      OperandStack operandStack1 = new OperandStack(4192, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      FRETURN fRETURN0 = new FRETURN();
      DUP dUP0 = new DUP();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.getStart();
      IFNONNULL iFNONNULL0 = new IFNONNULL((InstructionHandle) null);
      instConstraintVisitor0.visitIFNONNULL(iFNONNULL0);
      CHECKCAST cHECKCAST0 = new CHECKCAST(99);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCHECKCAST(cHECKCAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(42);
      ObjectType objectType0 = ObjectType.getInstance("0rivate");
      OperandStack operandStack0 = new OperandStack(42);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      OperandStack operandStack2 = new OperandStack(42, objectType0);
      ObjectType objectType1 = new ObjectType("0rivate");
      OperandStack operandStack3 = new OperandStack(1952);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      POP2 pOP2_0 = new POP2();
      DSTORE dSTORE0 = new DSTORE(1587);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(dSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSTORE constraint violated: Cannot STORE: Stack to read from is empty.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      ObjectType objectType0 = ObjectType.getInstance("z+");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack1.pop();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      operandStack1.getClone();
      LocalVariables localVariables0 = new LocalVariables(38);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Boolean boolean0 = new Boolean("z+");
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOOKUPSWITCH((LOOKUPSWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DCMPG dCMPG0 = new DCMPG();
      LSUB lSUB0 = new LSUB();
      LocalVariables localVariables0 = new LocalVariables(38);
      ObjectType objectType0 = ObjectType.getInstance("'8 ]x`o'R~i,GMT!cO");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables1 = new LocalVariables(38);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'8 ]x`o'R~i,GMT!cO");
      Frame frame1 = new Frame(2297, 4065);
      frame1.getClone();
      frame1.getClone();
      I2S i2S0 = new I2S();
      objectType0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      L2F l2F0 = new L2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPEQ((IF_ICMPEQ) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DMUL dMUL0 = new DMUL();
      LocalVariables localVariables0 = new LocalVariables(38);
      ObjectType objectType0 = ObjectType.getInstance("'8 ]x`o'R~i,GMT!cO");
      OperandStack operandStack0 = new OperandStack(38, objectType0);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      DUP dUP0 = new DUP();
      DADD dADD0 = new DADD();
      frame0.equals(dADD0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ASTORE aSTORE0 = new ASTORE(431);
      instConstraintVisitor0.visitStoreInstruction(aSTORE0);
      RET rET0 = new RET(182);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRET(rET0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 182
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }
}
