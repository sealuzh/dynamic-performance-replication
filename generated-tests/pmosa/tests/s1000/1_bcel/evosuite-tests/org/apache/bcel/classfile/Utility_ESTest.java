/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 15:27:17 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Member;
import java.net.URI;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.AnnotationDefault;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.LocalVariableTypeTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.PMGClass;
import org.apache.bcel.classfile.SourceFile;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.isSet(133, (-133));
      Utility.convertString("yl)ot/tF");
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)123;
      byte byte1 = (byte)0;
      byteArray0[6] = (byte)0;
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle((ConstantMethodHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.isJavaIdentifierPart('x');
      Utility.isSet(0, 0);
      try { 
        Utility.methodSignatureArgumentTypes("dreturn", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = Utility.format((-3448), (-3448), true, 'T');
      assertEquals("-3448", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("09", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = Utility.fillup(" entries\n", 114, true, 'v');
      assertEquals(" entries\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)41;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("05 32 00 26 57 00 29", string1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.isJavaIdentifierPart('x');
      int int0 = 0;
      Utility.isSet(0, 0);
      Utility.classOrInterface(4845);
      Utility.format(4845, 0, false, 'x');
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utility.replace("org.apache.commons.io.filefilter.SizeFileFilter", "org.apache.commons.io.filefilter.SizeFileFilter", "org.apache.commons.io.filefilter.SizeFileFilter");
      try { 
        Utility.typeOfSignature("1XlC*o>SXPq5&`,|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1XlC*o>SXPq5&`,|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Invalid method signature: ", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "sToEafWfc1j=A8maY";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("sToEafWfc1j=A8maY", "sToEafWfc1j=A8maY", "sToEafWfc1j=A8maY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: sToEafWfc1j=A8maY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "= .HQ3C2";
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("{= .HQ3C2}");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("r[GfLsj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[GfLsj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.compactClassName("");
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "Z&\\Pd?!D;\"-";
      Utility.searchOpcode("Z&Pd?!D;\"-");
      String string1 = "(tD";
      boolean boolean0 = true;
      try { 
        Utility.decode("(tD", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.compactClassName("Integer", "Integer", true);
      byte[] byteArray0 = Utility.decode("", false);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = Utility.replace("java.lang.", "8cY(", "\")");
      assertEquals("java.lang.", string0);
      
      String string1 = Utility.compactClassName("java.lang.");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "1";
      Utility.compactClassName("D", "1", false);
      Utility.signatureToString("D");
      String string1 = "4IXZY-";
      boolean boolean0 = true;
      Utility.fillup("4IXZY-", 41, true, 'w');
      try { 
        Utility.typeOfSignature("4IXZY-wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4IXZY-wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.methodTypeToSignature(";kY:&jRpW", (String[]) null);
      try { 
        Utility.methodSignatureArgumentTypes(";kY:&jRpW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;kY:&jRpW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.isJavaIdentifierPart('i');
      try { 
        Utility.typeOfMethodSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.setBit(122, (-1013));
      Utility.convertString("3F");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "3F";
      objectArray0[1] = (Object) "3F";
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      try { 
        Utility.methodSignatureArgumentTypes("3F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "~lQGJ";
      Utility.getSignature("~lQGJ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "~lQGJ";
      stringArray0[1] = "~lQGJ";
      stringArray0[2] = "~lQGJ";
      stringArray0[3] = "~lQGJ";
      stringArray0[4] = "~lQGJ";
      stringArray0[5] = "~lQGJ";
      stringArray0[6] = "~lQGJ";
      stringArray0[7] = "~lQGJ";
      stringArray0[8] = "L~lQGJ;";
      Utility.methodTypeToSignature("~lQGJ", stringArray0);
      Utility.setBit(81, 81);
      boolean boolean0 = false;
      Utility.decode("L~lQGJ;", false);
      String string1 = "Illegal type: ";
      MockFile mockFile0 = new MockFile("Illegal type: ", "L~lQGJ;");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false, "~lQGJ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ~lQGJ
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = false;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Utility.methodTypeToSignature("", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("wide", "fload_1", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wide
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)38, (int) (byte)38);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("org.apache.commons.io.filefilter.SizeFileFilter", false);
      String string0 = "";
      Utility.replace("org.apache.commons.io.filefilter.SizeFileFilter", "org.apache.commons.io.filefilter.SizeFileFilter", "");
      try { 
        Utility.typeOfSignature("1XlC*o>SXPq5&`,|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1XlC*o>SXPq5&`,|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals("null, null, null, null, null, null", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)50;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)50, (int) (byte)50);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "Z&\\Pd?!D;\"-";
      Utility.searchOpcode("Z&Pd?!D;\"-");
      String string1 = "(tD";
      boolean boolean0 = true;
      Object[] objectArray0 = new Object[1];
      Utility.replace("hv&", "'", "Z&Pd?!D;\"-");
      objectArray0[0] = (Object) "Z&Pd?!D;\"-";
      Utility.printArray(objectArray0, true, true);
      Utility.printArray(objectArray0);
      try { 
        Utility.methodSignatureArgumentTypes("xfKR^PKu,$:{xG_lA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: xfKR^PKu,$:{xG_lA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 57;
      Utility.classOrInterface(57);
      Utility.format(57, 0, false, 'v');
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.decode("org.apache.commons.io.filefilter.SizeFileFilter", false);
      Utility.replace("org.apache.commons.io.filefilter.SizeFileFilter", "org.apache.commons.io.filefilter.SizeFileFilter", "org.apache.commons.io.filefilter.SizeFileFilter");
      try { 
        Utility.typeOfSignature("org.apache.commons.io.filefilter.SizeFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.commons.io.filefilter.SizeFileFilter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.clearBit((-2201), (-1684));
      String string0 = "arraylength";
      Utility.convertString("arraylength");
      int int0 = 3888;
      Utility.clearBit(3888, 3888);
      Utility.searchOpcode("arraylength");
      try { 
        Utility.methodSignatureArgumentTypes("Exceptions: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Exceptions: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = Utility.replace("Db=4Bh6A+MO", "Db=4Bh6A+MO", "Invalid signature: `");
      assertEquals("Invalid signature: `", string0);
      
      byte byte0 = Utility.typeOfSignature("Db=4Bh6A+MO");
      assertEquals((byte)7, byte0);
      
      int int0 = Utility.clearBit(279, 279);
      assertEquals(279, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('x');
      boolean boolean1 = Utility.isSet(0, 0);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)105;
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.isJavaIdentifierPart('x');
      Utility.isSet(0, 0);
      try { 
        Utility.typeOfSignature("O6k6dMNth;r9:X;E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O6k6dMNth;r9:X;E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.replace("org.apache.commons.io.filefilter.SizeFileFilter", "org.apache.commons.io.filefilter.SizeFileFilter", "org.apache.commons.io.filefilter.SizeFileFilter");
      Utility.classOrInterface(71);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) byteArray0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) byteArray0;
      objectArray0[3] = (Object) byteArray0;
      objectArray0[4] = (Object) byteArray0;
      objectArray0[5] = (Object) byteArray0;
      objectArray0[6] = (Object) byteArray0;
      Utility.printArray(objectArray0, true);
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-36);
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)40;
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), (int) (byte)57, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 52, 69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 27);
      try { 
        Utility.typeOfMethodSignature("0:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-56), (int) (byte) (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString((-213), false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid signature: `");
      assertEquals((byte)10, byte0);
      
      byte byte1 = ElementValue.PRIMITIVE_BOOLEAN;
      String string0 = Utility.signatureToString("Invalid signature: `");
      assertEquals("int", string0);
      
      String string1 = Utility.accessToString((int) (byte)10, true);
      assertEquals("private static", string1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.isJavaIdentifierPart('H');
      Utility.compactClassName("8cY(", "8cY(", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("q~qBfeWWis0qipZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `q~qBfeWWis0qipZ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.replace("8cY(", "8cY(", "R^");
      try { 
        Utility.typeOfSignature("$Y&%VIGW_$k5B;,;I!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $Y&%VIGW_$k5B;,;I!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.isJavaIdentifierPart('%');
      Utility.isSet(0, 0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("8cY(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8cY(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = Utility.replace("Db=4Bh6A+MO", "Db=4Bh6A+MO", "Invalid signature: `");
      assertEquals("Invalid signature: `", string0);
      
      byte byte0 = Utility.typeOfSignature("Db=4Bh6A+MO");
      assertEquals((byte)7, byte0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      String string2 = Utility.signatureToString("Invalid signature: `");
      assertEquals("int", string2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dcmpg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      PrintStream printStream0 = mockPrintStream0.append('3');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) "dcmpg";
      objectArray0[6] = (Object) "dcmpg";
      Utility.printArray(printStream0, objectArray0);
      assertSame(mockPrintStream0, printStream0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.replace("8cY(", "8cY(", "R^");
      Utility.convertString("3,#&[ R8U$Xf,WbxK\"");
      try { 
        Utility.methodSignatureReturnType("R^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('%');
      boolean boolean1 = Utility.isSet(0, 0);
      assertTrue(boolean1 == boolean0);
      
      int int0 = Pattern.LITERAL;
      String string0 = Utility.accessToString((-921), true);
      assertEquals("public private protected volatile abstract strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.classOrInterface(16);
      assertEquals("class", string1);
      
      String string2 = Utility.getSignature("public private protected volatile abstract strictfp synthetic annotation enum");
      assertEquals("Lpublic;", string2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.typeOfSignature("Db=4Bh6A+MO");
      Utility.getSignature("\t\t#");
      try { 
        Utility.methodSignatureReturnType("\t\t#", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t\t#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("Wt- m!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Wt- m!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.replace("java.lang.", "8cY(", "\")");
      try { 
        Utility.typeOfSignature("\")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \")
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      try { 
        Utility.methodSignatureArgumentTypes("8cY(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8cY(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Fu1^");
      assertEquals((byte)6, byte0);
      
      String string0 = Utility.getSignature("8(");
      assertEquals("L8(;", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "8(";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"8(\"", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      try { 
        Utility.typeOfSignature(". Constant pool size is: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: . Constant pool size is: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.replace("ifgt", "cb1X", "\")");
      try { 
        Utility.typeOfSignature(": ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: : 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utility.isJavaIdentifierPart('H');
      String string0 = Utility.signatureToString("Sk");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("QKi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QKi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "y\n";
      byte byte0 = Constants.ITEM_Integer;
      int int0 = Member.PUBLIC;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "y\n";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "y\n";
      objectArray0[3] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        Utility.typeOfSignature("HlH%<=thuOFoK5]y{|Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HlH%<=thuOFoK5]y{|Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid signature: `");
      assertEquals((byte)10, byte0);
      
      int int0 = Utility.clearBit((byte)10, (-1676));
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.replace("putfield", "tPY`6 (WoX", "V2[,\"Kjld12<H");
      byte byte0 = ElementValue.PRIMITIVE_BOOLEAN;
      Utility.compactClassName("KZ8>E]>");
      // Undeclared exception!
      try { 
        Utility.signatureToString("KZ8>E]>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KZ8>E]>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_BOOLEAN;
      Utility.compactClassName("ret");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Pa7^Mgx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pa7^Mgx'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("XW:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XW:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('5');
      assertTrue(boolean0);
      
      short short0 = Utility.searchOpcode("tableswitch");
      assertEquals((short)170, short0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("/R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6Yxq+)lu>sMiZg!ll@c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6Yxq+)lu>sMiZg!ll@c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utility.replace("Db=4Bh6A+MO", "Db=4Bh6A+MO", "Invalid signature: `");
      Utility.typeOfSignature("Db=4Bh6A+MO");
      String string0 = "char";
      Utility.getSignature("char");
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "C", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.compactClassName("c", false);
      String string0 = Utility.compactClassName("p7JYD[L$H(}?t", true);
      assertEquals("p7JYD[L$H(}?t", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-37);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("istore_2", string1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")3XE/h%\"\"iQvp/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )3XE/h%\"\"iQvp/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("We>/pL~N,!MZw1jI?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `We>/pL~N,!MZw1jI?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">QW;a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >QW;a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.getSignature("$F9OetS7u");
      assertEquals("L$F9OetS7u;", string0);
      
      String string1 = Utility.accessToString(82);
      assertEquals("private final volatile", string1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "UO@>w#Z<";
      try { 
        Utility.typeOfSignature("UO@>w#Z<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UO@>w#Z<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Jv{/-k|;#QfSG");
      Utility.signatureToString("Jv{/-k|;#QfSG", false);
      Utility.classOrInterface(95);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)74;
      byte byte0 = (byte)67;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte)3;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P))");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P))
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = Utility.typeOfSignature("V_");
      assertEquals((byte)12, byte0);
      
      int int0 = Pattern.LITERAL;
      String string0 = Utility.format(512, 16, false, 'Q');
      assertEquals("QQQQQQQQQQQQQ512", string0);
      
      String string1 = Utility.compactClassName("invokevirtual");
      assertEquals("invokevirtual", string1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.convertString(":=N%Vm9kIv");
      assertEquals(":=N%Vm9kIv", string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ":=N%\\Vm9kIv";
      objectArray0[1] = (Object) ":=N%\\Vm9kIv";
      objectArray0[2] = (Object) ":=N%\\Vm9kIv";
      objectArray0[3] = (Object) ":=N%\\Vm9kIv";
      objectArray0[4] = (Object) ":=N%Vm9kIv";
      objectArray0[5] = (Object) ":=N%Vm9kIv";
      objectArray0[6] = (Object) ":=N%\\Vm9kIv";
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals(":=N%\\Vm9kIv, :=N%\\Vm9kIv, :=N%\\Vm9kIv, :=N%\\Vm9kIv, :=N%Vm9kIv, :=N%Vm9kIv, :=N%\\Vm9kIv", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "Y(";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("Y(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.methodSignatureReturnType("Y(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-57);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$c7", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9OetS7WpuV%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9OetS7WpuV%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.methodSignatureReturnType("Q+I<Zm1?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q+I<Zm1?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("CsV/?9!e");
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "G?_Hc>$3x?";
      // Undeclared exception!
      try { 
        Utility.signatureToString("G?_Hc>$3x?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G?_Hc>$3x?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) byteArray0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) byteArray0;
      objectArray0[3] = (Object) byteArray0;
      objectArray0[4] = (Object) byteArray0;
      objectArray0[5] = (Object) byteArray0;
      objectArray0[6] = (Object) byteArray0;
      Utility.printArray(objectArray0, true);
      byteArray0[0] = (byte) (-28);
      objectArray0[2] = (Object) (byte) (-86);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-67);
      byteArray0[1] = (byte) (-36);
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)40;
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-36), (int) (byte)57, true);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    nop\n3:    arraylength\n4:    dstore\t\t%189\n6:    nop\n7:    dup2\n8:    dload_2\n", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("e4 dc 00 be 39 bd 00 5c 28", string1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utility.replace("Db=4Bh6A+MO", "Db=4Bh6A+MO", "Db=4Bh6A+MO");
      byte byte0 = ElementValue.PRIMITIVE_BOOLEAN;
      Utility.signatureToString("Db=4Bh6A+MO");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, 51, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        Utility.typeOfSignature("- %X#*z!c|}6,P`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: - %X#*z!c|}6,P`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "We>/L~N,!MZ1jI?";
      objectArray0[1] = (Object) "We>/L~N,!MZ1jI?";
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, 199);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utility.replace("class", "h-pq", "\\");
      Utility.compactClassName("(4M>,");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) "(4M>,";
      objectArray0[2] = (Object) "(4M>,";
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte) (-119);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1050, 2079);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Utility.replace("L#;V", "L#;V", "L#;V");
      assertEquals("L#;V", string0);
      
      String string1 = Utility.methodSignatureReturnType("L#;V");
      assertEquals("#", string1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.replace("L-bV", "L-bV", "L-bV");
      // Undeclared exception!
      try { 
        Utility.signatureToString("L-bV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L-bV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("LEgM6tV0&QW|W;6~d0");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.getSignature("<");
      assertEquals("L<;", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)104;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("0e 0e 0e 0e 68", string1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.replace("6Yxq+)lu>sMiZg!ll@c", "UX'm0eF9lJ>-", (String) null);
      byte byte0 = ElementValue.PRIMITIVE_BOOLEAN;
      // Undeclared exception!
      try { 
        Utility.signatureToString("UX'm0eF9lJ>-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UX'm0eF9lJ>-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "- %X#*z!c|}6,P`";
      objectArray0[1] = (Object) "- %X#*z!c|}6,P`";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "- %X#*z!c|}6,P`";
      objectArray0[4] = (Object) "- %X#*z!c|}6,P`";
      objectArray0[5] = (Object) "- %X#*z!c|}6,P`";
      objectArray0[6] = (Object) "- %X#*z!c|}6,P`";
      objectArray0[7] = (Object) "- %X#*z!c|}6,P`";
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte) (-119);
      byteArray0[8] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-918), (int) (byte) (-119));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3XE/h%\"\"iKUQvp/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3XE/h%\"\"iKUQvp/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "LEgM6tV0&QW|W;6~d0";
      Utility.typeOfSignature("LEgM6tV0&QW|W;6~d0");
      String string1 = "XTeU";
      // Undeclared exception!
      try { 
        Utility.signatureToString("XTeU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XTeU'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "We>/L~N,!MZ1jI?";
      objectArray0[1] = (Object) "We>/L~N,!MZ1jI?";
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)127;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, 199);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "- %X#*z!c|}6,P`";
      objectArray0[1] = (Object) "- %X#*z!c|}6,P`";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "- %X#*z!c|}6,P`";
      objectArray0[4] = (Object) "- %X#*z!c|}6,P`";
      objectArray0[5] = (Object) "- %X#*z!c|}6,P`";
      objectArray0[6] = (Object) "- %X#*z!c|}6,P`";
      objectArray0[7] = (Object) "- %X#*z!c|}6,P`";
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte) (-119);
      int int0 = Pattern.MULTILINE;
      try { 
        Utility.typeOfSignature("MUY{5'Z:p>-#kdGAI;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MUY{5'Z:p>-#kdGAI;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.convertString("p7JYD[L$H(");
      String string0 = "5#fnpfI";
      try { 
        Utility.typeOfSignature("5#fnpfI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5#fnpfI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      try { 
        Utility.typeOfSignature("K%=n1/#0E#Kw#;N`IX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K%=n1/#0E#Kw#;N`IX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object[] objectArray0 = null;
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-119);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2852, (-273));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = Pattern.LITERAL;
      try { 
        Utility.typeOfSignature("R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte byte0 = Constants.CONSTANT_Methodref;
      // Undeclared exception!
      try { 
        Utility.signatureToString("The wildcard list must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The wildcard list must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.compactClassName("fsub", true);
      Utility.searchOpcode("dstore_2");
      Utility.replace("fsub", "fsub", "fsub");
      // Undeclared exception!
      try { 
        Utility.signatureToString("T", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Utility.replace("class", "h-pq", "\\");
      Utility.compactClassName("(4M>,");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) "(4M>,";
      objectArray0[2] = (Object) "(4M>,";
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      try { 
        Utility.typeOfSignature("(4M>,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (4M>,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "Y(";
      Utility.compactClassName("Y(");
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)63;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1050, (int) (byte)63);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        Utility.typeOfSignature("76co'_#3aD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 76co'_#3aD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Utility.typeOfSignature("*CZS;jY~9=");
      int int0 = Pattern.LITERAL;
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.classOrInterface(256);
      String string0 = "(";
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "%MmaMr:ml9";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "", "%MmaMr:ml9", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "L#;V";
      Utility.replace("L#;V", "L#;V", "L#;V");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5437, 69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "Mk:W.J|}.a,^;b;8,3p";
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 51, 55, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte) (-35);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(4);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantClass constantClass0 = new ConstantClass((byte)82);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 255, 5169);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      try { 
        Utility.typeOfSignature("G?_Hc>$3x?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G?_Hc>$3x?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)66;
      byteArray0[8] = (byte) (-44);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 36, (int) (byte) (-37));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The filter must not be null");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.format(53, 53, true, 'B');
      assertEquals("53BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("M2?aq)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M2?aq)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("ESj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ESj'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = Utility.signatureToString("FEm25C");
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte)5;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 118, (-706));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)77;
      byteArray0[8] = (byte) (-71);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 87, (-681));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("J&n");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Ooops, what primitive type is ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ooops, what primitive type is '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-112);
      byteArray0[7] = (byte)56;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)61, (-1018));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      try { 
        Utility.typeOfSignature("NQdyEY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NQdyEY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("S?ahe");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte byte0 = Constants.ITEM_Long;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$E$E$E$E", string0);
      
      String string1 = Utility.signatureToString("Byte code");
      assertEquals("byte", string1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("NkO{=^{e!=OW#|:0i8x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NkO{=^{e!=OW#|:0i8x'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-35), 90);
      String string0 = "(\"";
      try { 
        Utility.methodSignatureArgumentTypes("(\"", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = Utility.convertString("'");
      assertEquals("\\'", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), 242);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    fastore
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+?1lXIWulRH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?1lXIWulRH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)6;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3066, 1984);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-32), 49);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore_3
         // 1:    lshl
         // 2:    <illegal opcode>
         // 3:    d2i
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)54;
      byteArray0[6] = (byte) (-106);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, (-70));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, (-70));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null, false, false);
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)64;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, (int) (byte)127);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte) (-119);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-119), (int) (byte) (-119));
      Utility.classOrInterface((-2565));
      Utility.printArray((Object[]) null, false);
      try { 
        Utility.typeOfSignature("0:    l2f\n1:    bipush\t\t82\n3:    bipush\t\t16\n5:    l2f\n6:    <illegal opcode>\n7:    l2f\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    l2f
         // 1:    bipush\t\t82
         // 3:    bipush\t\t16
         // 5:    l2f
         // 6:    <illegal opcode>
         // 7:    l2f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Utility.classOrInterface(256);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-119);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1453, 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = Utility.classOrInterface(256);
      assertEquals("class", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = Utility.compactClassName("U8O(C/KR>A64&", "", true);
      assertEquals("U8O(C.KR>A64&", string1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-40);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)3, 56);
      assertEquals("5:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "We>RL)~N,!MZ1jI|";
      objectArray0[1] = (Object) "We>RL)~N,!MZ1jI|";
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, (-1967));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte)127;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, 1234);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-121);
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)59);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-991), 587);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-68), 2788);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 567, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('5');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-79);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1967), 172);
      assertEquals("0:    aload_2\n1:    aload_2\n2:    aload_2\n3:    aload_2\n4:    return\n", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 50, (int) (byte)44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-119);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 27, 1051);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte byte0 = (byte) (-94);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)111, (-525));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#LQ*h;N(![dwLXlRqB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #LQ*h;N(![dwLXlRqB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      try { 
        Utility.typeOfSignature("E~I\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E~I\"\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "v^,rHi<H[)c3";
      ConstantDouble constantDouble0 = new ConstantDouble(142.95);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)59, 3697);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref0;
      constantArray0[4] = (Constant) constantDouble0;
      constantArray0[5] = (Constant) constantFieldref0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(77, 90);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[6] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)66, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte) (-119);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-35), (int) (byte)30);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("YkCwB~9w19Zo;evq", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YkCwB~9w19Zo;evq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      try { 
        Utility.typeOfSignature("=:/jVhA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =:/jVhA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)13;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)75, (int) (byte)46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 567, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte byte0 = (byte) (-91);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), (-966), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte) (-80);
      byteArray0[8] = (byte)13;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-76), (int) (byte) (-18));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)37;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)75, (int) (byte)46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true, false);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-119);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)33, (-566));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, false);
      Utility.classOrInterface(64);
      try { 
        Utility.decode("$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("BdS.,0}5)x\"%w%7MJ)");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object6;
      objectArray0[1] = object6;
      objectArray0[2] = object3;
      objectArray0[3] = object0;
      objectArray0[4] = object6;
      Utility.printArray(objectArray0, false, true);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-103);
      byte byte0 = (byte)44;
      byteArray0[2] = (byte)44;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1140, (-566));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)114;
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)125, 196);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-3893), 181, false);
      assertEquals("0:    iconst_5\n1:    pop2\n2:    lushr\n3:    if_icmpgt\t\t#956\n6:    frem\n", string0);
      
      Utility.methodSignatureReturnType("Illegal type: ", false);
      int int0 = Utility.setBit((byte)125, 130);
      assertEquals(125, int0);
      
      int int1 = Utility.clearBit(130, 125);
      assertEquals(130, int1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "U5Fc/gob0aHo ^yN";
      stringArray0[1] = "U5Fc/gob0aHo ^yN";
      stringArray0[2] = "U5Fc/gob0aHo ^yN";
      stringArray0[3] = "U5Fc/gob0aHo ^yN";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)70, 90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.decode("Ycn%Q~-G:A$dvj4<~u", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"dv\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Utility.decode(";$n", false);
      try { 
        Utility.typeOfSignature(";$n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;$n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), 291);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fsub
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-1);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-96);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-22), (int) (byte)74);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object6;
      objectArray0[1] = object6;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)6;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)122, (int) (byte) (-66), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, false, true);
      byte byte0 = (byte)30;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)113;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 185, (int) (byte)113);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Utility.isJavaIdentifierPart('5');
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)66;
      byte byte0 = (byte) (-55);
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)103;
      byteArray0[8] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)66, (int) (byte) (-107));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-119);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 27, 1051);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byte byte0 = (byte)25;
      byteArray0[1] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte) (-73));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte) (-90);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)32, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 71. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = stringArray0[0];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(196, 196);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)73;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-3893), (-1947), false);
      assertEquals("0:    dstore_2\n", string0);
      
      Utility.methodSignatureReturnType("Sensitive", false);
      int int0 = Utility.setBit(130, (-3893));
      assertEquals(2178, int0);
      
      int int1 = Utility.clearBit(3256, (-1661));
      assertEquals(3248, int1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "v^,rHi<H[)c3";
      stringArray0[1] = "v^,rHi<H[)c3";
      stringArray0[2] = "v^,rHi<H[)c3";
      stringArray0[3] = "v^,rHi<H[)c3";
      stringArray0[6] = "v^,rHi<H[)c3";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)63;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 11, 47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Utility.replace("L#;V", "L#;V", "L#;V");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-58);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L#;V";
      stringArray0[1] = "$A$A0$A$9d$A$A$A$A$A$A";
      stringArray0[2] = "L#;V";
      stringArray0[3] = "L#;V";
      stringArray0[4] = "L#;V";
      Utility.methodTypeToSignature("L#;V", stringArray0);
      Utility.convertString("LtQ&mNzwT,NKl/7;V");
      Utility.printArray((Object[]) null);
      try { 
        Utility.methodSignatureReturnType("H-e'3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H-e'3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-14);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2830), (int) (byte) (-126));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2365, 114);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 122, 95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte)94;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, (int) (byte)75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 564, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t\t#";
      stringArray0[1] = "\t\t#";
      Utility.methodTypeToSignature("\t\t#", stringArray0);
      Utility.convertString("\t\t#");
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-85);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1906), 171);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 55338. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.classOrInterface(64);
      assertEquals("class", string1);
      
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-117), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)53, 1229);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.isJavaIdentifierPart('5');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)105, (int) (byte)123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-112);
      byteArray0[8] = (byte)107;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1883), 41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[5] = (byte)101;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3919, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), (-956), false);
      assertEquals("0:    areturn\n", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0:    areturn\n";
      stringArray0[1] = "0:    areturn\n";
      stringArray0[2] = "0:    areturn\n";
      String string1 = Utility.methodTypeToSignature("putstatic", stringArray0);
      assertEquals("(L0:;L0:;L0:;)Lputstatic;", string1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte) (-90);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)32, 28);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "U5Fc/go4Ob0aHo ^yN";
      stringArray0[1] = "U5Fc/go4Ob0aHo ^yN";
      stringArray0[2] = "U5Fc/go4Ob0aHo ^yN";
      stringArray0[3] = "U5Fc/go4Ob0aHo ^yN";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-7);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 44, 1138);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object6;
      objectArray0[1] = object6;
      objectArray0[2] = object3;
      objectArray0[3] = object0;
      objectArray0[4] = object6;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)115;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-952), 184, true);
      assertEquals("0:    return\n1:    drem\n", string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@gBp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @gBp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("ZioSb+HQ1v4Eqq&D_D");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte)33;
      byteArray0[8] = (byte) (-120);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, (int) (byte)33);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = "&&";
      try { 
        Utility.typeOfSignature("&&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "(#";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(#", "(#", "(#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-30);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)29, (int) (byte)29, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)78;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1409), (-529));
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1316), (int) (byte) (-46), true);
      assertEquals("0:    drem\n1:    <illegal opcode>\n2:    istore_1\n3:    lushr\n4:    astore_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)45;
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-61);
      byteArray1[1] = (byte) (-73);
      byteArray1[2] = (byte)72;
      byteArray1[3] = (byte)72;
      byteArray1[4] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (-2466), (-2952), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)102;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) '5', (int) (byte)24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-67);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-67), (int) (byte) (-67), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dastore
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = Utility.replace("(#", "(#", (String) null);
      assertNotNull(string0);
      assertEquals("null", string0);
      
      String string1 = Utility.methodSignatureReturnType("Vof5QmQ%WtArUVu\bN");
      assertEquals("void", string1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("$:oO}0=|}St", (String[]) null);
      assertEquals("()L$:oO}0=|}St;", string0);
      
      String string1 = Utility.methodSignatureToString("()L$:oO}0=|}St;", "$:oO}0=|}St", "Byte code error: ", true);
      assertEquals("Byte code error:  $:oO}0=|}St $:oO}0=|}St()", string1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.isJavaIdentifierPart('5');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t\t#";
      stringArray0[1] = "\t\t#";
      Utility.methodTypeToSignature("\t\t#", stringArray0);
      Utility.methodSignatureToString("(L#;L#;)L#;", "\t\t#", "(L#;L#;)L#;", true);
      Utility.printArray((Object[]) stringArray0);
      Utility.compactClassName("?y}f", "._G1p.,M", true);
      try { 
        Utility.methodSignatureReturnType("\t\t#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t\t#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "d,KQj";
      String string0 = Utility.methodTypeToSignature("d,KQj", stringArray0);
      assertEquals("(Ld,KQj;)Ld,KQj;", string0);
      
      String string1 = Utility.methodSignatureToString("(Ld,KQj;)Ld,KQj;", "d,KQj", "(Ld,KQj;)Ld,KQj;", true);
      assertEquals("(Ld,KQj;)Ld,KQj; d,KQj d,KQj(d,KQj arg1)", string1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)107;
      byteArray0[0] = (byte)120;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-112);
      byteArray0[8] = (byte)107;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1883), 41);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[1] = (byte)83;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)83);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)83;
      byteArray1[1] = (byte)83;
      byteArray1[2] = (byte)37;
      byteArray1[3] = (byte)83;
      byteArray1[4] = (byte)83;
      byteArray1[5] = (byte)83;
      byteArray1[6] = (byte)28;
      byteArray1[7] = (byte)83;
      byteArray1[8] = (byte)83;
      Utility.codeToString(byteArray1, (ConstantPool) null, (-1190), (int) (byte)83);
      try { 
        Utility.typeOfSignature("(#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)9;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[7] = (byte) (-54);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1605, 190);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)97;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)47, (int) (byte)97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("RkTr-'S^`$s,%V$*smk", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-76);
      byteArray0[1] = (byte) (-94);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-85);
      byteArray1[1] = (byte) (-76);
      byteArray1[2] = (byte) (-85);
      byteArray1[3] = (byte) (-85);
      byteArray1[4] = (byte) (-76);
      byteArray1[5] = (byte)102;
      byteArray1[6] = (byte) (-76);
      byteArray1[7] = (byte)103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 40, 1753);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2195), (-2515));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(199, 1);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      constantArray0[2] = (Constant) constantMethodref0;
      constantArray0[3] = (Constant) constantMethodref0;
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      constantMethodref0.accept(descendingVisitor0);
      constantArray0[4] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)106;
      byteArray0[4] = (byte)48;
      Utility.codeToString(byteArray0, constantPool0, (-2114), (int) (byte)106);
      // Undeclared exception!
      try { 
        Utility.signatureToString("LineNumber(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LineNumber(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(199, 1);
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[0] = (byte)79;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-109);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-19), 86);
      try { 
        Utility.typeOfSignature("0:    iastore\n1:    nop\n2:    <illegal opcode>\n3:    i2s\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    iastore
         // 1:    nop
         // 2:    <illegal opcode>
         // 3:    i2s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte) (-53);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 173, (int) (byte)104);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)34;
      byteArray0[6] = (byte)116;
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, (int) (byte)34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)37;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)74, (int) (byte)74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)103, 1462);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, 709);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-124), 69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(199, 1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)15;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)15, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)99;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1217, (int) (byte)15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(199, 1);
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[0] = (byte)63;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)67;
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-19), 86);
      try { 
        Utility.typeOfSignature("0:    lstore_0\n1:    nop\n2:    <illegal opcode>\n3:    fstore_0\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    lstore_0
         // 1:    nop
         // 2:    <illegal opcode>
         // 3:    fstore_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(199, 1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1694), (int) (byte)8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    if_icmpeq\t\t#2122
         // 4:    fdiv
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.signatureToString("Zx.kk:Rc>3`?#?:F2$g");
      Utility.replace("Zx.kk:Rc>3`?#?:F2$g", "Zx.kk:Rc>3`?#?:F2$g", "boolean");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      byte byte0 = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)91;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("V", "boolean");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"boolean\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-76);
      byteArray0[1] = (byte) (-94);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-85);
      byteArray1[1] = (byte) (-76);
      byteArray1[2] = (byte) (-85);
      byteArray1[4] = (byte) (-76);
      byteArray1[6] = (byte) (-76);
      byteArray1[7] = (byte)103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)104, 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byte[] byteArray1 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray1[0] = (byte)108;
      byteArray1[1] = (byte)108;
      byteArray1[2] = (byte)108;
      byteArray1[3] = (byte)108;
      byteArray1[4] = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 79, (int) (byte)108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), (-956), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)34;
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, (int) (byte)34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(199, 1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)109;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1672), (-1305));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)60;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 32, 71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)21;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      byteArray0[6] = (byte)67;
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-110), (int) (byte) (-110));
      try { 
        Utility.typeOfSignature("%bclW~B<9.MJI1)/8\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %bclW~B<9.MJI1)/8\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 27);
      assertEquals("0:    nop\n", string0);
      
      String string1 = Utility.convertString("0:    nop\n");
      assertEquals("0:    nop\\n", string1);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.isJavaIdentifierPart('~');
      byte[] byteArray0 = Utility.decode("*Z'-od#O|:0+ ZI59@", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 86, 1229, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)86;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1294), (-442));
      assertEquals("0:    sastore\n1:    l2i\n2:    sastore\n", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-111);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-111), 27);
      assertEquals("0:    i2b\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte) (-22);
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-53));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantString constantString0 = new ConstantString(185);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)42, 156);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(199, 1);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      constantArray0[2] = (Constant) constantMethodref0;
      constantArray0[3] = (Constant) constantMethodref0;
      constantArray0[4] = (Constant) constantMethodref0;
      constantArray0[5] = (Constant) constantMethodref0;
      constantMethodref0.setNameAndTypeIndex(199);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)123, (int) (byte)35);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 9087. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 10, (int) (byte)80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1295, (int) (byte)81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.isJavaIdentifierPart('5');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1665), (-1654));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ishr
         // 1:    dcmpl
         // 2:    lmul
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = "L<clinit>;V";
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<clinit>;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `clinit>;V'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte) (-112);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-102), 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    d2f
         // 1:    l2f
         // 2:    l2f
         // 3:    d2f
         // 4:    l2f
         // 5:    d2f
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 961, 961);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-47);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 191, (-535));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1651), 97);
      assertEquals("0:    irem\n1:    impdep2\n2:    iconst_4\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 183, 171);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ConstantPool constantPool0 = null;
      int int0 = 1741;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1741, 179, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3032, 1177);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(199, 199);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte) (-56);
      byteArray0[8] = (byte)117;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 7, 176);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('5');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)74;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (int) (byte) (-81));
      assertEquals("0:    lushr\n1:    <illegal opcode>\n2:    impdep2\n3:    dreturn\n4:    dstore_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)29;
      byte byte0 = (byte) (-3);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-28);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 164, (int) (byte) (-28), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)86;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)68;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)86);
      assertEquals("0:    jsr\t\t#32086\n3:    nop\n4:    idiv\n5:    dstore_1\n6:    fstore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 193, (int) (byte) (-57));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-70);
      int int0 = (-347);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)27, (-347));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte) (-106);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-65), (-624));
      assertEquals("0:    i2f\n1:    iconst_2\n2:    bipush\t\t-65\n4:    lmul\n5:    drem\n6:    fcmpg\n", string0);
      
      String string1 = Utility.convertString("jsr");
      assertEquals("jsr", string1);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "newarray";
      stringArray0[1] = "newarray";
      String string0 = Utility.methodTypeToSignature("newarray", stringArray0);
      assertEquals("(Lnewarray;Lnewarray;)Lnewarray;", string0);
      
      String string1 = Utility.methodSignatureToString("(Lnewarray;Lnewarray;)Lnewarray;", "newarray", "7", true);
      assertEquals("7 newarray newarray(newarray arg1, newarray arg2)", string1);
      
      byte byte0 = ObjectStreamConstants.TC_ARRAY;
      byte byte1 = Utility.typeOfMethodSignature("(Lnewarray;Lnewarray;)Lnewarray;");
      assertEquals((byte)14, byte1);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 35, (int) (byte)41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-40);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)19, (int) (byte) (-40));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 55512. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)108;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16384, 443);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)121;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, (int) (byte)121);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-82);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-82), 2495);
      assertEquals("0:    freturn\n", string1);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      try { 
        Utility.typeOfSignature("2/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) null;
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)120;
      byte byte0 = (byte)27;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-104);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)109, (int) (byte) (-104), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, 74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ", npairs = ";
      Utility.methodTypeToSignature(", npairs = ", stringArray0);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-115), (int) (byte) (-71));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e-.rhAZ>VvM&E)nb");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte)29;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 201, (int) (byte) (-55));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ", npairs = ";
      Utility.methodTypeToSignature(", npairs = ", stringArray0);
      Utility.methodSignatureToString("(L,;)L,;", "7", ",l3W)_{H:&T", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)110;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)47, (int) (byte)47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature(")nNAL?>)pF@t#s", (String[]) null);
      assertEquals("()L)nNAL?>)pF@t#s;", string0);
      
      String string1 = Utility.methodSignatureToString("()L)nNAL?>)pF@t#s;", "Byte code error: ", "7", true);
      assertEquals("7 )nNAL?>)pF@t#s Byte code error: ()", string1);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-72);
      byte byte0 = (byte)85;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 167, (-2743));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Utility.methodTypeToSignature(")nNAL?>)pF@t#s", (String[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-12);
      byte byte0 = (byte)79;
      byteArray0[3] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3827, (-1312));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)5;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1), (-3080));
      assertEquals("0:    fadd\n1:    ishl\n2:    l2i\n3:    iconst_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[2] = (byte)106;
      byteArray0[2] = (byte) (-9);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)96;
      byteArray0[3] = (byte) (-36);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-447), 708);
      assertEquals("0:    sastore\n1:    nop\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    laload\n5:    iadd\n6:    nop\n", string0);
  }
}
