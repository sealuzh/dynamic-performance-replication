/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:08:07 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noCache();
      assertSame(cacheControl_Builder2, cacheControl_Builder0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.build();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.onlyIfCached();
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      String string0 = cacheControl0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      cacheControl_Builder0.maxStale(Integer.MAX_VALUE, timeUnit0);
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      String string0 = cacheControl0.toString();
      assertNotNull(string0);
      assertEquals("max-stale=2147483647, only-if-cached", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.FORCE_CACHE.toString();
      boolean boolean0 = cacheControl0.noStore();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      boolean boolean0 = cacheControl0.noCache();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noCache();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.minFresh((-1), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxAge((-182), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -182
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      boolean boolean0 = cacheControl0.isPrivate();
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(boolean0);
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      int int0 = cacheControl0.maxAgeSeconds();
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), int0);
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      int int0 = cacheControl0.maxStaleSeconds();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      String string0 = cacheControl0.toString();
      assertNotNull(string0);
      
      int int0 = cacheControl0.sMaxAgeSeconds();
      assertEquals((-1), int0);
      
      cacheControl0.noTransform();
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxStale((-3896), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -3896
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noCache();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      boolean boolean0 = cacheControl0.noTransform();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(2147483645, timeUnit0);
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder1);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noTransform();
      assertSame(cacheControl_Builder0, cacheControl_Builder2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      cacheControl0.onlyIfCached();
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      boolean boolean0 = cacheControl0.isPublic();
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(boolean0);
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      boolean boolean0 = cacheControl0.mustRevalidate();
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(boolean0);
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.minFresh(2147483614, timeUnit0);
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.onlyIfCached();
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noStore();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      String string0 = cacheControl0.toString();
      assertEquals("no-store", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxAge(2147483645, timeUnit0);
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder2);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = cacheControl0.toString();
      assertNotNull(string0);
      assertEquals("max-age=2, no-transform", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(1, timeUnit0);
      CacheControl cacheControl0 = cacheControl_Builder1.build();
      String string0 = cacheControl0.toString();
      assertEquals("min-fresh=0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noTransform();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = cacheControl0.toString();
      assertEquals("no-transform", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Pragma", "Pragma");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      String string0 = cacheControl0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = cacheControl0.mustRevalidate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("Cache-Control", "public, ");
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl1.toString();
      boolean boolean0 = cacheControl0.noTransform();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.set("Cache-Control", "EM&8Jt7");
      Headers headers0 = new Headers(headers_Builder0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      String string0 = cacheControl0.toString();
      assertEquals("EM&8Jt7", string0);
      
      int int0 = cacheControl0.minFreshSeconds();
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), int0);
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.FORCE_CACHE.toString();
      headers_Builder0.removeAll("Cache-Control");
      headers_Builder0.set("Cache-Control", "max-stale=2147483647, only-if-cached");
      Headers headers0 = new Headers(headers_Builder0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertEquals(Integer.MAX_VALUE, cacheControl1.maxStaleSeconds());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.noTransform());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.mustRevalidate());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl1.isPublic());
      assertTrue(cacheControl1.onlyIfCached());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl2 = cacheControl_Builder0.build();
      assertEquals((-1), cacheControl2.sMaxAgeSeconds());
      assertEquals((-1), cacheControl2.maxStaleSeconds());
      assertEquals((-1), cacheControl2.maxAgeSeconds());
      assertFalse(cacheControl2.isPublic());
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(1295, timeUnit0);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers headers0 = new Headers(headers_Builder0);
      Object object0 = new Object();
      headers_Builder0.set("Cache-Control", "<=p");
      Headers headers1 = new Headers(headers_Builder0);
      CacheControl cacheControl0 = CacheControl.parse(headers1);
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.minFreshSeconds());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      String string0 = "ldzyv0aa}a";
      headers_Builder0.set("Cache-Control", "no-store,|");
      Headers headers0 = new Headers(headers_Builder0);
      CacheControl.parse(headers0);
      Headers.Builder headers_Builder1 = new Headers.Builder();
      // Undeclared exception!
      try { 
        headers_Builder0.set("OU?_psv^{`?w>BxKOxy", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // value == null
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("@@", "@@");
      headers_Builder1.add("@@", "@@");
      Headers headers0 = new Headers(headers_Builder1);
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.toString();
      Object object0 = new Object();
      headers_Builder0.add("([0-9a-fa-f]*:[0-9a-fa-f:.]*)|([d.]+)");
      Headers.Builder headers_Builder2 = headers_Builder1.set("jJ*<|X", "([0-9a-fa-f]*:[0-9a-fa-f:.]*)|([d.]+)");
      headers_Builder1.add("Cache-Control", "no-cache");
      cacheControl0.toString();
      cacheControl0.toString();
      Headers headers1 = new Headers(headers_Builder2);
      CacheControl.parse(headers1);
      CacheControl cacheControl1 = CacheControl.FORCE_NETWORK;
      cacheControl0.toString();
      boolean boolean0 = cacheControl1.onlyIfCached();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers headers0 = new Headers(headers_Builder0);
      Headers.Builder headers_Builder1 = new Headers.Builder();
      headers_Builder0.add("Cache-Control", "Cache-Control");
      Headers headers1 = new Headers(headers_Builder1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      headers1.getDate("Cache-Control");
      headers_Builder0.set("5.)4+>El=KyE:sp$", "5)bHV$TIw");
      headers_Builder1.set("Pragma", "max-age");
      Headers headers2 = new Headers(headers_Builder1);
      CacheControl.parse(headers2);
      System.setCurrentTimeMillis((-1263L));
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(2147483645, timeUnit0);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Cache-Control";
      stringArray0[1] = "Cache-Control";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = "4G*_^7l2}iMb;M";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      CacheControl.parse(headers0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.set("@@", "@@");
      Headers.Builder headers_Builder1 = new Headers.Builder();
      Headers.Builder headers_Builder2 = headers_Builder0.addLenient("@@", "Pragma");
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      Headers.Builder headers_Builder3 = headers_Builder2.addLenient("@@");
      headers_Builder3.removeAll("@@");
      cacheControl0.toString();
      CacheControl cacheControl1 = CacheControl.FORCE_CACHE;
      cacheControl1.onlyIfCached();
      Headers.Builder headers_Builder4 = headers_Builder2.add("Pragma", "min-fresh");
      Headers headers0 = headers_Builder4.build();
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      cacheControl2.noTransform();
      int int0 = MockThread.MAX_PRIORITY;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      int int1 = (-1191722608);
      // Undeclared exception!
      try { 
        cacheControl_Builder1.maxAge((-1191722608), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -1191722608
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "p";
      stringArray0[1] = "cache-control";
      stringArray0[2] = "cache-control";
      stringArray0[3] = "7Sh=.&?G*5nUcUq";
      stringArray0[4] = "cache-control";
      stringArray0[5] = "=";
      stringArray0[6] = "=P0.g0)^Q}[b0u7(6";
      stringArray0[7] = "%1c3Oo85G";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.FORCE_CACHE.toString();
      headers0.toString();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noTransform();
      cacheControl_Builder0.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(1298, timeUnit0);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.FORCE_CACHE.toString();
      headers_Builder0.removeAll("Cache-Control");
      Headers.Builder headers_Builder1 = headers_Builder0.set("Cache-Control", "max-stale=2147483647, only-if-cached");
      headers_Builder1.set("Cache-Control", "max-stale=2147483647, only-if-cached");
      CacheControl cacheControl1 = CacheControl.FORCE_CACHE;
      Headers headers0 = new Headers(headers_Builder0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheControl cacheControl2 = CacheControl.FORCE_CACHE;
      cacheControl0.toString();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.parse(headers0);
      Headers headers1 = new Headers(headers_Builder1);
      CacheControl cacheControl3 = CacheControl.FORCE_CACHE;
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Headers headers2 = null;
      try {
        headers2 = new Headers((Headers.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("Cache-Control", "Cache-Control");
      headers_Builder1.set("Cache-Control", "public, ");
      Headers.Builder headers_Builder2 = headers_Builder1.addLenient("Cache-Control", "Cache-Control");
      Headers headers0 = headers_Builder2.build();
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl1.toString();
      boolean boolean0 = cacheControl0.noTransform();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      String string0 = cacheControl0.FORCE_CACHE.toString();
      assertEquals("max-stale=2147483647, only-if-cached", string0);
      
      Headers.Builder headers_Builder1 = headers_Builder0.removeAll("Cache-Control");
      headers_Builder0.set("Cache-Control", "max-stale=2147483647, only-if-cached");
      Headers.Builder headers_Builder2 = headers_Builder1.set("Eki>.Uti", "HEL");
      CacheControl cacheControl1 = CacheControl.FORCE_CACHE;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.names();
      Headers headers1 = new Headers(headers_Builder0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      CacheControl cacheControl2 = CacheControl.FORCE_CACHE;
      headers1.toString();
      headers_Builder2.build();
      CacheControl cacheControl3 = CacheControl.FORCE_NETWORK;
      String string1 = cacheControl3.toString();
      assertEquals("no-cache", string1);
      assertNotNull(string1);
      
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      Headers headers2 = new Headers(headers_Builder2);
      CacheControl.parse(headers2);
      CacheControl.parse(headers1);
      CacheControl cacheControl4 = CacheControl.FORCE_CACHE;
      cacheControl4.headerValue = "no-cache";
      boolean boolean0 = cacheControl_Builder1.onlyIfCached;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxStale(31, timeUnit0);
      cacheControl_Builder2.noCache();
      CacheControl cacheControl5 = CacheControl.parse(headers2);
      assertFalse(cacheControl5.isPrivate());
      assertTrue(cacheControl5.onlyIfCached());
      assertEquals(Integer.MAX_VALUE, cacheControl5.maxStaleSeconds());
      assertEquals((-1), cacheControl5.minFreshSeconds());
      assertFalse(cacheControl5.noStore());
      assertEquals((-1), cacheControl5.sMaxAgeSeconds());
      
      CacheControl cacheControl6 = cacheControl_Builder0.build();
      assertEquals((-1), cacheControl6.maxAgeSeconds());
      assertFalse(cacheControl6.isPublic());
      assertEquals(1860, cacheControl6.maxStaleSeconds());
      assertEquals((-1), cacheControl6.minFreshSeconds());
      assertEquals((-1), cacheControl6.sMaxAgeSeconds());
      
      cacheControl_Builder1.minFresh(31, timeUnit0);
      CacheControl cacheControl7 = CacheControl.parse(headers0);
      int int0 = cacheControl7.sMaxAgeSeconds();
      CacheControl cacheControl8 = CacheControl.parse(headers0);
      int int1 = cacheControl8.minFreshSeconds();
      assertFalse(cacheControl8.isPublic());
      assertEquals((-1), cacheControl8.maxStaleSeconds());
      assertFalse(cacheControl8.mustRevalidate());
      assertFalse(cacheControl8.noTransform());
      assertTrue(int1 == int0);
      assertFalse(cacheControl8.noCache());
      assertEquals((-1), cacheControl8.maxAgeSeconds());
      
      int int2 = cacheControl0.sMaxAgeSeconds();
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("Cache-Control", "must-revalidate");
      headers_Builder0.set("must-revalidate", "p4hmmw9");
      Headers.Builder headers_Builder2 = headers_Builder1.addLenient("Cache-Control", "Cache-Control");
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      String string0 = cacheControl1.headerValue;
      Headers headers1 = new Headers(headers_Builder2);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      headers_Builder2.build();
      cacheControl0.toString();
      CacheControl cacheControl2 = CacheControl.FORCE_CACHE;
      cacheControl2.FORCE_CACHE.toString();
      cacheControl1.toString();
      cacheControl1.isPrivate();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
  }
}
