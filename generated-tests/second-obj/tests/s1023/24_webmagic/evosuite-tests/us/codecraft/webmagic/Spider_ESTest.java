/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:09:43 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Logger;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.Html;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.RegexSelector;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.selector.Selector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("9O");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(true);
      List<Request> list0 = page1.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      List<SpiderListener> list1 = spider1.getSpiderListeners();
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertNull(list1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider {} started!");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.scheduler(priorityScheduler0);
      spider1.setScheduler(priorityScheduler0);
      spider1.setSpawnUrl(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Spider {} started!";
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("Spider {} started!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.Spider {} started!
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ry%4dN ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("Spider {} closed! {} pages downloaded.");
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      String string0 = spider2.getUUID();
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("-}>(/tG_:N^[ZM)");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.clearPipeline();
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setScheduler((Scheduler) null);
      Spider spider2 = spider1.setExitWhenComplete(true);
      assertTrue(spider2.isSpawnUrl());
      
      Spider spider3 = spider2.setSpawnUrl(false);
      Spider spider4 = spider3.thread(3);
      Spider spider5 = spider4.setUUID("");
      spider5.getSpiderListeners();
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("]v:-3%l/77C=5y1CDa=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      Spider spider2 = spider1.thread(200);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("/");
      Spider spider3 = spider2.pipeline(jsonFilePipeline0);
      Logger logger0 = (Logger)spider1.logger;
      spider3.logger = (org.slf4j.Logger) logger0;
      spider3.setExitWhenComplete(true);
      spider2.runAsync();
      String string0 = spider0.getUUID();
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertNull(string0);
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Spider spider1 = spider0.startUrls(list0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(41);
      Spider spider2 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 41);
      spider2.getCollectorPipeline();
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList1);
      Spider spider3 = spider2.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider4 = spider3.scheduler(queueScheduler0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "68sK[CHLh1n1q";
      stringArray0[1] = "Thread interrupted when sleep";
      stringArray0[2] = "Thread interrupted when sleep";
      stringArray0[3] = "Thread interrupted when sleep";
      stringArray0[4] = "Thread interrupted when sleep";
      stringArray0[5] = "Thread interrupted when sleep";
      stringArray0[6] = "Thread interrupted when sleep";
      // Undeclared exception!
      try { 
        spider4.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("rsQk[");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("rsQk[");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider1 = spider0.scheduler(duplicateRemovedScheduler0);
      Spider spider2 = spider1.setScheduler(duplicateRemovedScheduler0);
      spider2.setUUID("rsQk[");
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider1 = spider0.scheduler(duplicateRemovedScheduler0);
      Spider spider2 = spider1.setScheduler(duplicateRemovedScheduler0);
      spider2.setUUID("");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[4];
      Request request0 = new Request("");
      Request request1 = request0.addCookie("", "");
      requestArray0[0] = request1;
      Request request2 = new Request("lD!4UL-RY.iU::cCg");
      requestArray0[1] = request2;
      Request request3 = new Request();
      requestArray0[2] = request3;
      Request request4 = request0.setCharset("_cycle_tried_times");
      requestArray0[3] = request4;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/null.urls.txt");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      String string0 = "[";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("[", "[");
      Request request0 = null;
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("Spider ");
      Spider spider0 = Spider.create(simplePageProcessor1);
      Spider spider1 = spider0.setUUID("");
      ExecutorService executorService0 = null;
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.Stopped;
      spider_Status0.getValue();
      Spider spider0 = null;
      try {
        spider0 = new Spider((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider {} started!");
      Spider spider0 = new Spider(simplePageProcessor0);
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      spider0.stop();
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool((-1205));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      Request[] requestArray0 = new Request[0];
      jsonFilePipeline0.checkAndMakeParentDirecotry("");
      Spider spider2 = spider1.addRequest(requestArray0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider2.scheduler(priorityScheduler0);
      boolean boolean0 = false;
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setUUID("rsQk[");
      spider0.setExitWhenComplete(true);
      HashSetDuplicateRemover hashSetDuplicateRemover1 = new HashSetDuplicateRemover();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider {} started!");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSpiderListeners();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider0);
      spider0.setEmptySleepTime((-457));
      spider0.scheduler(priorityScheduler0);
      Spider spider1 = spider0.setSpawnUrl(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Spider {} started!";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setScheduler((Scheduler) null);
      Spider spider2 = spider1.setExitWhenComplete(true);
      Spider spider3 = spider2.setSpawnUrl(false);
      Spider spider4 = spider3.thread(3);
      spider4.setUUID("");
      spider2.start();
      spider1.clearPipeline();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", headers=");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider1.scheduler(priorityScheduler0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(31);
      Spider.create(simplePageProcessor0);
      spider0.getThreadAlive();
      // Undeclared exception!
      try { 
        spider0.thread((-89));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("]v:-3%l/77C=5y1CDa=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      boolean boolean0 = true;
      Spider spider1 = spider0.setSpawnUrl(true);
      Spider spider2 = spider1.setUUID("]v:-3%l/77C=5y1CDa=");
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider2.pipeline(jsonFilePipeline0);
      Logger logger0 = (Logger)spider1.logger;
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", userAgent='");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      Request[] requestArray0 = new Request[5];
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.scheduler(priorityScheduler0);
      Request request0 = new Request();
      Request request1 = request0.addHeader(", userAgent='", "");
      request1.putExtra("", spider2);
      Request request2 = new Request("_cycle_tried_times");
      request2.setMethod("");
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("T");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("rsQk[");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      Spider spider2 = spider0.setExitWhenComplete(true);
      HashSetDuplicateRemover hashSetDuplicateRemover1 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      List<Request> list0 = new LinkedList<Request>();
      spider2.startRequest(list0);
      spider1.getSite();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider1 = spider0.scheduler(duplicateRemovedScheduler0);
      Spider spider2 = spider1.setScheduler(fileCacheQueueScheduler0);
      boolean boolean0 = true;
      Spider spider3 = spider2.setExitWhenComplete(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        spider3.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", headers=");
      Spider spider0 = new Spider(simplePageProcessor0);
      List<SpiderListener> list0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(list0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.scheduler(priorityScheduler0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(31);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      fileCacheQueueScheduler0.getDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("");
      Spider spider3 = spider0.scheduler(fileCacheQueueScheduler0);
      Spider spider4 = spider3.setScheduler((Scheduler) null);
      spider1.setUUID("~{,@B^");
      String[] stringArray0 = new String[0];
      spider4.addUrl(stringArray0);
      spider2.getSite();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("rsQk[");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      Spider spider2 = spider0.setExitWhenComplete(true);
      HashSetDuplicateRemover hashSetDuplicateRemover1 = new HashSetDuplicateRemover();
      hashSetDuplicateRemover1.resetDuplicateCheck(spider2);
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider0.setSpawnUrl(false);
      Page page0 = new Page();
      Page page1 = page0.setRawText(", method='");
      spider1.extractAndAddRequests(page1, false);
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("rsQk[");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      spider0.setExitWhenComplete(false);
      HashSetDuplicateRemover hashSetDuplicateRemover1 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider1.start();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      spider1.downloader(phantomJSDownloader0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("rsQk[");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      spider1.scheduler(priorityScheduler0);
      Spider spider2 = spider0.setExitWhenComplete(false);
      HashSetDuplicateRemover hashSetDuplicateRemover1 = new HashSetDuplicateRemover();
      hashSetDuplicateRemover0.resetDuplicateCheck(spider2);
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("a@Gc3]");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider2.setSpawnUrl(true);
      Page page1 = new Page();
      page0.setRawText("");
      Page page2 = page1.setSkip(false);
      Page page3 = page2.setRawText("");
      spider0.extractAndAddRequests(page3, false);
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }
}
