/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:55:35 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]\"a<]1rp");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("]", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('0');
      assertTrue(boolean0);
      
      xPathLexer0.or();
      xPathLexer0.and();
      Token token2 = xPathLexer0.nextToken();
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      
      xPathLexer0.setXPath("tlFSbaTFAnj-)qN%}");
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.getPreviousToken();
      assertNotSame(token4, token2);
      assertEquals("tlFSbaTFAnj-)qN%}", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("qU");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("qU", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.mod();
      XPathLexer xPathLexer3 = new XPathLexer("_V'N8rtS@+7e5z-");
      xPathLexer3.nextToken();
      Token token0 = xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z%^{%'[Gke!");
      xPathLexer0.div();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("Z", token0.getTokenText());
      
      xPathLexer0.currentPosition();
      int int0 = xPathLexer0.endPosition();
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N[Ghly");
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("N[Ghly");
      Token token0 = xPathLexer0.number();
      xPathLexer1.or();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer0.consume((-4573));
      xPathLexer1.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.not();
      xPathLexer1.identifier();
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@eA7V3U$y!e=");
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("C");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.setXPath("/Zfp}'>]cr");
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.dots();
      xPathLexer0.rightParen();
      xPathLexer1.and();
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer("/Zfp}'>]cr");
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      String string0 = "/Zfp}'>]cr";
      xPathLexer0.comma();
      xPathLexer0.setXPath("/Zfp}'>]cr");
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.isIdentifierStartChar('\u0014');
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("iW2&:+C{._V");
      xPathLexer1.operatorName();
      String string1 = null;
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w-0p~4\"`p|ZUKvucy-");
      xPathLexer0.or();
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer1.setXPath("DiZFA)LVVZtX");
      xPathLexer1.nextToken();
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = ":=p\\G%=$4I";
      XPathLexer xPathLexer0 = new XPathLexer(":=pG%=$4I");
      xPathLexer0.notEquals();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      String string1 = null;
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = ".5Nd";
      XPathLexer xPathLexer0 = new XPathLexer(".5Nd");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer(".5Nd");
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token0 = xPathLexer2.whitespace();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]A%9(-O$a[Rj6z)F");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("]A", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("%", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals("9", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals("(", token3.getTokenText());
      assertEquals(5, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.getPreviousToken();
      assertEquals(6, token4.getTokenType());
      assertEquals("-", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".2r4!\"e(<<Q8[Ii;");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.comma();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.leftParen();
      token0.toString();
      xPathLexer0.star();
      xPathLexer0.endPosition();
      xPathLexer1.equals();
      xPathLexer0.consume();
      xPathLexer0.star();
      Token token2 = xPathLexer0.nextToken();
      token2.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("=mq1/xzow9jw$v");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("=", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("mq", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("1", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("/", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.not();
      Token token4 = xPathLexer2.literal();
      assertNull(token4);
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      xPathLexer1.mod();
      int int0 = xPathLexer0.endPosition();
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('-');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      boolean boolean0 = xPathLexer0.isIdentifierChar('.');
      assertTrue(boolean0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.notEquals();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(22, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N[Ghly");
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer0.isIdentifierChar('+');
      xPathLexer1.or();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer1.setXPath("tlFSbaTFAnj-)qN%}");
      xPathLexer0.nextToken();
      xPathLexer1.rightParen();
      xPathLexer1.mod();
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      String string0 = "/Zfp}'>]cr";
      xPathLexer0.setXPath("/Zfp}'>]cr");
      xPathLexer0.rightBracket();
      xPathLexer0.mod();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer1.not();
      xPathLexer0.colon();
      String string1 = "t5gl+W/PL@BzW7)R[";
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@eA7V3U$y!e=");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.endPosition();
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("F%-}3p19Px<z/Q+dOV");
      xPathLexer2.nextToken();
      xPathLexer2.getPreviousToken();
      xPathLexer1.or();
      xPathLexer2.not();
      xPathLexer0.star();
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("c(<");
      xPathLexer0.or();
      xPathLexer1.setXPath("");
      xPathLexer0.plus();
      xPathLexer1.setXPath("c(<");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.operatorName();
      xPathLexer2.slashes();
      Token token0 = xPathLexer2.not();
      xPathLexer1.nextToken();
      xPathLexer2.dollar();
      int int0 = 89;
      xPathLexer2.rightParen();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("l*MB");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("l", token1.getTokenText());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      String string0 = "";
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer("0I1;@");
      xPathLexer2.nextToken();
      xPathLexer2.comma();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.rightBracket();
      xPathLexer3.star();
      xPathLexer0.endPosition();
      xPathLexer2.equals();
      xPathLexer1.consume();
      xPathLexer2.dollar();
      Token token0 = xPathLexer3.leftBracket();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]A%9(-O$a[Rj6z)F");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("]A", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("%", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("9", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.getPreviousToken();
      assertEquals("(", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@eA7V3U$y!e=");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.endPosition();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer1.or();
      xPathLexer0.not();
      xPathLexer0.star();
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = ":=p\\G%=$4I";
      XPathLexer xPathLexer0 = new XPathLexer(":=pG%=$4I");
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      String string1 = null;
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      Token token1 = xPathLexer1.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer1.equals();
      assertEquals("(", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.getPreviousToken();
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.star();
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer("R&^FG'v$");
      xPathLexer1.dollar();
      xPathLexer1.dots();
      xPathLexer0.operatorName();
      xPathLexer1.nextToken();
      xPathLexer1.relationalOperator();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.setXPath("^$\"{KT");
      xPathLexer0.operatorName();
      xPathLexer0.isIdentifierStartChar('');
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.and();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("^$\"{KT", token3.getTokenText());
      
      Token token4 = xPathLexer0.plus();
      assertEquals("^", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(26, token5.getTokenType());
      
      xPathLexer1.getPreviousToken();
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("\"", token6.getTokenText());
      
      Token token7 = xPathLexer1.star();
      assertEquals(20, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("A.ww[kJ)%{4g3w");
      Token token2 = xPathLexer1.number();
      token2.toString();
      token2.toString();
      xPathLexer0.or();
      xPathLexer1.setPreviousToken(token2);
      String string0 = token2.toString();
      assertEquals("[ (30) ()", string0);
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer1.div();
      Token token4 = xPathLexer1.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("A", token4.getTokenText());
      
      xPathLexer1.operatorName();
      Token token5 = xPathLexer1.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals(".w", token5.getTokenText());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals("w[kJ)%{4g3w", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (30) ()");
      xPathLexer0.or();
      xPathLexer1.getXPath();
      xPathLexer0.mod();
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "hqn\\(a7";
      XPathLexer xPathLexer0 = new XPathLexer("hqn(a7");
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("hqn(a7");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("uYBO11b=)57|fh'@");
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":=pG%=I");
      xPathLexer0.doubleColon();
      xPathLexer0.dollar();
      xPathLexer0.colon();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":=pG%=$4I");
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("=", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("!1[@['-fky1\":^X");
      xPathLexer0.mod();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("pG", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("!1[@['-fky1\":^X");
      Token token2 = xPathLexer3.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer2.mod();
      xPathLexer4.div();
      boolean boolean0 = xPathLexer1.isIdentifierStartChar(',');
      assertFalse(boolean0);
      
      xPathLexer0.setPreviousToken((Token) null);
      Token token3 = xPathLexer4.number();
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.endPosition();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.plus();
      assertEquals(5, token4.getTokenType());
      
      xPathLexer2.setXPath("b");
      Token token5 = xPathLexer2.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("b", token5.getTokenText());
      
      xPathLexer2.or();
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N[Ghl8y");
      XPathLexer xPathLexer1 = new XPathLexer("Xd o:A+~$x.");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("N[", token0.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("iTOw");
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("Gh", token1.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("Xd o:A+~$x.");
      Token token2 = xPathLexer1.nextToken();
      assertEquals("Xd", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.getPreviousToken();
      xPathLexer2.mod();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("l", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%|*");
      xPathLexer0.consume();
      xPathLexer0.getPreviousToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("1B7?x.lZaw%M9Zh");
      xPathLexer1.number();
      xPathLexer0.dots();
      xPathLexer1.setXPath("%|*");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("RI@0RU");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("RI", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]A%9(-O$a[Rj6z)F");
      xPathLexer0.dollar();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "H3am";
      XPathLexer xPathLexer0 = new XPathLexer("H3am");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer1.getPreviousToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w-0p~4\"`p|ZUKvucy-");
      xPathLexer0.consume();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("@eA7V3U$y!e=");
      xPathLexer0.at();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.relationalOperator();
      xPathLexer1.and();
      xPathLexer0.plus();
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer1.or();
      xPathLexer0.not();
      xPathLexer1.star();
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.getPreviousToken();
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      xPathLexer0.endPosition();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("R&^FG'v$");
      xPathLexer1.dots();
      xPathLexer0.operatorName();
      xPathLexer1.nextToken();
      xPathLexer1.relationalOperator();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("g\"A}`c");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("g", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertNull(token5);
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      xPathLexer0.setXPath("KHZ(jE+u=kw[");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('g');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.not();
      xPathLexer0.leftParen();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("A.ww[kJ)%{4g3w");
      xPathLexer1.whitespace();
      Token token0 = xPathLexer1.number();
      String string0 = token0.toString();
      token0.toString();
      xPathLexer0.or();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.div();
      xPathLexer0.leftBracket();
      xPathLexer1.dollar();
      xPathLexer1.doubleColon();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("[ (31) (.)");
      xPathLexer0.or();
      String string1 = xPathLexer1.getXPath();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.slashes();
      Token token1 = xPathLexer0.minus();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "!1\\[@[-fky1R\":^X";
      XPathLexer xPathLexer0 = new XPathLexer("!1[@[-fky1R\":^X");
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      String string1 = null;
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "I#AZ^";
      XPathLexer xPathLexer1 = new XPathLexer("I#AZ^");
      xPathLexer1.nextToken();
      xPathLexer1.setXPath("I#AZ^");
      Token token0 = xPathLexer0.not();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Y>G)G7Y?H");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("Y", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(9, token1.getTokenType());
      assertEquals(">", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      token2.toString();
      token2.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      String string0 = token2.toString();
      assertEquals("[ (1) (G)", string0);
      
      xPathLexer1.consume();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      String string1 = token4.toString();
      assertEquals("[ (21) ())", string1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("l*MB");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("l", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("*", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("M", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("B", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.setXPath("Q6moJ%Xy)Ws*4(");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Q6moJ", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("%", token1.getTokenText());
      
      xPathLexer0.consume((-1));
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals("y", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.div();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals(")", token4.getTokenText());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals("Ws", token5.getTokenText());
      
      Token token6 = xPathLexer0.not();
      assertEquals("*", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.at();
      xPathLexer0.at();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?.dl>i/I");
      xPathLexer0.at();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.minus();
      xPathLexer1.not();
      xPathLexer1.setXPath(".5\b2'Rz)W");
      XPathLexer xPathLexer2 = new XPathLexer();
      assertFalse(xPathLexer2.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]A%9(-O$a[Rj6z)F");
      xPathLexer0.mod();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("]A%9(-O$a[Rj6z)F");
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}<&!IQ$");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("}", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer(")");
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      xPathLexer0.setXPath(")");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (7) (<)", string0);
      assertEquals(7, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R*&WFsF='?bl]&Y");
      xPathLexer0.slashes();
      xPathLexer0.rightBracket();
      xPathLexer0.leftParen();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1954));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.rightParen();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer0.setXPath("HzF[((Ewb7j4U!d");
      Token token2 = xPathLexer0.colon();
      assertEquals("H", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken(token0);
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.nextToken();
      Token token3 = xPathLexer2.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer2.rightParen();
      assertEquals(2, token4.getTokenType());
      
      xPathLexer2.mod();
      xPathLexer1.getXPath();
      Token token5 = xPathLexer2.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer0.comma();
      assertEquals("z", token6.getTokenText());
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer1.identifier();
      assertEquals(15, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(">Kk0Wj]6C<N;a9");
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("Di\"2w9lYH]s");
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("l*MB");
      Token token1 = xPathLexer1.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("*", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@eA7V3U$y!e=");
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.endPosition();
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.setXPath("@eA7V3U$y!e=");
      Token token1 = new Token(13, "@eA7V3U$y!e=", 13, 13);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".2r4!\"e(<<Q8Ii;");
      XPathLexer xPathLexer1 = new XPathLexer(".2r4!\"e(<<Q8Ii;");
      Token token0 = xPathLexer1.comma();
      XPathLexer xPathLexer2 = new XPathLexer(".2r4!\"e(<<Q8Ii;");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer2.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      xPathLexer1.operatorName();
      xPathLexer2.relationalOperator();
      String string0 = token0.toString();
      assertEquals("[ (32) (.)", string0);
      
      Token token3 = xPathLexer2.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("2", token3.getTokenText());
      
      xPathLexer0.getPreviousToken();
      Token token4 = xPathLexer0.dollar();
      assertEquals(".", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.leftParen();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("6 (");
      xPathLexer1.number();
      String string0 = null;
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]A%9(-O$a[Rj6z)F");
      xPathLexer0.doubleColon();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer("iTOw");
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer1.getPreviousToken();
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("n.=agU");
      xPathLexer0.operatorName();
      xPathLexer0.slashes();
      xPathLexer0.whitespace();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer2.div();
      xPathLexer0.number();
      xPathLexer2.identifier();
      XPathLexer xPathLexer3 = new XPathLexer("n.=agU");
      xPathLexer2.leftBracket();
      xPathLexer2.mod();
      xPathLexer3.dots();
      xPathLexer0.operatorName();
      xPathLexer3.consume();
      xPathLexer2.number();
      xPathLexer1.setXPath("n.=agU");
      assertFalse(xPathLexer1.equals((Object)xPathLexer2));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.setXPath("xGtyVs>ZFe/c7Ulh");
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.rightParen();
      assertEquals("x", token1.getTokenText());
      
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("t", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("/Zfp}'>]cr");
      xPathLexer0.slashes();
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("D");
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("V", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("s", token5.getTokenText());
      
      Token token6 = xPathLexer2.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("D", token6.getTokenText());
      
      xPathLexer2.getPreviousToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.or();
      Token token7 = xPathLexer2.nextToken();
      assertEquals((-1), token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("iTOw");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w-0p~4\"`p|ZUKvucy-");
      xPathLexer0.consume();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.and();
      Token token0 = xPathLexer1.colon();
      assertEquals(18, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("-", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer2.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer1.mod();
      Token token3 = xPathLexer0.rightParen();
      assertEquals("0", token3.getTokenText());
      
      xPathLexer2.and();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("p", token4.getTokenText());
      
      Token token5 = xPathLexer1.rightParen();
      assertEquals(2, token5.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer3.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer1.mod();
      Token token7 = xPathLexer0.dollar();
      assertEquals("~", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "1B7?x.lZaw%M9Zh\\";
      XPathLexer xPathLexer0 = new XPathLexer("1B7?x.lZaw%M9Zh");
      XPathLexer xPathLexer1 = new XPathLexer();
      String string1 = "";
      xPathLexer0.setXPath("");
      xPathLexer1.doubleColon();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer("<P/g,s{Xx5Oh2");
      xPathLexer0.and();
      xPathLexer2.at();
      xPathLexer0.comma();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.equals();
      xPathLexer0.setXPath("1B7?x.lZaw%M9Zh");
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.not();
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.setXPath("(8UKs}\"iXp?E(");
      xPathLexer0.nextToken();
      xPathLexer0.consume((-4216));
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]A%9(-O$a[Rj6z)F");
      xPathLexer0.doubleColon();
      xPathLexer0.mod();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w-0p~4\"`p|ZUKvucy-");
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.leftBracket();
      String string0 = "Y8S^_':";
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("Y8S^_':");
      xPathLexer0.slashes();
      xPathLexer2.or();
      xPathLexer2.slashes();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.rightParen();
      xPathLexer0.and();
      xPathLexer2.nextToken();
      xPathLexer3.rightParen();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer4.mod();
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "Y>G)G7Y?H";
      XPathLexer xPathLexer0 = new XPathLexer("Y>G)G7Y?H");
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("Y>G)G7Y?H");
      Token token0 = xPathLexer1.pipe();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.identifierOrOperatorName();
      xPathLexer0.consume();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3am");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer1.equals();
      xPathLexer1.or();
      xPathLexer0.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.not();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("c(<");
      xPathLexer0.or();
      xPathLexer1.dollar();
      xPathLexer1.setXPath("");
      xPathLexer0.dots();
      xPathLexer0.plus();
      String string0 = "\\u``Qdm}{O]}{Z>r/6";
      xPathLexer1.setXPath(string0);
      xPathLexer1.equals();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer1.getPreviousToken();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("j7^;aB:oDpo");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token0 = xPathLexer4.notEquals();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer2.not();
      XPathLexer xPathLexer8 = new XPathLexer();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer1.not();
      XPathLexer xPathLexer10 = new XPathLexer();
      xPathLexer10.setPreviousToken(token0);
      XPathLexer xPathLexer11 = new XPathLexer();
      XPathLexer xPathLexer12 = new XPathLexer("");
      assertFalse(xPathLexer12.equals((Object)xPathLexer8));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?.d>i/I");
      Token token0 = xPathLexer0.plus();
      assertEquals("?", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("!xiMcVL,");
      xPathLexer1.mod();
      Token token1 = xPathLexer1.nextToken();
      assertEquals("!", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer2.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer3.slashes();
      assertEquals(11, token3.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token4 = xPathLexer3.literal();
      assertNull(token4);
      
      xPathLexer2.at();
      xPathLexer0.and();
      Token token5 = xPathLexer0.dots();
      assertEquals(".", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      xPathLexer2.operatorName();
      Token token6 = xPathLexer1.nextToken();
      assertEquals("xiMcVL,", token6.getTokenText());
      
      xPathLexer2.relationalOperator();
      xPathLexer3.dots();
      Token token7 = xPathLexer4.notEquals();
      assertEquals(22, token7.getTokenType());
      
      Token token8 = xPathLexer0.at();
      assertEquals("d", token8.getTokenText());
      assertEquals(16, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      XPathLexer xPathLexer1 = new XPathLexer("L%'*y@[<5O*}J{");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.at();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer3.rightParen();
      xPathLexer3.endPosition();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer4.div();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer5.consume();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer5.plus();
      xPathLexer0.at();
      xPathLexer1.equals();
      xPathLexer3.consume();
      assertNull(xPathLexer3.getXPath());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftBracket();
      xPathLexer1.consume(715);
      xPathLexer1.or();
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer(")");
      xPathLexer0.not();
      xPathLexer1.colon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.setXPath("m_L/6`[E");
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = ":=p\\G%=$4I";
      XPathLexer xPathLexer0 = new XPathLexer(":=pG%=$4I");
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      xPathLexer0.colon();
      xPathLexer0.or();
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.setXPath("M!Q-%Z7a^1+&MArVE~");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@eA7V3U$y!e=");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.endPosition();
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer("21zlT");
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("iTOw");
      xPathLexer0.nextToken();
      xPathLexer1.getPreviousToken();
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.endPosition();
      xPathLexer0.nextToken();
      String string0 = null;
      // Undeclared exception!
      try { 
        xPathLexer2.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Mmf E+695`>f;'G0");
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("Mmf E+695`>f;'G0");
      Token token0 = xPathLexer1.equals();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.colon();
      xPathLexer2.comma();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.operatorName();
      xPathLexer2.leftBracket();
      xPathLexer3.setPreviousToken(token0);
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%|*");
      xPathLexer0.consume();
      xPathLexer0.getPreviousToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("1B7?x.lZaw%M9Zh");
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer1.setXPath("%|*");
      xPathLexer1.setXPath("1B7?x.lZaw%M9Zh");
      xPathLexer1.at();
      xPathLexer1.doubleColon();
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer("<P/g,s{Xx5Oh2");
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "n.=agU";
      XPathLexer xPathLexer0 = new XPathLexer("n.=agU");
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.star();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.pipe();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.rightBracket();
      xPathLexer2.dollar();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]A%9(-O$a[Rj6z)F");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("]A", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("iTOw");
      Token token1 = xPathLexer1.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer1.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("T", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.nextToken();
      Token token3 = xPathLexer1.getPreviousToken();
      assertEquals("Ow", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer1.mod();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("%", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!1[@;[-fkyDR\":^X");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("!", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer0.dollar();
      assertEquals("1", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.leftBracket();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("@;", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(3, token4.getTokenType());
      assertEquals("[", token4.getTokenText());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.comma();
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals("f", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      xPathLexer2.or();
      Token token7 = xPathLexer1.equals();
      assertEquals(21, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.leftParen();
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("%");
      xPathLexer0.setXPath("vQIh~'1n+5@Exh!");
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token2 = xPathLexer4.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.consume();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("vQIh", token3.getTokenText());
      
      xPathLexer4.and();
      int int0 = xPathLexer0.endPosition();
      assertEquals(15, int0);
      
      Token token4 = xPathLexer3.colon();
      assertEquals(18, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("+0(GZ\"^m[)hwx");
      XPathLexer xPathLexer3 = new XPathLexer("SG)[%R@C");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.operatorName();
      xPathLexer2.nextToken();
      xPathLexer1.notEquals();
      xPathLexer0.number();
      xPathLexer2.identifier();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer0.slashes();
      xPathLexer3.mod();
      xPathLexer2.consume();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer4.relationalOperator();
      xPathLexer5.and();
      xPathLexer2.leftBracket();
      xPathLexer6.mod();
      xPathLexer0.pipe();
      xPathLexer2.comma();
      xPathLexer6.setXPath("_A5MA6-)KhoG(\u0000");
      xPathLexer5.or();
      xPathLexer7.setPreviousToken((Token) null);
      assertNull(xPathLexer7.getXPath());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("c(<");
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      xPathLexer1.endPosition();
      Token token2 = xPathLexer1.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("c", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.nextToken();
      Token token4 = xPathLexer1.leftBracket();
      assertEquals("(", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      xPathLexer0.setXPath("6UD");
      xPathLexer0.nextToken();
      boolean boolean0 = xPathLexer1.isIdentifierChar('Q');
      assertTrue(boolean0);
      
      Token token5 = xPathLexer0.getPreviousToken();
      assertEquals(30, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w-0p~4\"`p|ZUKvucy-");
      xPathLexer0.minus();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.slashes();
      String string0 = "Y8S^_':";
      XPathLexer xPathLexer2 = new XPathLexer("Y8S^_':");
      XPathLexer xPathLexer3 = new XPathLexer("Y8S^_':");
      xPathLexer1.slashes();
      xPathLexer3.pipe();
      xPathLexer3.slashes();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.rightParen();
      xPathLexer1.and();
      xPathLexer3.nextToken();
      xPathLexer2.rightBracket();
      xPathLexer4.rightParen();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer4.relationalOperator();
      xPathLexer5.notEquals();
      XPathLexer xPathLexer7 = null;
      try {
        xPathLexer7 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%|*");
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("*", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.dots();
      assertEquals(13, token1.getTokenType());
      
      xPathLexer1.setXPath("%|*");
      XPathLexer xPathLexer2 = new XPathLexer("1B7?x.lZaw%M9Zh");
      Token token2 = xPathLexer1.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("%", token2.getTokenText());
      
      xPathLexer1.setXPath("[ (");
      Token token3 = xPathLexer2.doubleColon();
      assertEquals("1B", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer1.rightBracket();
      assertEquals("[", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("<P/g,s{;pXx5Oh2");
      Token token5 = xPathLexer3.equals();
      assertEquals(21, token5.getTokenType());
      assertEquals("<", token5.getTokenText());
      
      Token token6 = xPathLexer2.nextToken();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3am");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("3am");
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("+gSHSY)2m6V]c");
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o+a7`K`?");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("o", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("+", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.slashes();
      assertEquals("7", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("`K", token4.getTokenText());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      assertEquals("`", token5.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(8, int0);
      
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      assertEquals("?", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]A%9(-O$a[Rj6z)F");
      xPathLexer0.and();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("]", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.not();
      Token token1 = xPathLexer0.dollar();
      assertEquals("9", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("m`NJP&e");
      Token token2 = xPathLexer1.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("m", token2.getTokenText());
      
      xPathLexer1.or();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNull(token3);
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(1, token4.getTokenType());
      assertEquals("(", token4.getTokenText());
      
      Token token5 = xPathLexer1.rightParen();
      assertEquals("`", token5.getTokenText());
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      assertEquals("-", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("m`NJP&e");
      int int0 = xPathLexer2.currentPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":=pG%=$4I");
      XPathLexer xPathLexer1 = new XPathLexer(":=pG%=$4I");
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.literal();
      XPathLexer xPathLexer4 = new XPathLexer("UW");
      xPathLexer1.dots();
      xPathLexer1.at();
      xPathLexer2.colon();
      xPathLexer0.dots();
      xPathLexer4.and();
      xPathLexer1.operatorName();
      xPathLexer4.nextToken();
      xPathLexer3.relationalOperator();
      xPathLexer3.consume((-3316));
      assertNull(xPathLexer3.getXPath());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?o.l]vm");
      xPathLexer0.rightParen();
      xPathLexer0.or();
      String string0 = null;
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.slashes();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("aL%id1RoVVDkC6;p.");
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("F,M<*,&Jd0)|ghtdO<");
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      XPathLexer xPathLexer4 = new XPathLexer("F,M<*,&Jd0)|ghtdO<");
      xPathLexer3.identifier();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("te5S5#Av`o[}loe+H");
      Token token2 = xPathLexer5.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("t", token2.getTokenText());
      
      Token token3 = xPathLexer2.rightParen();
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer2.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("te5S5#Av`o[}loe+H");
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer7 = new XPathLexer("te5S5#Av`o[}loe+H");
      Token token5 = xPathLexer1.leftParen();
      assertEquals("F", token5.getTokenText());
      
      xPathLexer6.consume();
      XPathLexer xPathLexer8 = new XPathLexer();
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token6);
      assertEquals(15, token6.getTokenType());
      
      XPathLexer xPathLexer10 = new XPathLexer("");
      xPathLexer3.or();
      xPathLexer3.or();
      Token token7 = xPathLexer1.nextToken();
      assertEquals(32, token7.getTokenType());
      assertEquals(",", token7.getTokenText());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".7|");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(".7", token0.getTokenText());
      assertEquals(31, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer(".7|");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer3.or();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer3.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer2.rightParen();
      assertEquals(".", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.doubleColon();
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.setXPath("=mq1/xzow9jw$v");
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.setPreviousToken(token2);
      xPathLexer2.div();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals("=m", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("q1/xzow9jw$v", token6.getTokenText());
      
      Token token7 = xPathLexer1.rightParen();
      assertEquals(2, token7.getTokenType());
      
      xPathLexer0.endPosition();
      xPathLexer1.or();
      xPathLexer2.identifierOrOperatorName();
      Token token8 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.not();
      xPathLexer0.leftParen();
      xPathLexer0.comma();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setXPath(" 4*;)/*(#[neL*fmwh");
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.mod();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer(" 4*;)/*(#[neL*fmwh");
      xPathLexer0.slashes();
      xPathLexer3.and();
      XPathLexer xPathLexer4 = new XPathLexer("");
      String string0 = null;
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":=pG%=$4I");
      xPathLexer0.dots();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.rightParen();
      xPathLexer0.slashes();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.setXPath("=mq1/xzow9jw$v");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer1.and();
      xPathLexer1.rightParen();
      Token token1 = xPathLexer1.comma();
      xPathLexer1.setPreviousToken(token1);
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.rightBracket();
      xPathLexer1.div();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?.d>i/I");
      XPathLexer xPathLexer1 = new XPathLexer("?.d>i/I");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.at();
      xPathLexer1.and();
      Token token0 = xPathLexer0.dots();
      xPathLexer2.whitespace();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer2.or();
      xPathLexer0.colon();
      xPathLexer1.or();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer0.colon();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer2.comma();
      xPathLexer1.and();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer2.slashes();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.identifierOrOperatorName();
      xPathLexer3.comma();
      xPathLexer3.nextToken();
      xPathLexer2.or();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer5.slashes();
      xPathLexer1.and();
      xPathLexer5.dollar();
      xPathLexer0.endPosition();
      boolean boolean0 = xPathLexer6.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":=pG%=$4I");
      xPathLexer0.dots();
      Token token0 = xPathLexer0.literal();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer(":=pG%=$4I");
      Token token1 = xPathLexer1.nextToken();
      token1.toString();
      token1.toString();
      xPathLexer1.pipe();
      token0.toString();
      token1.toString();
      xPathLexer1.setPreviousToken(token0);
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.nextToken();
      String string0 = null;
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!=1[@;[-fkyDR\":^X");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.slashes();
      token0.toString();
      Token token1 = xPathLexer0.number();
      String string0 = token0.toString();
      assertEquals("[ (22) (!=)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.not();
      Token token2 = xPathLexer0.at();
      assertEquals(";", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("[", token3.getTokenText());
      
      xPathLexer0.not();
      Token token4 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer0.not();
      Token token6 = xPathLexer2.literal();
      assertNull(token6);
      
      token4.toString();
      xPathLexer2.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      assertEquals(":^", token7.getTokenText());
      
      String string1 = token4.toString();
      assertEquals("[ (15) (fkyDR)", string1);
      
      xPathLexer3.div();
      xPathLexer0.notEquals();
      xPathLexer2.or();
      xPathLexer3.setPreviousToken(token5);
      assertEquals(23, token5.getTokenType());
      assertEquals("\"", token5.getTokenText());
      
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
  }
}
