/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:54:14 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRSMatrix.identity(1000);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CRSMatrix.fromCSV("");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRSMatrix.diagonal(1067, 1067);
      CRSMatrix cRSMatrix0 = new CRSMatrix(18, 1067, 1065);
      cRSMatrix0.getRow(0);
      cRSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1116, 1116, 1033);
      cRSMatrix0.transpose();
      int int0 = (-81);
      cRSMatrix0.toSparseMatrix();
      cRSMatrix0.getRow((-81));
      cRSMatrix0.iteratorOfRow(int0);
      int int1 = (-821);
      int int2 = 2;
      cRSMatrix0.nonZeroAt(int1, int2);
      int int3 = (-1126);
      double double0 = (-1356.84669076);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.randomSymmetric(int3, double0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1004.19322);
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 0, doubleArray0);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix0.rowMajorIterator();
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      cRSMatrix0.nonZeroRowMajorIterator();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.nonZeroIteratorOfRow(0);
      cRSMatrix0.copyOfShape(0, 48);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) 3;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(3, 3, doubleArray0);
      int int0 = (-2762);
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(3, (-2762));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 3x-2762
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 1396;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1396, 1396);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.max();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(1396);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1397
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow(26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 26
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[23][4];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.nonZeroRowMajorIterator();
      byte[] byteArray0 = new byte[3];
      cRSMatrix0.iteratorOfNonZeroRows();
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)3;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfShape((-3491), (-633));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3491x-633
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 7;
      intArray0[1] = 0;
      intArray0[2] = 7;
      intArray0[3] = 7;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      Double double0 = new Double(0.0);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      cRSMatrix0.multiplyByItsTranspose();
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow((byte)32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      cRSMatrix0.toColumnVector();
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("Vi3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 600;
      doubleArray0[2] = (double) 9;
      CRSMatrix.from1DArray(600, 9, doubleArray0);
      String string0 = "0pC\"~}saqQ2D\"+'Z^K?";
      CRSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1642.9427861).when(matrixAccumulator0).accumulate();
      SparseMatrix.zero(381, 381);
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      cRSMatrix0.max();
      cRSMatrix0.add(1642.9427861);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow((-946), (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -946
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1067, 1067, 1067);
      int int0 = 7;
      cRSMatrix0.copyOfShape(7, 7);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[0][9];
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1067, 0.0);
      Matrix matrix0 = cRSMatrix0.copyOfShape(7, 7);
      int[] intArray0 = new int[8];
      intArray0[0] = 7;
      intArray0[2] = 7;
      intArray0[3] = 7;
      intArray0[5] = 7;
      intArray0[6] = 7;
      matrix0.eachInRow(7, (VectorProcedure) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byte byte0 = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)10;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(1020, 1020, (double) 1020, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[23][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = 0.0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 13;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(13, 952, 952);
      double double0 = new Integer(952);
      cRSMatrix0.nonZeroAt(2, 13);
      cRSMatrix0.setAll(518.7818813);
      cRSMatrix0.removeLastRow();
      int int1 = (-186);
      double double1 = (-0.4375);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix1 = CRSMatrix.random(int0, int1, double1, (Random) mockRandom0);
      int int2 = 1034;
      cRSMatrix1.getColumn(int2);
      CRSMatrix cRSMatrix2 = CRSMatrix.identity(int0);
      cRSMatrix2.min();
      CRSMatrix.zero(int0, int0);
      int int3 = Integer.MAX_VALUE;
      org.evosuite.runtime.Random.setNextRandom(int3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.iteratorOfColumn(2514);
      cRSMatrix0.euclideanNorm();
      // Undeclared exception!
      try { 
        SparseMatrix.identity((-1788));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1043, 1043);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1043;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix1 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix1, matrix1, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1043' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 3;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 3;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(3, 3, doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 8;
      CRSMatrix cRSMatrix0 = new CRSMatrix(8, 8);
      cRSMatrix0.sum();
      int[] intArray0 = new int[5];
      int int1 = (-374);
      intArray0[0] = (-374);
      intArray0[1] = 5723;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt(5723);
      // Undeclared exception!
      try { 
        CRSMatrix.random(5723, 8, (double) (-374), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 8;
      org.evosuite.runtime.Random.setNextRandom(8);
      int int1 = 5723;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(5723);
      cRSMatrix0.sum();
      int[] intArray0 = new int[5];
      int int2 = (-374);
      intArray0[0] = int2;
      intArray0[1] = int1;
      intArray0[2] = int0;
      int int3 = 1462;
      intArray0[3] = int3;
      intArray0[4] = int0;
      cRSMatrix0.select(intArray0, intArray0);
      int int4 = (-1862);
      cRSMatrix0.nonZeroIteratorOfRow(int4);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1954.0);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      int int0 = 1057;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1057, 0.0);
      cRSMatrix0.foldNonZeroInColumns((VectorAccumulator) null);
      cRSMatrix0.rowMajorIterator();
      int int1 = 0;
      int int2 = 1759;
      int int3 = 406;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn(int3, vectorProcedure0);
      int[] intArray0 = new int[4];
      intArray0[0] = int2;
      intArray0[1] = int1;
      int int4 = (-761);
      cRSMatrix0.minInRow(int4);
      double[][] doubleArrayArray0 = null;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArrayArray0);
      cRSMatrix1.iteratorOfRow(int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1043, 1043);
      sparseVector0.toColumnMatrix();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1043;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix1 = cRSMatrix0.add((-82.0));
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix1, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      org.evosuite.runtime.Random.setNextRandom(Integer.MAX_VALUE);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1259, 518.7818813);
      cRSMatrix0.max();
      CRSMatrix.zero(11, 1034);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1509);
      cRSMatrix0.eachNonZero((MatrixProcedure) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("1");
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      mockRandom0.nextBytes(byteArray0);
      cRSMatrix0.minInRow((byte)0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("1");
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(100.0).when(matrixAccumulator0).accumulate();
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      cRSMatrix0.diagonalProduct();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      int int0 = 390;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.diagonal((-1300), 390);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(6, 3, 6);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-0.41681068138940836), 0.0, (double)6).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(3, vectorFunction0);
      cRSMatrix0.getColumn(1330);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(3, 0.0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cRSMatrix1.nonZeroIterator();
      cRSMatrix0.min();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-1949), (-262));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1949x-262
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 1067;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1067, 0.0);
      Double double0 = new Double(0.0);
      double double1 = Locale.LanguageRange.MIN_WEIGHT;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(1067, 27);
      cRSMatrix0.swapColumns(27, 27);
      int int1 = (-1);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.maxInRow(27);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      int int2 = 1037;
      int[] intArray0 = new int[4];
      intArray0[0] = 1037;
      intArray0[1] = 27;
      intArray0[2] = 1067;
      intArray0[3] = 27;
      cRSMatrix1.select(intArray0, intArray0);
      CRSMatrix.zero(int1, int0, int2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SparseVector.zero(1057, 1057);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1057;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero((int) (byte)10, 7, (int) (byte)10);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      int int0 = 4761;
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, cRSMatrix0, matrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1067, 0.0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(7, 7);
      cRSMatrix0.toBinary();
      cRSMatrix0.max();
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[3];
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix1.foldNonZeroInRows(vectorAccumulator0);
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      cRSMatrix0.minInRow((byte)8);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix1.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 3;
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) 3;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(3, 3, doubleArray0);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.nonZeroIteratorOfRow(3);
      cRSMatrix0.norm();
      cRSMatrix0.spliterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
      // Undeclared exception!
      try { 
        cRSMatrix0.updateRow(3, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 1132;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1132, 136.39346346514682);
      cRSMatrix0.setColumn(3, (double) 1017);
      int int1 = (-2480);
      int int2 = 3314;
      CRSMatrix cRSMatrix1 = new CRSMatrix(int1, int2, int0);
      MatrixProcedure matrixProcedure0 = null;
      cRSMatrix1.eachNonZero(matrixProcedure0);
      int int3 = (-1289);
      int int4 = 13;
      Matrix.unit(int4, int3);
      int int5 = (-146);
      int int6 = 2776;
      int int7 = 10;
      Matrix matrix0 = cRSMatrix0.slice(int2, int5, int6, int7);
      CRSMatrix.block(cRSMatrix0, cRSMatrix1, matrix0, cRSMatrix0);
      CRSMatrix cRSMatrix2 = new CRSMatrix();
      MatrixFactory<Matrix> matrixFactory0 = null;
      cRSMatrix0.to(matrixFactory0);
      int int8 = (-1554);
      cRSMatrix1.iteratorOfRow(int8);
      int int9 = (-1556);
      CRSMatrix.identity(int9);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(8, 2512, 375);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1052.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRow(0, vectorAccumulator0);
      cRSMatrix0.minInRow(17);
      double[][] doubleArrayArray0 = null;
      CRSMatrix.from2DArray(doubleArrayArray0);
      cRSMatrix0.iteratorOfRow(int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 231.75928315951;
      doubleArray1[3] = 584.759824;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 584.759824;
      doubleArray2[1] = 584.759824;
      doubleArray2[2] = 231.75928315951;
      doubleArray2[3] = Double.POSITIVE_INFINITY;
      doubleArray2[4] = 584.759824;
      doubleArray2[5] = 584.759824;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 231.75928315951;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 231.75928315951;
      doubleArray3[1] = 584.759824;
      doubleArray3[2] = 584.759824;
      doubleArray3[3] = 231.75928315951;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.foldNonZeroInColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt(231);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(971, 240);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(240, vectorProcedure0);
      CRSMatrix.random(231, 240, (-849.8389031449235), (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      MockRandom mockRandom1 = new MockRandom(1067);
      int[] intArray0 = new int[1];
      SparseMatrix.zero(1067, 1067, 1);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4);
      cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix0.sliceBottomRight((-1177), 1032);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1043, 1043);
      sparseVector0.toColumnMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1043;
      int int0 = 845;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(845, 1043, 1043);
      cRSMatrix0.copyOfShape(767, 48);
      cRSMatrix0.rowMajorIterator();
      int[] intArray0 = new int[7];
      intArray0[0] = 48;
      intArray0[1] = 48;
      intArray0[2] = 1043;
      intArray0[3] = 1043;
      intArray0[4] = 5259;
      intArray0[5] = 1043;
      intArray0[6] = 767;
      cRSMatrix0.select(intArray0, intArray0);
      int int1 = (-39);
      cRSMatrix0.getOrElse(int1, int0, doubleArray0[0]);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[2];
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      MockRandom mockRandom1 = new MockRandom(44L);
      CRSMatrix.randomSymmetric(0, 3085.88, (Random) mockRandom0);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(639, 1015);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 1067;
      double double0 = 0.0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1067, 0.0);
      cRSMatrix0.copyOfShape(1923, 312);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      cRSMatrix0.toBinary();
      cRSMatrix0.max();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(int0);
      double double1 = 1143.7;
      cRSMatrix1.multiply(double1);
      cRSMatrix1.min();
      int int1 = (-1179);
      cRSMatrix0.toBinary();
      int int2 = 513;
      cRSMatrix0.minInRow(int2);
      int int3 = (-676);
      CRSMatrix.zero(int1, int3);
      cRSMatrix1.min();
      cRSMatrix1.iteratorOfRow(int3);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.randomSymmetric(int3, double0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) 3;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(3, 3, doubleArray0);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.norm();
      cRSMatrix0.multiplyByItsTranspose();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateRow(3, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1033, 1033);
      sparseVector0.toColumnMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1033, 1033);
      cRSMatrix0.rotate();
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray((double[][]) null);
      int int0 = 2;
      SparseMatrix.identity(int0);
      cRSMatrix1.rowMajorIterator();
      int int1 = 2781;
      cRSMatrix1.maxInRow(int1);
      cRSMatrix1.determinant();
      CRSMatrix.identity(int1);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      cRSMatrix0.toBinary();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero((int) (byte)32, (int) (byte)32, 0);
      cRSMatrix1.getColumn(3);
      MockRandom mockRandom1 = new MockRandom();
      cRSMatrix0.transpose();
      // Undeclared exception!
      try { 
        CRSMatrix.zero((int) (byte)32, (-2004), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 32x-2004
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.transform(matrixFunction0);
      // Undeclared exception!
      try { 
        DenseVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1067, 0.0);
      Matrix matrix0 = cRSMatrix0.copyOfShape(7, 7);
      int[] intArray0 = new int[9];
      intArray0[0] = 7;
      intArray0[1] = 0;
      CRSMatrix cRSMatrix1 = new CRSMatrix(1067, 1067);
      SparseMatrix.zero(2090, 8, 1480);
      cRSMatrix1.rowMajorIterator();
      cRSMatrix1.maxInRow(0);
      matrix0.determinant();
      int int0 = 426;
      CRSMatrix.identity(426);
      String string0 = "Can not decode CRSMatrix from the given byte array.";
      CRSMatrix cRSMatrix2 = CRSMatrix.fromMatrixMarket("Can not decode CRSMatrix from the given byte array.");
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.eachNonZero(matrixProcedure0);
      org.evosuite.runtime.Random.setNextRandom(int0);
      CRSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1067, 0.0);
      Double double0 = new Double(0.0);
      double double1 = Locale.LanguageRange.MIN_WEIGHT;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(1067, 18);
      cRSMatrix1.nonZeroColumnMajorIterator();
      cRSMatrix1.toColumnVector();
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(18);
      sparseMatrix0.nonZeroIterator();
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.maxInRow(18);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      cRSMatrix0.isZeroAt(1039, 18);
      int int0 = 1037;
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(1039, 29, 1037);
      cRSMatrix2.toBinary();
      int int1 = 1028;
      cRSMatrix0.minInRow(1028);
      int int2 = 5;
      CRSMatrix cRSMatrix3 = CRSMatrix.identity(5);
      Double double2 = new Double(1037);
      cRSMatrix3.determinant();
      cRSMatrix3.nonZeroRowMajorIterator();
      double[][] doubleArray0 = new double[0][4];
      CRSMatrix cRSMatrix4 = CRSMatrix.from2DArray(doubleArray0);
      int int3 = (-4652);
      int int4 = Integer.MAX_VALUE;
      Matrix.constant(int3, int4, double1);
      int int5 = (-633);
      cRSMatrix4.getColumn(int5);
      MockRandom mockRandom0 = new MockRandom();
      ((RowMajorSparseMatrix) sparseMatrix0).transpose();
      int int6 = 4374;
      CRSMatrix.zero(int1, int6, int2);
      cRSMatrix3.setAll(int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) 3;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(3, 3, doubleArray0);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.nonZeroIteratorOfRow(3);
      cRSMatrix0.setAll(1067.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-601.469650824797), (-0.4375), 3.0, 281.8903407672967, 1067.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      int int0 = (-2339);
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-2339), (-2339), (-2339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2339x-2339
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) 3;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(3, 3, doubleArray0);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.nonZeroIteratorOfRow(3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      int int0 = (-2339);
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-2339), (-2339), (-2339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2339x-2339
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1067, 0.0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(7, 7);
      cRSMatrix0.toBinary();
      cRSMatrix0.max();
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[3];
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-497.78674224890625), (-2489.0609793328103), 2694.95, 0.0, (double)1067).when(vectorAccumulator0).accumulate();
      cRSMatrix1.foldNonZeroInRows(vectorAccumulator0);
      byteArray0[0] = (byte)8;
      byteArray0[0] = (byte)8;
      byteArray0[2] = (byte)8;
      double double0 = new Double((-2489.0609793328103));
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix1.to(matrixFactory0);
      cRSMatrix0.copyOfShape(13, 984);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix2.updateAt(7, (byte)8, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      linkedList0.add(double0);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(7);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      int[] intArray0 = new int[2];
      intArray0[1] = 7;
      org.evosuite.runtime.Random.setNextRandom(7);
      org.evosuite.runtime.Random.setNextRandom(3);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(8, (double) 0, (Random) mockRandom0);
      ((CRSMatrix) sparseMatrix0).setAll(2402.50978942);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-1323);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      int int1 = (-2086);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2987, (-2086));
      cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix0.blank();
      org.evosuite.runtime.Random.setNextRandom(1061);
      CRSMatrix.fromCSV("Can not decode BasicVector from the given byte array.");
      cRSMatrix0.min();
      cRSMatrix0.rowMajorIterator();
      int int2 = 9;
      CRSMatrix.diagonal(int1, int0);
      CRSMatrix.identity(int2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) 3;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(3, 3, doubleArray0);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.nonZeroIteratorOfRow(3);
      cRSMatrix0.norm();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      byte byte0 = (byte)8;
      byte[] byteArray0 = cRSMatrix0.toBinary();
      cRSMatrix0.max();
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      // Undeclared exception!
      try { 
        cRSMatrix1.minInRow(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1067, 0.0);
      Double double0 = new Double(0.0);
      double double1 = Locale.LanguageRange.MIN_WEIGHT;
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      int int0 = (-1);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.maxInRow(27);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      CRSMatrix cRSMatrix2 = CRSMatrix.zero((-1), 1067, 1037);
      int int1 = 935;
      cRSMatrix2.equals((Object) cRSMatrix1);
      cRSMatrix2.copyOfShape(int1, int0);
      cRSMatrix2.nonZeroRowMajorIterator();
      String string0 = "";
      CRSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1067, 0.48550553317299217);
      Matrix matrix0 = cRSMatrix0.copyOfShape(1067, 1067);
      cRSMatrix0.toBinary();
      cRSMatrix0.max();
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)8;
      CRSMatrix.diagonal(999, 999);
      matrix0.maxInRow(1016);
      matrix0.setAll(0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 1292;
      int int1 = 17;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1292, 17, 17);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SparseVector.zero(397, 1067);
      Integer integer0 = new Integer(13);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(13, (-975), 0.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 13x-975
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) 3;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(3, 3, doubleArray0);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.nonZeroIteratorOfRow(3);
      cRSMatrix0.norm();
      Matrix matrix0 = cRSMatrix0.multiplyByItsTranspose();
      cRSMatrix0.blank();
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      matrix0.setAll(3.0);
      intArray0[1] = 3;
      Matrix.unit(3, 3);
      MockRandom mockRandom0 = new MockRandom(3);
      CRSMatrix.random(3, 3, 1.0, (Random) mockRandom0);
      cRSMatrix0.toBinary();
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom((-1L));
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(3, 3085.88, (Random) mockRandom1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 9.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3480.104), (-3480.104), (double)3).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      cRSMatrix0.toBinary();
      cRSMatrix0.updateRow(0, vectorFunction0);
      cRSMatrix0.nonZeroIterator();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SparseVector.zero(1132, 1000);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 1067);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      double[] doubleArray0 = new double[0];
      DenseVector.fromArray(doubleArray0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix1 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix1, matrix1, matrix1, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1033, 1033);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1033;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix1 = denseVector0.toColumnMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.block(matrix0, matrix0, matrix1, matrix1);
      cRSMatrix0.max();
      MockRandom mockRandom0 = new MockRandom();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      int[] intArray0 = new int[7];
      intArray0[0] = 1033;
      intArray0[1] = 1033;
      intArray0[2] = 1018;
      intArray0[3] = 1033;
      intArray0[4] = 1033;
      intArray0[5] = 1033;
      intArray0[6] = 1033;
      int[] intArray1 = new int[0];
      cRSMatrix0.select(intArray0, intArray1);
      int int0 = 1011;
      cRSMatrix0.minInColumn(int0);
      cRSMatrix0.min();
      int int1 = 0;
      double double0 = 1.0;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(int1, double0);
      int int2 = 1000;
      cRSMatrix1.maxInRow(int2);
      double double1 = 7164.0;
      cRSMatrix0.setAll(double1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(6, 3, 6);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)6, 0.0, (double)6).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(3, vectorFunction0);
      cRSMatrix0.setAll((-1.0));
      cRSMatrix0.rowMajorIterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn(3, vectorProcedure0);
      cRSMatrix0.getColumn(1330);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setPositivePrefix((String) null);
      decimalFormat0.setMultiplier(37);
      cRSMatrix0.toCSV((NumberFormat) decimalFormat0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      cRSMatrix0.slice(3, 998, 1061, 1065);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double double0 = 0.0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1067, 0.0);
      Double double1 = new Double(0.0);
      Double.sum((-1.0), (-3462.4836079814463));
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(1067, 18);
      cRSMatrix1.nonZeroColumnMajorIterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix1.updateRow(18, vectorFunction0);
      int int0 = 1060;
      RowMajorSparseMatrix.zero(1060, 428, 1067);
      Matrix.from2DArray((double[][]) null);
      VectorProcedure vectorProcedure0 = null;
      int int1 = (-2847);
      int int2 = 727;
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(int1, int2, int0);
      cRSMatrix0.eachNonZeroInRow(int1, vectorProcedure0);
      int int3 = 1047;
      int int4 = 19;
      int int5 = (-1406);
      Matrix.unit(int4, int5);
      int int6 = (-1601);
      int int7 = (-1439);
      int int8 = (-999);
      int int9 = 2494;
      cRSMatrix0.slice(int6, int8, int9, int3);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.to(matrixFactory0);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.randomSymmetric(int7, double0, (Random) mockRandom0);
      String string0 = "Can not compute determinant of non-square matrix.";
      CRSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 1067;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1067, 1067);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(7, 7);
      cRSMatrix1.toRowMajorSparseMatrix();
      cRSMatrix1.nonZeroIterator();
      cRSMatrix0.max();
      CRSMatrix cRSMatrix2 = CRSMatrix.identity(7);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix3 = (CRSMatrix)cRSMatrix2.removeFirstColumn();
      cRSMatrix3.rotate();
      cRSMatrix3.subtract((double) 7);
      double[][] doubleArray0 = new double[3][2];
      MockRandom mockRandom0 = new MockRandom(187L);
      mockRandom0.ints(1000, 7);
      int int1 = 1;
      int int2 = 6718;
      CRSMatrix.zero(int1, int2, int0);
      CRSMatrix cRSMatrix4 = CRSMatrix.from2DArray(doubleArray0);
      int int3 = 1031;
      cRSMatrix4.blankOfShape(int3, int0);
      int int4 = 8;
      cRSMatrix3.iteratorOfRow(int4);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 0;
      int int1 = 3;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      byte byte0 = (byte)32;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.randomSymmetric(0, (double) (byte)32, (Random) mockRandom0);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      cRSMatrix0.multiplyByItsTranspose();
      cRSMatrix0.updateRow(0, vectorFunction0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero(0, 1060, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1067, (-11.520893548026534));
      Double double0 = new Double((-11.520893548026534));
      double double1 = Locale.LanguageRange.MIN_WEIGHT;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(1067, 24);
      cRSMatrix0.rowMajorIterator();
      double double2 = Locale.LanguageRange.MAX_WEIGHT;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(1033, 1067, 1057);
      cRSMatrix2.nonZeroIterator();
      cRSMatrix0.minInRow(1028);
      double double3 = Locale.LanguageRange.MAX_WEIGHT;
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[1] = doubleArray1;
      cRSMatrix1.sum();
      MatrixFactory<Matrix> matrixFactory0 = null;
      Matrix matrix0 = cRSMatrix0.to(matrixFactory0);
      int int0 = 1003;
      cRSMatrix0.iteratorOfRow(int0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      ColumnMajorSparseMatrix.block(matrix0, matrix0, cRSMatrix2, cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SparseVector.zero(1057, 1057);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1057;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      byte byte0 = (byte)10;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero((int) (byte)10, 1057, 1057);
      cRSMatrix1.nonZeroIterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateRow((-1374), vectorFunction0);
      cRSMatrix1.getColumn(byte0);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix1.transpose();
      cRSMatrix1.nonZeroIterator();
      int int0 = 5256;
      int int1 = (-1);
      int int2 = (-2538);
      CRSMatrix.zero(int0, int1, int2);
      int int3 = 333;
      cRSMatrix1.maxInRow(int3);
  }
}
