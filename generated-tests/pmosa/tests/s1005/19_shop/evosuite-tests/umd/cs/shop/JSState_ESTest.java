/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 03:44:22 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSListAxioms;
import umd.cs.shop.JSListLogicalAtoms;
import umd.cs.shop.JSListSubstitution;
import umd.cs.shop.JSOperator;
import umd.cs.shop.JSPlan;
import umd.cs.shop.JSPlanningDomain;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSState;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTasks;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSState_ESTest extends JSState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      jSPlan0.setName(" Goal matches atom: ");
      jSState0.addAll((Collection) jSPlan0);
      jSPlan0.add((Object) jSState0);
      JSState jSState1 = jSState0.apply(jSPlan0);
      JSState jSState2 = jSState1.apply(jSPlan0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSState0.addElements(jSPlan0);
      assertNotSame(jSState0, jSState1);
      
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      jSState1.satisfiesAll(jSState2, jSSubstitution0, jSListAxioms0);
      JSState jSState3 = jSState2.apply(jSPlan0);
      JSListSubstitution jSListSubstitution0 = jSState0.satisfiesAll(jSState2, jSSubstitution0, jSListAxioms0);
      assertEquals(1, jSListSubstitution0.size());
      
      JSPlan jSPlan1 = new JSPlan();
      JSTasks jSTasks0 = jSPlan1.standarizerTasks();
      JSSubstitution jSSubstitution1 = jSState3.satisfies(jSTasks0, jSSubstitution0, jSListAxioms0);
      assertEquals(0, jSSubstitution1.capacity());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSState jSState0 = null;
      try {
        jSState0 = new JSState(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSListLogicalAtoms", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JSState jSState0 = new JSState();
      jSState0.satisfiesTAm((JSPredicateForm) null, (JSSubstitution) null);
      Predicate.isEqual((Object) null);
      JSListLogicalAtoms jSListLogicalAtoms0 = jSState0.standarizerListLogicalAtoms();
      assertTrue(jSListLogicalAtoms0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JSState jSState0 = new JSState();
      jSState0.addElement((Object) null);
      jSState0.trimToSize();
      JSSubstitution jSSubstitution0 = null;
      // Undeclared exception!
      try { 
        jSState0.satisfiesTAm((JSPredicateForm) null, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSState", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      jSPlan0.setName(" Goal matches atom: ");
      jSState0.addAll((Collection) jSPlan0);
      jSPlan0.add((Object) jSState0);
      SystemInUtil.addInputLine(" Goal matches atom: ");
      jSState0.addElementsToState(jSPlan0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPlan0.applySubstitutionTasks(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSState cannot be cast to umd.cs.shop.JSTaskAtom
         //
         verifyException("umd.cs.shop.JSTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      jSState0.addAll((Collection) jSPlan0);
      jSPlan0.add((Object) jSState0);
      SystemInUtil.addInputLine(" Goal matches atom: ");
      jSState0.addElementsToState(jSPlan0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPlan0.applySubstitutionTasks(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSState cannot be cast to umd.cs.shop.JSTaskAtom
         //
         verifyException("umd.cs.shop.JSTasks", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPredicateForm jSPredicateForm0 = null;
      jSState0.trimToSize();
      JSSubstitution jSSubstitution0 = null;
      jSState0.satisfiesTAm((JSPredicateForm) null, (JSSubstitution) null);
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSJshopVars.flagLevel = 15;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSListSubstitution jSListSubstitution0 = jSState0.satisfiesTAm(jSPredicateForm0, (JSSubstitution) null);
      assertEquals(10, jSListSubstitution0.capacity());
  }
}
