/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 12:17:57 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("6Ekd", object0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.keys();
      jSONObject0.toString(414, 414);
      boolean boolean0 = jSONObject1.isNull("6Ekd");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      Double double1 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double1, stringArray0);
      String string0 = "-,Ub#J>0>D0";
      try { 
        jSONObject0.getLong("-,Ub#J>0>D0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-,Ub#J>0>D0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "{uk=<`a<kS!!K'^Oapp";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{uk=<`a<kS!!K'^Oapp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 19 of {uk=<`a<kS!!K'^Oapp
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "{GN-hPMo:Z;C\\S";
      JSONTokener jSONTokener0 = new JSONTokener("{GN-hPMo:Z;CS");
      jSONTokener0.syntaxError("{GN-hPMo:Z;CS");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 14 of {GN-hPMo:Z;CS
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isparseShort", 0.0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      String string0 = jSONObject1.toString();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000002\":java.lang.Double@0000000003}");
      String string1 = jSONObject2.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      jSONObject1.optBoolean("", true);
      String string2 = JSONObject.quote((String) null);
      String string3 = jSONObject0.toString(1, 2019);
      String string4 = jSONObject1.toString(1, 1463);
      assertTrue(string4.equals((Object)string3));
      
      String string5 = JSONObject.quote("{\"java.lang.String@0000000002\": java.lang.Double@0000000003}");
      assertFalse(string5.equals((Object)string2));
      
      String string6 = JSONObject.doubleToString(1.0);
      assertEquals("1", string6);
      
      jSONObject2.length();
      double double0 = jSONObject2.optDouble("rev", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Float float0 = new Float((-1477.091739));
      Float.min(0.0F, (-691.349F));
      Float.sum((-691.349F), (-691.349F));
      Float.sum((-641.0501F), 0.0F);
      Float.max(0.0F, 0.0F);
      Float.min((-691.349F), (-691.349F));
      Float.max(0.0F, (-641.0501F));
      Float.min((-641.0501F), 2539.7F);
      Float.min((-4160.75F), (-691.349F));
      Float.isFinite((-641.0501F));
      Float.sum((-691.349F), 0.0F);
      Float.max((-691.349F), (-691.349F));
      Float.min((-691.349F), 0.0F);
      JSONObject.testValidity(float0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      boolean boolean0 = jSONObject0.isNull("isformat");
      assertEquals(8, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("DMm|gozexNooys^y=@n");
      JSONObject jSONObject1 = jSONObject0.append("lA\"{^#NX$ev", "lA\"{^#NX$ev");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('\'');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "lA\"{^#NX$ev");
      Writer writer0 = jSONObject1.write(stringWriter2);
      jSONObject0.write(writer0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.has("getsum");
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      jSONObject0.put("huLqyG", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.append("ka\"UR9", jSONObject1);
      jSONObject0.optDouble("getsum", 0.0);
      jSONObject0.getString("ka\"UR9");
      jSONObject2.optJSONArray("ka\"UR9");
      String string0 = "<cu:qur~~!r6aTR5^)";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("<cu:qur~~!r6aTR5^)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of <cu:qur~~!r6aTR5^)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-3));
      String[] stringArray0 = new String[1];
      String string0 = "\"\"";
      stringArray0[0] = "\"\"";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      String string1 = "";
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('2');
      stringWriter1.append((CharSequence) "\"\"");
      jSONObject0.toString();
      jSONObject1.write(stringWriter1);
      jSONObject1.toString((int) (byte) (-3), (int) (byte) (-3));
      Byte byte1 = new Byte((byte)7);
      try { 
        jSONObject0.put((String) null, (Object) byte1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)91);
      Short.toUnsignedLong((short)91);
      Short.compare((short)12, (short)10);
      String string0 = JSONObject.valueToString(short0);
      Float float0 = new Float(2287.894251286989);
      Float.sum(0.0F, 0.0F);
      hashMap0.put(jSONObject0, float0);
      Byte byte0 = new Byte((byte)61);
      HashMap<JSONObject, Float> hashMap1 = new HashMap<JSONObject, Float>();
      Float float1 = new Float((double) (short)10);
      hashMap1.put(jSONObject0, float1);
      hashMap0.putAll(hashMap1);
      JSONObject jSONObject1 = jSONObject0.append("k", byte0);
      jSONObject1.getJSONArray("k");
      JSONObject jSONObject2 = jSONObject1.put("ha", (int) (byte)61);
      jSONObject2.optDouble("java.lang.Short@0000000002");
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject jSONObject3 = jSONObject1.putOpt("k", jSONArray0);
      String string1 = jSONObject3.toString((int) (short)12, (int) (short)91);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "/y{f:u^a'?{o;b";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("/y{f:u^a'?{o;b", (Collection) linkedList0);
      linkedList0.add((Object) jSONObject1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((Object) linkedList0);
      jSONArray0.toString();
      jSONObject1.toJSONArray(jSONArray0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.put("/y{f:u^a'?{o;b", true);
      Integer integer0 = new Integer((-1198));
      try { 
        Integer.parseUnsignedInt("/y{f:u^a'?{o;b");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/y{f:u^a'?{o;b\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Short short0 = new Short((short)35);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] not found.";
      stringArray0[1] = "";
      stringArray0[2] = "getwait";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      String string0 = "iswait";
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("iswait", (Collection) linkedList0);
      jSONObject1.length();
      JSONObject.valueToString(linkedList0, 39, 39);
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>(55);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("1fU?~'r0it\"_SG", (Map) hashMap0);
      jSONObject0.optInt("1fU?~'r0it\"_SG", 55);
      Byte byte0 = new Byte((byte) (-125));
      hashMap0.put((Integer) null, byte0);
      jSONObject0.optBoolean("1fU?~'r0it\"_SG", true);
      JSONObject.doubleToString(55);
      JSONObject jSONObject2 = jSONObject0.optJSONObject("1fU?~'r0it\"_SG");
      assertNotSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isparseShort", 0.0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      jSONObject1.toString();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject2 = jSONObject1.accumulate("", boolean0);
      jSONObject1.optBoolean("", true);
      JSONObject.quote((String) null);
      jSONObject0.toString(1, 2019);
      String string0 = jSONObject1.toString(1, 1458);
      JSONObject.quote(string0);
      JSONObject.doubleToString(1.0);
      jSONObject2.length();
      double double0 = jSONObject2.optDouble("rev", 0.0);
      assertEquals(2, jSONObject1.length());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("AGN0Het;X7mi=x#!`", false);
      JSONObject jSONObject2 = jSONObject1.put("AGN0Het;X7mi=x#!`", (Object) jSONObject0);
      Byte byte0 = new Byte((byte)126);
      JSONObject jSONObject3 = jSONObject2.put("rNp3!i^Qp\"cf", (Object) byte0);
      jSONObject3.getJSONObject("AGN0Het;X7mi=x#!`");
      try { 
        jSONObject1.getLong("AGN0Het;X7mi=x#!`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"AGN0Het;X7mi=x#!`\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[2];
      JSONObject.valueToString(hashMap0, (-10384350), (-28829259));
      String string0 = "null";
      JSONObject jSONObject1 = jSONObject0.put("getvalueOf", (long) (-28829259));
      jSONObject1.optDouble("{}");
      jSONObject0.optDouble((String) null);
      stringArray0[0] = "null";
      stringArray0[1] = "null";
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject2.optLong("null");
      hashMap0.entrySet();
      jSONObject0.remove("null");
      jSONObject2.optBoolean("null", false);
      try { 
        jSONObject0.getBoolean("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "{}";
      JSONObject jSONObject0 = new JSONObject("{}");
      String string1 = null;
      long long0 = 0L;
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      hashMap0.putIfAbsent("A JSONObject text must begin with '{'", (Long) null);
      try { 
        jSONObject0.getDouble("A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONObject text must begin with '{'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A JSONArray text must start with '['";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = new JSONObject();
      Float float0 = new Float((-3091.24F));
      Float.isFinite((-3091.24F));
      linkedList0.add((Object) float0);
      linkedList0.add((Object) jSONObject1);
      jSONObject0.put("A JSONArray text must start with '['", (Collection) linkedList0);
      jSONObject0.toString();
      JSONObject jSONObject2 = jSONObject0.accumulate("A JSONArray text must start with '['", "A JSONArray text must start with '['");
      jSONObject2.optString("A JSONArray text must start with '['", "isfloatToRawIntBits");
      JSONObject jSONObject3 = jSONObject0.put("A JSONArray text must start with '['", true);
      jSONObject3.optDouble("{", 0.0);
      try { 
        jSONObject3.getString("no");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"no\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optString("A JSONArray text must start with '['", "A JSONArray text must start with '['");
      Double.isFinite(83.7);
      String string0 = "null";
      jSONObject0.optLong("null");
      String string1 = null;
      jSONObject0.accumulate("A JSONArray text must start with '['", (Object) null);
      Double double1 = new Double(Double.NaN);
      Double.min(Double.NaN, 83.7);
      try { 
        JSONObject.valueToString(double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not a number.";
      Boolean boolean0 = new Boolean("] is not a number.");
      jSONObject0.accumulate("\f", boolean0);
      Double double0 = new Double(0.0);
      JSONObject.valueToString(double0);
      JSONObject.valueToString(boolean0, 1844, (-604));
      JSONObject jSONObject1 = jSONObject0.put("!^e,Hs**2#VBAyE", (-3584));
      jSONObject0.getDouble("!^e,Hs**2#VBAyE");
      jSONObject1.toString((-3584), (-3584));
      String string1 = "] not found.";
      try { 
        jSONObject0.get("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "@9O^z");
      jSONObject0.putOpt("a`a[Dp;@V87A{T_", "@9O^z");
      JSONObject jSONObject1 = jSONObject0.put("@9O^z", (-836.4));
      jSONObject1.optDouble("@9O^z");
      jSONObject1.get("@9O^z");
      jSONObject0.optBoolean("@9O^z");
      boolean boolean0 = jSONObject0.isNull("@9O^z");
      assertEquals(5, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Float float0 = new Float((-1.0));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "\\u";
      float float1 = 1927.57F;
      Float.max(0.0F, 1927.57F);
      Float.max(0.0F, 0.0F);
      Float float2 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.accumulate(string0, float2);
      jSONObject0.getLong(string0);
      String string1 = ")6?+C9ly\"";
      jSONObject0.has(")6?+C9ly\"");
      jSONObject0.isNull(")6?+C9ly\"");
      jSONObject1.put(")6?+C9ly\"", false);
      jSONObject1.put("!g}G", true);
      Float.isFinite(4742.837F);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of is
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble(".", (-3488.8803));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("toJ", (Object) hashMap0);
      JSONObject jSONObject2 = jSONObject0.put(".", (Map) hashMap0);
      Integer integer0 = new Integer((-1860));
      Integer.getInteger("toJ");
      hashMap0.put(".", integer0);
      JSONObject jSONObject3 = jSONObject0.putOpt((String) null, hashMap0);
      Integer integer1 = new Integer((-1860));
      Integer integer2 = new Integer(2900);
      Integer.getInteger("BYb;0Z~IDLb}*9gf", integer2);
      hashMap0.put("&/T", integer1);
      Short short0 = Short.valueOf((short)128);
      JSONObject.numberToString(short0);
      jSONObject0.names();
      jSONObject3.optLong(" of ");
      jSONObject1.optJSONArray((String) null);
      jSONObject1.optBoolean(" of ", true);
      jSONObject0.optLong("'", (-2300L));
      JSONObject jSONObject4 = jSONObject0.put("27biE%#", (Object) jSONObject2);
      assertSame(jSONObject4, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-119));
      JSONObject.getNames((Object) byte0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "=]0pPqLxON";
      Byte.toUnsignedInt((byte)11);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("j'mXQ=,r", jSONArray0);
      jSONObject1.keys();
      jSONObject0.optBoolean("=]0pPqLxON");
      JSONObject jSONObject2 = jSONObject0.put("~q", 1L);
      String string1 = null;
      try { 
        jSONObject2.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "R;dC9j|>)F.k'}^Ka";
      stringArray0[1] = "VbMf(CxifCf5E(1{mV";
      stringArray0[2] = "PFdgj-oBnL1$fdMk5I";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("grGBOkWG-}", object0);
      JSONObject jSONObject2 = jSONObject1.append("VbMf(CxifCf5E(1{mV", "VbMf(CxifCf5E(1{mV");
      jSONObject0.put("68@^", false);
      jSONObject0.toString((-3147), 34);
      jSONObject0.append("VbMf(CxifCf5E(1{mV", "VbMf(CxifCf5E(1{mV");
      jSONObject0.optLong("Null key.");
      jSONObject2.optJSONArray("Null key.");
      String string0 = "istoString";
      Long long0 = new Long(34);
      // Undeclared exception!
      try { 
        Long.remainderUnsigned((-3147), 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      Long long0 = new Long(428L);
      hashMap0.put(float0, long0);
      JSONObject jSONObject1 = jSONObject0.put("\"n", 428L);
      try { 
        jSONObject1.getJSONArray("\"n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"n\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('C');
      JSONObject.valueToString((Object) null);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "null", 2, 640);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "/y{f:u^a'?{o;b";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("/y{f:u^a'?{o;b", (Collection) linkedList0);
      linkedList0.add((Object) jSONObject1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.toString();
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject0.put("/y{f:u^a'?{o;b", true);
      Integer integer0 = new Integer((-1198));
      try { 
        Integer.parseUnsignedInt("/y{f:u^a'?{o;b");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/y{f:u^a'?{o;b\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "true";
      stringArray0[1] = "MRk";
      stringArray0[2] = "isjoin";
      JSONObject jSONObject1 = jSONObject0.put("MRk", (Object) "MRk");
      jSONObject1.names();
      stringArray0[3] = "isreplace";
      String string0 = "";
      try { 
        jSONObject0.getBoolean("MRk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"MRk\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      
      String string1 = JSONObject.doubleToString(0.0);
      assertEquals("0", string1);
      
      String string2 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string2);
      
      jSONObject0.toString(1, 1);
      jSONObject1.optDouble("java.lang.Long@0000000003.", (double) 1);
      jSONObject1.optJSONObject("9*z|R7s5C_)68x");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Long long0 = new Long((-1126L));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "zW\"c";
      stringArray0[1] = "issum";
      Long.getLong("\f", (-1126L));
      Long.sum((-1126L), (-1126L));
      stringArray0[2] = "Gkg]5!T=";
      Long.min(0L, 0L);
      stringArray0[3] = "'";
      stringArray0[4] = "getreverse";
      stringArray0[5] = "MMg^I^5B1lV<]81bx8C";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject1 = jSONObject0.put("MMg^I^5B1lV<]81bx8C", (Map) hashMap0);
      jSONObject0.optDouble("nLoz3$0WN-D%wI9%4A");
      jSONObject1.keys();
      jSONObject0.optString("/A");
      JSONObject.doubleToString(Double.NaN);
      JSONObject.doubleToString((-1126L));
      jSONObject1.optInt((String) null, 2630);
      Object object0 = jSONObject0.opt("|S- vFSIRM");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gettoString", (-2));
      String string0 = null;
      jSONObject0.optInt((String) null);
      JSONObject jSONObject2 = jSONObject1.accumulate("gettoString", "gettoString");
      String string1 = "e('sN)`df8yW[$@?";
      jSONObject1.put("e('sN)`df8yW[$@?", 2391);
      jSONObject2.toString();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject2.toJSONArray(jSONArray0);
      JSONObject.getNames((Object) "e('sN)`df8yW[$@?");
      jSONObject2.optDouble((String) null, (double) (-2));
      jSONObject2.length();
      String string2 = "we4<\"c4|7Z|5HHR_r1[";
      try { 
        jSONObject1.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Double double0 = new Double((-2837.85));
      Double.max((-2837.85), (-2837.85));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "`sWx%c~`.*Z7`Y!PoI";
      stringArray0[1] = "true";
      stringArray0[2] = "y6";
      stringArray0[3] = "false";
      Double.max((-2837.85), (-1.0));
      Double.isFinite((-1389.6760244888));
      stringArray0[4] = "$x&0|.j2";
      stringArray0[5] = "do";
      stringArray0[6] = "Lxr.x[Zl";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.length();
      double double1 = jSONObject0.optDouble("Qi#;+&QT/eZ%?(@t2", (-2837.85));
      assertEquals((-2837.85), double1, 0.01);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray1);
      
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals((double)double0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "isshortValue";
      Boolean boolean0 = new Boolean("isshortValue");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("isshortValue", 0.0);
      jSONObject1.optDouble("isshortValue");
      String string1 = "pa";
      try { 
        jSONObject0.getJSONObject("pa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pa\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = JSONObject.quote("LWio");
      assertEquals("\"LWio\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"LWio\"");
      String string1 = jSONObject0.toString();
      assertNotNull(string1);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("\"EX", (Object) null);
      jSONObject1.names();
      jSONObject1.append("S=B]HnIWx]e{", "\"EX");
      JSONObject jSONObject2 = jSONObject0.put("0.00", 735L);
      try { 
        jSONObject2.getJSONObject("\"EX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"EX\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      String string0 = "[";
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject0.put("[", (Collection) linkedList0);
      jSONObject0.optLong("r|1XGV vusMg<Gr", (-3504L));
      JSONObject jSONObject1 = jSONObject0.accumulate("r|1XGV vusMg<Gr", object0);
      JSONObject.getNames(jSONObject0);
      JSONObject.quote("r|1XGV vusMg<Gr");
      jSONObject0.optString("r|1XGV vusMg<Gr");
      JSONObject jSONObject2 = jSONObject1.put("java.lang.Object@0000000006", true);
      try { 
        jSONObject2.append("java.lang.Object@0000000006", "java.lang.Object@0000000006");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.lang.Object@0000000006] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = "zD~";
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("zD~", unaryOperator0);
      Long long0 = new Long(584L);
      hashMap0.getOrDefault("zD~", long0);
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("getvalueOf", object0);
      JSONObject jSONObject1 = jSONObject0.put("zD~", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.accumulate("zD~", "zD~");
      jSONObject2.optInt("zD~");
      try { 
        jSONObject0.get("isintern");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isintern\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getLong("isparseDouble");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isparseDouble\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject.testValidity((Object) null);
      String string0 = "{3ti$SA";
      JSONTokener jSONTokener0 = new JSONTokener("{3ti$SA");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {3ti$SA
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt(" of ", " of ");
      JSONObject.getNames(jSONObject1);
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getString(" of ");
      Double double0 = new Double((-2122.68));
      jSONObject1.accumulate(" of ", double0);
      String string0 = jSONObject0.optString("iY,7FaR+}#1&cA");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Double double0 = Double.valueOf(0.0);
      JSONObject.valueToString(double0);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2147483645;
      try { 
        jSONArray0.getDouble(2433);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2433] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      String string0 = "[";
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject0.put("[", (Collection) linkedList0);
      jSONObject0.optLong("r|1XGV vusMg<Gr", (-3504L));
      JSONObject jSONObject1 = jSONObject0.accumulate("r|1XGV vusMg<Gr", object0);
      linkedList0.parallelStream();
      JSONObject.getNames(jSONObject0);
      JSONObject.quote("r|1XGV vusMg<Gr");
      jSONObject0.optString("r|1XGV vusMg<Gr");
      JSONObject jSONObject2 = jSONObject1.put(": ", true);
      JSONObject jSONObject3 = jSONObject2.append("java.lang.Object@0000000006", "java.lang.Object@0000000006");
      try { 
        jSONObject3.getJSONArray("-1.00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-1.00\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "spl";
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("spl", 1L);
      JSONObject.doubleToString((-1.0));
      String string1 = "'yIm";
      try { 
        jSONObject1.get(" H)U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" H)U\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ".";
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject1 = jSONObject0.put(".", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("f=fh4||", 243.2451);
      jSONObject1.toString((-1));
      jSONObject2.optInt("f=fh4||", (-1));
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-1), 975);
      JSONTokener jSONTokener0 = new JSONTokener("null");
      jSONTokener0.nextTo('z');
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 4 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(0);
      String string0 = "[";
      Integer integer1 = new Integer(0);
      String string1 = "+>0>W.&V\\Y";
      Integer integer2 = new Integer(0);
      Integer.remainderUnsigned(0, 167);
      Integer.divideUnsigned(48, 48);
      Integer.compareUnsigned((-5), (-5));
      Integer.getInteger("+>0>W.&VY", integer2);
      hashMap0.put(integer1, "#Y]yR@EVhSPd*H*Ngt@");
      hashMap0.put(integer0, "[");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string2 = "";
      jSONObject0.remove("");
      JSONObject.getNames((Object) null);
      try { 
        jSONObject0.getBoolean("#Y]yR@EVhSPd*H*Ngt@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#Y]yR@EVhSPd*H*Ngt@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null, 836L);
      jSONObject0.optBoolean("<heel.json.JSONArray");
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 48;
      JSONObject.valueToString(jSONObject0, 48, 48);
      String string0 = "Au";
      jSONObject0.optInt("Au");
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.getInt("Au");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Au\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(123);
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = '9';
      charArray0[5] = '9';
      stringWriter0.write(charArray0);
      jSONObject0.optInt("to", 2);
      stringWriter0.append('9');
      jSONObject0.write(stringWriter0);
      assertEquals("9999999{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toJSONArray((JSONArray) null);
      String[] stringArray0 = new String[4];
      Double.min(Double.NaN, Double.NaN);
      stringArray0[0] = "ishashCode";
      stringArray0[1] = "Z";
      stringArray0[2] = "/`]V%_&]K2CS[9@";
      Double.isFinite(684.993);
      stringArray0[3] = "ismax";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.toString(9);
      jSONObject0.optDouble("Z", Double.NaN);
      jSONObject1.remove("Z");
      jSONObject1.toString((-37), (-37));
      jSONObject0.optDouble("do");
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject2 = jSONObject0.put("/`]V%_&]K2CS[9@", (Map) hashMap0);
      JSONObject jSONObject3 = jSONObject2.put("&g}H[r<`6<@1*4d", false);
      jSONObject1.optString(" at character ");
      jSONObject3.optJSONObject(" at character ");
      jSONObject1.optLong("do");
      jSONObject0.put("do", 0L);
      try { 
        jSONObject3.getLong("/`]V%_&]K2CS[9@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/`]V%_&]K2CS[9@\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Short short0 = new Short((short) (-3429));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Expected a ',' or ']'";
      stringArray0[1] = "true";
      stringArray0[2] = "gettoUnsignedString";
      stringArray0[3] = "u\"ZpId\"JWWh";
      stringArray0[4] = "-3xJ(_33PTZF";
      stringArray0[5] = "false";
      stringArray0[6] = "aap[]#t2WV\"v";
      stringArray0[7] = "FC<,R/f'";
      stringArray0[8] = "tO5/";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0, 44, 3416);
      Short.compare((short)12, (short) (-3429));
      StringWriter stringWriter0 = new StringWriter(44);
      jSONObject0.write(stringWriter0);
      JSONObject jSONObject1 = jSONObject0.append("isdecode", "gettoUnsignedString");
      jSONObject0.toString(44);
      JSONObject jSONObject2 = jSONObject1.put("false", (long) 3441);
      jSONObject1.put("'", (-4079));
      jSONObject0.optBoolean("JSONArray[");
      String[] stringArray1 = JSONObject.getNames(jSONObject2);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, 836L);
      assertEquals(836L, long0);
      
      boolean boolean0 = jSONObject0.optBoolean("wheel.json.JSONArray");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 125;
      Integer integer0 = Integer.valueOf(125);
      JSONObject jSONObject0 = new JSONObject(integer0);
      String string0 = "WCNAWi-2DL=";
      jSONObject0.optString("WCNAWi-2DL=");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "wheel.json.JSONObject";
      stringArray0[5] = null;
      stringArray0[6] = "WCNAWi-2DL=";
      stringArray0[7] = null;
      JSONObject jSONObject1 = new JSONObject("", stringArray0);
      Short short0 = new Short((short) (-500));
      jSONObject1.putOpt((String) null, short0);
      try { 
        jSONObject0.accumulate((String) null, jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      byte byte0 = (byte)102;
      Byte byte1 = new Byte((byte)102);
      Double double0 = new Double(2150.21444449139);
      hashMap0.put(byte1, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      jSONObject0.put("-585.00902722410", object0);
      JSONObject jSONObject1 = jSONObject0.put("", (long) (byte)102);
      String string0 = null;
      try { 
        jSONObject1.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "pv-Ld}(u@xbsL4:dHWS";
      jSONObject0.optDouble("pv-Ld}(u@xbsL4:dHWS");
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      String string0 = "+>0>W.&V\\Y";
      Integer integer2 = new Integer(0);
      Integer.remainderUnsigned(0, 167);
      Integer.divideUnsigned(48, 48);
      Integer.compareUnsigned(0, 0);
      Integer.getInteger("+>0>W.&VY", integer2);
      hashMap0.put(integer1, "#Y]yR@EVhSPd*H*Ngt@");
      hashMap0.put(integer0, "[");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("");
      Object object0 = new Object();
      JSONObject.getNames(object0);
      try { 
        jSONObject0.getBoolean("#Y]yR@EVhSPd*H*Ngt@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#Y]yR@EVhSPd*H*Ngt@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONObject.quote("");
      Float float0 = new Float((-1.0F));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "\"\"";
      stringArray0[3] = "^LF2U/)";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = jSONObject1.opt("M4C@8EB.7b>$/");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "wheel.json.JSONTokener";
      stringArray0[1] = "";
      stringArray0[2] = "LT~*u>s,[$&7GHw3TD";
      stringArray0[3] = "";
      stringArray0[4] = "Bad value from toJSONString: ";
      stringArray0[5] = "6@26(x,|";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Float float0 = new Float((-2105.37923316));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "JSONObject[";
      stringArray0[2] = "0";
      stringArray0[3] = "";
      stringArray0[4] = "[]";
      stringArray0[5] = "Expected '";
      stringArray0[6] = "true";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.optBoolean("");
      jSONObject0.put("JSONObject[", true);
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject1 = jSONObject0.put("X4!_/r]~", (Collection) linkedList0);
      Long long0 = new Long(1L);
      Long.max((-1978L), (-1978L));
      linkedList0.add(long0);
      JSONObject jSONObject2 = jSONObject1.put("X4!_/r]~", false);
      JSONObject.doubleToString(0.0);
      Object object0 = new Object();
      JSONObject jSONObject3 = jSONObject0.append("swkt W/WLb", object0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      JSONObject.quote("log");
      jSONObject3.optBoolean("X4!_/r]~");
      Iterator iterator0 = jSONObject3.keys();
      JSONObject jSONObject4 = jSONObject2.accumulate("log", iterator0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, jSONObject4.length());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Long long0 = new Long((-2068L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.put("K26^vlI0to=3^{", (double) (-2068L));
      String string0 = null;
      jSONObject0.opt((String) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        linkedList0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "kV4UQ'}e#y9{q";
      JSONObject jSONObject0 = new JSONObject((Object) "kV4UQ'}e#y9{q");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      Double.isFinite(Double.NaN);
      linkedList0.add(double0);
      linkedList0.poll();
      JSONObject jSONObject1 = jSONObject0.put("kV4UQ'}e#y9{q", (Collection) linkedList0);
      jSONObject1.getString("kV4UQ'}e#y9{q");
      String string1 = "F";
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      jSONObject2.names();
      jSONObject2.toString();
      JSONObject jSONObject3 = jSONObject1.append("F", jSONObject2);
      jSONObject0.optBoolean("kV4UQ'}e#y9{q");
      String string2 = "islongBitsToDouble";
      int int0 = (-3133);
      jSONObject3.put("wheel.json.JSONArray@0000000035", (long) (-3133));
      jSONObject0.toString((-3133));
      try { 
        jSONObject0.getInt("islongBitsToDouble");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"islongBitsToDouble\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONObject.doubleToString((-1079.33861));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt("-1079.33861");
      int int0 = 48;
      JSONObject.valueToString((Object) null, 48, 48);
      String string0 = "] not found.";
      jSONObject0.optDouble("] not found.", 0.0);
      jSONObject0.toString(48, 48);
      jSONObject0.optBoolean("toU");
      jSONObject0.optDouble("-1079.33861");
      JSONObject.getNames(jSONObject0);
      String string1 = "_Ya(g;=dl05>";
      try { 
        jSONObject0.getJSONObject("P<S_NAU)CUKJ/WylBJ|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"P<S_NAU)CUKJ/WylBJ|\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("A JSONArray text must start with '['", stringArray0);
      long long0 = 0L;
      int int0 = (-2389);
      jSONObject0.toString((-2389), (-30756608));
      JSONObject jSONObject1 = jSONObject0.put("getsum", 0L);
      int int1 = 120;
      jSONObject1.toString(120, 120);
      String string0 = "\\e:-b+NMp>Iy^;q!";
      jSONObject0.remove("e:-b+NMp>Iy^;q!");
      try { 
        jSONObject1.getString("e:-b+NMp>Iy^;q!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"e:-b+NMp>Iy^;q!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "a\\ZPB2XXeSRZ/'MY";
      JSONTokener jSONTokener0 = new JSONTokener("aZPB2XXeSRZ/'MY");
      jSONTokener0.nextString('X');
      jSONTokener0.skipTo('X');
      // Undeclared exception!
      try { 
        jSONTokener0.next((-36763560));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expected '";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string1 = "\"\"";
      jSONObject0.remove("\"\"");
      linkedList0.add("/7vLH");
      JSONObject jSONObject1 = jSONObject0.put("Expected '", (Collection) linkedList0);
      JSONObject.getNames(jSONObject0);
      int int0 = (-20652918);
      jSONObject1.toString((-20652918));
      jSONObject0.optDouble("Xz,l]=|bNdD>'");
      JSONObject.getNames(jSONObject1);
      linkedList0.offerLast("\"\"");
      jSONObject1.optBoolean("\"\"", false);
      Float float0 = new Float(0.0F);
      JSONObject.numberToString(float0);
      String string2 = ",:]}/\\\"[{;=#";
      JSONObject jSONObject2 = jSONObject0.append(",:]}/\"[{;=#", "{\"java.lang.String@0000000003\": [\"java.lang.String@0000000004\"]}");
      try { 
        jSONObject2.getJSONObject(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Float float0 = new Float((-1.0));
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.max(0.0F, 1927.57F);
      Float.max(0.0F, 0.0F);
      Float float1 = new Float(0.0F);
      String string0 = ")6?+C9ly\"";
      jSONObject0.has(")6?+C9ly\"");
      jSONObject0.isNull(")6?+C9ly\"");
      Float.isFinite(4742.837F);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of is
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = "7[)?K^";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("7[)?K^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 7[)?K^
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
