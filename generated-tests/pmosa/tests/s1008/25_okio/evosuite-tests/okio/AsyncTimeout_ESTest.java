/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 11:29:45 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import java.util.zip.Inflater;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(true);
      asyncTimeout0.exit(false);
      asyncTimeout0.clearTimeout();
      asyncTimeout0.exit();
      asyncTimeout0.timedOut();
      asyncTimeout0.timedOut();
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      Source source0 = asyncTimeout0.source(hashingSource0);
      Source source1 = asyncTimeout0.source(source0);
      assertNotSame(source0, source1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException("-|g\";v+) ajiAZh3");
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException0);
      IOException iOException1 = asyncTimeout0.newTimeoutException(iOException0);
      assertEquals("java.io.InterruptedIOException: timeout", iOException1.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      asyncTimeout0.newTimeoutException(mockIOException0);
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.clearDeadline();
      asyncTimeout1.enter();
      mockIOException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      mockIOException1.getSuppressed();
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException1);
      asyncTimeout0.newTimeoutException(iOException0);
      asyncTimeout0.enter();
      asyncTimeout0.enter();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      buffer0.writeInt((-1094));
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer1 = realBufferedSource0.buffer;
      asyncTimeout0.source(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      asyncTimeout0.source(buffer2);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("z=j89URmzTo%", "z=j89URmzTo%", "z=j89URmzTo%", 1848);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("z=j89URmzTo%", "z=j89URmzTo%", "z=j89URmzTo%", 1848);
      stackTraceElementArray0[1] = stackTraceElement1;
      mockIOException0.setStackTrace(stackTraceElementArray0);
      asyncTimeout0.newTimeoutException(iOException0);
      asyncTimeout0.newTimeoutException(mockIOException1);
      asyncTimeout0.sink(realBufferedSource0.buffer);
      asyncTimeout0.timedOut();
      asyncTimeout0.exit(true);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      IOException iOException0 = null;
      asyncTimeout0.newTimeoutException((IOException) null);
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.enter();
      MockIOException mockIOException0 = new MockIOException();
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout1.exit((IOException) mockIOException0);
      asyncTimeout0.newTimeoutException(interruptedIOException0);
      asyncTimeout0.newTimeoutException(mockIOException0);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      buffer_UnsafeCursor0.resizeBuffer(60000000000L);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.enter();
      try { 
        asyncTimeout0.exit(true);
        fail("Expecting exception: InterruptedIOException");
      
      } catch(InterruptedIOException e) {
         //
         // timeout
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      AsyncTimeout.head = null;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      AsyncTimeout asyncTimeout2 = (AsyncTimeout)asyncTimeout0.deadline(524L, timeUnit0);
      asyncTimeout0.exit(true);
      asyncTimeout2.enter();
      asyncTimeout0.clearDeadline();
      asyncTimeout2.timedOut();
      Pipe pipe0 = new Pipe(524L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.emitCompleteSegments();
      asyncTimeout0.sink(realBufferedSink1);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime(1271L);
      asyncTimeout0.enter();
      AsyncTimeout asyncTimeout1 = AsyncTimeout.awaitTimeout();
      asyncTimeout1.exit();
      MockIOException mockIOException0 = new MockIOException();
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      IOException iOException1 = asyncTimeout1.newTimeoutException(iOException0);
      assertNotSame(iOException0, iOException1);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.enter();
      asyncTimeout1.exit(false);
      assertTrue(asyncTimeout1.hasDeadline());
  }
}
