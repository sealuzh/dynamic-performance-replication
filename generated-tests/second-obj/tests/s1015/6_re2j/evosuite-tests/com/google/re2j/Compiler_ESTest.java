/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:48:59 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Compiler;
import com.google.re2j.Prog;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Prog prog0 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // regexp: unhandled case in compile
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Prog prog0 = Compiler.compileRegexp(regexp1);
      assertNotNull(prog0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Prog prog0 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Prog prog0 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Prog prog0 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Prog prog0 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Prog prog0 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      regexp0.op = regexp_Op1;
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[1] = regexp0;
      regexp0.subs = regexpArray0;
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      Compiler.compileRegexp(regexp0);
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp regexp2 = new Regexp(regexp0.op);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.reinit();
      Compiler.compileRegexp(regexp0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.flags = 880;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      Compiler.compileRegexp(regexp1);
      Regexp regexp2 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[8];
      intArray0[0] = 4923;
      intArray0[1] = 6211;
      intArray0[2] = 3102;
      intArray0[3] = (-703);
      intArray0[4] = (-42280);
      intArray0[5] = 1253;
      intArray0[6] = 24;
      intArray0[7] = 30;
      regexp0.runes = intArray0;
      Prog prog0 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      regexp0.op = regexp_Op1;
      int[] intArray0 = new int[1];
      regexp0.runes = intArray0;
      regexp0.max = 2;
      Regexp.Op regexp_Op2 = Regexp.Op.LITERAL;
      Regexp regexp1 = new Regexp(regexp_Op2);
      Regexp.Op regexp_Op3 = Regexp.Op.LITERAL;
      Regexp regexp2 = new Regexp(regexp_Op3);
      Regexp regexp3 = new Regexp(regexp_Op3);
      Compiler.compileRegexp(regexp0);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      Prog prog0 = Compiler.compileRegexp(regexp0);
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp1.min = 11;
      regexp2.flags = 880;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp1;
      regexp2.subs = regexpArray0;
      Compiler.compileRegexp(regexp2);
      Regexp regexp3 = new Regexp(regexp2);
      regexp1.max = 1114111;
      Compiler.compileRegexp(regexp2);
      Compiler.compileRegexp(regexp0);
      regexp2.name = "Javanese";
      Regexp regexp4 = new Regexp(regexp1);
      Compiler.compileRegexp(regexp3);
      Regexp regexp5 = new Regexp(regexp3);
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      regexp5.op = regexp_Op1;
      Regexp regexp6 = new Regexp(regexp_Op0);
      Compiler.compileRegexp(regexp2);
      Regexp regexp7 = new Regexp(regexp_Op1);
      Compiler.compileRegexp(regexp5);
      Prog prog1 = Compiler.compileRegexp(regexp2);
      assertNotSame(prog1, prog0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp2.reinit();
      Regexp regexp3 = new Regexp(regexp0);
      int[] intArray0 = new int[2];
      intArray0[0] = 14;
      intArray0[1] = 4293;
      regexp3.runes = intArray0;
      Regexp regexp4 = new Regexp(regexp_Op0);
      Compiler.compileRegexp(regexp3);
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp.Op regexp_Op2 = Regexp.Op.NO_MATCH;
      Regexp regexp5 = new Regexp(regexp_Op2);
      Regexp regexp6 = new Regexp(regexp_Op1);
      Regexp regexp7 = new Regexp(regexp1);
      Regexp regexp8 = new Regexp(regexp0);
      Regexp regexp9 = new Regexp(regexp8);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[7];
      intArray0[3] = 1191;
      intArray0[5] = 1191;
      intArray0[6] = 2050;
      regexp0.runes = intArray0;
      regexp0.flags = (-1653);
      regexp0.toString();
      Compiler.compileRegexp(regexp0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.flags = 1191;
      Regexp regexp2 = new Regexp(regexp1);
      Regexp regexp3 = null;
      Regexp regexp4 = null;
      try {
        regexp4 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      regexp1.min = 11;
      regexp2.flags = 11;
      Regexp[] regexpArray0 = new Regexp[16];
      regexpArray0[0] = regexp1;
      regexp2.subs = regexpArray0;
      Compiler.compileRegexp(regexp2);
      Regexp regexp3 = new Regexp(regexp2);
      regexp1.max = 1114065;
      Compiler.compileRegexp(regexp2);
      Regexp regexp4 = new Regexp(regexp1);
      Prog prog0 = Compiler.compileRegexp(regexp3);
      Regexp regexp5 = new Regexp(regexp3);
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      regexp5.op = regexp_Op1;
      Compiler.compileRegexp(regexp5);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp3);
      Regexp regexp6 = new Regexp(regexp_Op1);
      int[] intArray0 = new int[7];
      intArray0[0] = 1114065;
      intArray0[2] = 11;
      intArray0[3] = 1114065;
      intArray0[4] = 11;
      intArray0[5] = 11;
      intArray0[6] = 11;
      regexp2.runes = intArray0;
      Regexp regexp7 = new Regexp(regexp1);
      Prog prog1 = Compiler.compileRegexp(regexp2);
      assertNotSame(prog1, prog0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[3] = regexp2;
      regexp0.reinit();
      regexp1.subs = regexpArray0;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      regexp2.op = regexp_Op1;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexp0.reinit();
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[3] = regexp0;
      regexp1.subs = regexpArray0;
      Regexp regexp3 = new Regexp(regexp_Op0);
      Regexp regexp4 = new Regexp(regexp_Op0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp5 = new Regexp(regexp_Op1);
      regexp1.min = 181;
      Regexp regexp6 = new Regexp(regexp2);
      Compiler.compileRegexp(regexp1);
      Regexp.Op regexp_Op2 = Regexp.Op.CAPTURE;
      Regexp regexp7 = new Regexp(regexp_Op2);
      // Undeclared exception!
      try { 
        regexp3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[2];
      intArray0[1] = 120779;
      regexp0.runes = intArray0;
      regexp0.name = "";
      Compiler.compileRegexp(regexp0);
      int int0 = 1458;
      intArray0[0] = 1458;
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp1 = new Regexp(regexp_Op1);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[2];
      regexp0.runes = intArray0;
      regexp0.name = "";
      Compiler.compileRegexp(regexp0);
      int int0 = 1458;
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp1 = new Regexp(regexp_Op1);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 1096;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[9];
      intArray0[0] = 12;
      intArray0[6] = 2050;
      regexp0.runes = intArray0;
      regexp0.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      regexp0.equals(regexp_Op1);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp_Op1);
      Regexp regexp3 = new Regexp(regexp2);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp1;
      regexp1.toString();
      regexp2.subs = regexpArray0;
      Compiler.compileRegexp(regexp2);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[9];
      intArray0[5] = 0;
      regexp0.runes = intArray0;
      Prog prog0 = Compiler.compileRegexp(regexp0);
      regexp0.equals(prog0);
      String string0 = regexp0.name;
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.cap = (-434);
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp2.name = null;
      Regexp regexp3 = new Regexp(regexp_Op1);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp1;
      regexp2.subs = regexpArray0;
      Compiler.compileRegexp(regexp2);
      Regexp regexp4 = new Regexp(regexp1);
      regexp4.max = 4291;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      int[] intArray0 = new int[4];
      intArray0[0] = (-4009);
      intArray0[1] = (-4009);
      intArray0[2] = (-2);
      regexp0.runes = intArray0;
      regexp0.min = (-4009);
      intArray0[3] = 1222;
      regexp0.runes = intArray0;
      regexp0.name = "Devanagari";
      regexp0.cap = 3307;
      regexpArray0[2] = regexp0;
      regexpArray0[4] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.op = regexp_Op0;
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Prog prog0 = Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertNotSame(prog1, prog0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp[] regexpArray0 = new Regexp[4];
      regexp2.equals((Object) null);
      regexpArray0[0] = regexp1;
      regexp0.subs = regexpArray0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexp0.reinit();
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp2);
      Regexp regexp5 = new Regexp(regexp1);
      regexp3.toString();
      Compiler.compileRegexp(regexp3);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp6 = new Regexp(regexp_Op1);
      Regexp.Op regexp_Op2 = Regexp.Op.PLUS;
      regexp2.min = 181;
      Regexp regexp7 = new Regexp(regexp3);
      regexp7.op = regexp_Op1;
      regexp7.subs = regexpArray0;
      Compiler.compileRegexp(regexp2);
      Regexp regexp8 = new Regexp(regexp_Op2);
      Regexp regexp9 = new Regexp(regexp_Op1);
      regexp8.subs = regexpArray0;
      regexp8.flags = 181;
      Compiler.compileRegexp(regexp9);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op3 = Regexp.Op.PLUS;
      Regexp regexp10 = new Regexp(regexp_Op3);
      Compiler.compileRegexp(regexp3);
      Prog prog0 = Compiler.compileRegexp(regexp8);
      Prog prog1 = Compiler.compileRegexp(regexp5);
      assertNotSame(prog1, prog0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[26];
      intArray0[9] = (-1532);
      regexp0.runes = intArray0;
      regexp0.flags = (-1675);
      regexp0.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      regexp0.toString();
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp regexp2 = new Regexp(regexp0);
      Regexp regexp3 = new Regexp(regexp_Op1);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp2;
      regexp3.subs = regexpArray0;
      Compiler.compileRegexp(regexp0);
      regexp3.flags = (-1675);
      regexp2.max = (-1);
      regexp3.max = 27;
      intArray0[16] = 0;
      Compiler.compileRegexp(regexp3);
      Regexp.Op regexp_Op2 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp4 = new Regexp(regexp_Op2);
      Compiler.compileRegexp(regexp0);
      Object object0 = new Object();
      regexp2.equals(object0);
      Regexp.Op regexp_Op3 = Regexp.Op.NO_MATCH;
      Regexp regexp5 = new Regexp(regexp_Op3);
      Compiler.compileRegexp(regexp4);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }
}
