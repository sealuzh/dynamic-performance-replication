/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 02:28:44 GMT 2018
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.operation.MatrixOperation;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic1DMatrix_ESTest extends Basic1DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Basic1DMatrix.unit(0, 0);
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (-2740.103258491);
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (-2740.103258491);
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (-2740.103258491);
      doubleArray3[5] = (-2740.103258491);
      doubleArray3[6] = (double) 0;
      doubleArray3[7] = (-2740.103258491);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (-2740.103258491);
      doubleArray4[1] = (-2740.103258491);
      doubleArray4[2] = (-2740.103258491);
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (-2740.103258491);
      doubleArray4[5] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = (-2740.103258491);
      doubleArray5[2] = (-2740.103258491);
      doubleArray5[3] = (double) 0;
      doubleArray5[4] = (-2740.103258491);
      doubleArray5[5] = 0.0;
      doubleArray5[6] = (double) 0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (double) 0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (double) 0;
      doubleArray6[3] = (double) 0;
      doubleArray6[4] = (-2740.103258491);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = (-2740.103258491);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 0.0;
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
      try { 
        Basic1DMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 758.8623;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      Basic1DMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.diagonal((-965), (-965));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -965x-965
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-24);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = (-1);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Basic1DMatrix.random((-1), (-1), mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket("+1GsvE^`avnImhem\"AZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.zero(0, 4165);
      basic1DMatrix1.maxInColumn((-2703));
      int int0 = 16;
      // Undeclared exception!
      try { 
        Basic1DMatrix.unit((-1), 16);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 134;
      doubleArray0[1] = (double) 134;
      doubleArray0[2] = (double) 134;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 134;
      doubleArray0[5] = (double) 134;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(134, 0, doubleArray0);
      basic1DMatrix0.columnMajorIterator();
      int int1 = 8;
      int int2 = 10;
      basic1DMatrix0.blank();
      Matrix.from1DArray(1000, 10, doubleArray0);
      basic1DMatrix0.max();
      // Undeclared exception!
      try { 
        basic1DMatrix0.get(8, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)8;
      byteArray0[1] = (byte)8;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant((byte)100, (byte)100, Double.POSITIVE_INFINITY);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        basic1DMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "Sides of blocks are incompatible!";
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromCSV("Sides of blocks are incompatible!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 9;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) (byte)100;
      doubleArray0[3] = 2742.2449349275557;
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = (double) 9;
      doubleArray0[6] = 3427.3;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(9, 9, doubleArray0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 979;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(979, 979);
      basic1DMatrix0.power(979);
      String string0 = "Can not decode Basic1DMatrix from the given byte array.";
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.fromMatrixMarket(string0);
      int int1 = (-2469);
      int int2 = 8;
      SparseVector sparseVector0 = SparseVector.zero(int2);
      basic1DMatrix1.insertRow(int1, sparseVector0);
      basic1DMatrix0.getRow(int0);
      int int3 = (-2228);
      basic1DMatrix1.set(int3, int0, int2);
      int int4 = 0;
      basic1DMatrix1.swapColumns(int4, int2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 528;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(528, 528, 528);
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn("`U1FH$JvY&]").when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      basic1DMatrix0.apply(matrixOperation0);
      basic1DMatrix0.swapColumns(8, 0);
      int int1 = 0;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.constant(0, 0, 0);
      basic1DMatrix1.blankOfShape(3129, 0);
      Matrix matrix0 = basic1DMatrix0.copy();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      basic1DMatrix1.foldRows(vectorAccumulator0);
      Basic1DMatrix.unit(395, 1871);
      matrix0.setAll(3129);
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix.randomSymmetric((-1), mockRandom0);
      double double0 = 355.7827666369;
      basic1DMatrix0.set(int0, int1, double0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-4581.220147895179);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-4581.220147895179);
      doubleArray2[3] = (-4581.220147895179);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = (-4581.220147895179);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (-4581.220147895179);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-1.0);
      doubleArray0[3] = doubleArray4;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.toBinary();
      // Undeclared exception!
      try { 
        Basic1DMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.toBinary();
      basic1DMatrix0.product();
      basic1DMatrix0.swapRows(1, 1);
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(528);
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      basic1DMatrix0.apply(matrixOperation0);
      basic1DMatrix0.swapColumns(8, 0);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.constant(0, 0, 0);
      Matrix matrix0 = basic1DMatrix1.blankOfShape(3129, 0);
      basic1DMatrix0.copy();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 0;
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix1, basic1DMatrix0, basic1DMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)8;
      byteArray0[1] = (byte)8;
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric((byte)8, mockRandom0);
      basic1DMatrix0.toString();
      int int0 = 8;
      int int1 = (-853);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapColumns(8, (-853));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -853
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 62;
      double[] doubleArray0 = null;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(2504, 62, (double[]) null);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows((byte)8, 62);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      basic1DMatrix0.apply(matrixOperation0);
      int int0 = 8;
      basic1DMatrix0.swapColumns((byte)0, 0);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.constant((byte)0, 8, 0.0);
      basic1DMatrix1.blankOfShape(0, 0);
      basic1DMatrix0.copy();
      byte byte0 = (byte)6;
      byte byte1 = (byte) (-110);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)8;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant((byte)100, (byte)100, Double.POSITIVE_INFINITY);
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      basic1DMatrix0.apply(matrixOperation0);
      int int0 = 0;
      basic1DMatrix0.swapColumns(0, (byte)8);
      int int1 = 0;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.constant((byte)100, 0, 0);
      int int2 = 16;
      basic1DMatrix1.blankOfShape(16, (byte)8);
      Matrix matrix0 = basic1DMatrix0.copy();
      Basic1DMatrix.block(basic1DMatrix1, matrix0, basic1DMatrix1, basic1DMatrix0);
      Basic1DMatrix.constant(int2, int0, int1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)109;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit((byte)0, 1);
      Matrix matrix0 = basic1DMatrix0.rotate();
      matrix0.toRowVector();
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(matrix0, matrix0, matrix0, matrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(2, basic1DMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(528);
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(1L);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.random((byte)0, 1000, mockRandom0);
      Matrix matrix0 = basic1DMatrix0.blank();
      Basic1DMatrix.block(matrix0, matrix0, basic1DMatrix1, basic1DMatrix1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(528);
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      basic1DMatrix0.swapColumns(8, 8);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.constant(8, 0, 0);
      basic1DMatrix0.copy();
      basic1DMatrix0.setAll(0.0);
      Basic1DMatrix.constant(9, 9, 0.0);
      basic1DMatrix1.toArray();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      // Undeclared exception!
      try { 
        Basic1DMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn("").when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      basic1DMatrix0.apply(matrixOperation0);
      basic1DMatrix0.swapColumns((byte)0, 0);
      basic1DMatrix0.swapColumns((-37), 151);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.constant((byte)0, 8, 1449.5640754712886);
      Matrix matrix0 = basic1DMatrix0.blankOfShape(9, 0);
      basic1DMatrix0.copy();
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix1, basic1DMatrix0, basic1DMatrix1, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)100;
      byteArray0[4] = (byte)100;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromBinary(byteArray0);
      basic1DMatrix0.blankOfShape(48, 2368);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.identity(48);
      basic1DMatrix1.copy();
      Basic1DMatrix basic1DMatrix2 = new Basic1DMatrix();
      Basic1DMatrix.diagonal(16, 2368);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte byte0 = (byte)8;
      int int0 = 3717;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(3717, (byte)8);
      basic1DMatrix0.copy();
      int int1 = 1;
      basic1DMatrix0.swapRows(8, 1);
      int int2 = (-1618);
      basic1DMatrix0.swapColumns((-1618), (-2222));
      Basic1DMatrix.identity(int1);
      double[] doubleArray0 = new double[0];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      int int3 = 81;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.constant(int3, int0, int1);
      basic1DMatrix1.insertRow(int2, sparseVector0);
      double double0 = 0.0;
      basic1DMatrix0.setAll(double0);
      int int4 = 9;
      Basic1DMatrix.constant(int4, byte0, double0);
      basic1DMatrix1.toArray();
      MatrixFactory<Basic1DMatrix> matrixFactory0 = (MatrixFactory<Basic1DMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      basic1DMatrix1.to(matrixFactory0);
      MatrixFactory<Matrix> matrixFactory1 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      basic1DMatrix0.to(matrixFactory1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)8;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant((byte)8, (byte)8, (byte)8);
      int int0 = 0;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.constant((byte)8, 0, 0);
      int int1 = 16;
      Matrix matrix0 = basic1DMatrix0.copy();
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix1, matrix0, basic1DMatrix1, basic1DMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.toColumnVector();
      Matrix matrix0 = basic1DMatrix0.copy();
      Matrix matrix1 = basic1DMatrix0.copyOfShape(368, 368);
      assertTrue(basic1DMatrix0.equals((Object)matrix0));
      assertEquals(368, matrix1.rows());
      assertEquals(368, matrix1.columns());
  }
}
