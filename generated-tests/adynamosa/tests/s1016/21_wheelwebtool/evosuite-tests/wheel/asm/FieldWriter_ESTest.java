/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 00:03:01 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.index = (-703);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "%^3nXNk]EW<", "'{l}SzKR6uM0H/FfH", "", "c->l5lkON__");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.version = 1152;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-32), "rXz}SXvjN", " ,w*\"+d~-uK", "Fz", (Object) null);
      ByteVector byteVector0 = new ByteVector(3495);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.index = (-703);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "Fz", "wheel.asm.Type", (String) null, "\u0001yJG9nSG3BN");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.index = (-703);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "%^3nXNk]EW<", "'{l}SzKR6uM0H/FfH", "", "c->l5lkON__");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.version = 1152;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-32), "rXz}SXvjN", " ,w*\"+d~-uK", "Fz", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.index = (-703);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "Fz", "wheel.asm.Type", (String) null, "\u0001yJG9nSG3BN");
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(202);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "The suffix must not be null", "Signature", "Signature", "iP:xs:%>}(aO.Y-o");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-32), "rXz}SXvjN", " ,w*\"+d~-uK", "Fz", (Object) null);
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "Fz", "wheel.asm.Type", (String) null, "\u0001yJG9nSG3BN");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter((ClassWriter) null, 285212684, "u9^&-./;AW", "u9^&-./;AW", "u9^&-./;AW", "u9^&-./;AW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1995));
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 2, "/GY7VjiNL.9oy", "/GY7VjiNL.9oy", "Oa", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@8d52135
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1414), "OFLsYU2h", "<\"AMd6H^/K%:", "rXz}SXvjN", "<\"AMd6H^/K%:");
      ByteVector byteVector0 = new ByteVector();
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 3158, "float", "Signature", "float", "Signature");
      ByteVector byteVector0 = new ByteVector(2207);
      fieldWriter0.visitAnnotation("", false);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "Fz", "wheel.asm.Type", (String) null, "\u0001yJG9nSG3BN");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.visitAnnotation("Fz", true);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-11));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-11), ":TMax;", ":TMax;", ":TMax;", (Object) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "IIJu";
      stringArray0[2] = "The suffix must not be null";
      stringArray0[3] = "The suffix must not be null";
      stringArray0[4] = "The suffix must not be null";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      classWriter0.visit(49, (-572), "The size must be non-negative", "The suffix must not be null", "", stringArray0);
      ByteVector byteVector0 = new ByteVector(0);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, " ?'QOhF", "", "Fz", "rXz}SXvjN");
      Attribute attribute0 = new Attribute(" ?'QOhF");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 3127, "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;");
      fieldWriter0.visitAnnotation("Ljava/lang/Synthetic;", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-11));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-11), ":TMax;", ":TMax;", ":TMax;", (Object) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "IIJu";
      stringArray0[2] = "The suffix must not be null";
      stringArray0[3] = "The suffix must not be null";
      stringArray0[4] = "The suffix must not be null";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      classWriter0.visit(49, (-572), "The size must be non-negative", "The suffix must not be null", "", stringArray0);
      int int0 = fieldWriter0.getSize();
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-11));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-11), ":TMax;", ":TMax;", ":TMax;", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 3158, "float", "Signature", "float", "Signature");
      fieldWriter0.visitAnnotation("", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-11));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-11), ":TMax;", ":TMax;", ":TMax;", (Object) null);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-11), ":TMax;", ":TMax;", "", "");
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, " ?'QOhF", "", "Fz", "rXz}SXvjN");
      fieldWriter0.visitEnd();
  }
}
