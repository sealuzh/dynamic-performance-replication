/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 17:31:13 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StreamCorruptedException;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-96);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 220, 80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-85);
      byteArray0[0] = (byte) (-128);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)118;
      ConstantPool constantPool0 = null;
      int int0 = 1446;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 1446, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ior
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Q^ni +j+wfR!ln(Gf5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q^ni +j+wfR!ln(Gf5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "instanceof";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "instanceof");
      Utility.accessToString(176, false);
      try { 
        Utility.typeOfSignature("G^XfT3\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G^XfT3\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "java.lang.";
      Utility.replace("java.lang.\n", "java.lang.", "double");
      String string1 = "*DO_9mK";
      Utility.typeOfSignature("*DO_9mK");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.isJavaIdentifierPart('U');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((byte)109);
      constantArray0[0] = (Constant) constantLong0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(60, 49);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-793), 5);
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.searchOpcode("IQ<J{[6s[?yy 8/3%7");
      Utility.compactClassName("IQ<J{[6s[?yy 8/3%7");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.typeOfSignature("9'R6s;0l@b@\u0007&z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9'R6s;0l@b@\u0007&z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-100);
      byteArray0[0] = (byte) (-76);
      byteArray0[2] = (byte)57;
      byteArray0[4] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short short0 = Utility.searchOpcode("areturn");
      assertEquals((short)176, short0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "areturn";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "areturn";
      objectArray0[4] = (Object) "areturn";
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "areturn";
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte) (-61);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-43), 239);
      assertEquals("0:    <illegal opcode>\n1:    dload\t\t%27\n3:    <illegal opcode>\n4:    monitorexit\n", string1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.decode("iu~Z$0", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("iu~Z$0");
      PrintStream printStream0 = mockPrintStream0.append('^');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "iu~Z$0";
      objectArray0[1] = (Object) "iu~Z$0";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) "iu~Z$0";
      objectArray0[6] = (Object) "iu~Z$0";
      objectArray0[7] = (Object) printStream0;
      objectArray0[8] = (Object) mockPrintStream0;
      Utility.printArray(printStream0, objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-22);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 8192, (-1814));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("Z>SG-P!g*t,Zj}", true);
      Utility.compactClassName("lstore_0");
      String string0 = "s1Irly%8j";
      String string1 = "void";
      int int0 = 8;
      int int1 = (-629);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-128);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)118;
      ConstantPool constantPool0 = null;
      int int0 = 1446;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), 1446, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("irem", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-68);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      boolean boolean1 = true;
      try { 
        Utility.decode("$bc", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.accessToString((-292));
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)65;
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      byteSequence0.readUnsignedByte();
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)65);
      Utility.encode(byteArray0, false);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.isSet((byte)51, (byte)6);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)38;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-24), 43);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    <illegal opcode>\n1:    dstore_0\n2:    dload_0\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    <illegal opcode>
         // 1:    dstore_0
         // 2:    dload_0
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("T;[O=96KCwR", "T;[O=96KCwR", false);
      assertEquals("T;[O=96KCwR", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('@');
      assertFalse(boolean0);
      
      String string1 = Utility.signatureToString("T;[O=96KCwR", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)54;
      byte byte0 = (byte)45;
      byteArray0[3] = (byte)45;
      byte byte1 = (byte) (-48);
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte) (-5);
      byte byte2 = (byte) (-109);
      byteArray0[6] = (byte) (-109);
      byte byte3 = (byte)5;
      byteArray0[7] = (byte)5;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)54, (int) (byte) (-98), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "return";
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("return", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.setConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantPool0.accept(emptyVisitor0);
      int int0 = 83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 83, 83);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "pK&vs0xE'k?";
      stringArray0[1] = "pK&vs0xE'k?";
      stringArray0[2] = "pK&vs0xE'k?";
      stringArray0[3] = "pK&vs0xE'k?";
      stringArray0[4] = "pK&vs0xE'k?";
      stringArray0[5] = "pK&vs0xE'k?";
      stringArray0[6] = "pK&vs0xE'k?";
      String string0 = Utility.methodTypeToSignature("pK&vs0xE'k?", stringArray0);
      assertEquals("(LpK&vs0xE'k?;LpK&vs0xE'k?;LpK&vs0xE'k?;LpK&vs0xE'k?;LpK&vs0xE'k?;LpK&vs0xE'k?;LpK&vs0xE'k?;)LpK&vs0xE'k?;", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lload\t\t%1", string1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Utility.isJavaIdentifierPart('&');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-58);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-58));
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      constantMethodType0.toString();
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-58), 734, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    isub
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.getSignature("g9mD?[z)IyIW]");
      String string0 = "VX_vRjax3.Bw";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("VX_vRjax3.Bw", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: VX_vRjax3.Bw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)12, (int) (byte) (-65), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = (-1241);
      Utility.fillup("long", (-1241), false, '*');
      String string0 = "\nAnnotation(s):\n";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.getSignature("\nAnnotation(s):\n");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "long");
      String string1 = "3`1P59z-;p7w";
      try { 
        Utility.methodSignatureReturnType("3`1P59z-;p7w", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `3`1P59z-;p7w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.compactClassName("if_icmpgt", "\u0005hZAv~e}i2MJ.HI$oB", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-5);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2692, (int) (byte)110, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)17;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("/qw");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2245, 47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.classOrInterface((-2051));
      Utility.compactClassName("interface", "wide", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 142, 842, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      Utility.isJavaIdentifierPart('}');
      Utility.accessToString(5, false);
      Utility.accessToString(45, true);
      Utility.compactClassName("impdep2", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4074, (int) (byte) (-79));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)86;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 9, (int) (byte)4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.compactClassName("@pYKm");
      Utility.setBit(2938, 2938);
      boolean boolean0 = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.format(871, 2938, false, 'y');
      Utility.isJavaIdentifierPart('y');
      int int0 = 2146;
      String string1 = Utility.fillup("Byte code error: ", 2146, true, '[');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Byte code error: ";
      objectArray0[1] = (Object) "@pYKm";
      objectArray0[2] = (Object) "@pYKm";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "@pYKm";
      objectArray0[5] = (Object) "@pYKm";
      objectArray0[6] = (Object) string1;
      objectArray0[7] = (Object) "@pYKm";
      Object object1 = new Object();
      objectArray0[8] = object1;
      Utility.printArray(objectArray0, true, true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@pYKm";
      stringArray0[1] = string0;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(string1, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.setBit(25, (-1584));
      String string0 = "HT";
      try { 
        Utility.typeOfSignature("HT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = Utility.clearBit((-305), (-305));
      assertEquals((-33073), int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)25;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-94);
      byteArray1[1] = (byte) (-14);
      byteArray1[2] = (byte) (-94);
      byteArray1[3] = (byte) (-94);
      byteArray1[4] = (byte) (-94);
      byteArray1[5] = (byte)18;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)90;
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)48, (byte) (-58));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)48, (int) (byte) (-58), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "N9pZUbZt";
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("N9pZUbZt", false);
      int int0 = (-2111);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 194, (-2111));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.classOrInterface(57);
      String string0 = "7{18n$ajLcoxWK'<dl";
      try { 
        Utility.typeOfSignature("7{18n$ajLcoxWK'<dl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7{18n$ajLcoxWK'<dl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.isJavaIdentifierPart('\'');
      try { 
        Utility.methodSignatureArgumentTypes("lreturn", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.isJavaIdentifierPart('i');
      Utility.getSignature(";j2M8h`+/is>");
      Utility.convertString(";j2M8h`+/is>");
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)19;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)42;
      byte byte0 = (byte) (-90);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)34;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 181, 193);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)62;
      byteArray0[8] = (byte)109;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-69), 5, true);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 12;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format(12, 12, false, '8');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "888888888812";
      objectArray0[1] = (Object) "888888888812";
      objectArray0[2] = (Object) "888888888812";
      Utility.printArray(objectArray0, true);
      String string0 = "[kqOzL)l";
      Utility.typeOfSignature("[kqOzL)l");
      String string1 = "ORU*#qi!:Bo7rZ1S";
      boolean boolean0 = true;
      int int1 = (-2);
      int int2 = (-2111);
      int int3 = 191;
      int int4 = 3819;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)13;
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[5];
      int int5 = 48;
      int int6 = 189;
      File file0 = MockFile.createTempFile("{888888888812, 888888888812, 888888888812}", "Obl/kT;BL&K$diK");
      try { 
        MockFile.createTempFile("FT]3il{.YooP!", "FT]3il{.YooP!", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.printArray((Object[]) null);
      Utility.searchOpcode("org.apache.commons.io.filefilter.WildcardFileFilter");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-116);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 118, (int) (byte) (-116), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3Wg=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3Wg=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "R#A!4J\\";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "R#A!4J");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = false;
      Utility.decode("R#A!4J", false);
      try { 
        Utility.typeOfSignature("R#A!4J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R#A!4J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "F";
      Utility.typeOfSignature("F");
      String string1 = "w>B27kZn\\ R";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("w>B27kZn R", "F", "F", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: w>B27kZn R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[3] = (byte) (-74);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), (int) (byte)11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    bastore
         // 1:    nop
         // 2:    iinc\t\t%9\t9
         // 5:    fconst_0
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = Utility.fillup("4;~$#&`l>R", 8, true, 'p');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-48);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.isJavaIdentifierPart('c');
      int int0 = 97;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "InnerClass(");
      Utility.isSet(97, 2081);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, true);
      String string0 = "!5b2]-Vo$r";
      try { 
        Utility.typeOfSignature("!5b2]-Vo$r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5b2]-Vo$r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "6A:I";
      try { 
        Utility.typeOfSignature("6A:I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6A:I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "|2LJC r";
      boolean boolean0 = false;
      Utility.fillup("|2LJC r", 170, false, '^');
      String string1 = "P";
      try { 
        Utility.typeOfSignature("P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-66), (byte) (-66));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-66));
      constantArray0[1] = (Constant) constantClass0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2216, (byte) (-66));
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.compactClassName("|2LJC r39=z>CTPz", "&8w:YiG", true);
      Utility.isSet(18, 18);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)41;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2897, 419, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)55;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(62, 32);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.compactClassName("lstore\t\t%45");
      String string0 = "if_icmpgt";
      String string1 = "";
      Method method0 = new Method();
      Method method1 = new Method(method0);
      // Undeclared exception!
      try { 
        method1.getLocalVariableTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.setBit(20000, 20000);
      String string0 = "L4G6*50$6KhWpcN@";
      // Undeclared exception!
      try { 
        Utility.decode("L4G6*50$6KhWpcN@", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"6K\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte) (-52);
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass((byte) (-52));
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1118);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(1965);
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1335, 80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.searchOpcode("V");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V");
      Utility.methodSignatureReturnType("V");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "V";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[4] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = Utility.compactClassName("compiled from\t\t", "compiled from\t\t", false);
      assertEquals("compiled from\t\t", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)115;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-126), (int) (byte)50, false);
      assertEquals("0:    iconst_3\n1:    dconst_0\n2:    dload_2\n3:    aaload\n4:    <illegal opcode>\n5:    faload\n6:    ixor\n7:    nop\n8:    drem\n", string1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, 72, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)120;
      byte byte0 = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)5;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, (-228), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      try { 
        Utility.typeOfSignature("0BWN%T;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0BWN%T;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("invokeinterface");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "invokeinterface";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokeinterface");
      objectArray0[2] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lload_1", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("\n");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("org.apache.bcel.classfile.ParameterAnnotations", "\n", "\n");
      String string0 = "'";
      MockPrintStream mockPrintStream0 = new MockPrintStream("'");
      mockPrintStream0.println();
      Object[] objectArray0 = null;
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      String string1 = "float";
      boolean boolean0 = true;
      int int0 = 55;
      int int1 = (-1437804247);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable(55, (-1437804247), (DataInput) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte) (-16);
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-240), (byte) (-113));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("wide");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 5, 3470);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 5:    d2l
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "=KSYx8UuR~nmRC3j5";
      try { 
        Utility.typeOfSignature("=KSYx8UuR~nmRC3j5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =KSYx8UuR~nmRC3j5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("L8<5;|(rRNGND", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L8<5;|(rRNGND
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ineg", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.setBit(1, 1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      Utility.printArray(objectArray0, false, true);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.format(" (", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      stringWriter0.write("=9]sQmYqU.|");
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.printArray(printWriter0, objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "/>";
      try { 
        Utility.typeOfSignature("/>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: />
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "Y)43.dEkj=+^";
      try { 
        Utility.typeOfSignature("Y)43.dEkj=+^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y)43.dEkj=+^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-62);
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)3, 130);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("Warning: Padding byte != 0 in ");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(91, (byte)34);
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantMethodref constantMethodref1 = new ConstantMethodref((byte) (-62), (byte)119);
      constantArray0[3] = (Constant) constantMethodref1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)3, 141);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[4] = (Constant) constantInvokeDynamic1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(126, 171);
      constantArray0[5] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte)3, 171);
      assertEquals("3:    iconst_0\n4:    dcmpl\n5:    monitorenter\n", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)45;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)84, 512, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      boolean boolean0 = Utility.isJavaIdentifierPart('=');
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utility.compactClassName("^MovLJoYl$8%x~TN5bU", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)81, (int) (byte)12, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object0;
      Utility.printArray(objectArray0);
      boolean boolean0 = false;
      Utility.format(105, 97, false, 'h');
      Utility.isSet(105, 105);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1065, 9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "1%p6J";
      try { 
        Utility.typeOfSignature("1%p6J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1%p6J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.accessToString(7);
      Utility.format(4, 9969, false, 'D');
      MockPrintStream mockPrintStream0 = new MockPrintStream("public private protected");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "public private protected";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      Utility.classOrInterface(2205);
      // Undeclared exception!
      try { 
        Utility.signatureToString("@_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `@_0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Utility.compactClassName("TX^", true);
      Utility.typeOfSignature("TX^");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "File ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "File ");
      Utility.methodTypeToSignature("putstatic", (String[]) null);
      boolean boolean0 = false;
      Utility.methodSignatureToString("()Lputstatic;", "dreturn", "()Lputstatic;", false);
      Utility.decode("dreturn", false);
      String string1 = "invokespecial";
      try { 
        Utility.methodSignatureReturnType("invokespecial");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokespecial'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.classOrInterface((-1209));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-86);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 193, 196, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "'so%e~";
      try { 
        Utility.typeOfSignature("'so%e~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'so%e~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)76;
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      Utility.compactClassName("{}", true);
      String string0 = "EQ5%!#dy*j>f+";
      try { 
        Utility.typeOfSignature("EQ5%!#dy*j>f+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EQ5%!#dy*j>f+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)83;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[7] = (byte)123;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1692), (-1036));
      try { 
        Utility.methodSignatureArgumentTypes("V6et9tS0FIxoB", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V6et9tS0FIxoB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.getSignature("W(#;p.@");
      Utility.fillup("W(#;p.@", 4600, false, '#');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)112;
      Utility.encode(byteArray0, false);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("impdep1");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 262, 102, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      byte byte0 = (byte)35;
      byteArray0[1] = (byte)35;
      byte byte1 = (byte)64;
      byteArray0[2] = (byte)64;
      byte byte2 = (byte)19;
      byteArray0[3] = (byte)19;
      byte byte3 = (byte)123;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-66);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-4300), (int) (byte)35);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 31678. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)124;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 97, (int) (byte)86, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = Utility.accessToString(49);
      assertEquals("public final synchronized", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.compactClassName("dstore_1", "dstore_1", true);
      assertEquals("", string1);
      
      String string2 = Utility.compactClassName("G1@H2I|,_!*z", "public final synchronized", true);
      assertEquals("G1@H2I|,_!*z", string2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte) (-36);
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte) (-69);
      byteArray0[8] = (byte)8;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6, (int) (byte)8, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "L2Dp~;/,bRW?|\\MH";
      Utility.signatureToString("L2Dp~;/,bRW?|MH");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "L2Dp~;/,bRW?|MH";
      objectArray0[2] = (Object) "2Dp~";
      objectArray0[3] = (Object) "2Dp~";
      objectArray0[4] = (Object) "2Dp~";
      Utility.printArray(objectArray0);
      Utility.replace("{java.lang.Object@313bddc1, L2Dp~;/,bRW?|MH, 2Dp~, 2Dp~, 2Dp~}", "{java.lang.Object@313bddc1, L2Dp~;/,bRW?|MH, 2Dp~, 2Dp~, 2Dp~}", "Mu");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.fillup(")\t", 1571, false, 'Z');
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "M~k?";
      try { 
        Utility.typeOfSignature("M~k?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M~k?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-37);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(2146);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 20, 1659, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.clearBit(76, 76);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte) (-57);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), (int) (byte) (-82));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lconst_0
         // 1:    saload
         // 2:    freturn
         // 3:    ldiv
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      Utility.isJavaIdentifierPart('z');
      Utility.equals(byteArray0, byteArray0);
      String string0 = "$Labw";
      Utility.searchOpcode("$Labw");
      Utility.accessToString((int) (short) (-1));
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "CuG`$X.Cs.2b42J";
      Utility.typeOfSignature("CuG`$X.Cs.2b42J");
      String string1 = "invokedynamic";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("invokedynamic", "CuG`$X.Cs.2b42J");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // CuG`$X.Cs.2b42J
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "if_icmplt";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if_icmplt");
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("if_acmpne", stringArray0);
      Utility.getSignature("()Lif_acmpne;");
      Utility.isJavaIdentifierPart('O');
      int int0 = 147;
      Utility.clearBit(1426, 147);
      Utility.replace("L()Lif_acmpne;;", "vJ>5frG1l#", " rfa[{a]");
      int int1 = 3591;
      Utility.isSet(3591, (-514));
      String string1 = "anewarray";
      Utility.fillup("anewarray", 1910, false, 'e');
      try { 
        Utility.typeOfSignature("@|UW:5X}J K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @|UW:5X}J K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-87);
      String string0 = Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = Utility.compactClassName("w=lb dHftKc@(");
      assertEquals("w=lb dHftKc@(", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte) (-33);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-832), (int) (byte) (-32));
      assertEquals("0:    <illegal opcode>\n1:    dload_1\n2:    lload_2\n3:    impdep2\n4:    lstore_3\n5:    iushr\n6:    fstore_0\n7:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte) (-126);
      byteArray0[8] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("i2c", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-39);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lsub", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "Y04C(x0~11],(F6$";
      byte[] byteArray0 = Utility.decode("Y04C(x0~11],(F6$", false);
      String string1 = "^<RFPR-T{3]=\"@=J";
      String string2 = "monitorenter";
      boolean boolean0 = false;
      int int0 = 73;
      int int1 = 16;
      int int2 = (-3107);
      Attribute[] attributeArray0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 52
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[pzg@`Go3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [pzg@`Go3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)105;
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)87, (int) (byte)108, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-34);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-34), 72);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("Ry", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ry'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object[] objectArray0 = null;
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false);
      Utility.format(50, 50, false, '^');
      Utility.convertString("double");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.printArray((Object[]) null, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)78;
      Utility.encode(byteArray0, false);
      Utility.format((-1570), (byte) (-100), false, '^');
      Utility.clearBit((byte)78, (byte)1);
      Utility.decode("$9cN$BN", false);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Utility.accessToString(64);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 256, (int) (byte)60, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)125;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("Cache hit ", false);
      Utility.compactClassName("Cache hit ");
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)125;
      byteArray1[1] = (byte) (-47);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      File file0 = MockFile.createTempFile("1Nnb*v", "Tbk,&@PL0,oH`VHBF-");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "Cache hit ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Cache hit 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 166;
      Utility.setBit(124, 166);
      String string0 = "#Ka8'/D<3}JV%r@yu";
      try { 
        Utility.typeOfSignature("#Ka8'/D<3}JV%r@yu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #Ka8'/D<3}JV%r@yu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)88;
      byteArray0[0] = (byte)88;
      byte byte1 = (byte)16;
      byteArray0[1] = (byte)16;
      byte byte2 = (byte)115;
      byteArray0[2] = (byte)115;
      byte byte3 = (byte) (-60);
      byteArray0[3] = (byte) (-60);
      byte byte4 = (byte)113;
      byteArray0[4] = (byte)113;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 40, 979, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-98);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 181, (int) (byte) (-109));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString((-744), false);
      Utility.classOrInterface((-744));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "class";
      stringArray0[1] = "static final native abstract strictfp synthetic annotation enum";
      stringArray0[2] = "static final native abstract strictfp synthetic annotation enum";
      stringArray0[3] = "class";
      stringArray0[4] = "class";
      stringArray0[5] = "static final native abstract strictfp synthetic annotation enum";
      stringArray0[6] = "static final native abstract strictfp synthetic annotation enum";
      stringArray0[7] = "class";
      Utility.methodTypeToSignature("class", stringArray0);
      Utility.setBit((-2574), (-2574));
      Utility.isSet((-2574), (-2574));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-63), (-2574), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("@H 2!");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-85), (byte)30);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(8, (byte)30);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ifeq\t\t#-25689", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.convertString("");
      String string0 = Utility.convertString("5Lu>v~IxBF[4.N");
      assertEquals("5Lu>v~IxBF[4.N", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(4012, 2415);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2415);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)46);
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("ireturn", string1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-109);
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-3), (-3032));
      assertEquals("0:    <illegal opcode>\n1:    i2s\n", string2);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "Nui\"l$,ZvKE";
      try { 
        Utility.typeOfSignature("Nui\"l$,ZvKE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Nui\"l$,ZvKE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">$pYdr5Y";
      Utility.methodTypeToSignature(", name_and_type_index = ", stringArray0);
      Utility.replace(", name_and_type_index = ", ",IMwZl&{\"F>eQ/pYWZ", ">$pYdr5Y");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("sgMWJ~)n6GJQX6$$GCw", "H!8lfwzo", ", name_and_type_index = ");
      Utility.methodSignatureToString("(L>$pYdr5Y;)L,;", ", name_and_type_index = ", "sgMWJ~)n6GJQX6$$GCw", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(",IMwZl&{\"F>eQ/pYWZ", "jsr", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,IMwZl&{\"F>eQ/pYWZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Xxw(wEAJi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xxw(wEAJi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.accessToString(2476);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-73);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-82), 1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.format(67, 67, true, 'b');
      Utility.compactClassName("byte", "org.apache.bcel.classfile.RuntimeVisibleParameterAnnotations", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)111;
      Utility.codeToString(byteArray0, (ConstantPool) null, 2, (int) (byte)74, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("byte");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "byte";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "67bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb";
      objectArray0[3] = (Object) "org.apache.bcel.classfile.RuntimeVisibleParameterAnnotations";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "byte";
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "67bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      Utility.printArray((PrintStream) mockPrintStream1, objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantString constantString0 = new ConstantString(79);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[2] = (Constant) constantString1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("{\u0001pa!X");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantClass constantClass1 = new ConstantClass(2346);
      constantArray0[4] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, false);
      MockFile mockFile0 = new MockFile("java.lang.Object@3e2cc7e, java.lang.Object@5c24dd5d", "java.lang.Object@3e2cc7e, java.lang.Object@5c24dd5d");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('w');
      Utility.printArray(printWriter0, objectArray0);
      Utility.compactClassName("java.lang.Object@3e2cc7e, java.lang.Object@5c24dd5d");
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "+4[e ";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("+4[e ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4[e 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object0;
      Utility.printArray(objectArray0);
      Utility.format(105, 97, false, 'h');
      Utility.isSet(105, 105);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1065, 9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 13, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), (int) (byte)11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)47;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)47, (int) (byte) (-125));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "U ?g}:*d~Ge^V4B";
      try { 
        Utility.typeOfSignature("U ?g}:*d~Ge^V4B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U ?g}:*d~Ge^V4B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)59;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-119);
      byte byte0 = (byte)68;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-122);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)64, (int) (byte)64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.typeOfSignature("ZE");
      try { 
        Utility.methodSignatureArgumentTypes("UbG4fE!l..EJ9*`S,4*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UbG4fE!l..EJ9*`S,4*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.accessToString(102);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)58;
      byte byte0 = (byte)79;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-117);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, 10, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Byte code error: ";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.methodTypeToSignature("fI|&sM'}^EfT0B&(r", stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.I#v5;PX]*KPe");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfSignature("Byte code error: ");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = Utility.format(160, 157, false, 'D');
      assertEquals("DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD160", string0);
      
      byte byte0 = Utility.typeOfSignature("DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD160");
      assertEquals((byte)7, byte0);
      
      String string1 = Utility.accessToString(2129, false);
      assertEquals("public final volatile strictfp", string1);
      
      String string2 = Utility.classOrInterface(158);
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = ": ";
      try { 
        Utility.typeOfSignature(": ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: : 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.clearBit((-1436), 3191);
      boolean boolean0 = true;
      Utility.format(198, (-1436), true, '`');
      Utility.searchOpcode("impdep1");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte) (-3);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-983), 10, true);
      try { 
        Utility.methodSignatureReturnType("198");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `198'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = Utility.convertString("Rk");
      assertEquals("Rk", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)70;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$Q$dbF", string1);
      
      String string2 = Utility.accessToString(3881, false);
      assertEquals("public static synchronized native interface abstract strictfp", string2);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string3 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-37), (int) (byte) (-37), true);
      assertEquals("0:    bipush\t\t-37\n2:    fstore_3\n", string3);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.convertString("");
      Utility.classOrInterface(40);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)71, (int) (byte)71, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = 421;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 421, (-529), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.compactClassName("", false);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-81);
      byteArray0[0] = (byte) (-81);
      byte byte1 = (byte)52;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-58);
      byte byte2 = (byte)85;
      byteArray0[3] = (byte)85;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-2);
      byte byte0 = (byte) (-68);
      byteArray0[4] = (byte) (-68);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-14), (int) (byte) (-14), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ishr
         // 1:    dcmpg
         // 2:    <illegal opcode>
         // 3:    impdep1
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "O+{=^6qB#}]2w~Ar2Z";
      try { 
        Utility.typeOfSignature("O+{=^6qB#}]2w~Ar2Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O+{=^6qB#}]2w~Ar2Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("castore", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.replace("WbKN2{]{FN'", "org.apache.bcel.util.ClassPath", "Invalid type: ");
      Utility.replace("", "WbKN2{]{FN'", "pVz");
      Utility.getSignature("pVz");
      try { 
        Utility.typeOfSignature("5M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)103;
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte) (-111), true);
      Utility.compactClassName("L", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 222, 215, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i61{}xs\r-57/)$IIiI");
      Utility.methodSignatureReturnType("Llxor;V");
      Utility.accessToString((-510));
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "Llxor;V";
      objectArray0[2] = (Object) "private interface abstract strictfp synthetic annotation enum";
      Object object0 = new Object();
      objectArray0[3] = object0;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Exception while looking for class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exception while looking for class '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)73;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)84;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)84, (int) (byte)61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "QQ#GUTdc";
      Utility.replace("QQ#GUTdc", ", npairs = ", "\r");
      try { 
        Utility.typeOfSignature(".}Lg.xR>%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .}Lg.xR>%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, (-365), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SjGUP0U0g~D<-%d");
      Utility.compactClassName("impdep1");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-3);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("34 a4 2f 52 fd", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-92), (int) (byte) (-92));
      assertEquals("0:    caload\n1:    if_icmple\t\t#12115\n4:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lxor");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lxor";
      stringArray0[1] = "lxor";
      stringArray0[2] = "lxor";
      stringArray0[3] = "l.CTo>,m+J5L7y";
      stringArray0[4] = "lxor";
      Utility.methodTypeToSignature("lxor", stringArray0);
      int int0 = 243;
      Utility.isSet(243, (-1623));
      try { 
        Utility.typeOfSignature("8gvFb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8gvFb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-1577), (-1577));
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName(" ", false);
      assertEquals(" ", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lload_0", string1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+>AIiGPKA+r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >AIiGPKA+r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Utility.isJavaIdentifierPart('+');
      String string0 = "(Unknown attribute ";
      try { 
        Utility.methodSignatureArgumentTypes("(Unknown attribute ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unknown attribute '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ret";
      Utility.methodTypeToSignature("ret", stringArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte)110;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-5164), (int) (byte) (-10));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "<illegal opcode>";
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-27);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, (int) (byte) (-98));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.getSignature("L;V");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("G(Z.s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G(Z.s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)108;
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("ifnull");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)108);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)108, (byte) (-62));
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(0, (byte)9);
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantInteger constantInteger0 = new ConstantInteger(57);
      constantArray0[4] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 57, (int) (byte)9, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)40;
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((byte)94);
      constantArray0[0] = (Constant) constantString0;
      ConstantClass constantClass0 = new ConstantClass(91);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 57, (int) (byte) (-93));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      Utility.replace("{}", "monitorenter", "{}");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "monitorenter");
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)40;
      Utility.toHexString(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)13, 2508, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Utility.isJavaIdentifierPart('i');
      Utility.getSignature(";j2M8h`+/is>");
      Utility.convertString(";j2M8h`+/is>");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)42;
      byte byte0 = (byte) (-90);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)34;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 181, 193);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 8490. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Utility.convertString("U[$BOm~J");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-87);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((-756));
      constantArray0[0] = (Constant) constantString0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-756), (byte)32);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 84, 216, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 163. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = 47;
      Utility.classOrInterface(47);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-122);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte) (-96);
      byte byte0 = (byte)41;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-124);
      byte byte1 = (byte)81;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte) (-7);
      byteArray0[7] = (byte)0;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-593), 221);
      try { 
        Utility.methodSignatureReturnType("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)111;
      byteArray0[7] = (byte)104;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2912), (int) (byte) (-114), false);
      Utility.accessToString((int) (byte)111, true);
      MockFile mockFile0 = new MockFile("char");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(bufferedOutputStream0, true, "5DT>)k8.");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 5DT>)k8.
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)9;
      Utility.toHexString(byteArray0);
      Utility.clearBit((byte)90, 2267);
      Utility.searchOpcode("05 4e 5a ae 24 09");
      Utility.toHexString(byteArray0);
      Utility.typeOfSignature("I.%z=~TX>=V+a");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteSequence0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 90);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(bufferedInputStream1);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 054E5AAE
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.typeOfMethodSignature("(start_pc = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (start_pc = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.replace("d&", "d&", "d&");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte)32;
      Utility.codeToString(byteArray0, (ConstantPool) null, 6, (int) (byte) (-92), false);
      String string0 = Utility.classOrInterface((byte) (-19));
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "d&";
      objectArray0[1] = (Object) "interface";
      objectArray0[2] = (Object) (byte) (-94);
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "d&";
      objectArray0[5] = (Object) (byte)111;
      objectArray0[6] = (Object) "interface";
      objectArray0[7] = (Object) (byte)32;
      String string1 = Utility.printArray(objectArray0, true, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      Utility.format(105, 97, false, 'h');
      Utility.isSet(105, 105);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1065, 9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format(13, 13, false, 'q');
      // Undeclared exception!
      try { 
        Utility.signatureToString("Total of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Total of 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = 39;
      boolean boolean0 = true;
      Utility.format((-1104), 39, true, 'o');
      try { 
        Utility.typeOfSignature("-1104oooooooooooooooooooooooooooooooooo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -1104oooooooooooooooooooooooooooooooooo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Utility.accessToString(4);
      boolean boolean0 = true;
      Utility.compactClassName("protected", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("protected");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `protected'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "YM5`B,8,GS10gA\\M?";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("YM5`B,8,GS10gAM?", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YM5`B,8,GS10gAM?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.compactClassName("freturn");
      String string0 = "\"";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\"", "freturn", "x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "Ky";
      try { 
        Utility.methodSignatureReturnType("Ky", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ky'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\tdefault = ";
      stringArray0[1] = "\tdefault = ";
      stringArray0[2] = "\tdefault = ";
      stringArray0[3] = "\tdefault = ";
      Utility.methodTypeToSignature("\tdefault = ", stringArray0);
      try { 
        Utility.typeOfMethodSignature("monitorenter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorenter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-20);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 156, 156);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Utility.compactClassName("^qM", "^qM", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-27);
      Utility.toHexString(byteArray0);
      Utility.searchOpcode("^qM");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2034, (-2), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)79;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 112, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("W~bdh?Lm5~=MtV", "W~bdh?Lm5~=MtV", false);
      try { 
        Utility.typeOfSignature("W~bdh?Lm5~=MtV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W~bdh?Lm5~=MtV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Utility.searchOpcode("V");
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("VZ<J>", true);
      try { 
        Utility.methodSignatureArgumentTypes("ifnonnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnonnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = Utility.compactClassName("Signature: ");
      assertEquals("Signature: ", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-50);
      Utility.equals(byteArray0, byteArray0);
      byte byte0 = Utility.typeOfSignature("Signature: ");
      assertEquals((byte)9, byte0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.convertString("HX5oyBn(|pO\"");
      Utility.compactClassName("HX5oyBn(|pO\"");
      // Undeclared exception!
      try { 
        Utility.signatureToString("HX5oyBn(|pO\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HX5oyBn(|pO\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.classOrInterface(1552);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-106);
      byteArray0[5] = (byte) (-85);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)48, 289, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "DoT5x %v";
      Utility.methodSignatureReturnType("DoT5x %v");
      String string1 = "QKz&I/1j";
      // Undeclared exception!
      try { 
        Utility.signatureToString("QKz&I/1j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QKz&I/1j'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-77);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.signatureToString("F20`#sX");
      Utility.isJavaIdentifierPart('1');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "float", "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "impdep1");
      try { 
        Utility.typeOfSignature("?XMzLZ~avhJd|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?XMzLZ~avhJd|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = ".r<}-\\_[<WoQY$!q{>";
      Utility.decode(".r<}-_[<WoQY$!q{>", false);
      try { 
        Utility.methodSignatureArgumentTypes(".r<}-_[<WoQY$!q{>", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .r<}-_[<WoQY$!q{>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(5, (byte)21);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)114);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("iload\t\t%41", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)87;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "i2s";
      String string1 = "Q{3^rqfs]v)s%cM=}-";
      Utility.replace("i2s", "z,N-/^{M_fuMJ", "Q{3^rqfs]v)s%cM=}-");
      Utility.decode("i2s", false);
      String string2 = "XGw";
      // Undeclared exception!
      try { 
        Utility.signatureToString("XGw", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XGw'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-63);
      byte byte0 = (byte)87;
      byteArray0[2] = (byte)87;
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)87, (byte)87);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 38, 77, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("N_/]id0y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N_/]id0y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", offset delta=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , offset delta=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      boolean boolean0 = false;
      Utility.format(105, 105, false, 'h');
      Utility.isSet(105, 105);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)8;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1065, 9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">0#h{)TCmntk*r61t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >0#h{)TCmntk*r61t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("java.lang.Object@3d8589f, java.lang.Object@27e06f6b, java.lang.Object@46f38392, java.lang.Object@2fc5d3f9, java.lang.Object@6e187a3e, java.lang.Object@4a27dba1", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-89);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)64, (-3009), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(")", false);
      assertArrayEquals(new byte[] {(byte)41}, byteArray0);
      
      byte byte0 = Utility.typeOfSignature("J,");
      assertEquals((byte)11, byte0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")");
      String string0 = Utility.signatureToString("J,");
      assertEquals("long", string0);
      
      String string1 = Utility.format((byte)11, (-249), false, '\"');
      assertEquals("11", string1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "3f\\c}u";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3fc}u");
      int int0 = 105;
      Utility.classOrInterface(105);
      Utility.convertString("3fc}u");
      int int1 = 4688;
      Utility.format(4688, 4688, false, 'S');
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.classOrInterface(1552);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)48, 289, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.compactClassName("\t\t", "\t\t", false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)27;
      byteArray0[0] = (byte)27;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)27, (-670));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)31;
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-89), 45);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[1] = (Constant) constantNameAndType1;
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[2] = (Constant) constantNameAndType2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 45, (int) (byte)31);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-88);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("\"java.lang.Object@1e5dba76\", \"java.lang.Object@12e31741\", \"java.lang.Object@419cf91d\", \"java.lang.Object@36d217b5\", \"java.lang.Object@45af8513\", \"java.lang.Object@4f7ccbf8\", \"java.lang.Object@698e971b\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"java.lang.Object@1e5dba76\", \"java.lang.Object@12e31741\", \"java.lang.Object@419cf91d\", \"java.lang.Object@36d217b5\", \"java.lang.Object@45af8513\", \"java.lang.Object@4f7ccbf8\", \"java.lang.Object@698e971b\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Utility.isJavaIdentifierPart('P');
      Utility.accessToString(9);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-123);
      byte byte0 = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)10;
      Utility.equals(byteArray0, byteArray0);
      Utility.methodSignatureReturnType("Z~8`i", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 2
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-34);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-34), 72);
      assertEquals("0:    goto_w\t\t#-1254534434\n", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      boolean boolean0 = Utility.isSet(2283, (-1043));
      assertFalse(boolean0);
      
      Utility.convertString("org.apache.commons.io.filefilter.FalseFileFilter");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "org.apache.commons.io.filefilter.FalseFileFilter";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "org.apache.commons.io.filefilter.FalseFileFilter";
      objectArray0[3] = (Object) null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      objectArray0[4] = (Object) null;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("-sB$\"u(+Pg,");
      assertEquals("-sB$\\\"u(+Pg,", string1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.methodTypeToSignature("qdA^", (String[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.methodSignatureArgumentTypes("()LqdA^;", false);
      Utility.setBit(51, 51);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "1$g',";
      boolean boolean0 = true;
      try { 
        Utility.decode("1$g',", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-61);
      byteArray0[4] = (byte) (-85);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)27;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 81, (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.convertString("jj:QjP-Nv[U'vPK.fU");
      try { 
        Utility.methodSignatureReturnType("M|^Ee~}i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M|^Ee~}i'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = 426;
      Utility.clearBit(426, 426);
      String string0 = "Could not create the directory ";
      Utility.signatureToString("Could not create the directory ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `char'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.accessToString(685, true);
      Utility.compactClassName("impdep1", "Illegal type: ", false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("Illegal type: ", "Illegal type: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Illegal type: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fcmpg");
      try { 
        Utility.methodSignatureReturnType("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.replace("Illegal type: ", "\t<", "Invalid IOCase name: ");
      Utility.methodSignatureReturnType("Illegal type: ");
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "2x\"-w|:!;E)}`|2>w";
      Utility.searchOpcode("2x\"-w|:!;E)}`|2>w");
      Utility.getSignature("2x\"-w|:!;E)}`|2>w");
      Utility.isSet((-2223), (short) (-1));
      Utility.accessToString(6, true);
      try { 
        Utility.typeOfSignature("2x\"-w|:!;E)}`|2>w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2x\"-w|:!;E)}`|2>w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(k.x(", "(k.x(", "float", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `k.x('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "O,=.rmb9";
      // Undeclared exception!
      try { 
        Utility.signatureToString("O,=.rmb9", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O,=.rmb9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Utility.clearBit(18, 18);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 18, 18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int int0 = 70;
      Utility.accessToString(70, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "private protected volatile";
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0, false);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("LA", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Utility.accessToString(4361, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-74);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -52
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("'");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isSet((-29), 92);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'%ABLVepA gk");
      Utility.compactClassName("checkcast", false);
      Utility.replace("ifnonnull", "ifnonnull", ")\t");
      int int0 = 177;
      Utility.classOrInterface(177);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "checkcast";
      stringArray0[1] = ")\t";
      stringArray0[2] = ")\t";
      stringArray0[3] = ")\t";
      stringArray0[4] = "ifnonnull";
      Utility.methodTypeToSignature("class", stringArray0);
      String string0 = "";
      boolean boolean0 = false;
      int int1 = (-2307);
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      String string1 = "<illegal type>";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("<illegal type>", "dreturn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"dreturn\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("UTP3Q&EP", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UTP3Q&EP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('i');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-504), 65);
      assertEquals("0:    astore_2\n1:    <illegal opcode>\n2:    frem\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)27;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 81, (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "{/3Uw S#=[J";
      // Undeclared exception!
      try { 
        Utility.getSignature("{/3Uw S#=[J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("0j`2o22z)DVm+MkHvPi");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte) (-87);
      Constant[] constantArray0 = new Constant[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      Constant constant0 = constantMethodHandle1.copy();
      constantArray0[1] = constant0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)3, 229);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[2] = (Constant) constantFieldref1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("L0_};");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantClass constantClass0 = new ConstantClass(238);
      constantArray0[4] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-2661), (int) (byte) (-118));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    l2d
         // 1:    lconst_0
         // 2:    iconst_0
         // 3:    <illegal opcode>
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!MR}!i?swy2F'q~tsgP");
      String string0 = Utility.fillup("!MR}!i?swy2F'q~tsgP", (-1649), false, 'O');
      assertEquals("!MR}!i?swy2F'q~tsgP", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-76);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("56 45 a7 77 e1 27 08 b4", string1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.isSet(914, 914);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("char", "char", false);
      Utility.replace("char", "char", "char");
      Utility.setBit((byte)59, (byte)97);
      File file0 = MockFile.createTempFile("char", "char");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) (byte)47;
      objectArray0[2] = (Object) (byte) (-107);
      objectArray0[3] = (Object) "char";
      objectArray0[4] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.printf("char", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      assertEquals(43L, file0.length());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = ",|0Xp";
      Utility.compactClassName(",|0Xp");
      Utility.accessToString((-1725426913));
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S.a*m_&6p7/");
      Utility.isJavaIdentifierPart('v');
      try { 
        Utility.decode(",|0Xp", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, false);
      Utility.setBit(2687, (-171));
      Utility.accessToString(2099839);
      String string0 = "ifnonnull";
      try { 
        Utility.methodSignatureArgumentTypes("ifnonnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnonnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = "short";
      Utility.searchOpcode("short");
      String string1 = "Warning: Padding byte != 0 in ";
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      try { 
        Utility.typeOfSignature("dL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("%J:!#xi\"L+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %J:!#xi\"L+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.searchOpcode("fload_3");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.format((-2580), 251, true, '$');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)12;
      Utility.encode(byteArray0, true);
      String string0 = "org.apache.bcel.util.ClassPath";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.util.ClassPath");
      Utility.printArray((Object[]) null, true);
      try { 
        Utility.typeOfMethodSignature("fload_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.compactClassName("invokedynamic", false);
      Utility.convertString("invokedynamic");
      String string0 = "Gg%f`9q/<p]'`c";
      boolean boolean0 = false;
      int int0 = 175;
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      int int1 = (-3);
      int int2 = 1975;
      int int3 = 843;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -104
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "if_icmplt";
      stringArray0[1] = "if_icmplt";
      stringArray0[2] = "]Ig0R7.F7rW&";
      Utility.methodTypeToSignature("if_icmplt", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dreturn", "QWHG(BD-?z4?aBWB/", "getstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "d&";
      stringArray0[1] = "d&";
      stringArray0[2] = "d&";
      String string0 = "u0(rAlgJ(B=[xOna";
      stringArray0[3] = "u0(rAlgJ(B=[xOna";
      stringArray0[4] = "d&";
      stringArray0[5] = "d&";
      stringArray0[6] = "d&";
      stringArray0[7] = "d&";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("d&", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[xOna
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Utility.compactClassName("QV,GF:lP`", "QV,GF:lP`", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      boolean boolean0 = false;
      Utility.decode("void", false);
      String string0 = "%K(~g+h$@EW";
      Utility.replace("QV,GF:lP`", "QV,GF:lP`", "%K(~g+h$@EW");
      try { 
        Utility.typeOfSignature("KfQ%@{Luh.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KfQ%@{Luh.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Utility.signatureToString("SL>1");
      Utility.compactClassName("short");
      Utility.getSignature("short");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)125;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-59);
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureReturnType("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$l$8b$I$A$A$A$A$A$A$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      boolean boolean0 = true;
      Utility.format(941, 941, true, '#');
      Utility.compactClassName("2e8b]I71K_PZd5", true);
      Utility.classOrInterface(941);
      Utility.replace("dload_1", "org.apache.bcel.classfile.Utility", "2e8b]I71K_PZd5");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      int int0 = 44;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3), 44, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "e";
      String string1 = "int";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("e", "int", "int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.searchOpcode("jsr_w");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte) (-1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)45, (-1854), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface(16384);
      Utility.replace("class", "PTHw`]?K;fGJ8(", "lreturn");
      String string0 = "B1G$,'.2";
      Utility.methodSignatureReturnType("B1G$,'.2", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("B1G$,'.2", "~Vi9pI0hEV#sZ g,rX", "~Vi9pI0hEV#sZ g,rX", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: B1G$,'.2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Utility.classOrInterface(1744);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byte byte0 = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)86;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Utility.convertString("");
      try { 
        Utility.typeOfMethodSignature("org.apache.bcel.classfile.RuntimeInvisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.RuntimeInvisibleParameterAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("d", ", npairs = ", false);
      try { 
        Utility.methodSignatureToString("]FX-d", "daload", "d", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]FX-d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1692), (-1036));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = Utility.compactClassName("wide", "wide", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.clearBit(3394, 3394);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.clearBit((-3919), (-3919));
      Writer writer0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("goto_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: goto_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.accessToString(56, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.format((-616), 64, true, 'A');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("/p?re(.~", "/p?re(.~", "-616AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /p?re(.~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byte byte0 = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("P", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("c@lP}R(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `c@lP}R('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = "2UdB%Ha@1";
      Utility.searchOpcode("2UdB%Ha@1");
      Utility.isJavaIdentifierPart('*');
      Utility.decode("eM", false);
      String string1 = "92Eq>YVl7Ey.7UEyq";
      String string2 = "\"";
      boolean boolean0 = true;
      DataInput dataInput0 = null;
      Constant[] constantArray0 = new Constant[4];
      ConstantNameAndType constantNameAndType0 = null;
      try {
        constantNameAndType0 = new ConstantNameAndType((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantNameAndType", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)57;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.methodSignatureReturnType("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `char'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = "kGO6Mz>~\"Mr";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("kGO6Mz>~\"Mr", "kGO6Mz>~\"Mr", "kGO6Mz>~\"Mr", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: kGO6Mz>~\"Mr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      Utility.isSet(105, 105);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1065, 9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = "Aj[AaAVv>L*^^Qv";
      try { 
        Utility.typeOfSignature("Aj[AaAVv>L*^^Qv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Aj[AaAVv>L*^^Qv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte)51;
      byteArray0[8] = (byte)10;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte)3;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = Utility.getSignature("0_}");
      Utility.compactClassName(", offset=", "0_}", true);
      String string1 = Utility.compactClassName("L0_};", true);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-2);
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$faCCD$c2$c2$fe", string2);
      
      String string3 = Utility.accessToString((int) (byte)68);
      assertEquals("protected volatile", string3);
      
      byte byte0 = Utility.typeOfSignature("L0_};");
      assertEquals((byte)14, byte0);
      
      String string4 = Utility.fillup("L0_};", (byte)67, true, '{');
      assertEquals("L0_};{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{", string4);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("dreturn");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintStream0;
      boolean boolean0 = false;
      mockPrintStream0.print(false);
      objectArray0[1] = (Object) "dreturn";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String string0 = "SOCkg";
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("SOCkg", stringArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)49;
      Utility.toHexString(byteArray0);
      Utility.fillup("20 31", (byte)32, false, '.');
      Utility.encode(byteArray0, false);
      Utility.compactClassName("&8w:YiG|2LJC r39=z>CTPz", "20 31", false);
      String string1 = "[";
      int int0 = 709;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("char", ", ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \", \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7][");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7][");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("", string0);
      
      Utility.compactClassName("athrow");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-123);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte) (-2);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1200), 97);
      assertEquals("0:    fmul\n1:    i2l\n2:    nop\n3:    faload\n4:    pop2\n5:    baload\n6:    aload_3\n7:    impdep1\n", string1);
      
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{}", string2);
  }
}
