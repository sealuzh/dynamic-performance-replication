/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 21:21:55 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.hasMoreChars();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.setXPath("[ (");
      xPathLexer0.and();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("[", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.setXPath("[ (");
      xPathLexer0.mod();
      xPathLexer0.or();
      Token token2 = xPathLexer0.identifier();
      assertEquals("", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.number();
      xPathLexer0.consume();
      xPathLexer0.or();
      xPathLexer0.div();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.minus();
      xPathLexer0.comma();
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      xPathLexer0.setXPath("");
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      
      xPathLexer0.LA(1);
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      xPathLexer0.getXPath();
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      char char0 = xPathLexer0.LA(373);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "";
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.colon();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.currentPosition();
      xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.mod();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.XPathLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals(" ", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("(", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.leftBracket();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.consume();
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftParen();
      assertEquals(1, token9.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.getXPath();
      xPathLexer0.getXPath();
      xPathLexer0.consume();
      xPathLexer0.and();
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.comma();
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer0.comma();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.hasMoreChars();
      xPathLexer0.at();
      xPathLexer0.notEquals();
      xPathLexer0.number();
      xPathLexer0.setXPath("");
      xPathLexer0.rightParen();
      xPathLexer0.star();
      xPathLexer0.LA(2302);
      xPathLexer0.hasMoreChars();
      xPathLexer0.literal();
      xPathLexer0.setXPath("");
      xPathLexer0.dollar();
      String string0 = xPathLexer0.getXPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+q[v`xg");
      xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      xPathLexer0.colon();
      xPathLexer0.consume(3155);
      xPathLexer0.comma();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.whitespace();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+q[v`xg");
      XPathLexer xPathLexer1 = new XPathLexer("+q[v`xg");
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer("(l[z:$B#5");
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("TFUh@7}k|$r.");
      xPathLexer3.div();
      xPathLexer3.div();
      xPathLexer1.plus();
      xPathLexer2.consume();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.and();
      xPathLexer2.rightBracket();
      XPathLexer xPathLexer5 = new XPathLexer("YOt,X");
      xPathLexer5.div();
      xPathLexer1.div();
      xPathLexer0.relationalOperator();
      xPathLexer4.leftBracket();
      xPathLexer1.or();
      xPathLexer3.slashes();
      xPathLexer1.relationalOperator();
      xPathLexer1.endPosition();
      xPathLexer0.leftBracket();
      xPathLexer2.getXPath();
      xPathLexer5.relationalOperator();
      Token token0 = xPathLexer1.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wyed:-/ %fQ");
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("d?Xb&c@ovdOar-4(Q");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.div();
      xPathLexer1.div();
      xPathLexer0.plus();
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.consume();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.and();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.rightBracket();
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer4.div();
      xPathLexer2.div();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer7 = new XPathLexer("");
      xPathLexer7.leftBracket();
      xPathLexer3.or();
      xPathLexer3.slashes();
      xPathLexer7.relationalOperator();
      xPathLexer4.endPosition();
      xPathLexer0.leftBracket();
      xPathLexer1.getXPath();
      xPathLexer1.relationalOperator();
      Token token0 = xPathLexer6.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("eGGb9>");
      Token token0 = xPathLexer1.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer1.identifierOrOperatorName();
      assertEquals("GGb9", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer1.doubleColon();
      assertEquals(19, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.and();
      XPathLexer xPathLexer2 = new XPathLexer("7XtzJA$J]!~}nA");
      Token token0 = xPathLexer2.number();
      assertEquals("7", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wyed:-/ %fQ");
      XPathLexer xPathLexer1 = new XPathLexer("N=?{Hq");
      Token token0 = xPathLexer1.number();
      xPathLexer0.div();
      Token token1 = xPathLexer1.nextToken();
      assertEquals("N", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer1.setXPath("N=?{Hq");
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      xPathLexer2.mod();
      xPathLexer2.setPreviousToken(token0);
      assertEquals(30, token0.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.or();
      xPathLexer2.identifier();
      xPathLexer0.consume();
      boolean boolean0 = xPathLexer0.isIdentifierChar('~');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      xPathLexer0.setXPath("c>{aoVnIeZ,Zy-goV\"");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      assertEquals("c", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(">", token1.getTokenText());
      assertEquals(9, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">dmAXE+)\"3>");
      Token token0 = xPathLexer0.relationalOperator();
      assertEquals(">", token0.getTokenText());
      assertNotNull(token0);
      assertEquals(9, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("<.Vnt@vR+d,CCk5Z");
      Token token0 = xPathLexer1.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
      
      xPathLexer1.and();
      Token token1 = xPathLexer1.number();
      assertEquals(31, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      Token token2 = xPathLexer1.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("V", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("/4-wfBl3ApF-z[8");
      XPathLexer xPathLexer2 = new XPathLexer("A\u0006?DE|Q8s2H&");
      xPathLexer1.plus();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("");
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.div();
      xPathLexer1.div();
      xPathLexer4.plus();
      xPathLexer2.consume();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.and();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.rightBracket();
      xPathLexer1.identifier();
      xPathLexer1.hasMoreChars();
      Token token0 = xPathLexer2.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b}44jk.cL/K:/>lk");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      xPathLexer0.plus();
      xPathLexer0.equals();
      xPathLexer0.identifier();
      xPathLexer0.literal();
      String string0 = xPathLexer0.getXPath();
      assertEquals("b}44jk.cL/K:/>lk", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      xPathLexer0.doubleColon();
      xPathLexer0.not();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(18, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wyed:-/ %fQ");
      xPathLexer0.setXPath("wyed:-/ %fQ");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      assertEquals(15, token0.getTokenType());
      assertEquals("wyed", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(":", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.and();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("[", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("(", token2.getTokenText());
      
      xPathLexer0.setXPath("[ (");
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertNotNull(token3);
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals("[", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("40,k@uYul8");
      xPathLexer0.number();
      xPathLexer0.not();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wyed:-/ %fQ");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("wy", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("e", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.slashes();
      assertEquals("-/", token4.getTokenText());
      assertEquals(12, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("%fQ", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("<.Vnt@vR+d,CCk5Z");
      Token token0 = xPathLexer1.not();
      assertEquals("<", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer1.and();
      Token token1 = xPathLexer1.number();
      assertEquals(31, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("Vnt", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("<.Vnt@vR+d,CCk5Z");
      Token token0 = xPathLexer1.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
      
      xPathLexer1.and();
      xPathLexer0.relationalOperator();
      xPathLexer1.setXPath("<.Vnt@vR+d,CCk5Z");
      Token token1 = xPathLexer1.dots();
      assertEquals("<.", token1.getTokenText());
      assertEquals(14, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      int int0 = xPathLexer1.endPosition();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      xPathLexer0.setXPath(")");
      XPathLexer xPathLexer1 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      Token token0 = xPathLexer1.identifierOrOperatorName();
      assertEquals("c", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      assertNotNull(token0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(2, token1.getTokenType());
      assertEquals(")", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<");
      xPathLexer0.nextToken();
      xPathLexer0.consume((-55));
      assertEquals("<", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kL Fg06>5ppZ");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.notEquals();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals(" ", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("F", token3.getTokenText());
      
      xPathLexer0.setXPath("kL Fg06>5ppZ");
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.notEquals();
      assertEquals("kL", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(")");
      xPathLexer0.setXPath("kL Fg06>5ppZ");
      XPathLexer xPathLexer2 = new XPathLexer("kL Fg06>5ppZ");
      xPathLexer2.identifierOrOperatorName();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("kL", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_E6hI#(q2\"c");
      Token token0 = xPathLexer0.not();
      assertEquals("_", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("E6hI", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.not();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.nextToken();
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.setXPath("c>{aoVnIeZ,Zy-goV\"");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals(">", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("c>", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token1 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token1);
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      assertEquals("{aoVnIeZ,Zy-goV\"", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      XPathLexer xPathLexer1 = new XPathLexer("P@k(&/X");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals(">", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("P", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer1.setXPath("c>{aoVnIeZ,Zy-goV\"");
      int int0 = xPathLexer1.currentPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("c>", token1.getTokenText());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.slashes();
      assertEquals("{", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("aoVnIeZ", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer0.consume((-1));
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.rightParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token3);
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.not();
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      xPathLexer0.setXPath("");
      xPathLexer0.setXPath("8$`_-57BLCMnJ");
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("8", token5.getTokenText());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("$", token6.getTokenText());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      assertEquals("`", token8.getTokenText());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      assertEquals("_", token9.getTokenText());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      xPathLexer0.notEquals();
      xPathLexer1.doubleColon();
      xPathLexer1.literal();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z*\"");
      XPathLexer xPathLexer1 = new XPathLexer("l;`s12[-o!z!xH]");
      xPathLexer1.setXPath("l;`s12[-o!z!xH]");
      Token token0 = xPathLexer1.identifierOrOperatorName();
      assertEquals("l", token0.getTokenText());
      assertNotNull(token0);
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(";`s12[-o!z!xH]", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("40,k@uYul8");
      Token token0 = xPathLexer0.slashes();
      assertEquals("4", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("0", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("40,k@uYul8");
      xPathLexer0.setXPath("G 1$Bl*i88?]");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("G", token0.getTokenText());
      assertNotNull(token0);
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("1", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("40,k@uYul8");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("0", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(32, token2.getTokenType());
      assertEquals(",", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("<.Vnt@vR+d,CCk5Z");
      Token token0 = xPathLexer1.not();
      assertEquals("<", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer1.identifierOrOperatorName();
      assertEquals(".Vnt", token1.getTokenText());
      assertNotNull(token1);
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("@", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("c", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(">{", token1.getTokenText());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[\"WPWK");
      Token token0 = xPathLexer0.star();
      assertEquals("[", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("\"W", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals("P", token3.getTokenText());
      
      xPathLexer0.whitespace();
      Token token4 = xPathLexer0.not();
      xPathLexer0.consume();
      token4.toString();
      token4.toString();
      xPathLexer0.relationalOperator();
      token4.toString();
      xPathLexer0.rightBracket();
      xPathLexer0.slashes();
      xPathLexer0.div();
      token4.toString();
      token4.toString();
      token4.toString();
      xPathLexer0.leftParen();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      String string0 = token4.toString();
      assertEquals("[ (23) (K)", string0);
      
      xPathLexer0.isIdentifierChar('r');
      xPathLexer0.setPreviousToken(token4);
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      xPathLexer0.mod();
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertNull(token8);
      
      xPathLexer0.literal();
      Token token9 = xPathLexer0.rightBracket();
      assertEquals(4, token9.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.nextToken();
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'4>%$FG.]z[mIh2");
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("'4>%$FG.]z[mIh2");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.dots();
      xPathLexer2.div();
      xPathLexer1.plus();
      xPathLexer1.consume();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.and();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("$hAc^Sa");
      XPathLexer xPathLexer2 = new XPathLexer("A\u0006?DE|Q8s2H&");
      xPathLexer2.mod();
      xPathLexer1.slashes();
      xPathLexer2.at();
      xPathLexer2.nextToken();
      xPathLexer0.setXPath("P@k(&/X");
      xPathLexer1.currentPosition();
      String string0 = xPathLexer1.getXPath();
      assertEquals("$hAc^Sa", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.setXPath("|8t<66NX&GfJQfeDxQS");
      Token token1 = xPathLexer0.nextToken();
      assertEquals("|", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("8", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("40,k@uYul8");
      xPathLexer0.div();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      Token token0 = xPathLexer0.plus();
      assertEquals("c", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token2.getTokenText());
      assertNotNull(token2);
      assertEquals(15, token2.getTokenType());
      
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      xPathLexer0.setXPath("7LkkgOuXJ ]1z^");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("7LkkgOuXJ", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      assertNotNull(token0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(4, token1.getTokenType());
      assertEquals("]", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6:>[PON");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("6", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("t|[=/Lt\"");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("t", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVIeZZy-goV\"");
      xPathLexer0.setXPath("%,y");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertNotNull(token0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("%,y", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("!", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{!oVnleZ,Zy-LoV\"");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(">{", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(23, token2.getTokenType());
      assertEquals("!", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("EF;5}8)[5n}");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("F", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'@Q/NQxjp@");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("'", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(16, token1.getTokenType());
      assertEquals("@", token1.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.whitespace();
      Token token2 = xPathLexer0.number();
      token2.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (30) ()", string0);
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("/", token3.getTokenText());
      
      xPathLexer0.setPreviousToken(token2);
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      xPathLexer0.colon();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      xPathLexer0.consume(114);
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      xPathLexer0.consume(10);
      int int0 = xPathLexer0.endPosition();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      xPathLexer0.setXPath("Z1KL]C,f&NG}/Kf\"H");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Z1KL", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G/XI(*cq3s.4");
      xPathLexer0.setXPath("7uU).75/jwR~");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("7", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("EF;5}8)[5n}");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("EF", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("5", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wyed:-/ %fQ");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("wy", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals("e", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.setXPath("wyed:-/ %fQ");
      Token token3 = xPathLexer0.nextToken();
      assertEquals("wyed", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kbde^\bS`k\"q&");
      Token token0 = xPathLexer0.literal();
      assertEquals("bde^\bS`", token0.getTokenText());
      assertNotNull(token0);
      assertEquals(27, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("40,k@uYul8");
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      Token token0 = xPathLexer1.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(1, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/W>C7k=CY:");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(11, token1.getTokenType());
      assertEquals("/", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("W", token2.getTokenText());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals(">", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("c>", token0.getTokenText());
      
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("oV", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("nIeZ", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("40,k@uYul8");
      xPathLexer0.div();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("4", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("0", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(",", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      xPathLexer0.setXPath("40,k@uYul8");
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals(",", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("40,k@uYul8");
      XPathLexer xPathLexer1 = new XPathLexer("[ ^w(");
      Token token0 = xPathLexer1.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("^w(", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("c", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(">{", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("a", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("oV", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("eZ", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kbde^\b,`k\"q&");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("kbde", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("^\b", token1.getTokenText());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals("`", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wyed:-/ %fQ");
      XPathLexer xPathLexer1 = new XPathLexer("N=?{Hq");
      Token token0 = xPathLexer1.colon();
      assertEquals("N", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("w", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("=", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(".", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("<.Vnt@vR+d,CCk5Z");
      Token token0 = xPathLexer1.not();
      assertEquals("<", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(13, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+q[v`xg");
      XPathLexer xPathLexer1 = new XPathLexer("+q[v`xg");
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer("(l[z:$B#5");
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("TFUh@7}k|$r.");
      xPathLexer3.div();
      xPathLexer3.div();
      xPathLexer1.plus();
      xPathLexer2.consume();
      xPathLexer0.and();
      xPathLexer2.rightBracket();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("YOt,X");
      xPathLexer4.div();
      xPathLexer1.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.leftBracket();
      xPathLexer1.or();
      xPathLexer3.slashes();
      xPathLexer1.relationalOperator();
      xPathLexer1.endPosition();
      xPathLexer0.leftBracket();
      xPathLexer2.getXPath();
      xPathLexer4.relationalOperator();
      Token token0 = xPathLexer1.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+q[v`xg");
      XPathLexer xPathLexer1 = new XPathLexer("+q[v`xg");
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer("(l[z:$B#5");
      Token token0 = xPathLexer2.nextToken();
      assertEquals(1, token0.getTokenType());
      assertEquals("(", token0.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("TFUh@7}k|$r.");
      xPathLexer3.div();
      xPathLexer3.div();
      Token token1 = xPathLexer1.plus();
      assertEquals("+", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      xPathLexer2.consume();
      xPathLexer0.and();
      xPathLexer0.setXPath("");
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("q", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o%:AsNdv$T/'E@Vi");
      xPathLexer0.div();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("o", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("%:", token1.getTokenText());
      
      xPathLexer0.pipe();
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("N", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("dv", token4.getTokenText());
      
      Token token5 = xPathLexer0.not();
      assertEquals("$", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.literal();
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      assertEquals("", token6.getTokenText());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      xPathLexer0.nextToken();
      Token token8 = xPathLexer0.nextToken();
      assertEquals((-1), token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("40,k@uYul8");
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("4", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("0,", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("k@", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      assertEquals("ul8", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pomVAn");
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      Token token0 = xPathLexer0.star();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(20, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(">{", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("a", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      xPathLexer0.or();
      Token token3 = xPathLexer1.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("c>", token3.getTokenText());
      
      Token token4 = xPathLexer1.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("oVnIeZ", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+q[v`xg");
      XPathLexer xPathLexer1 = new XPathLexer("+q[v`xg");
      Token token0 = xPathLexer1.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("+q", token0.getTokenText());
      
      xPathLexer0.plus();
      xPathLexer1.operatorName();
      Token token1 = xPathLexer1.nextToken();
      assertEquals("[", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("TFUh@7}k|$r.");
      Token token2 = xPathLexer2.pipe();
      assertEquals("T", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      xPathLexer2.div();
      XPathLexer xPathLexer3 = new XPathLexer("+q[v`xg");
      Token token3 = xPathLexer3.nextToken();
      assertEquals(5, token3.getTokenType());
      assertEquals("+", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wyed:-/ %fQ");
      XPathLexer xPathLexer1 = new XPathLexer("N=?{Hq");
      xPathLexer0.mod();
      xPathLexer0.div();
      xPathLexer1.nextToken();
      xPathLexer1.setXPath("N=?{Hq");
      XPathLexer xPathLexer2 = new XPathLexer("U=l!!%zj#Ulz<");
      xPathLexer2.and();
      Token token0 = xPathLexer2.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("U", token0.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(11, int0);
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("w", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("40,k@uYul8");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("0", token1.getTokenText());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals(",k", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("@u", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("Yul8", token4.getTokenText());
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals("Y", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer("(l[z:$B#5");
      xPathLexer1.operatorName();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(9, token0.getTokenType());
      assertEquals(">", token0.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      xPathLexer1.div();
      xPathLexer2.div();
      Token token1 = xPathLexer2.plus();
      assertEquals("(", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.and();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token2 = xPathLexer4.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("aoVnIeZ", token3.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      xPathLexer3.div();
      xPathLexer3.div();
      xPathLexer5.setXPath("");
      XPathLexer xPathLexer6 = new XPathLexer("");
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token4 = xPathLexer5.nextToken();
      assertEquals((-1), token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("|4=5;6{T+\"{~)");
      Token token1 = xPathLexer1.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer1.div();
      Token token2 = xPathLexer1.nextToken();
      assertEquals(17, token2.getTokenType());
      assertEquals("|", token2.getTokenText());
      
      xPathLexer1.setXPath("VqiOXJ3sk");
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      Token token3 = xPathLexer1.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("VqiOXJ3sk", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N=?{Hq");
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("wyed:-/ %fQ");
      xPathLexer0.or();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("N=", token0.getTokenText());
      
      Token token1 = xPathLexer1.doubleColon();
      assertEquals("wy", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("6H&v]SwJ`");
      Token token0 = xPathLexer0.not();
      assertEquals("6", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("|5n}e*_^iS");
      Token token1 = xPathLexer1.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("H", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ ^w(");
      XPathLexer xPathLexer1 = new XPathLexer("io<?,xB@s7tD");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("io", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer1.equals();
      assertEquals("<", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer1.not();
      assertEquals("?", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("s");
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer("s");
      xPathLexer1.operatorName();
      Token token0 = xPathLexer2.nextToken();
      assertEquals(15, token0.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("v@AZ)z#g;P");
      xPathLexer3.div();
      XPathLexer xPathLexer4 = new XPathLexer("wd6$U^s6Q");
      xPathLexer4.div();
      Token token1 = xPathLexer3.plus();
      assertEquals("v", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("s");
      xPathLexer5.consume();
      xPathLexer0.and();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token2 = xPathLexer3.rightBracket();
      assertEquals("@", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      xPathLexer2.nextToken();
      XPathLexer xPathLexer7 = new XPathLexer(")");
      xPathLexer6.div();
      XPathLexer xPathLexer8 = new XPathLexer(")");
      xPathLexer8.div();
      XPathLexer xPathLexer9 = new XPathLexer("");
      xPathLexer9.setXPath("v@AZ)z#g;P");
      XPathLexer xPathLexer10 = new XPathLexer("&_ih*:.9`U'P#");
      xPathLexer10.relationalOperator();
      Token token3 = xPathLexer3.nextToken();
      assertEquals("AZ", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("40,k@uYul8");
      xPathLexer0.div();
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      xPathLexer0.consume();
      xPathLexer0.and();
      Token token2 = xPathLexer1.rightBracket();
      assertEquals("4", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("z.[6");
      xPathLexer1.div();
      XPathLexer xPathLexer4 = new XPathLexer("\"8RlZ_");
      xPathLexer4.div();
      xPathLexer0.setXPath("\"8RlZ_");
      XPathLexer xPathLexer5 = new XPathLexer("z.[6");
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token3 = xPathLexer5.nextToken();
      assertEquals("z.", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("EF;5}8)[5n}");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("E", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("F", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("q:J3)%;-D<'!");
      xPathLexer1.colon();
      Token token2 = xPathLexer1.nextToken();
      assertEquals(18, token2.getTokenType());
      assertEquals(":", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wyed:-/ %fQ");
      XPathLexer xPathLexer1 = new XPathLexer("wyed:-/ %fQ");
      Token token0 = new Token(110, "9ko/V", 117, 117);
      xPathLexer1.setPreviousToken(token0);
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("wy", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("e", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("R7,IW");
      xPathLexer2.or();
      Token token3 = xPathLexer1.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("wy", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer2.nextToken();
      assertEquals("R7", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer2.minus();
      assertEquals(",", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YZ31tz7^\"D|I@");
      xPathLexer0.setXPath("4p vzN]iLUK+Girq#");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("4p", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("vzN", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("(l[z:$B#5");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("(l[z:$B#5");
      xPathLexer0.div();
      xPathLexer0.div();
      Token token0 = xPathLexer2.plus();
      assertEquals("(", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      xPathLexer1.consume();
      xPathLexer2.and();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer2.nextToken();
      assertEquals("l", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("TFUh@7}k|$r.");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.div();
      xPathLexer2.div();
      xPathLexer3.setXPath("");
      XPathLexer xPathLexer5 = new XPathLexer("");
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token3 = xPathLexer7.nextToken();
      assertEquals((-1), token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("EF;5}8)[5n}");
      Token token0 = xPathLexer0.dollar();
      String string0 = token0.toString();
      assertEquals("[ (26) (E)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.div();
      xPathLexer0.consume(54);
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("q:J3)%;-D<'!");
      Token token2 = xPathLexer1.rightBracket();
      xPathLexer1.setPreviousToken(token2);
      assertEquals("q", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer1.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals(":", token3.getTokenText());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals("J3)%;-D<'!", token4.getTokenText());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kbde^\bS`k\"q&");
      Token token0 = xPathLexer0.at();
      assertEquals("k", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.literal();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("", token1.getTokenText());
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("A\u0006?DE|Q8s2H&");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      xPathLexer2.setXPath("KB<HV3[3cBLGE ");
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer2.nextToken();
      assertEquals("KB", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("c>", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("{", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("Vn", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("IeZ", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("EF;5}8)[5n}");
      Token token0 = xPathLexer0.dollar();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("WO7K'Eg22&2 j-.m");
      xPathLexer1.number();
      xPathLexer0.rightBracket();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer2 = new XPathLexer("WO7K'Eg22&2 j-.m");
      xPathLexer2.consume();
      xPathLexer2.nextToken();
      xPathLexer1.rightBracket();
      xPathLexer2.setXPath("[ (26) (E)");
      assertEquals("[ (26) (E)", xPathLexer2.getXPath());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d?Xb&c@ovdOar-4(Q");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("d?", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("Xb", token1.getTokenText());
      
      Token token2 = xPathLexer1.rightBracket();
      assertEquals(4, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kbde^\bS`k\"q&");
      xPathLexer0.leftBracket();
      xPathLexer0.literal();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      assertEquals("kbde^\bS`k\"q&", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      Token token0 = xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(13, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals(">{", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("a", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      Token token3 = xPathLexer1.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("oVnIeZ,Zy-goV\"", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$jtf4@");
      Token token0 = xPathLexer0.star();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("$", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("jt", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("f", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("$jtf4@");
      Token token3 = xPathLexer1.nextToken();
      assertEquals(26, token3.getTokenType());
      assertEquals("$", token3.getTokenText());
      
      Token token4 = xPathLexer1.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("j", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("c>", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("o", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      Token token3 = xPathLexer1.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("VnIeZ", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("WoG<V|]V@R8<");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.setXPath("f");
      xPathLexer1.consume();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("f", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("|4=5;6{T+\"{~)");
      XPathLexer xPathLexer2 = new XPathLexer("c.5");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.number();
      Token token1 = xPathLexer2.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer2.whitespace();
      assertEquals("", token2.getTokenText());
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer2.nextToken();
      assertEquals(31, token3.getTokenType());
      assertEquals(".5", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("WoG<V|]V@R8<");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.setXPath("f");
      xPathLexer1.consume();
      Token token1 = xPathLexer1.nextToken();
      assertEquals("WoG", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kbde^\bS`k\"q&");
      Token token0 = xPathLexer0.literal();
      assertEquals(27, token0.getTokenType());
      assertNotNull(token0);
      assertEquals("bde^\bS`", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("\"q", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("&", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("&", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      Token token0 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(18, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(">{", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("a", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      Token token3 = xPathLexer1.whitespace();
      assertEquals((-2), token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("oVnIeZ", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!1jcC,");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("!", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("HX=iK'XS]MjzC2ijr(");
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.comma();
      assertEquals("1", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("jcC,", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("j", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h}>y1885i^3$T#");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("h", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!1jcC,");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(23, token0.getTokenType());
      assertEquals("!", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("HX=iK'XS]MjzC2ijr(");
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.notEquals();
      assertEquals("1j", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("c", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("C,", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("C", token4.getTokenText());
      
      Token token5 = xPathLexer1.leftParen();
      assertEquals("H", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@1;!oqfix%l6~`k[Z~S");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("@", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("1;", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.number();
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c>{aoVnIeZ,Zy-goV\"");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("KB<HV3[3cBLGE ");
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.hasMoreChars();
      xPathLexer0.setXPath("')\"Ll");
      assertEquals("')\"Ll", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("EF;5}8)[5n}");
      Token token0 = xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(6, token0.getTokenType());
      assertEquals("E", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("F", token1.getTokenText());
      
      xPathLexer0.consume(54);
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("q:J3)%;-D<'!");
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mn@Zt@x$q5U$pP7R#");
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("DJ*!m#O{a119&");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("D", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("J", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals("!", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("m#O{a119&", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1GTq@GkR");
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("89f$");
      Token token0 = xPathLexer1.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("8", token0.getTokenText());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("9", token1.getTokenText());
      
      Token token2 = xPathLexer1.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("f", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1GTq@GkR");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("GTq", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kbde^\bS`k\"q&");
      xPathLexer0.doubleColon();
      xPathLexer0.div();
      xPathLexer0.and();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r*kAJKvO");
      XPathLexer xPathLexer1 = new XPathLexer("r*kAJKvO");
      Token token0 = xPathLexer1.doubleColon();
      assertEquals("r*", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      xPathLexer1.setXPath("<.Vnt@vR+d,CCk5Z");
      Token token1 = xPathLexer1.nextToken();
      assertEquals("<", token1.getTokenText());
      assertEquals(7, token1.getTokenType());
      
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals(".Vnt", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r/\"}i/NSr_");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("r", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m7Q}=x~OvJ?OH*");
      XPathLexer xPathLexer1 = new XPathLexer(" L!tPY|`");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("L", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.at();
      xPathLexer0.leftParen();
      xPathLexer0.rightBracket();
      xPathLexer0.or();
      xPathLexer0.setXPath("r,91\"8\"3BD/\"K");
      xPathLexer0.pipe();
      xPathLexer0.minus();
      xPathLexer0.getXPath();
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.dollar();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+(");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(5, token0.getTokenType());
      assertEquals("+", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("(", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o%:AsNdv$T/'E@Vi");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      xPathLexer1.setPreviousToken(token0);
      assertEquals("o%", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wyrd:-/%fQ");
      XPathLexer xPathLexer1 = new XPathLexer("Dg2");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("Dg2", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(")", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_c0>S");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("_c0", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".71.oy9");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(".71", token0.getTokenText());
      assertEquals(31, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*cU/Lf}ezh4)g");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(20, token0.getTokenType());
      assertEquals("*", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" QRt%PzVT|Vv|");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("QRt", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gtA");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LD} )uo/)77bpS*!TH~");
      XPathLexer xPathLexer1 = new XPathLexer("D5x3%{}2i,,%}j");
      Token token0 = xPathLexer1.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("D5", token0.getTokenText());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("x3", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("DJ*!m#O{a119&");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("D", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("J", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("*!", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("#O{a119&", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".71.oy9");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("71.", token0.getTokenText());
      assertEquals(31, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("oy9", token1.getTokenText());
      assertEquals((-1), token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("p^^");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("^^", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("p^^");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("p", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wyed:-/ %fQ");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("wy", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("e", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals("d", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.and();
      Token token5 = xPathLexer0.slashes();
      assertEquals("/", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("%fQ", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".1.oy9");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(31, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(".o", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      assertEquals("y9", token2.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals("y", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".1.oy9");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.setPreviousToken((Token) null);
      assertEquals(".1.oy9", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".1.oy9");
      XPathLexer xPathLexer1 = new XPathLexer("pi}Ky]jtMlv@-FP+Y");
      XPathLexer xPathLexer2 = new XPathLexer("MTW23TBd'OyO,PD]");
      xPathLexer2.nextToken();
      Token token0 = xPathLexer1.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s(m}'Q");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.slashes();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer1.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("s", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1GTq@GkR");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("1", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token1);
      assertEquals("G", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("T", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("q", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2(8mA'R");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("(", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'6j'ph@y\u0000");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(27, token0.getTokenType());
      assertEquals("6j", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("ph@y\u0000", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("p", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".2lxyV9");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(31, token0.getTokenType());
      assertEquals(".2", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("l", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("..0zBK>VV2=(\"9{e%");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(".0", token1.getTokenText());
      assertEquals(31, token1.getTokenType());
  }
}
