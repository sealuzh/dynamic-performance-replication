/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:30:26 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.CharArrayWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.time.Period;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Object object1 = new Object();
      JSONArray jSONArray0 = new JSONArray();
      float float0 = new Integer(72);
      // Undeclared exception!
      try { 
        jSONArray0.getLong(159);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 159, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = new JSONArray(list0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(72);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 72, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set((-1), (Object) null);
      Object object0 = jSONArray0.clone();
      assertNotSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      Object object0 = new Object();
      jSONArray1.setRelatedArray(object0);
      int int0 = Opcodes.IF_ICMPNE;
      jSONArray1.size();
      jSONArray0.fluentRetainAll(jSONArray1);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1);
      jSONArray0.clone();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Object object0 = new Object();
      Period period0 = Period.ZERO;
      period0.getChronology();
      jSONArray0.listIterator(0);
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      Object object1 = new Object();
      boolean boolean1 = jSONArray0.equals(object1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray2.getJSONObject(72);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 72, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E`ZWW<buw\u0004gK4w");
      JSONArray jSONArray0 = new JSONArray(2385);
      jSONArray0.toArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(2385);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2385, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      Period period0 = Period.ofDays(72);
      period0.getChronology();
      period0.minusDays(989);
      int int0 = 6;
      LinkedList<PropertyNamingStrategy> linkedList0 = new LinkedList<PropertyNamingStrategy>();
      jSONArray0.addAll((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Object object0 = new Object();
      jSONArray1.setRelatedArray(object0);
      int int0 = Calendar.MINUTE;
      jSONArray1.remove((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray1.size();
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll((-805), (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -805, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      int int0 = Opcodes.FCONST_0;
      int int1 = 2436;
      JSONArray jSONArray1 = jSONArray0.fluentSet(2436, serializeConfig0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(2436);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.serializer.SerializeConfig@9
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(989);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) jSONObject0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      JSONArray jSONArray2 = jSONArray1.fluentSet((-1), mockThaiBuddhistDate0);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2416);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) mockHijrahDate0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray3.getJSONArray(72);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 72, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Object object0 = new Object();
      jSONArray0.setRelatedArray(object0);
      int int0 = Opcodes.IF_ICMPNE;
      jSONArray0.size();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(154);
      Object object0 = new Object();
      jSONArray0.add(object0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-1623));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      int int0 = 0;
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>();
      jSONArray0.containsAll(linkedHashSet0);
      jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.addAll(3655, (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3655, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(76);
      Object object0 = new Object();
      jSONArray0.lastIndexOf(object0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(79);
      // Undeclared exception!
      try { 
        jSONArray0.getDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(811);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getInteger(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(79);
      jSONArray0.add(0, (Object) "MY-N7dow");
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(76);
      Object object0 = new Object();
      jSONArray0.lastIndexOf(object0);
      double double0 = new Integer(989);
      Type type0 = jSONArray0.getComponentType();
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(linkedList0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.setAsmEnable(true);
      parserConfig0.setAutoTypeSupport(false);
      JSON.toJSON((Object) linkedList0, parserConfig0);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll(0, (Collection<?>) jSONArray0);
      JSONArray jSONArray4 = new JSONArray(jSONArray3);
      jSONArray4.fluentRemove((Object) jSONArray3);
      jSONArray4.hashCode();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      Object object0 = new Object();
      jSONArray1.setRelatedArray(object0);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : [{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Period period0 = Period.ZERO;
      period0.getChronology();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = Opcodes.FCONST_0;
      int int1 = 2451;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConcurrentHashMap.newKeySet();
      jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-949));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -949
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Period period0 = Period.ZERO;
      period0.getChronology();
      jSONArray0.listIterator(0);
      // Undeclared exception!
      try { 
        jSONArray0.getString(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        jSONArray2.fluentRemove(72);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 72, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray(0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) mockJapaneseDate0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        jSONArray1.getFloat(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        jSONArray0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray2.fluentSet((-693), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray1 = new JSONArray(72);
      Object object0 = new Object();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSON.toJSONString((Object) mockJapaneseDate0);
      jSONArray1.contains(object0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = Opcodes.FCONST_0;
      // Undeclared exception!
      try { 
        jSONArray0.subList(2436, 2436);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2436
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSON.defaultLocale = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(72);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 72, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = Opcodes.FCONST_0;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      jSONArray0.toString();
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      jSONArray0.clone();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(2419);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2419, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      int int0 = Calendar.ZONE_OFFSET;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2436, serializeConfig0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&w`zvWE{T");
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) serializeConfig0);
      jSONArray0.getLongValue(72);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(72);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray1.equals(mockJapaneseDate0);
      jSONArray2.getShortValue(72);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray3 = jSONArray1.fluentAdd(15, (Object) null);
      jSONArray3.remove(72);
      assertEquals(2436, jSONArray0.size());
      assertEquals(2436, jSONArray3.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      int int0 = Calendar.ZONE_OFFSET;
      JSONArray jSONArray1 = jSONArray0.fluentSet(2436, serializeConfig0);
      jSONArray0.fluentRemove((Object) serializeConfig0);
      jSONArray1.getLongValue(989);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray1.getBoolean(778);
      jSONArray0.DEFAULT_GENERATE_FEATURE = (int) (byte)72;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = jSONArray0.fluentRemove((int) (byte)1);
      jSONArray2.getJSONArray(778);
      jSONArray1.getJSONObject((byte)72);
      jSONArray2.getByteValue(989);
      LinkedHashSet<Method> linkedHashSet0 = new LinkedHashSet<Method>();
      jSONArray0.fluentAddAll(989, (Collection<?>) linkedHashSet0);
      assertEquals(2435, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : [{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      int int0 = Opcodes.FCONST_0;
      JSONArray jSONArray1 = jSONArray0.fluentSet(11, serializeConfig0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(11);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONObject cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      int int0 = Calendar.MONDAY;
      JSONArray jSONArray1 = jSONArray0.fluentSet(2436, serializeConfig0);
      jSONArray1.getFloatValue(1332);
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>();
      jSONArray1.getTimestamp(1332);
      int int1 = (-3610);
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue((-3610));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3610
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(false);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) jSONObject0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSON.toJSON((Object) null);
      Class<String> class0 = String.class;
      jSONArray1.setComponentType(class0);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray(154);
      JSONPath.Operator[] jSONPath_OperatorArray0 = new JSONPath.Operator[2];
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      jSONPath_OperatorArray0[0] = jSONPath_Operator0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.EQ;
      jSONPath_OperatorArray0[1] = jSONPath_Operator1;
      jSONArray0.toArray(jSONPath_OperatorArray0);
      Object object0 = new Object();
      jSONArray0.add(object0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray0.isEmpty();
      uTF8Decoder0.charset();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      int int0 = Opcodes.FCONST_0;
      JSONArray jSONArray1 = jSONArray0.fluentSet(2436, serializeConfig0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray2.getJSONArray(989);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(2436);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.serializer.SerializeConfig@e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      jSONArray1.set(0, serializeConfig0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      assertEquals(1, jSONArray1.size());
      
      jSONArray0.fluentRemoveAll(jSONArray2);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(jSONArray0);
      int int0 = jSONArray3.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      int int0 = 0;
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      linkedHashSet0.add(mockThaiBuddhistDate0);
      jSONArray0.containsAll(linkedHashSet0);
      jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.addAll(3655, (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3655, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      int int0 = Opcodes.FCONST_0;
      JSONArray jSONArray1 = jSONArray0.fluentSet(2423, serializeConfig0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.size();
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray0.getDouble(72);
      SerializeConfig.getGlobalInstance();
      jSONArray2.fluentRemove((Object) "1.2.46");
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      JSONArray jSONArray3 = jSONArray1.fluentAddAll((Collection<?>) linkedList0);
      jSONArray3.getObject(2424, (Type) class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray2.getJSONArray(72);
      jSONArray2.get(11);
      assertEquals(4848, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      int int0 = Calendar.ZONE_OFFSET;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-126);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2436, serializeConfig0);
      JSONArray jSONArray2 = jSONArray0.fluentRemove(989);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray3 = jSONArray2.fluentRemove((Object) serializeConfig0);
      jSONArray1.getLongValue(989);
      jSONArray1.getBoolean(792);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.stream();
      jSONArray3.lastIndexOf(serializeConfig0);
      jSONArray0.getDoubleValue(989);
      jSONArray3.getShortValue(31);
      jSONArray2.isEmpty();
      serializeConfig0.clearSerializers();
      jSONArray0.remove(0);
      jSONArray1.getByteValue(1203);
      jSONArray3.getBooleanValue(989);
      // Undeclared exception!
      try { 
        jSONArray2.getBigDecimal((-866));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -866
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Period period0 = Period.ZERO;
      period0.negated();
      period0.negated();
      period0.getChronology();
      jSONArray0.getRelatedArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      int int0 = Opcodes.FCONST_0;
      jSONArray0.fluentSet(2451, serializeConfig0);
      jSONArray0.getIntValue(989);
      jSONArray0.getFloatValue(72);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializeWriter serializeWriter0 = new SerializeWriter();
      MockLocalDate.now();
      jSONArray0.fluentRemove((Object) serializeConfig0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(72);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        PropertyNamingStrategy.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.alibaba.fastjson.PropertyNamingStrategy.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      int int0 = Calendar.ZONE_OFFSET;
      JSONArray jSONArray1 = jSONArray0.fluentSet(2436, serializeConfig0);
      jSONArray1.getLongValue(989);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray1.getBoolean(778);
      jSONArray0.add((Object) mockMinguoDate0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      mockThaiBuddhistDate0.getMockedClassName();
      jSONArray1.equals(jSONArray1);
      SerializeConfig serializeConfig1 = new SerializeConfig(16);
      serializeConfig1.clearSerializers();
      jSONArray0.isEmpty();
      jSONArray1.remove(2424);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = null;
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      int int0 = 2448;
      // Undeclared exception!
      try { 
        jSONArray1.getByte(691);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 691, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      int int0 = Calendar.ZONE_OFFSET;
      JSONArray jSONArray1 = jSONArray0.fluentSet(2436, serializeConfig0);
      JSONArray jSONArray2 = jSONArray0.fluentRemove((Object) serializeConfig0);
      jSONArray1.getLongValue(989);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray1.getBoolean(778);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.add((Object) mockMinguoDate0);
      jSONArray0.stream();
      JSONArray jSONArray3 = jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray3.getJSONArray(2422);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getObject(72, (Type) parameterizedTypeImpl0);
      jSONArray2.getJSONObject(72);
      jSONArray0.getByteValue(723);
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.46");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual float, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      int int0 = Opcodes.FCONST_0;
      jSONArray0.fluentSet(2423, serializeConfig0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray1.fluentRemove((Object) "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(2423);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.serializer.SerializeConfig@14
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      int int0 = Calendar.ZONE_OFFSET;
      JSONArray jSONArray1 = jSONArray0.fluentSet(2436, serializeConfig0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray3 = jSONArray2.fluentRemove(989);
      jSONArray1.getBoolean(792);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.stream();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      jSONArray3.add((Object) propertyNamingStrategy0);
      jSONArray2.fluentAddAll((Collection<?>) jSONArray2);
      jSONArray3.lastIndexOf(serializeConfig0);
      Integer integer0 = new Integer(4872);
      jSONArray3.getShortValue(31);
      // Undeclared exception!
      try { 
        jSONArray3.getDoubleValue(2436);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : CamelCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
