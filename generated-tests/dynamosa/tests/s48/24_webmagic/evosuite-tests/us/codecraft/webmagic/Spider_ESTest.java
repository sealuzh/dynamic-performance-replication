/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 16:30:43 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.PlainText;
import us.codecraft.webmagic.selector.Selector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XPath error!");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "J");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider0.setSpawnUrl(false);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider3 = spider0.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      Page page0 = new Page();
      Json json0 = page0.getJson();
      int int0 = 411;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(411, threadFactory0);
      spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 411);
      Page page1 = new Page();
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("^f:SlO", "");
      spider3.downloader(phantomJSDownloader0);
      Class<Pipeline> class0 = Pipeline.class;
      json0.toList(class0);
      Spider spider4 = spider2.setPipelines((List<Pipeline>) null);
      spider4.extractAndAddRequests(page1, false);
      FilePipeline filePipeline0 = new FilePipeline();
      // Undeclared exception!
      try { 
        spider4.thread((-3537));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("I^9dN@7xxCXpflG]H&?");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      FilePipeline filePipeline0 = new FilePipeline("I^9dN@7xxCXpflG]H&?");
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 5);
      Page page0 = new Page();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("R]3msaB", "/");
      spider1.downloader(phantomJSDownloader0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      Json json0 = new Json("bFo%97");
      spider0.run();
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      Spider spider2 = spider1.thread((ExecutorService) null, 2);
      Page page0 = new Page();
      Spider spider3 = spider2.thread(2);
      spider1.startRequests = (List<Request>) linkedList0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Spider spider4 = spider3.addPipeline((Pipeline) null);
      spider4.runAsync();
      assertEquals(Spider.Status.Init, spider4.getStatus());
      
      spider1.sleep(2);
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("I^9dN@7xxCXpflG]H&?");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      Spider spider2 = spider1.thread(1568);
      spider2.setDownloader((Downloader) null);
      Spider spider3 = spider0.setUUID((String) null);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      // Undeclared exception!
      try { 
        spider3.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*sASrS5XLwMGc*ojC");
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.startRequest(linkedList0);
      spider0.exitWhenComplete = false;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      spider1.getStatus();
      spider1.getUUID();
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      MockThread mockThread0 = new MockThread();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, true);
      spider0.thread((ExecutorService) null, 3964);
      Request request0 = new Request("");
      Request request1 = request0.setMethod("us.codecraft.webmagic.selector.SmartContentSelector");
      // Undeclared exception!
      try { 
        spider0.onError(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("EI&CF_}");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.sleep(2);
      Json json0 = new Json("EI&CF_}");
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'jdb<=lK{^rM|YE3.P");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setEmptySleepTime((-3252));
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "x|6xN%";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("x|6xN%");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      int int0 = (-719);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) forkJoinPool0, (-719));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "XPath error!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XPath error!");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string1 = "";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "(_J6N}o8sT\"Bp%tZA[`");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider3 = spider2.thread((ExecutorService) forkJoinPool0, 31);
      spider3.setUUID("XPath error!");
      // Undeclared exception!
      try { 
        spider3.get("XPath error!");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("I^9dN@7xxCXpflG]H&?");
      Spider spider0 = Spider.create(simplePageProcessor0);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      FilePipeline filePipeline0 = new FilePipeline("I^9dN@7xxCXpflG]H&?");
      Request request0 = new Request("/");
      request0.setMethod("I^9dN@7xxCXpflG]H&?");
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2938, threadFactory0);
      spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 2938);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "7hCNt ";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7hCNt ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider3 = spider2.setExecutorService(forkJoinPool0);
      spider3.startRequest((List<Request>) null);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider3.pipeline(resultItemsCollectorPipeline0);
      // Undeclared exception!
      try { 
        spider0.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(")e3X<pwBg?/");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(")e3X<pwBg?/");
      spider1.setScheduler(fileCacheQueueScheduler0);
      Json json0 = new Json(")e3X<pwBg?/");
      Class<Pipeline> class0 = Pipeline.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("u.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider2 = spider1.startRequest(list0);
      ForkJoinTask.getPool();
      Spider spider3 = spider2.setExecutorService((ExecutorService) null);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider4 = spider3.setScheduler(queueScheduler0);
      String[] stringArray0 = new String[7];
      String string0 = "rWboVf}Q.5N-DcJ92C";
      stringArray0[0] = "rWboVf}Q.5N-DcJ92C";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      // Undeclared exception!
      try { 
        spider4.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "`[?>1# nbZ1/+BxJ&d");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider0.getAll((Collection<String>) synchronousQueue0);
      PlainText.create("\"kW!5?TkD");
      PlainText.create("?w9");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"kW!5?TkD";
      stringArray0[1] = "\"kW!5?TkD";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      spider0.exitWhenComplete = false;
      Spider spider3 = spider2.thread((ExecutorService) null, 2);
      Page page0 = new Page();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("QYS*^", "QYS*^");
      spider3.setExecutorService((ExecutorService) null);
      page0.setSkip(true);
      Spider spider4 = spider2.clearPipeline();
      Json json0 = new Json("");
      Page.fail();
      Page page1 = page0.setSkip(true);
      // Undeclared exception!
      try { 
        spider4.extractAndAddRequests(page1, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("u.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("u.codecraft.webmagic.Spider$1");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      spider1.uuid = "Spider ";
      spider1.clearPipeline();
      spider1.stop();
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("u.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("u.codecraft.webmagic.Spider$1");
      int int0 = spider0.getThreadAlive();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "VI)h%ff>P%k7WO`9K";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VI)h%ff>P%k7WO`9K");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider1 = spider0.thread(2);
      spider1.sleep(2);
      Spider spider2 = spider1.pipeline((Pipeline) null);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider0.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      spider0.exitWhenComplete = false;
      Spider spider3 = spider2.thread((ExecutorService) null, 2);
      Page page0 = new Page();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("QYS*^", "QYS*^");
      spider3.downloader(phantomJSDownloader0);
      Page page1 = page0.setSkip(true);
      spider3.extractAndAddRequests(page1, false);
      FilePipeline filePipeline0 = new FilePipeline();
      spider1.pipeline(filePipeline0);
      // Undeclared exception!
      try { 
        spider2.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("u.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("u.codecraft.webmagic.Spider$1");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      // Undeclared exception!
      try { 
        spider1.get("u.codecraft.webmagic.Spider$1");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("I^9dN@7xxCXpflG]H&?");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      FilePipeline filePipeline0 = new FilePipeline("I^9dN@7xxCXpflG]H&?");
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      forkJoinPool0.getQueuedSubmissionCount();
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 2);
      Page page0 = new Page();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("R]3msaB", "/");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider1.getAll((Collection<String>) synchronousQueue0);
      spider0.getThreadAlive();
      spider2.initComponent();
      spider1.getScheduler();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("EI&CF_}");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider0.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("u.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(" stop success!");
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      // Undeclared exception!
      try { 
        spider1.get(" stop success!");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VI)h%ff>P%k7WO`9K");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("VI)h%ff>P%k7WO`9K", ")YxCa0dhESu");
      phantomJSDownloader0.setRetryNum(14);
      spider0.setDownloader(phantomJSDownloader0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      AtomicInteger atomicInteger0 = new AtomicInteger(4344);
      spider1.stat = atomicInteger0;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider0.scheduler(priorityScheduler0);
      spider2.runAsync();
      linkedList0.toArray();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("VI)h%ff>P%k7WO`9K");
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      // Undeclared exception!
      try { 
        spider0.addPipeline(resultItemsCollectorPipeline0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "`[?>1# nbZ1/+BxJ&d");
      Spider spider1 = spider0.setUUID("1J]7C");
      Spider spider2 = spider1.clearPipeline();
      String[] stringArray0 = new String[1];
      spider2.checkIfRunning();
      stringArray0[0] = "`[?>1# nbZ1/+BxJ&d";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "|XV_N7sz|9#";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("|XV_N7sz|9#");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.scheduler(queueScheduler0);
      int int0 = (-1);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      int int1 = 1;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1);
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor((-1), (-1), 0L, timeUnit0, blockingQueue0, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      Page page0 = new Page();
      page0.getJson();
      page0.getJson();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Z%s_MuD<@Dm#");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      boolean boolean0 = spider1.isExitWhenComplete();
      assertFalse(spider0.isSpawnUrl());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Spider spider0 = null;
      try {
        spider0 = new Spider((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      int int0 = 2;
      spider0.exitWhenComplete = false;
      Page page0 = new Page();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("QYS*^", "QYS*^");
      spider2.downloader(phantomJSDownloader0);
      spider1.extractAndAddRequests(page0, false);
      FilePipeline filePipeline0 = new FilePipeline();
      // Undeclared exception!
      try { 
        spider2.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Spider.Status.fromValue(86);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      ForkJoinTask.getPool();
      Spider spider2 = spider1.thread((ExecutorService) null, 86);
      Spider spider3 = spider2.clearPipeline();
      spider3.setExecutorService((ExecutorService) null);
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) priorityBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "Spider {} closed! {} pages downloaded.";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider {} closed! {} pages downloaded.");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.pipeline(resultItemsCollectorPipeline0);
      Spider spider2 = spider1.setSpawnUrl(true);
      // Undeclared exception!
      try { 
        spider2.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XqFiFl*Jg");
      Spider spider0 = Spider.create(simplePageProcessor0);
      boolean boolean0 = true;
      Spider spider1 = spider0.setExitWhenComplete(true);
      spider1.setUUID("G(pN0L'`~yP>oZ0#R");
      String string0 = "sSNOO^\\V|/";
      Json json0 = new Json("sSNOO^V|/");
      Class<SpiderListener> class0 = SpiderListener.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("]sN{ByR&B-An*?");
      Spider spider0 = new Spider(simplePageProcessor0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      PlainText.create("?w9");
      PlainText.create("]sN{ByR&B-An*?");
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setUUID("us.codecraft.webmagic.Spider$1");
      PlainText plainText0 = PlainText.create("_");
      assertNotNull(plainText0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider1.pipeline(consolePipeline0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("u.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("u.codecraft.webmagic.Spider$1");
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("u.codecraft.webmagic.Spider$1");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("java.io.tmpdir", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider0.downloader(phantomJSDownloader0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      spider1.thread((ExecutorService) forkJoinPool0, 31);
      Spider spider3 = spider2.setUUID("");
      // Undeclared exception!
      try { 
        spider3.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      spider1.thread((ExecutorService) null, 2);
      Page page0 = new Page();
      spider0.clearPipeline();
      String[] stringArray0 = new String[0];
      spider1.addUrl(stringArray0);
      Pipeline pipeline0 = null;
      Request[] requestArray0 = new Request[8];
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string0 = ":;nZ@t";
      Spider spider1 = spider0.setUUID(":;nZ@t");
      // Undeclared exception!
      try { 
        spider1.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      spider1.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Downloader downloader0 = null;
      Spider spider1 = spider0.setDownloader((Downloader) null);
      String string0 = "";
      spider1.setUUID("");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider1.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      Spider spider2 = spider0.downloader((Downloader) null);
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("EI&C`F_}");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.sleep(2);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("EI&C`F_}");
      Request request0 = new Request();
      Request request1 = request0.setPriority((-2007L));
      Request request2 = request1.addHeader("_cycle_tried_times", "_cycle_tried_times");
      // Undeclared exception!
      try { 
        spider0.onSuccess(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider1.pipeline(resultItemsCollectorPipeline0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_CallerRunsPolicy0);
      Spider spider3 = spider2.setExecutorService(scheduledThreadPoolExecutor0);
      spider3.clearPipeline();
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "QYS*\\^";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      spider0.exitWhenComplete = false;
      Spider spider3 = spider2.thread((ExecutorService) null, 2);
      Page page0 = new Page();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("QYS*^", "QYS*^");
      Spider spider4 = spider3.downloader(phantomJSDownloader0);
      Page page1 = page0.setSkip(true);
      spider3.extractAndAddRequests(page1, false);
      FilePipeline filePipeline0 = new FilePipeline();
      spider4.thread(2);
      Spider spider5 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider5.thread((ExecutorService) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("I^9dN@7xxCXpflG]H&?");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      FilePipeline filePipeline0 = new FilePipeline("I^9dN@7xxCXpflG]H&?");
      Spider spider2 = spider1.addPipeline(filePipeline0);
      spider2.pipeline(filePipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("I^9dN@7xxCXpflG]H&?");
      fileCacheQueueScheduler0.poll(spider1);
      // Undeclared exception!
      try { 
        spider1.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("MR/J1");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      Downloader downloader0 = null;
      Spider spider2 = spider1.setDownloader((Downloader) null);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider3 = spider2.setExecutorService(forkJoinPool0);
      String[] stringArray0 = new String[4];
      String string0 = "waitNewUrl - interrupted, error {}";
      stringArray0[0] = "waitNewUrl - interrupted, error {}";
      stringArray0[1] = "MR/J1";
      stringArray0[2] = "MR/J1";
      stringArray0[3] = "MR/J1";
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("I^9dN@7xxCXpflG]H&?");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      FilePipeline filePipeline0 = new FilePipeline("Eiy,[\"6D)* Ak");
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      spider0.thread((ExecutorService) forkJoinPool0, 2);
      Page page0 = new Page();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("R]3msaB", "/");
      spider0.downloader(phantomJSDownloader0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      Spider spider1 = spider0.setPipelines((List<Pipeline>) null);
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider1.pipeline(resultItemsCollectorPipeline0);
      spider1.setUUID(" error");
      spider2.getThreadAlive();
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request();
      spider0.getCollectorPipeline();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "g}WXq}m/`*NST5P";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("g}WXq}m/`*NST5P");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      int int0 = 0;
      // Undeclared exception!
      try { 
        spider1.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VI)h%ff>P%k7WO`9K");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("VI)h%ff>P%k7WO`9K", ")YxCa0dhESu");
      phantomJSDownloader0.setRetryNum(14);
      spider0.setDownloader(phantomJSDownloader0);
      spider0.setExitWhenComplete(false);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      spider1.runAsync();
      linkedList0.toArray();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      // Undeclared exception!
      try { 
        spider0.addPipeline(resultItemsCollectorPipeline0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      Spider spider3 = spider2.thread((ExecutorService) null, 2);
      Page page0 = new Page();
      Page page1 = page0.setSkip(true);
      page1.getJson();
      spider3.extractAndAddRequests(page1, false);
      spider3.getCollectorPipeline();
      Json json0 = new Json("QYS*^");
      Class<Selector> class0 = Selector.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "QYS*^";
      stringArray0[1] = "QYS*^";
      stringArray0[2] = "QYS*^";
      stringArray0[3] = "QYS*^";
      PlainText.create("+IWU ]");
      // Undeclared exception!
      try { 
        spider3.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("wpn@z&Ds^^s");
      spider1.sleep(4080);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider0.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("PC~Oni");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("D5}UJa#`5J7^dD", "D5}UJa#`5J7^dD");
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VI)h%ff>P%k7WO`9K");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(2);
      spider1.getThreadAlive();
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      Spider spider1 = spider0.clearPipeline();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "Spider is already running!";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("g}WXq}m/`*NST5P", "Spider is already running!");
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)37;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      Spider spider2 = spider1.thread((ExecutorService) null, 2);
      Page page0 = new Page();
      Spider spider3 = spider0.addPipeline((Pipeline) null);
      spider2.sleep(2);
      Request request0 = new Request((String) null);
      request0.setMethod("QYS*^");
      Request request1 = new Request();
      Request request2 = request1.setCharset("");
      request2.setPriority(1429L);
      spider3.setEmptySleepTime((byte)54);
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("|1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("?", "|1");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(5);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader1);
      spider2.setExitWhenComplete(true);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      spider1.setPipelines(linkedList1);
      Spider spider3 = spider2.thread(1);
      Spider spider4 = spider3.setExitWhenComplete(true);
      spider4.setSpawnUrl(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Request[] requestArray0 = new Request[2];
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      requestArray0[0] = null;
      String string0 = "";
      MockPrintStream mockPrintStream0 = new MockPrintStream("+s+");
      // Undeclared exception!
      try { 
        simplePageProcessor0.process((Page) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.processor.SimplePageProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VI)h%ff>P%k7WO`9K");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Request request0 = new Request();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Spider spider1 = spider0.setExitWhenComplete(true);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "`[?>1# nbZ1/+BxJ&d");
      spider0.setDownloader(phantomJSDownloader0);
      Spider spider1 = spider0.setUUID("UQ9%");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider0.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider1.getAll((Collection<String>) synchronousQueue0);
      PlainText.create("?w9");
      spider2.pipeline(resultItemsCollectorPipeline0);
      Request[] requestArray0 = new Request[0];
      Spider spider3 = spider2.addRequest(requestArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "UQ9%";
      stringArray0[1] = "UQ9%";
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request0 = new Request();
      Request request1 = request0.setMethod(".a[ezh*>9jY}7..Fs'");
      Request request2 = request1.setPriority(1948L);
      request2.setExtras(hashMap0);
      Spider spider4 = spider3.setDownloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider4.onSuccess(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      FilePipeline filePipeline0 = new FilePipeline("us.codecraft.webmagic.Spider$1");
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 2);
      Page page0 = new Page();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.Spider$1", "R]3msaB");
      spider1.downloader(phantomJSDownloader0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider1.getAll((Collection<String>) synchronousQueue0);
      spider1.getThreadAlive();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = Spider.STAT_STOPPED;
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("EI&CF_}");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.thread(2147483632);
      spider0.sleep(2147483632);
      Spider.Status spider_Status0 = Spider.Status.fromValue((-143));
      assertEquals(Spider.Status.Init, spider_Status0);
      
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("I^9dN@7xxCXpflG]H&?");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      spider0.setSpiderListeners((List<SpiderListener>) null);
      FilePipeline filePipeline0 = new FilePipeline("I^9dN@7xxCXpflG]H&?");
      Request request0 = new Request("/");
      request0.setCharset("I^9dN@7xxCXpflG]H&?");
      Json json0 = new Json("");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      spider1.thread((ExecutorService) null, 2);
      Page page0 = new Page();
      Spider spider2 = spider0.addPipeline((Pipeline) null);
      spider2.sleep(1);
      Request request0 = new Request("QYS*^");
      request0.setMethod("");
      Request request1 = new Request("");
      Request request2 = request1.addCookie("invalid regex", "us.codecraft.webmagic.Spider");
      Request request3 = request1.setCharset("Fk#IC{2iz$69w-V.{`");
      Request request4 = request3.setBinaryContent(true);
      request4.setPriority(1429L);
      // Undeclared exception!
      try { 
        spider0.onError(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "Thread interrupted when sleep";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isExitWhenComplete();
      ForkJoinPool.commonPool();
      Page page0 = new Page();
      page0.setSkip(true);
      spider0.uuid = "Thread interrupted when sleep";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, (-598));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("yes");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      spider1.extractAndAddRequests((Page) null, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider2 = spider1.setSpawnUrl(true);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("e5");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider2);
      // Undeclared exception!
      try { 
        fileCacheQueueScheduler0.push((Request) null, spider2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("I^9dN@7xxCXpflG]H&?");
      Spider spider0 = Spider.create(simplePageProcessor0);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      FilePipeline filePipeline0 = new FilePipeline("I^9dN@7xxCXpflG]H&?");
      ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExitWhenComplete(true);
      spider1.stop();
      Request request0 = new Request(">m R0");
      request0.addHeader("-=!", "Spider ");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "pc&r<bl&d@[");
      spider0.sleep(0);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("|1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setUUID("|1");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("?", "|1");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(5);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader1);
      Spider spider3 = spider2.setExitWhenComplete(true);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      spider2.runAsync();
      linkedList0.toArray();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      // Undeclared exception!
      try { 
        spider3.startUrls(list0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      Spider spider3 = spider2.thread((ExecutorService) null, 2);
      spider3.getCollectorPipeline();
      Json json0 = new Json("QYS*^");
      Class<Selector> class0 = Selector.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7hCNt ");
      Spider spider0 = new Spider(simplePageProcessor0);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("7hCNt ");
      Spider spider1 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider2 = spider1.scheduler(fileCacheQueueScheduler0);
      ForkJoinTask.getPool();
      spider2.thread((ExecutorService) null, 1945);
      spider1.clearPipeline();
      spider0.setExecutorService((ExecutorService) null);
      spider2.runAsync();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) priorityBlockingQueue0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      Spider spider3 = spider2.thread((ExecutorService) null, 2);
      Page page0 = new Page();
      linkedList0.iterator();
      spider0.scheduler((Scheduler) null);
      Page page1 = page0.setSkip(true);
      page1.getJson();
      spider3.extractAndAddRequests(page1, false);
      spider3.getCollectorPipeline();
      Json json0 = new Json("QYS*^");
      Class<Selector> class0 = Selector.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "QYS*^";
      stringArray0[1] = "QYS*^";
      stringArray0[2] = "QYS*^";
      stringArray0[3] = "QYS*^";
      spider3.setExecutorService((ExecutorService) null);
      PlainText.create("+IWU ]");
      // Undeclared exception!
      try { 
        spider3.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider.create(simplePageProcessor0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      String[] stringArray0 = new String[10];
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      spider0.exitWhenComplete = false;
      Spider spider3 = spider2.thread((ExecutorService) null, 2);
      Page page0 = new Page();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("QYS*^", "QYS*^");
      Spider spider4 = spider3.downloader(phantomJSDownloader0);
      Page page1 = new Page();
      spider4.startRequests = (List<Request>) linkedList0;
      spider4.clearPipeline();
      String[] stringArray0 = new String[0];
      spider4.addUrl(stringArray0);
      spider2.addPipeline((Pipeline) null);
      spider0.sleep(2561);
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("|1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("?", "|1");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(5);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader1);
      Spider spider3 = spider2.setExitWhenComplete(true);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      spider2.runAsync();
      //  // Unstable assertion: assertEquals(Spider.Status.Running, spider2.getStatus());
      
      spider2.thread(5);
      spider2.sleep(5);
      spider1.getThreadAlive();
      spider0.close();
      spider1.close();
      spider3.getThreadAlive();
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("I^9dN7xxCXpflGH&");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      FilePipeline filePipeline0 = new FilePipeline("I^9dN7xxCXpflGH&");
      Request request0 = new Request("/");
      Request request1 = request0.setMethod("I^9dN7xxCXpflGH&");
      Request request2 = request1.addCookie("", "Thread interrupted when sleep");
      Request request3 = request0.addCookie("Thread interrupted when sleep", "_cycle_tried_times");
      request2.setUrl("_cycle_tried_times");
      // Undeclared exception!
      try { 
        spider0.onError(request3);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VI)h%ff>P%k7xO`>K");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-3430));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      Spider spider2 = spider1.thread((ExecutorService) null, 2);
      Page page0 = new Page();
      spider0.addPipeline((Pipeline) null);
      spider2.sleep(2);
      Request request0 = new Request((String) null);
      Request request1 = request0.setMethod("QYS*^");
      Request request2 = request1.addCookie("", "");
      Request request3 = request2.setCharset("");
      Request request4 = request3.setPriority(1429L);
      // Undeclared exception!
      try { 
        spider2.onError(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.thread(6);
      // Undeclared exception!
      try { 
        spider0.sleep((-957));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "`[?>1# nbZ1/+BxJ&d");
      spider0.setDownloader(phantomJSDownloader0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider0.getAll((Collection<String>) synchronousQueue0);
      PlainText.create("\"kW!5?TkD");
      PlainText.create("?w9");
      Json json0 = new Json("U=:<<f>'F");
      spider0.run();
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(200);
      int int0 = Spider.STAT_STOPPED;
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("IoR3&n^7EQ8k");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string0 = "";
      Spider spider1 = spider0.setUUID("");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "IoR3&n^7EQ8k";
      stringArray0[1] = "";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("u.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Page page0 = Page.fail();
      spider0.extractAndAddRequests(page0, false);
      Json json0 = page0.getJson();
      // Undeclared exception!
      try { 
        json0.removePadding("<D");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // us/codecraft/xsoup/XTokenQueue
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("_cycle_tried_times");
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1631, threadFactory0);
      Spider spider2 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 1631);
      Page page0 = new Page();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      spider1.downloader(phantomJSDownloader0);
      page0.setSkip(false);
      spider2.extractAndAddRequests(page0, false);
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.pipeline(jsonFilePipeline0);
      // Undeclared exception!
      try { 
        spider1.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("EI&CF_}");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.sleep(2);
      spider0.getCollectorPipeline();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "`[?>1# nbZ1/+BxJ&d");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider0.setUUID("UQ9%");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider2.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider1.getAll((Collection<String>) synchronousQueue0);
      PlainText.create("?w9");
      Spider spider3 = spider1.pipeline(resultItemsCollectorPipeline0);
      String[] stringArray0 = new String[0];
      spider3.test(stringArray0);
      Json json0 = new Json("UQ9%");
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "UQ9%");
      spider0.getThreadAlive();
      Spider spider4 = spider2.setSpawnUrl(false);
      spider4.run();
      spider4.getStartTime();
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertFalse(spider4.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("EI&CF_}");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.sleep(2);
      int int0 = Spider.STAT_STOPPED;
      spider0.isExitWhenComplete();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      spider0.exitWhenComplete = false;
      Page page0 = new Page();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("QYS*^", "QYS*^");
      Page page1 = page0.setSkip(true);
      spider2.extractAndAddRequests(page1, false);
      spider0.getCollectorPipeline();
      Spider spider3 = spider1.setUUID("QYS*^");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider3.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "yes";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("yes");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      String string1 = "us.codecraft.webmagic.utils.FilePersistentBase";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      spider1.setSpawnUrl(false);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider1.pipeline(resultItemsCollectorPipeline0);
      spider0.stop();
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      spider1.thread((ExecutorService) null, 2);
      Page page0 = new Page();
      spider0.clearPipeline();
      String[] stringArray0 = new String[0];
      Spider spider2 = spider1.addUrl(stringArray0);
      spider0.addPipeline((Pipeline) null);
      spider2.sleep(2561);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5s.codecraft.webmagic.Spider$1");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(200);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5s.codecraft.webmagic.Spider$1", "f|aX:SPBuRU'Kgb");
      spider1.downloader(phantomJSDownloader0);
      spider1.getScheduler();
      int int0 = Spider.STAT_STOPPED;
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("EI&CF_}");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(2147483632);
      spider0.sleep(2147483632);
      spider0.downloader((Downloader) null);
      int int0 = Spider.STAT_STOPPED;
      spider1.isExitWhenComplete();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.processor.SimplePageProcessor");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("$_l>[`4B!F1N?l43M");
      Spider spider1 = spider0.addPipeline(filePipeline0);
      // Undeclared exception!
      try { 
        spider1.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("EI&CF_}");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider.Status spider_Status0 = spider0.getStatus();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("I^9dN@7xxCXpflG]H&?");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool.commonPool();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      spider0.stop();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "`[?>1# nbZ1/+BxJ&d");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider0.setUUID("UQ9%");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider2.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider1.getAll((Collection<String>) synchronousQueue0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Running");
      PhantomJSDownloader phantomJSDownloader1 = null;
      try {
        phantomJSDownloader1 = new PhantomJSDownloader("Running");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("|1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("?", "|1");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(5);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader1);
      Spider spider3 = spider2.setExitWhenComplete(true);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      spider2.runAsync();
      linkedList0.toArray();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      // Undeclared exception!
      try { 
        spider3.startUrls(list0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("H");
      filePipeline0.checkAndMakeParentDirecotry("pv)m>#]NGu*_EY}kAD");
      Spider spider1 = spider0.pipeline(filePipeline0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("EI&CF_}");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(2147483632);
      spider0.sleep(2147483632);
      spider1.exitWhenComplete = false;
      int int0 = Spider.STAT_STOPPED;
      spider1.isExitWhenComplete();
      FilePipeline filePipeline0 = new FilePipeline("us.codecraft.webmagic.downloader.HttpClientDownloader");
      spider0.pipeline(filePipeline0);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = null;
      // Undeclared exception!
      try { 
        spider0.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VI)h%ff>P%k7WO`9K");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider1 = spider0.thread(2);
      spider1.sleep(2);
      spider1.getThreadAlive();
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "`[?>1# nbZ1/+BxJ&d");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider0.setUUID("UQ9%");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider1.getAll((Collection<String>) synchronousQueue0);
      PlainText.create("UQ9%");
      Spider spider2 = spider1.pipeline(resultItemsCollectorPipeline0);
      String[] stringArray0 = new String[0];
      spider2.test(stringArray0);
      Json json0 = new Json("UQ9%");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1047, threadFactory0);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "`[?>1# nbZ1/+BxJ&d");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider0.setUUID("UQ9%");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider3 = spider2.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider1.getAll((Collection<String>) synchronousQueue0);
      PlainText.create("?w9");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Spider spider4 = spider1.pipeline(resultItemsCollectorPipeline0);
      String[] stringArray0 = new String[0];
      spider4.test(stringArray0);
      Json json0 = new Json("UQ9%");
      spider1.setSpawnUrl(false);
      spider3.run();
      // Undeclared exception!
      try { 
        spider2.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("I^9dN@7xxCXpflG]H&?");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      FilePipeline filePipeline0 = new FilePipeline("I^9dN@7xxCXpflG]H&?");
      ForkJoinPool.commonPool();
      Page page0 = new Page();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("/", "R]3msaB");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider1.getAll((Collection<String>) synchronousQueue0);
      spider0.getThreadAlive();
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "`[?>1# nbZ1/+BxJ&d");
      spider0.setDownloader(phantomJSDownloader0);
      spider0.setUUID("UQ9%");
      Spider.create(simplePageProcessor0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      // Undeclared exception!
      try { 
        spider0.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Spider is already running!", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider0.setUUID("V#LBO&&(a:5F");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider1.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider2.getAll((Collection<String>) synchronousQueue0);
      String string0 = "?w9";
      PlainText.create("");
      Spider spider3 = spider2.pipeline(resultItemsCollectorPipeline0);
      // Undeclared exception!
      try { 
        spider3.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ki%`e&");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getStartTime();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      spider0.exitWhenComplete = false;
      Spider spider3 = spider2.thread((ExecutorService) null, 2);
      Page page0 = new Page();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("QYS*^", "QYS*^");
      spider3.downloader(phantomJSDownloader0);
      Page page1 = page0.setSkip(true);
      spider3.extractAndAddRequests(page1, false);
      FilePipeline filePipeline0 = new FilePipeline();
      spider3.thread(2);
      // Undeclared exception!
      try { 
        spider2.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request1 = request0.setExtras(hashMap0);
      // Undeclared exception!
      try { 
        spider0.onSuccess(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "`[?>1# nbZ1/+BxJ&d");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider0.setUUID("UQ9%");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider3 = spider0.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider2.getAll((Collection<String>) synchronousQueue0);
      PlainText.create("?w9");
      spider3.pipeline(resultItemsCollectorPipeline0);
      Request[] requestArray0 = new Request[0];
      spider3.addRequest(requestArray0);
      PlainText.create("`[?>1# nbZ1/+BxJ&d");
      Spider spider4 = spider2.pipeline(resultItemsCollectorPipeline0);
      spider4.run();
      String[] stringArray0 = new String[0];
      spider4.test(stringArray0);
      Json json0 = new Json(" stop fail!");
      spider1.run();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("I^9dN@7xxCXpflG]H&?");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.startRequests = (List<Request>) linkedList0;
      // Undeclared exception!
      try { 
        spider0.get("!1-gW");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("EI&CF_}");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider.Status spider_Status0 = Spider.Status.fromValue(2147483632);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      spider0.getSite();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      spider1.thread((ExecutorService) null, 2);
      Page page0 = new Page();
      Request request0 = new Request();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        spider0.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "yes";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("yes");
      Spider spider0 = new Spider(simplePageProcessor0);
      Pipeline pipeline0 = null;
      Spider spider1 = spider0.addPipeline((Pipeline) null);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "`[?>1# nbZ1/+BxJ&d");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider0.setUUID("UQ9%");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider3 = spider2.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      List<SpiderListener> list0 = spider1.getAll((Collection<String>) synchronousQueue0);
      PlainText.create("?w9");
      Spider spider4 = spider1.pipeline(resultItemsCollectorPipeline0);
      String[] stringArray0 = new String[0];
      spider4.test(stringArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Json json0 = new Json("UQ9%");
      Spider spider5 = spider1.setSpawnUrl(false);
      spider3.run();
      spider5.setSpiderListeners(list0);
      assertFalse(spider1.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      List<Request> list0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(list0);
      spider0.getThreadAlive();
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7hCNt ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setScheduler((Scheduler) null);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      Spider spider3 = spider2.startRequest((List<Request>) null);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider4 = spider3.pipeline(resultItemsCollectorPipeline0);
      spider4.clearPipeline();
      Json json0 = new Json("7hCNt ");
      Class<SpiderListener> class0 = SpiderListener.class;
      Page page0 = new Page();
      page0.setSkip(true);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Spider.Status.fromValue(86);
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      spider1.getSpiderListeners();
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider3 = spider2.startRequest(linkedList0);
      spider3.setExitWhenComplete(false);
      Spider spider4 = spider3.thread((ExecutorService) null, 86);
      Page page0 = new Page();
      page0.setSkip(true);
      Page page1 = new Page();
      page1.getJson();
      Page page2 = new Page();
      // Undeclared exception!
      try { 
        spider4.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.startRequest(linkedList0);
      Spider spider2 = spider0.setExitWhenComplete(false);
      spider2.thread((ExecutorService) null, 7);
      Page page0 = new Page();
      page0.setSkip(true);
      Page page1 = new Page();
      page1.getJson();
      Page page2 = new Page();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page2, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("EI&CF_}");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider.Status spider_Status0 = Spider.Status.fromValue(2147483632);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("g}WXq}m/`*NST5P");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("g}WXq}m/`*NST5P", "Spider is already running!");
      spider0.setDownloader(phantomJSDownloader0);
      Spider spider1 = spider0.setUUID("g}WXq}m/`*NST5P");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider1.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider1.getAll((Collection<String>) synchronousQueue0);
      String string0 = "";
      PlainText.create("");
      Spider spider3 = spider2.pipeline(resultItemsCollectorPipeline0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?w9";
      stringArray0[1] = "us.codecraft.webmagic.Site";
      stringArray0[2] = "Spider is already running!";
      // Undeclared exception!
      try { 
        spider3.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "`[?>1# nbZ1/+BxJ&d");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider0.setUUID("UQ9%");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider2.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider1.getAll((Collection<String>) synchronousQueue0);
      PlainText.create("?w9");
      Spider spider3 = spider1.pipeline(resultItemsCollectorPipeline0);
      String[] stringArray0 = new String[0];
      spider3.test(stringArray0);
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      
      Json json0 = new Json("UQ9%");
      Spider.Status spider_Status0 = Spider.Status.fromValue(1047);
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      Spider spider3 = spider2.thread((ExecutorService) null, 2);
      Page page0 = new Page();
      Page page1 = page0.setSkip(true);
      page1.getJson();
      spider3.extractAndAddRequests(page1, false);
      spider3.getCollectorPipeline();
      Json json0 = new Json("QYS*^");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "QYS*^";
      stringArray0[1] = "QYS*^";
      stringArray0[2] = "QYS*^";
      stringArray0[3] = "QYS*^";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("QYS*^", "~b+j'x$`vl+UdIU5.V>");
      // Undeclared exception!
      try { 
        spider3.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      spider1.getSpiderListeners();
      Spider spider2 = spider0.setSpiderListeners((List<SpiderListener>) null);
      FilePipeline filePipeline0 = new FilePipeline("Running");
      Spider spider3 = spider2.addPipeline(filePipeline0);
      spider2.pipeline(filePipeline0);
      Page page0 = new Page();
      Page page1 = page0.setSkip(false);
      Page page2 = page1.setSkip(true);
      spider3.extractAndAddRequests(page2, false);
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      spider3.setExitWhenComplete(false);
      spider3.setSpiderListeners((List<SpiderListener>) null);
      spider0.clearPipeline();
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "`[?>1# nbZ1/+BxJ&d");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider0.setUUID("UQ9%");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider3 = spider2.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider1.getAll((Collection<String>) synchronousQueue0);
      PlainText.create("?w9");
      spider1.pipeline(resultItemsCollectorPipeline0);
      Json json0 = new Json("UQ9%");
      spider1.setSpawnUrl(false);
      spider3.run();
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      spider0.startUrls(list0);
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider0.clearPipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider1.setScheduler(priorityScheduler0);
      spider3.thread((ExecutorService) null, 30000);
      Page page0 = new Page();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.Spider$1", "us.codecraft.webmagic.Spider$1");
      spider3.downloader(phantomJSDownloader0);
      page0.setSkip(true);
      spider2.extractAndAddRequests(page0, false);
      FilePipeline filePipeline0 = new FilePipeline();
      spider3.pipeline(filePipeline0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/";
      stringArray0[1] = "us.codecraft.webmagic.Spider$1";
      stringArray0[2] = "us.codecraft.webmagic.Spider$1";
      stringArray0[3] = "/";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "`[?>1# nbZ1/+BxJ&d");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider0.setUUID("");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider2.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider0.getAll((Collection<String>) synchronousQueue0);
      PlainText.create("");
      CollectorPipeline collectorPipeline0 = spider2.getCollectorPipeline();
      spider0.pipeline(collectorPipeline0);
      Request[] requestArray0 = new Request[2];
      Request request0 = new Request("");
      requestArray0[0] = request0;
      Request request1 = request0.setPriority((-444L));
      requestArray0[1] = request1;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("us.codecraft.webmagic.utils.FilePersistentBase");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider1.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("l");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      spider0.startRequest(list0);
      OrSelector orSelector0 = null;
      try {
        orSelector0 = new OrSelector((Selector[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.OrSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("^IYSE|1/)nv");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setPipelines((List<Pipeline>) null);
      Spider spider2 = spider1.thread(1);
      Spider spider3 = spider2.setExitWhenComplete(false);
      spider3.clearPipeline();
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "`[?>1# nbZ1/+BxJ&d");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider0.setUUID("UQ9%");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider2.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider1.getAll((Collection<String>) synchronousQueue0);
      PlainText.create("?w9");
      Spider spider3 = spider1.pipeline(resultItemsCollectorPipeline0);
      String[] stringArray0 = new String[0];
      spider3.test(stringArray0);
      Json json0 = new Json("UQ9%");
      spider1.setSpawnUrl(false);
      assertFalse(spider1.isSpawnUrl());
      
      Spider.Status spider_Status0 = Spider.Status.fromValue((-353));
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      ExecutorService executorService0 = null;
      Spider spider3 = spider2.thread((ExecutorService) null, 2);
      Page page0 = new Page();
      Page page1 = page0.setSkip(true);
      spider3.extractAndAddRequests(page1, false);
      spider3.getCollectorPipeline();
      Json json0 = new Json("QYS*^");
      Class<Selector> class0 = Selector.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "`[?>1# nbZ1/+BxJ&d";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "`[?>1# nbZ1/+BxJ&d");
      spider0.setDownloader(phantomJSDownloader0);
      Spider spider1 = spider0.setUUID("UQ9%");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider0.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider1.getAll((Collection<String>) synchronousQueue0);
      PlainText.create("?w9");
      spider2.pipeline(resultItemsCollectorPipeline0);
      Request[] requestArray0 = new Request[0];
      Spider spider3 = spider2.addRequest(requestArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "UQ9%";
      stringArray0[1] = "UQ9%";
      stringArray0[2] = "?w9";
      stringArray0[3] = "UQ9%";
      // Undeclared exception!
      try { 
        spider3.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      String string0 = spider1.getUUID();
      assertNull(string0);
      
      spider0.getSite();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      String string0 = "";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      spider1.setDownloader(phantomJSDownloader0);
      String string1 = null;
      spider0.setUUID((String) null);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider1.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      Spider spider2 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request();
      Spider spider1 = spider0.setSpawnUrl(true);
      // Undeclared exception!
      try { 
        spider1.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      spider2.thread((ExecutorService) null, 2);
      Page page0 = new Page();
      Page page1 = Page.fail();
      Page page2 = page1.setSkip(false);
      page2.getJson();
      Spider spider3 = new Spider(simplePageProcessor0);
      spider3.extractAndAddRequests(page1, false);
      spider2.getCollectorPipeline();
      Json json0 = new Json("QYS*^");
      Class<Selector> class0 = Selector.class;
      PlainText.create("QYS*^");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "`[?>1# nbZ1/+BxJ&d");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider0.setUUID("UQ9%");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider2.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider1.getAll((Collection<String>) synchronousQueue0);
      PlainText.create("?w9");
      spider1.pipeline(resultItemsCollectorPipeline0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        spider2.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "`[?>1# nbZ1/+BxJ&d");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider0.setUUID("`[?>1# nbZ1/+BxJ&d");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider1.getAll((Collection<String>) synchronousQueue0);
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(763);
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "title");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("|1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("?", "|1");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(5);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader1);
      Spider spider3 = spider2.setExitWhenComplete(true);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      spider2.runAsync();
      linkedList0.toArray();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      // Undeclared exception!
      try { 
        spider3.startUrls(list0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("EI&CF;}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "`[?>1# nbZ1/+BxJ&d");
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "`[?>1# nbZ1/+BxJ&d";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      Spider spider3 = spider2.thread((ExecutorService) null, 2);
      Page page0 = new Page();
      Page page1 = page0.setSkip(false);
      page1.setRawText("Oq{5u");
      spider3.extractAndAddRequests(page1, false);
      spider3.getCollectorPipeline();
      Json json0 = new Json("QYS*^");
      json0.all();
      Class<Selector> class0 = Selector.class;
      spider0.isSpawnUrl();
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("u.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.get("u.codecraft.webmagic.Spider$1");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.startRequest(linkedList0);
      String string0 = "UQ9%";
      String string1 = "";
      spider0.setUUID("");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider1.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string0 = "d+{\"ARs(RAa98Hfc'(";
      spider0.setUUID("d+{\"ARs(RAa98Hfc'(");
      int int0 = (-1);
      // Undeclared exception!
      try { 
        spider0.thread((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      spider0.exitWhenComplete = false;
      Page page0 = new Page();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("QYS*^", "QYS*^");
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      spider1.extractAndAddRequests(page0, false);
      PlainText.create("QYS*^");
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider2.pipeline(consolePipeline0);
      Json json0 = new Json("QYS*^");
      Spider spider4 = spider3.setScheduler((Scheduler) null);
      // Undeclared exception!
      try { 
        spider4.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(">Mids6E]egrg");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_cycle_tried_times");
      Request[] requestArray0 = new Request[4];
      requestArray0[0] = request0;
      requestArray0[1] = request0;
      requestArray0[2] = request0;
      requestArray0[3] = request0;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("|1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("|1", "|1");
      spider0.start();
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider2.setExitWhenComplete(true);
      spider2.runAsync();
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      // Undeclared exception!
      try { 
        spider3.getAll((Collection<String>) synchronousQueue0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "5ye";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5ye");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      String string1 = "us.codecraft.webmagic.utils.FilePersistentBase";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider2 = spider1.setSpawnUrl(false);
      spider2.setUUID("href");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider1.pipeline(resultItemsCollectorPipeline0);
      spider0.stop();
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QYS*^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      spider0.exitWhenComplete = false;
      Spider spider3 = spider2.thread((ExecutorService) null, 2);
      Page page0 = new Page();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("QYS*^", "QYS*^");
      spider3.downloader(phantomJSDownloader0);
      Spider spider4 = spider0.startRequest(linkedList0);
      spider4.getStatus();
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      MockThread mockThread0 = new MockThread();
      mockThread0.getUncaughtExceptionHandler();
      PhantomJSDownloader phantomJSDownloader1 = null;
      try {
        phantomJSDownloader1 = new PhantomJSDownloader("wb(#d[$e7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader((Downloader) null);
      Spider spider2 = spider1.setExitWhenComplete(true);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("javascript:");
      Spider spider3 = spider2.addPipeline(jsonFilePipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("javascript:");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider3.scheduler(duplicateRemovedScheduler0);
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request0 = new Request("us.codecraft.webmagic.Spider$1");
      Request request1 = request0.setBinaryContent(true);
      Request request2 = request1.putExtra("Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()", synchronousQueue0);
      Request request3 = request2.setUrl("us.codecraft.webmagic.Spider$1");
      Request request4 = request3.setExtras(hashMap0);
      // Undeclared exception!
      try { 
        spider0.onSuccess(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "|1";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("|1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("|1", "|1");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(5);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader1);
      Spider spider3 = spider2.setExitWhenComplete(true);
      spider2.runAsync();
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      // Undeclared exception!
      try { 
        spider3.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`[?>1# nbZ1/+BxJ&d");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "`[?>1# nbZ1/+BxJ&d");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider0.setUUID("UQ9%");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider2.pipeline(resultItemsCollectorPipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider1.getAll((Collection<String>) synchronousQueue0);
      PlainText.create("?w");
      Spider spider3 = spider1.pipeline(resultItemsCollectorPipeline0);
      String[] stringArray0 = new String[0];
      spider3.test(stringArray0);
      Json json0 = new Json("UQ9%");
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("`[?>1# nbZ1/+BxJ&d", "UQ9%");
      spider0.getThreadAlive();
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(0);
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("2zQiw]");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "2zQiw]");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider1.thread(1275);
      int int0 = spider2.getThreadAlive();
      assertEquals(0L, spider2.getPageCount());
      assertEquals(0, int0);
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("EI&CF_}");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider.Status spider_Status0 = Spider.Status.fromValue(2);
      assertEquals(Spider.Status.Stopped, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VI)h%ff>P%k7WO`9K");
      Spider spider0 = new Spider(simplePageProcessor0);
      int int0 = 2;
      spider0.thread(2);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("%Gpx=FLmOw");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.sleep((-106));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("I^9dN@7xxCXpflG]H&?");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      spider0.setSpiderListeners((List<SpiderListener>) null);
      FilePipeline filePipeline0 = new FilePipeline("I^9dN@7xxCXpflG]H&?");
      Request request0 = new Request("#+");
      request0.setMethod("/");
      request0.addCookie("Y", "_cycle_tried_times");
      Request request1 = request0.setCharset("glO<AE");
      Request request2 = request1.setPriority((-379L));
      // Undeclared exception!
      try { 
        spider0.onError(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "yes";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("yes");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      String string1 = "us.codecraft.webmagic.utils.FilePersistentBase";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      spider1.setUUID("yes");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider1.pipeline(resultItemsCollectorPipeline0);
      spider0.stop();
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }
}
