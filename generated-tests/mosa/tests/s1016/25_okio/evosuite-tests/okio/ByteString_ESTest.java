/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:50:54 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.ByteString;
import okio.Options;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 5539, 65533);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=5539 byteCount=65533
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("z&Kr");
      byteString0.EMPTY.sha256();
      String string0 = byteString0.toString();
      assertEquals("[text=z&Kr]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("!Q{Eog.w.9IFS");
      int int0 = byteString0.indexOf(byteString0, 2311);
      assertEquals((-1), int0);
      
      String string0 = byteString0.toString();
      assertEquals("[text=!Q{Eog.w.9IFS]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("a^Jfr[i#G]V0}");
      assertEquals(13, byteString0.size());
      
      ByteString byteString1 = byteString0.hmacSha512(byteString0);
      String string0 = byteString1.toString();
      assertEquals("[hex=a9ec529addd4e26d23683fec8cdeec9ad4e7cbeafc0042450007002c797838e33d0c43278b99eb227d2ff4bcd9fdedaf221030517da291abca20dbe776bbf7b9]", string0);
      
      int int0 = byteString1.lastIndexOf(byteString0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("a^Jfr[i#G]V0}");
      byteString0.toString();
      ByteString byteString1 = byteString0.md5();
      ByteString byteString2 = byteString1.hmacSha256(byteString0);
      assertEquals(32, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("|3{");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.hashCode();
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("a^Jfr[i#G]Ew*");
      String string0 = byteString0.toString();
      assertEquals("[text=a^Jfr[i#G]Ew*]", string0);
      
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.sha512();
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("resizeBuffer() only permitted for read/write buffers");
      byteString0.EMPTY.utf8();
      String string0 = byteString0.toString();
      assertEquals("[text=resizeBuffer() only permitted for read/write buffers]", string0);
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("!Q{Eog.w.9IFS");
      ByteString byteString1 = byteString0.md5();
      String string0 = byteString1.toString();
      assertEquals("[hex=222222222222c222222a22224cc422c2]", string0);
      
      ByteString byteString2 = byteString1.toAsciiLowercase();
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("!Q{Eog.w.9IFS");
      ByteString byteString1 = byteString0.md5();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = byteString1.indexOf(byteString0);
      assertEquals((-1), int0);
      
      byteString1.base64();
      String string0 = byteString1.hex();
      assertEquals("222222222222c222222a22224cc422c2", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("a^Jfr[i#G]V0}");
      byteString0.base64Url();
      byteString0.rangeEquals(2, byteString0, 2, 2);
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("a^Jfr[i#G]V0}");
      ByteString byteString1 = byteString0.hmacSha512(byteString0);
      byteString0.EMPTY.utf8();
      String string0 = byteString1.toString();
      assertEquals("[hex=22222222222222222c22c22222222222222a242222222222222a2222a2a2c22cc2222c2a24222422a2222242222222222222c222a22222242222242aa2442a42]", string0);
      
      boolean boolean0 = byteString0.endsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.base64();
      byteString0.asByteBuffer();
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        ByteString.read(pipedInputStream0, (-2824));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2824
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        ByteString.read(mockFileInputStream0, 13);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        ByteString.read(sequenceInputStream0, 48);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("a^Jfr[i#G]V0}");
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.startsWith((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("]QEo.w.9IFS");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString byteString1 = byteString0.hmacSha512(byteString0);
      boolean boolean0 = byteString1.EMPTY.startsWith(byteString0);
      assertFalse(boolean0);
      
      String string0 = byteString1.toString();
      assertEquals("[hex=ac224c222222222422222222222c222c22a2222a22222222222422222c2222a2222222c22222222242242222222242222222c22a2222222222222222caa22222]", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("\r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: \r
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = byteString0.equals(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("US-ASCII");
      assertEquals(6, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteString.encodeUtf8("03{");
      ByteString byteString0 = ByteString.decodeBase64("[size=0]");
      assertNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      String string0 = byteString0.string(charset0);
      String string1 = byteString0.base64Url();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("L<wea_nZ%p(2 Khn@");
      byteString0.EMPTY.toAsciiLowercase();
      String string0 = byteString0.toString();
      assertEquals("[text=L<wea_nZ%p(2 Khn@]", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("cp$");
      ByteString byteString1 = byteString0.sha1();
      int int0 = byteString1.lastIndexOf(byteString0, 7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("!Q{Eog.w.9IFS");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString1 = byteString0.substring(1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString byteString2 = byteString1.hmacSha512(byteString0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString2.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.equals(byteArray0);
      byteString0.indexOf(byteString0);
      byteString0.base64();
      byteString0.toString();
      byteString0.asByteBuffer();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteString byteString1 = ByteString.read(sequenceInputStream0, 0);
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-104);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      try { 
        ByteString.read(sequenceInputStream0, (byte)84);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("a^Jfr[i#G]V0}");
      ByteString byteString1 = byteString0.hmacSha512(byteString0);
      byteString1.sha512();
      String string0 = byteString1.toString();
      assertEquals("[hex=22222222222222222c22c22222222222222a242222222222222a2222a2a2c22cc2222c2a24222422a2222242222222222222c222a22222242222242aa2442a42]", string0);
      
      boolean boolean0 = byteString1.endsWith(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("a^Jfr[i#G]V0}");
      byteString0.toString();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("=WhD|<\"|fj[Gju");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: =
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("\\");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: \\
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("!Q{Eog.w.9IFS");
      ByteString byteString1 = byteString0.md5();
      // Undeclared exception!
      try { 
        byteString1.EMPTY.write((Buffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      Object object0 = new Object();
      boolean boolean0 = byteString0.EMPTY.endsWith(byteArray0);
      boolean boolean1 = byteString0.equals(byteArray0);
      assertTrue(boolean1 == boolean0);
      
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 3;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 3, 64);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("\r");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byteString0.write(mockPrintStream0);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("\r", 1351);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("resizeBuffer() only permitted for read/write buffers");
      // Undeclared exception!
      try { 
        byteString0.substring(5699);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)109;
      // Undeclared exception!
      try { 
        ByteString.decodeHex("go3@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: g
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString.of(byteBuffer0);
      ByteString byteString1 = ByteString.decodeBase64("{pB@Rai$<2");
      assertNull(byteString1);
      
      int int0 = ByteString.codePointIndexToCharIndex("{pB@Rai$<2", (-1648));
      assertEquals(10, int0);
      
      int int1 = ByteString.codePointIndexToCharIndex("{pB@Rai$<2", 8);
      assertEquals(8, int1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("|3{");
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("|3{", charset0);
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("jTT9=uf");
      // Undeclared exception!
      try { 
        byteString0.substring((-95));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      // Undeclared exception!
      try { 
        byteString0.substring(46, 46);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString.of(byteBuffer0);
      Charset.defaultCharset();
      ByteString.of(byteBuffer0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("beginIndex < 0: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: g
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      ByteString byteString0 = ByteString.of(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      ByteBuffer byteBuffer0 = charset0.encode("");
      ByteString.of(byteBuffer0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("D6E*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: *
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("!Q{Eog.w.9IFS");
      ByteString byteString1 = byteString0.md5();
      byteString1.utf8 = "E4}92B%";
      String string0 = byteString1.toString();
      assertEquals("[text=E4}92B%]", string0);
      
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString byteString1 = byteString0.substring(1);
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[q({~NeK#0FG?");
      ByteString byteString0 = ByteString.encodeUtf8("a^Jfr[i#G]V0}");
      ByteString byteString1 = byteString0.hmacSha512(byteString0);
      String string0 = byteString1.toString();
      assertEquals("[hex=22222222222222222c22c22222222222222a242222222222222a2222a2a2c22cc2222c2a24222422a2222242222222222222c222a22222242222242aa2442a42]", string0);
      
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("a^Jfr[i#G]V0}");
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = ByteString.of(byteArray0);
      int int0 = byteString0.indexOf(byteString0);
      byteString0.base64();
      byteString0.asByteBuffer();
      ByteString byteString1 = byteString0.substring(0);
      byteString1.EMPTY.sha256();
      int int1 = byteString1.compareTo(byteString0);
      assertTrue(int1 == int0);
      
      int int2 = byteString0.indexOf(byteArray0, 0);
      assertSame(byteString0, byteString1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      Object object0 = new Object();
      byteString0.equals(byteArray0);
      byteString0.endsWith(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("", charset0);
      byteString0.base64();
      byteString0.compareTo(byteString1);
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        ByteString.encodeString("\r", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      Object object0 = new Object();
      byteString0.equals(byteArray0);
      byteString0.endsWith(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("", charset0);
      byteString1.lastIndexOf(byteArray0, 191);
      byteString0.base64();
      byteString1.compareTo(byteString0);
      ByteString byteString2 = new ByteString(byteArray0);
      byteString0.compareTo(byteString2);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteStringArray0[1];
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get(105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 105
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("a^Jfr[i#G]V0}");
      ByteString byteString1 = byteString0.hmacSha512(byteString0);
      String string0 = byteString1.toString();
      assertEquals("[hex=22222222222222222c22c22222222222222a242222222222222a2222a2a2c22cc2222c2a24222422a2222242222222222222c222a22222242222242aa2442a42]", string0);
      
      boolean boolean0 = byteString1.equals(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("a^Jfr[i#G]Ew*");
      byteString0.EMPTY.hashCode();
      byteString0.EMPTY.md5();
      String string0 = byteString0.toString();
      assertEquals("[text=a^Jfr[i#G]Ew*]", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = ByteString.of(byteArray0);
      int int0 = byteString0.indexOf(byteString0);
      assertEquals(0, int0);
      
      ByteString byteString1 = byteString0.substring(0);
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.equals(byteArray0);
      byteString0.asByteBuffer();
      byteString0.base64();
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
      
      String string0 = byteString1.toString();
      assertEquals("[hex=2222]", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("a^Jfr[i#G]V0}");
      ByteString byteString1 = byteString0.hmacSha512(byteString0);
      ByteString byteString2 = byteString1.toAsciiUppercase();
      String string0 = byteString1.toString();
      assertEquals("[hex=22222222222222222c22c22222222222222a242222222222222a2222a2a2c22cc2222c2a24222422a2222242222222222222c222a22222242222242aa2442a42]", string0);
      
      byteString1.toByteArray();
      assertNotSame(byteString1, byteString2);
      assertFalse(byteString1.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, (-3580));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("C&n");
      byteString0.toString();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)2;
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = new ByteString(byteArray0);
      byteString0.equals(byteString2);
      byteString2.asByteBuffer();
      byteString1.indexOf(byteString0);
      byteString0.base64();
      Object object0 = new Object();
      Inflater inflater0 = new Inflater();
      assertTrue(inflater0.needsInput());
  }
}
