/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:22:52 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.nonZeroRowMajorIterator();
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(1153, 1153, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1153
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 84;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)93;
      doubleArray0[1] = (double) 84;
      doubleArray0[2] = (double) 84;
      doubleArray0[3] = (double) (byte)93;
      doubleArray0[4] = (double) 84;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)93;
      intArray0[1] = 17;
      CRSMatrix cRSMatrix0 = new CRSMatrix((byte)93, (byte)93, 84, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.add(84.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 93
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1401, 1401);
      byte[] byteArray0 = new byte[3];
      cRSMatrix0.toColumnMajorSparseMatrix();
      byte byte0 = (byte)16;
      byteArray0[0] = byte0;
      byte byte1 = (byte)91;
      byteArray0[1] = byte1;
      byte byte2 = (byte)100;
      byteArray0[2] = byte2;
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      double double0 = 32.0;
      cRSMatrix0.setAll(double0);
      CRSMatrix.fromBinary(byteArray0);
      int int0 = (-2005);
      Integer integer0 = new Integer(int0);
      cRSMatrix1.equals((Object) integer0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZero(matrixProcedure0);
      CRSMatrix.zero(int0, (int) byte1, (int) byte2);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toMatrixMarket();
      cRSMatrix0.rowMajorIterator();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(1000, 963);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1000
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      // Undeclared exception!
      try { 
        CRSMatrix.random(0, 2906, (double) 2906, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(32, 32);
      cRSMatrix0.sum();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(32);
      MockRandom mockRandom1 = new MockRandom(32);
      mockRandom1.nextFloat();
      CRSMatrix.random((-3822), (-1282), (double) 0.0F, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(9959L);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(2861, 2861, 0.0, (Random) mockRandom0);
      cRSMatrix0.copyOfShape((-2766), (-1153));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(37, 37);
      cRSMatrix0.getRow(2785);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(59, 59, doubleArray0);
      int int0 = (-876);
      int int1 = 3;
      cRSMatrix0.getOrElse(int1, int0, int1);
      int int2 = 935;
      cRSMatrix0.getColumn(int2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(8);
      cRSMatrix0.nonZeroAt(0, 0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity((byte)64);
      cRSMatrix0.nonZeroAt(32, 181);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.random(204, (-748), (double) (byte) (-109), (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColumnMajorSparseMatrix.diagonal(947, 7);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(947);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 947
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 0, doubleArray0);
      cRSMatrix0.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-3555.26678);
      doubleArray1[1] = 1.0787467083003822E132;
      doubleArray1[2] = (-533.781152508194);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.getColumn((-1234));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      int int1 = 2949;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2949, 0);
      cRSMatrix0.toRowMajorSparseMatrix();
      RowMajorSparseMatrix.identity(0);
      String string0 = "G764H%\";N /J";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "5$VBa+zri~^n";
      stringArray0[1] = "&{#RQ<";
      stringArray0[2] = "XQ Nt^c";
      stringArray0[3] = "5$VBa+zri~^n";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      cRSMatrix0.mkString((NumberFormat) choiceFormat0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("Cardinality should be positive: ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(32, 32);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = (double) 32;
      doubleArray0[4] = (double) 32;
      doubleArray0[5] = 941.9541317;
      doubleArray0[6] = (double) 32;
      doubleArray0[7] = (double) 32;
      int[] intArray0 = new int[5];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = 32;
      intArray0[3] = 32;
      intArray0[4] = 32;
      CRSMatrix cRSMatrix1 = new CRSMatrix(32, 32, 32, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix1, cRSMatrix0, cRSMatrix1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '33' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (double) 449;
      doubleArray0[3] = (-1.8297982744665529);
      doubleArray0[4] = (double) 449;
      doubleArray0[5] = (double) 32;
      doubleArray0[6] = (double) 449;
      doubleArray0[7] = (double) 449;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(449, 32);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = 32;
      intArray0[1] = 449;
      CRSMatrix.zero(449, 32, 32);
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.copyOfShape(963, 963);
      cRSMatrix0.getColumn(1128);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.is(matrixPredicate0);
      cRSMatrix0.nonZeroRowMajorIterator();
      // Undeclared exception!
      try { 
        CRSMatrix.block((Matrix) null, cRSMatrix0, (Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      cRSMatrix0.max();
      cRSMatrix0.toBinary();
      cRSMatrix0.setColumn(0, (double) 0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(1, 0, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      double[][] doubleArray1 = new double[6][0];
      double[] doubleArray2 = new double[0];
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      int int0 = 4;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(4, 1.0);
      Locale locale0 = Locale.ITALY;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      cRSMatrix1.toCSV(numberFormat0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(0, vectorProcedure0);
      // Undeclared exception!
      try { 
        CRSMatrix.identity((-3254));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2987);
      cRSMatrix0.nonZeroAt(2398, 32);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1000L);
      byte[] byteArray0 = new byte[1];
      mockRandom0.nextBytes(byteArray0);
      mockRandom0.nextDouble();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric((int) (byte)0, (double) (byte)0, (Random) mockRandom0);
      cRSMatrix0.spliterator();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 521;
      cRSMatrix0.getColumn(0);
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray1);
      cRSMatrix1.setColumn(0, 2984.16742499366);
      cRSMatrix0.setAll(2.0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(32, 32);
      double double0 = new Integer(32);
      cRSMatrix0.max();
      cRSMatrix0.toBinary();
      cRSMatrix0.setColumn(1, (double) 32);
      MatrixFunction matrixFunction0 = null;
      int int0 = 1110;
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(1110, 1, (MatrixFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1110
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(32, 32);
      CRSMatrix.fromCSV("");
      SparseMatrix.zero(998, 32);
      cRSMatrix0.minInRow(13);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CRSMatrix cRSMatrix0 = new CRSMatrix();
          Matrix.diagonal(34, 299.83149493382);
          MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
          doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
          // Undeclared exception!
          try { 
            cRSMatrix0.to(matrixFactory0);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0.0);
      cRSMatrix0.toString();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumn(0, vectorAccumulator0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(32, 32);
      cRSMatrix0.sum();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.0;
      doubleArray1[2] = (double) 32;
      doubleArray1[3] = (double) 32;
      CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.min();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(334, 4, 1);
      SparseMatrix.zero(2561, 1);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 334;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '334' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 449;
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (double) 449;
      doubleArray0[3] = (-1.8297982744665529);
      doubleArray0[4] = (double) 449;
      doubleArray0[5] = (double) 32;
      doubleArray0[6] = (double) 449;
      doubleArray0[7] = (double) 449;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(449, 32);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = 32;
      intArray0[2] = 32;
      intArray0[4] = 32;
      cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix0.nonZeroAt(32, 449);
      org.evosuite.runtime.Random.setNextRandom(2461);
      CRSMatrix.fromMatrixMarket((String) null);
      cRSMatrix0.eachNonZero(matrixProcedure0);
      int int1 = 2054;
      CRSMatrix.from1DArray(int1, int0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.each((MatrixProcedure) null);
      cRSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.setAll(648.9376112);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 0);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 60.28882228);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      Locale locale0 = Locale.US;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      rowMajorSparseMatrix0.mkString(numberFormat0);
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 60.28882228;
      doubleArray0[4] = (double) 0;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1;
      CRSMatrix cRSMatrix2 = new CRSMatrix(1, 1, 1, doubleArray0, intArray0, intArray0);
      ((CRSMatrix) rowMajorSparseMatrix0).min();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix2.getColumn(1332);
      // Undeclared exception!
      try { 
        cRSMatrix1.iteratorOfRow(1332);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1332
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 2989;
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 2989;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2989, 2989, 2989);
      int int1 = 2962;
      cRSMatrix0.maxInRow(2962);
      MatrixFunction matrixFunction0 = null;
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(2962, 2989, (MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(8);
      cRSMatrix0.toColumnVector();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = 87.8931;
      doubleArray0[3] = (-2481.178872550127);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 8;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 8;
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(8, 0, doubleArray0);
      cRSMatrix1.setAll((-2115.9499982));
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(16, (-3968));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 0);
      double[] doubleArray0 = new double[2];
      rowMajorSparseMatrix0.sum();
      double[][] doubleArray1 = new double[8][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 0.1;
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) 1;
      doubleArray2[8] = (double) 1;
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray1);
      // Undeclared exception!
      try { 
        CRSMatrix.block(sparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(228, 228);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      double double0 = new Integer(228);
      cRSMatrix1.max();
      cRSMatrix0.toBinary();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.updateAt(10, 2903, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[5] = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix0.max();
      ((CRSMatrix) rowMajorSparseMatrix0).toBinary();
      // Undeclared exception!
      try { 
        ((CRSMatrix) rowMajorSparseMatrix0).set((-2323), 2, 2352);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2323' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 32;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = (double) 32;
      double[][] doubleArray1 = new double[8][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      cRSMatrix0.sliceTopLeft(13, 2325);
      String string0 = "";
      RowMajorSparseMatrix.fromMatrixMarket(string0);
      int int1 = (-1);
      cRSMatrix0.min();
      cRSMatrix0.updateAt(int1, int0, matrixFunction0);
      int int2 = (-69);
      cRSMatrix0.blankOfShape(int2, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 32;
      int int1 = 213;
      CRSMatrix cRSMatrix0 = new CRSMatrix(213, 32, 213);
      cRSMatrix0.setAll(213);
      MatrixFunction matrixFunction0 = null;
      cRSMatrix0.max();
      cRSMatrix0.toBinary();
      int int2 = (-1469);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      cRSMatrix1.setColumn(int1, (double) int0);
      int int3 = 941;
      cRSMatrix0.updateAt(int2, int3, matrixFunction0);
      String string0 = "6pu6zu*_DrD*DXRtM:";
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromMatrixMarket(string0);
      Matrix matrix0 = cRSMatrix1.multiplyByItsTranspose();
      CRSMatrix.block(columnMajorSparseMatrix0, matrix0, cRSMatrix1, columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(32, 32);
      cRSMatrix0.sum();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.0;
      doubleArray1[0] = (double) 32;
      doubleArray1[3] = (double) 32;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      int[] intArray0 = new int[39];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      Matrix matrix0 = cRSMatrix0.add(422.126188582666);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Matrix.block(cRSMatrix0, matrix0, matrix0, cRSMatrix0);
      cRSMatrix0.rowMajorIterator();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow(1037);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1037
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (double) 449;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = (double) 449;
      doubleArray0[5] = (double) 32;
      doubleArray0[6] = (double) 449;
      doubleArray0[7] = (double) 449;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(449, 32);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = 32;
      intArray0[1] = 449;
      intArray0[3] = 32;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(449, 32, 32);
      cRSMatrix1.foldRows((VectorAccumulator) null);
      MatrixFactory<Matrix> matrixFactory0 = null;
      cRSMatrix1.to(matrixFactory0);
      cRSMatrix0.select(intArray0, intArray0);
      int int0 = 777;
      CRSMatrix.from1DArray(intArray0[0], int0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      doubleArray0[0] = (double) 0;
      intArray0[5] = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix0.max();
      MockRandom mockRandom0 = new MockRandom(2665);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.random(947, 2665, 0.0, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix.fromBinary(byteArray0);
      CRSMatrix.diagonal(intArray0[0], intArray0[2]);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(32, 32);
      cRSMatrix0.sum();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[2] = (double) 32;
      cRSMatrix0.max();
      cRSMatrix0.toBinary();
      // Undeclared exception!
      try { 
        cRSMatrix0.setColumn(32, 1024.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '32' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      MockRandom mockRandom0 = new MockRandom((-1L));
      mockRandom0.ints();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      cRSMatrix0.getColumn(0);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(0, 2438, 0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix1, cRSMatrix0, cRSMatrix0, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(32, 32);
      Integer integer0 = new Integer(32);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[1][4];
      CRSMatrix.from2DArray(doubleArray0);
      SparseMatrix.from2DArray(doubleArray0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(22, 18, matrixFunction1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 32;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(32, 32);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      int int1 = 3201;
      cRSMatrix0.isColumnMajor();
      cRSMatrix0.divide(int1);
      SparseMatrix.zero(int0, int1);
      int int2 = 4;
      cRSMatrix0.minInRow(int2);
      cRSMatrix0.maxInRow(int1);
      cRSMatrix0.getColumn(int1);
      int int3 = 10;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(int3, vectorProcedure0);
      int int4 = 1008;
      cRSMatrix0.set(int4, int3, int2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(2989, 2989, 0.0, (Random) mockRandom0);
      cRSMatrix0.rowMajorIterator();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2989;
      cRSMatrix0.setAll(0.0);
      doubleArray0[1] = (double) 1L;
      cRSMatrix0.toMatrixMarket();
      cRSMatrix0.toBinary();
      org.evosuite.runtime.Random.setNextRandom(2989);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(228, 228);
      cRSMatrix0.trace();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = 51984.0;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 51984.0;
      double[][] doubleArray1 = new double[3][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      RowMajorSparseMatrix.from2DArray(doubleArray1);
      cRSMatrix0.nonZeroIteratorOfColumn(228);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      int int0 = (-619);
      cRSMatrix0.iteratorOfRow((-619));
      int int1 = 4;
      cRSMatrix0.iteratorOfRow(int1);
      VectorProcedure vectorProcedure0 = null;
      cRSMatrix0.eachNonZeroInRow(int0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      cRSMatrix0.rotate();
      cRSMatrix0.sum();
      cRSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2934, 2934, 2934);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(14, 9.0);
      cRSMatrix0.rotate();
      int int0 = 2123;
      CRSMatrix cRSMatrix1 = new CRSMatrix(14, 2123, 14);
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        cRSMatrix1.maxInRow(Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 3221);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double((-3177));
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix.fromBinary(byteArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(8, 0, (-1253.215));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 32;
      int int1 = 213;
      CRSMatrix cRSMatrix0 = new CRSMatrix(213, 32, 213);
      cRSMatrix0.setAll(213);
      MatrixFunction matrixFunction0 = null;
      cRSMatrix0.update((MatrixFunction) null);
      cRSMatrix0.max();
      cRSMatrix0.toBinary();
      int int2 = (-1469);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)8;
      byteArray0[0] = byte0;
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      cRSMatrix1.setColumn(int1, (double) int0);
      int int3 = 941;
      cRSMatrix0.updateAt(int2, int3, matrixFunction0);
      String string0 = "6pu6zu*_DrD*DXRtM:";
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromMatrixMarket(string0);
      Matrix matrix0 = cRSMatrix1.multiplyByItsTranspose();
      CRSMatrix.block(columnMajorSparseMatrix0, matrix0, cRSMatrix1, columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2989);
      int int0 = (-334);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (-1766.37), (double)(-334), 0.0, (double)340L).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      cRSMatrix0.toBinary();
      Integer integer0 = new Integer(int0);
      int int1 = 4308;
      int int2 = 1;
      double double0 = (-812.70714007);
      cRSMatrix0.set(int1, int2, double0);
      cRSMatrix0.columnMajorIterator();
      CRSMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom0);
      cRSMatrix0.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 228;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(228);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3;
      doubleArray0[2] = (double) 3;
      int[] intArray0 = new int[1];
      Matrix matrix0 = cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix0.rowMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      int int1 = (-2175);
      matrix0.copyOfShape((-2175), 3);
      cRSMatrix0.iteratorOfNonZeroRows();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.each(matrixProcedure0);
      int int2 = 848;
      matrix0.copyOfShape(int0, int2);
      byte[] byteArray0 = new byte[0];
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      cRSMatrix1.copy();
      MatrixFunction matrixFunction1 = null;
      int int3 = 1237;
      int int4 = 3198;
      matrix0.updateAt(int4, int4, matrixFunction1);
      CRSMatrix cRSMatrix2 = new CRSMatrix(int1, int3);
      MockRandom mockRandom0 = new MockRandom();
      int int5 = 3193;
      int int6 = 32;
      cRSMatrix1.nonZeroAt(int5, int6);
      cRSMatrix0.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 2991;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2991, 2991, 2991);
      cRSMatrix0.toColumnVector();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2.71466155370373, 2.71466155370373, (double)2991, 2.71466155370373).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      cRSMatrix0.iteratorOfRow(int0);
      int int1 = (-2175);
      int int2 = (-1686);
      cRSMatrix0.copyOfShape(int1, int2);
      cRSMatrix0.iteratorOfNonZeroRows();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      int int3 = 848;
      cRSMatrix0.copyOfShape(int0, int3);
      cRSMatrix0.copy();
      MatrixFunction matrixFunction1 = null;
      int int4 = 4;
      int int5 = 1237;
      int int6 = (-1757);
      cRSMatrix0.updateAt(int5, int6, matrixFunction1);
      CRSMatrix cRSMatrix1 = new CRSMatrix(int5, int4);
      MockRandom mockRandom1 = new MockRandom();
      int int7 = 2491;
      cRSMatrix0.nonZeroAt(int0, int7);
      cRSMatrix0.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 2991;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2991);
      int int1 = (-334);
      double double0 = (-1766.37);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2991, (-1766.37), (double)(-334), (double)2991, (double)340L).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)92;
      byteArray0[0] = byte0;
      byte byte1 = (byte)90;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-122);
      byteArray0[2] = byte2;
      CRSMatrix.fromBinary(byteArray0);
      String string0 = "";
      CRSMatrix.fromCSV(string0);
      cRSMatrix0.min();
      cRSMatrix0.toBinary();
      Integer integer0 = new Integer(int1);
      int int2 = 4308;
      int int3 = 1;
      double double1 = (-812.70714007);
      cRSMatrix0.set(int2, int3, double1);
      cRSMatrix0.columnMajorIterator();
      double[] doubleArray0 = null;
      CRSMatrix.from1DArray(int0, int3, doubleArray0);
      int int4 = 17;
      SparseMatrix.diagonal(int4, double0);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(59, 59);
      cRSMatrix0.sum();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)59, (-1984.52351), (-1984.52351), (double)59, 228.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      cRSMatrix0.max();
      int int0 = 1;
      int int1 = 954;
      MatrixFunction matrixFunction1 = null;
      cRSMatrix0.updateAt(int0, int1, matrixFunction1);
      int int2 = 2168;
      int int3 = 17;
      cRSMatrix0.updateAt(int2, int3, matrixFunction1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 32;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(32, 32);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.max();
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      CRSMatrix.identity(32);
      int int1 = (-2354);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(13, (-2354));
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      CRSMatrix.identity(int0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZeroInRow(int1, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 3201, doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-3160)).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumn((-3160), vectorAccumulator0);
      cRSMatrix0.toBinary();
      cRSMatrix0.copyOfShape(3201, 185);
      cRSMatrix0.max();
      cRSMatrix0.rowMajorIterator();
      Locale locale0 = Locale.UK;
      Double double0 = new Double(0.0);
      Locale locale1 = Locale.UK;
      Matrix.unit(0, 185);
      cRSMatrix0.setColumn(1421, (-2368.6862357));
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale1);
      cRSMatrix0.toCSV(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2971, 2971, 2971);
      int int0 = 334;
      CRSMatrix cRSMatrix1 = new CRSMatrix(2971, 334);
      cRSMatrix0.set(334, 32, 334);
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.copyOfShape(334, 32);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)107;
      byteArray0[0] = (byte)107;
      CRSMatrix.fromBinary(byteArray0);
      CRSMatrix.identity(int0);
      NumberFormat.getInstance();
      double[][] doubleArrayArray0 = null;
      SparseMatrix.from2DArray(doubleArrayArray0);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      cRSMatrix2.columnMajorIterator();
      CRSMatrix cRSMatrix3 = new CRSMatrix(int0, byte0, byteArray0[0]);
      int int1 = 2350;
      cRSMatrix3.blankOfColumns(int1);
      cRSMatrix2.iteratorOfNonZeroRows();
      CRSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      long long0 = 340L;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2981);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.toColumnVector();
      cRSMatrix0.iteratorOfNonZeroRows();
      int int0 = 848;
      cRSMatrix0.copyOfShape(2981, 848);
      cRSMatrix0.copy();
      int int1 = 4;
      int int2 = (-1757);
      CRSMatrix cRSMatrix1 = new CRSMatrix(1237, 4);
      MockRandom mockRandom1 = new MockRandom();
      CRSMatrix cRSMatrix2 = CRSMatrix.randomSymmetric((-678), 100.0, (Random) mockRandom0);
      cRSMatrix0.removeColumn(int1);
      double double0 = 1662.4274773217542;
      cRSMatrix2.setAll(double0);
      cRSMatrix2.max();
      MockRandom mockRandom2 = new MockRandom(long0);
      double double1 = (-1478.410357042);
      RowMajorSparseMatrix.random(int0, int2, double1, (Random) mockRandom2);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[5] = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      cRSMatrix0.max();
      int int0 = 2665;
      MockRandom mockRandom0 = new MockRandom(2665);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.random(947, 2665, 0.0, (Random) mockRandom0);
      rowMajorSparseMatrix0.setRow(0, 0.0);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      ColumnMajorSparseMatrix.zero(2, (-1331));
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication1 = new OoPlaceMatrixByItsTransposeMultiplication();
      rowMajorSparseMatrix0.blankOfColumns(int0);
      cRSMatrix0.iteratorOfNonZeroRows();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      doubleArray0[0] = (double) 0;
      intArray0[2] = 0;
      intArray0[5] = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      cRSMatrix0.max();
      int int0 = 947;
      int int1 = 2665;
      MockRandom mockRandom0 = new MockRandom(2665);
      cRSMatrix0.setRow(0, 0.0);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix.fromBinary(byteArray0);
      RowMajorSparseMatrix.zero(0, 2665);
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(0, 0, (MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      doubleArray0[0] = (double) 0;
      intArray0[2] = 0;
      intArray0[5] = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      cRSMatrix0.max();
      int int1 = 2665;
      MockRandom mockRandom0 = new MockRandom(2665);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(0, 2665);
      // Undeclared exception!
      try { 
        cRSMatrix1.setRow(0, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(8);
      cRSMatrix0.toColumnVector();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = 87.8931;
      doubleArray0[3] = (-2481.178872550127);
      cRSMatrix0.multiplyByItsTranspose();
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 8;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 8;
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(8, 0, doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix1.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
