/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 11:46:39 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Integer, String>, String, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, String, HashMap<String, Object>>(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      Map<String, Map<String, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, String, String> doubleKeyMap1 = new DoubleKeyMap<String, String, String>(map0);
      doubleKeyMap1.put("", "@kK/9QG.@>", (String) null);
      Map<String, String> map1 = doubleKeyMap1.remove("");
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      doubleKeyMap0.put("", (String) null, "us.codecraft.webmagic.utils.DoubleKeyMap");
      String string0 = doubleKeyMap0.put("", (String) null, "QFV[X=2CvR|#");
      assertEquals("us.codecraft.webmagic.utils.DoubleKeyMap", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Map<Integer, Integer>> hashMap0 = new HashMap<String, Map<Integer, Integer>>();
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(hashMap0);
      Integer integer0 = doubleKeyMap0.remove("", (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      Map<Object, HashMap<Map<String, Object>, Object>> map0 = doubleKeyMap0.newMap();
      HashMap<String, Map<HashMap<Integer, Integer>, Map<Object, Object>>> hashMap0 = new HashMap<String, Map<HashMap<Integer, Integer>, Map<Object, Object>>>();
      DoubleKeyMap<String, HashMap<Integer, Integer>, Map<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<String, HashMap<Integer, Integer>, Map<Object, Object>>(hashMap0);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = doubleKeyMap2.remove((Object) map0, (Object) doubleKeyMap1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(836);
      HashMap<Object, Map<Integer, Integer>> hashMap0 = new HashMap<Object, Map<Integer, Integer>>();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>(hashMap0);
      Integer integer1 = doubleKeyMap0.remove((Object) null, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, Object>();
      Map<Integer, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>(map0, class0);
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap2 = new DoubleKeyMap<Object, String, String>(hashMap0, class0);
      String string0 = doubleKeyMap2.remove((Object) doubleKeyMap1, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>();
      Map<Integer, Integer> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Map<Map<String, Map<Object, Object>>, String>> hashMap0 = new HashMap<Integer, Map<Map<String, Map<Object, Object>>, String>>();
      DoubleKeyMap<Integer, Map<String, Map<Object, Object>>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<String, Map<Object, Object>>, String>(hashMap0);
      HashMap<Object, Map<Integer, Integer>> hashMap1 = new HashMap<Object, Map<Integer, Integer>>();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>(hashMap1);
      Map<Integer, Integer> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Map<Integer, Map<Object, Map<Object, Object>>>, Map<Map<Object, Object>, Integer>> hashMap0 = new HashMap<Map<Integer, Map<Object, Map<Object, Object>>>, Map<Map<Object, Object>, Integer>>();
      DoubleKeyMap<Map<Integer, Map<Object, Map<Object, Object>>>, Map<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Map<Object, Map<Object, Object>>>, Map<Object, Object>, Integer>(hashMap0);
      DoubleKeyMap<String, Map<Object, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<String, Map<Object, Object>, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Object object0 = doubleKeyMap1.put("", (Map<Object, Object>) hashMap1, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<Object, String>, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, String>, Map<Object, String>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>();
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Integer integer1 = doubleKeyMap1.put((Object) doubleKeyMap0, object0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      String string0 = doubleKeyMap0.get((Object) "k_]XY", (Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, HashMap<Object, Object>, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, HashMap<Object, Object>, HashMap<Integer, Object>>();
      DoubleKeyMap<HashMap<String, String>, Object, Map<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, String>, Object, Map<Object, Object>>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Map<Object, Object> map0 = doubleKeyMap1.get(hashMap0, (Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Map<HashMap<Object, Object>, HashMap<Object, Object>>> hashMap0 = new HashMap<String, Map<HashMap<Object, Object>, HashMap<Object, Object>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<Object, Object>, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Object>, HashMap<Object, Object>>(hashMap0, class0);
      HashMap<Object, Map<Integer, Integer>> hashMap1 = new HashMap<Object, Map<Integer, Integer>>();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>(hashMap1);
      Integer integer0 = new Integer(0);
      Integer integer1 = doubleKeyMap1.get((Object) doubleKeyMap0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, HashMap<Object, Object>, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, HashMap<Object, Object>, HashMap<Integer, Object>>();
      Map<HashMap<Object, Object>, HashMap<Integer, Object>> map0 = doubleKeyMap0.get((Map<Object, Object>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, String>((Map<String, Map<Object, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>();
      Map<Object, Integer> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      doubleKeyMap0.put("", "", ">Qp)UlTKvNE");
      String string0 = doubleKeyMap0.remove("", "");
      assertEquals(">Qp)UlTKvNE", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      doubleKeyMap0.put("", ">|ZS%[yK~%qr##Y|0", (String) null);
      String string0 = doubleKeyMap0.remove("", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>();
      Integer integer0 = new Integer(4313);
      doubleKeyMap0.put((String) null, integer0, integer0);
      Integer integer1 = doubleKeyMap0.get((String) null, integer0);
      assertEquals(4313, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
