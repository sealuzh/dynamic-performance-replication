/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:45:05 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Member;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Frame;
import wheel.asm.Item;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = (-2363);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(1531);
      int int0 = Frame.UNINITIALIZED;
      classReader0.copyPool(classWriter0);
      classWriter0.addUninitializedType("org.apache.commons.io.IOCase", 1531);
      classWriter0.newDouble(1);
      classReader0.getSuperName();
      classReader0.accept((ClassVisitor) classWriter0, 111);
      char[] charArray0 = new char[0];
      classReader0.readUTF8(111, charArray0);
      classReader0.getInterfaces();
      classReader0.getSuperName();
      classReader0.readByte(2);
      classReader0.copyPool(classWriter0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      assertNotNull(classReader0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(6892, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      ClassWriter classWriter0 = new ClassWriter(4);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassWriter classWriter1 = new ClassWriter(classReader0, 6892);
      assertNotNull(classWriter1);
      assertEquals(49, classReader0.getAccess());
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(6892, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classWriter0.addUninitializedType("java/lang/String", 8);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(1, int0);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classReader0.copyPool(classWriter1);
      assertNotSame(classWriter1, classWriter0);
      assertEquals(49, classReader0.getAccess());
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(6892, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newDouble(4);
      assertNotNull(item0);
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = classReader0.getSuperName();
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(6892, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      classReader0.accept((ClassVisitor) classWriter1, 104);
      ClassReader classReader1 = new ClassReader("java/lang/Object");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      assertNotNull(classReader0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(6892, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      ClassReader classReader1 = new ClassReader("java/lang/String");
      assertNotNull(classReader1);
      assertEquals(49, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(6892, classReader1.header);
      
      String[] stringArray0 = classReader1.getInterfaces();
      assertNotNull(stringArray0);
      assertNotSame(classReader1, classReader0);
      assertEquals(49, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(6892, classReader1.header);
      
      String string0 = classReader0.getSuperName();
      assertNotNull(string0);
      assertNotSame(classReader0, classReader1);
      assertEquals("java/lang/Object", string0);
      assertEquals(49, classReader0.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(6892, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(883, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      
      ClassWriter classWriter0 = new ClassWriter(883);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classWriter0.addUninitializedType("org.apache.commons.io.filefilter.CanReadFileFilter", 1);
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classReader0.copyPool(classWriter0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(883, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader("h6j[<uvH{ap*%");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      assertNotNull(classReader0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(6892, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      
      ClassWriter classWriter0 = new ClassWriter(4);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassWriter classWriter1 = new ClassWriter(classReader0, 1);
      assertNotNull(classWriter1);
      assertEquals(49, classReader0.getAccess());
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(6892, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = classReader0.getSuperName();
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(6892, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      
      classReader0.accept((ClassVisitor) classWriter0, 4);
      String string1 = classWriter0.thisName;
      classReader0.accept((ClassVisitor) classWriter0, 1);
      classReader0.getItem((-3555));
      ClassReader classReader1 = new ClassReader(classReader0.b);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(45);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 8);
      classReader0.copyPool(classWriter1);
      classWriter0.addUninitializedType("java/lang/String", 8);
      classReader0.getInterfaces();
      classWriter1.getCommonSuperClass("java/lang/String", "java/lang/String");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      ClassWriter classWriter0 = new ClassWriter(4);
      String string0 = classWriter0.thisName;
      classReader0.accept((ClassVisitor) classWriter0, (-614));
      // Undeclared exception!
      try { 
        classReader0.getItem((-3265));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3265
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      classReader0.getSuperName();
      classReader0.getItem(4);
      ClassReader classReader1 = new ClassReader(classReader0.b);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter(6892);
      int int0 = Member.DECLARED;
      classWriter0.newDouble(4);
      classReader0.getSuperName();
      classReader0.accept((ClassVisitor) classWriter0, 0);
      classReader0.getItem(0);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.readUnsignedShort(1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(1531);
      classWriter0.addUninitializedType("org.apache.commons.io.IOCase", 1);
      classReader0.copyPool(classWriter0);
      classWriter0.newDouble(1);
      classReader0.getSuperName();
      classReader0.accept((ClassVisitor) classWriter0, 111);
      char[] charArray0 = new char[5];
      charArray0[1] = '2';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(16, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      ClassWriter classWriter0 = new ClassWriter(883);
      classWriter0.addUninitializedType("org.apache.commons.io.filefilter.CanReadFileFilter", 1);
      classReader0.copyPool(classWriter0);
      classWriter0.newDouble((-2026.4346715));
      classReader0.getSuperName();
      classReader0.accept((ClassVisitor) classWriter0, (-3555));
      String string0 = classWriter0.thisName;
      classReader0.accept((ClassVisitor) classWriter0, 120);
      // Undeclared exception!
      try { 
        classReader0.getItem(120);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 120
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(4);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 178);
      classWriter1.addUninitializedType("java/lang/String", (-2256));
      classReader0.copyPool(classWriter0);
      classWriter1.newDouble(4);
      classReader0.getSuperName();
      char[] charArray0 = new char[8];
      charArray0[1] = 'U';
      charArray0[2] = '|';
      charArray0[3] = 'b';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[4] = 'B';
      charArray0[5] = 'D';
      charArray0[6] = '#';
      charArray0[7] = 'L';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(31, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      classReader0.getClassName();
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[2] = 'A';
      classReader0.getInterfaces();
      // Undeclared exception!
      try { 
        classReader0.readClass((-851), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      ClassWriter classWriter0 = new ClassWriter(883);
      classWriter0.addUninitializedType("org.apache.commons.io.filefilter.CanReadFileFilter", 1);
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '*';
      charArray0[4] = 'D';
      charArray0[5] = 'D';
      charArray0[6] = 'm';
      charArray0[7] = '|';
      classReader0.getInterfaces();
      classReader0.getSuperName();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(4);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      classWriter0.addUninitializedType("java/lang/String", (-2240));
      classReader0.copyPool(classWriter0);
      classWriter0.newDouble(4);
      classReader0.getSuperName();
      ClassWriter classWriter1 = new ClassWriter(1);
      classReader0.accept((ClassVisitor) classWriter1, 8);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.accept((ClassVisitor) classWriter0, 185);
      classReader1.readUnsignedShort(6892);
      classReader1.readLong(545);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(4);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 178);
      classWriter0.addUninitializedType("java/lang/String", 3717);
      classReader0.copyPool(classWriter0);
      classWriter0.newDouble(0.0);
      classReader0.getSuperName();
      classReader0.accept((ClassVisitor) classWriter0, 1);
      String string0 = classWriter0.thisName;
      int int0 = 2327;
      ClassReader classReader1 = new ClassReader(classReader0.b, 2327, (-2256));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter1);
      classReader1.accept((ClassVisitor) classAdapter0, int0);
      int int1 = 173;
      classReader0.getItem(int1);
      ClassReader classReader2 = new ClassReader(classReader0.b);
      classReader2.readUnsignedShort(classWriter0.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(4);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 178);
      classWriter1.addUninitializedType("java/lang/String", (-2256));
      classReader0.copyPool(classWriter0);
      classWriter1.newDouble(4);
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      classReader1.getSuperName();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(4);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 178);
      classWriter1.addUninitializedType("java/lang/String", (-2256));
      classReader0.copyPool(classWriter0);
      classWriter1.newDouble(4);
      classReader0.getSuperName();
      classReader0.accept((ClassVisitor) classWriter0, 2);
      String string0 = classWriter0.thisName;
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      classReader1.accept((ClassVisitor) classWriter0, 197);
      classReader1.readUnsignedShort(1);
      classReader1.readLong(191);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(4);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 178);
      classWriter1.addUninitializedType("java/lang/String", (-2256));
      classReader0.copyPool(classWriter0);
      classWriter1.newDouble(4);
      classReader0.accept((ClassVisitor) classWriter1, (-2363));
      classReader0.getAccess();
  }
}
