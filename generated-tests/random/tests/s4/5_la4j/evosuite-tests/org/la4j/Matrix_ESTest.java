/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 12:12:55 GMT 2019
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.decomposition.MatrixDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(4, 4);
      String string0 = matrix0.toCSV();
      assertEquals("0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000\n", string0);
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      MatrixDecompositor matrixDecompositor0 = matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      assertNotNull(matrixDecompositor0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 5237;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(5237, 5237);
      int int1 = (-2911);
      int int2 = 734;
      int int3 = 198;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert((Matrix) null, 5237, (-2911), 734, 198, 734, 198);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative source position: 734, 198
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 5;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles((long) 5, 0.0, 3484.864668);
      Matrix matrix0 = Matrix.random(5, 5, mockRandom0);
      matrix0.determinant();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_QR;
      Matrix matrix1 = matrix0.removeFirstRow();
      matrix1.multiply(matrix0);
      matrix0.toRowVector();
      mockRandom0.setSeed(5);
      byte[] byteArray0 = new byte[2];
      matrix1.infinityNorm();
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)121;
      mockRandom0.nextBytes(byteArray0);
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      // Undeclared exception!
      try { 
        matrix1.removeRow(5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 0);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1313;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = (double) 0;
      Matrix matrix1 = Matrix.identity(1313);
      assertEquals(1313, matrix1.rows());
      
      Matrix matrix2 = Matrix.from1DArray(1313, 0, doubleArray0);
      assertEquals(0, matrix2.columns());
      
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      Matrix.from2DArray(doubleArray1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray2 = matrix2.foldColumns(vectorAccumulator0);
      assertEquals(0, doubleArray2.length);
      assertEquals(1313, matrix2.rows());
      
      double double0 = matrix0.determinant();
      assertEquals(0.0, double0, 0.01);
      
      Matrix matrix3 = Matrix.identity(0);
      assertTrue(matrix3.equals((Object)rowMajorSparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 9;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(9, 0);
      rowMajorSparseMatrix0.rank();
      int int1 = 6;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.foldColumn(6, vectorAccumulator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 0;
      DenseVector denseVector0 = DenseVector.unit(0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      double double0 = 0.6;
      denseVector0.divide(0.6);
      matrix0.norm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateColumn(0, vectorFunction0);
      // Undeclared exception!
      try { 
        matrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 1;
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 1);
      int int1 = 96;
      DenseVector denseVector0 = DenseVector.unit(96);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      Matrix matrix1 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      matrix1.spliterator();
      Matrix matrix2 = matrix1.multiplyByItsTranspose();
      matrix2.min();
      matrix0.toSparseMatrix();
      matrix1.determinant();
      int int2 = 62;
      matrix1.determinant();
      VectorFunction vectorFunction0 = null;
      // Undeclared exception!
      try { 
        matrix2.transformRow(62, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 62
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(5, 6, 6);
      int int0 = 13;
      Matrix matrix0 = Matrix.zero(13, 5);
      matrix0.removeLastRow();
      denseMatrix0.blankOfColumns(2749);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 5 rows and 6 cols at 0, 0 in a 13x5 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 1621;
      int int1 = 0;
      Matrix matrix0 = Matrix.zero(1621, 0);
      matrix0.toCSV();
      Matrix matrix1 = matrix0.transpose();
      int int2 = 2;
      // Undeclared exception!
      try { 
        matrix1.copyOfShape((-372), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -372x2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(15, 19);
      denseMatrix0.mkString((String) null, "Iz[|Lx");
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)19, 1.0, (double)15, 1346.6009415283, (double)19).when(vectorAccumulator0).accumulate();
      denseMatrix0.foldRows(vectorAccumulator0);
      denseMatrix0.rank();
      Matrix matrix0 = denseMatrix0.divide(0);
      assertNotSame(denseMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 2;
      Matrix matrix0 = Matrix.identity(2);
      matrix0.diagonalProduct();
      matrix0.rank();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      int int1 = 30;
      // Undeclared exception!
      try { 
        matrix0.foldColumn(30, (VectorAccumulator) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '30' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 150;
      int int1 = 0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 150;
      doubleArray0[4] = (double) 0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(150, 0, doubleArray0);
      Matrix matrix0 = denseMatrix0.blankOfShape(0, 0);
      denseMatrix0.equals((Object) null);
      // Undeclared exception!
      try { 
        matrix0.subtract((Matrix) denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 150x0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 37;
      double double0 = 0.0;
      Matrix matrix0 = Matrix.diagonal(37, 0.0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      int int1 = 6;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix0.updateRow(6, vectorFunction0);
      matrix0.toColumnMajorSparseMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateAt(37, 37, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(10, 716.28266);
      int int0 = 37;
      int int1 = 2;
      Matrix matrix0 = Matrix.from1DArray(37, 2, (double[]) null);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      sparseMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert(matrix0, 10, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 10 rows and 10 cols at 0, 0 from a 37x2 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 32;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 32);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      columnMajorSparseMatrix0.toMatrixMarket(numberFormat0);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general column-major\n32 32 32\n1 1 3,200%\n2 2 3,200%\n3 3 3,200%\n4 4 3,200%\n5 5 3,200%\n6 6 3,200%\n7 7 3,200%\n8 8 3,200%\n9 9 3,200%\n10 10 3,200%\n11 11 3,200%\n12 12 3,200%\n13 13 3,200%\n14 14 3,200%\n15 15 3,200%\n16 16 3,200%\n17 17 3,200%\n18 18 3,200%\n19 19 3,200%\n20 20 3,200%\n21 21 3,200%\n22 22 3,200%\n23 23 3,200%\n24 24 3,200%\n25 25 3,200%\n26 26 3,200%\n27 27 3,200%\n28 28 3,200%\n29 29 3,200%\n30 30 3,200%\n31 31 3,200%\n32 32 3,200%\n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 1045;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1045, 2191);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1257, 1257);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      rowMajorSparseMatrix0.non(matrixPredicate0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, rowMajorSparseMatrix0);
      int int1 = 2;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix1 = matrix0.transformRow(2, vectorFunction0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      rowMajorSparseMatrix0.foldNonZero(matrixAccumulator0);
      matrix1.toSparseMatrix();
      // Undeclared exception!
      rowMajorSparseMatrix0.setColumn(10, (double) 2191);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = (-2362.438445);
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 1.0;
      doubleArray5[1] = (-2362.438445);
      doubleArray5[2] = 1.0;
      doubleArray5[3] = (-2362.438445);
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 1.0;
      doubleArray5[6] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = (-2362.438445);
      doubleArray6[1] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 1.0;
      doubleArray7[1] = 1.0;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 1.0;
      doubleArray7[4] = (-1085.0);
      doubleArray7[5] = (-2362.438445);
      doubleArray7[6] = 1.0;
      doubleArray7[7] = 0.0;
      doubleArray7[8] = (-2196.0);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = (-2362.438445);
      doubleArray8[1] = (-2362.438445);
      doubleArray8[2] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[6];
      doubleArray9[0] = (-1085.0);
      doubleArray9[1] = (-2196.0);
      doubleArray9[2] = 1.0;
      doubleArray9[3] = 0.0;
      doubleArray9[4] = 1.0;
      doubleArray9[5] = 1.0;
      doubleArray0[8] = doubleArray9;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      DenseVector denseVector0 = DenseVector.unit(1175);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setRow(1175, (Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1175. Should be: 1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-5567.4544038956);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-2303.06);
      doubleArray2[4] = 1963.679981964769;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 1963.679981964769;
      doubleArray3[1] = (-2303.06);
      doubleArray3[2] = (-2303.06);
      doubleArray3[3] = 1.0;
      doubleArray3[4] = (-5567.4544038956);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 1963.679981964769;
      doubleArray4[1] = (-2303.06);
      doubleArray4[2] = (-5567.4544038956);
      doubleArray4[3] = (-5567.4544038956);
      doubleArray4[4] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 1.0;
      doubleArray0[4] = doubleArray5;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      rowMajorSparseMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 5;
      MockRandom mockRandom0 = new MockRandom(5);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.random(5, 5, 1.0, (Random) mockRandom0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      Locale locale0 = Locale.FRENCH;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      matrix0.toCSV(numberFormat0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, 5, 238, 5, 5, 5, 238);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 5, 238
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(7);
      assertEquals(7, sparseMatrix0.rows());
      assertEquals(7, sparseMatrix0.columns());
      
      Matrix matrix0 = sparseMatrix0.power(5);
      assertTrue(matrix0.equals((Object)sparseMatrix0));
      
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) sparseMatrix0, (-69), Integer.MAX_VALUE, 5, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -69, 2147483647
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(973);
      boolean boolean0 = denseMatrix0.equals((Object) "o");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2471, 30);
          OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
          HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
          DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 2471);
          DenseMatrix denseMatrix0 = DenseMatrix.unit(30, 30);
          Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, denseMatrix0);
          // Undeclared exception!
          rowMajorSparseMatrix0.insertRow(30, vector0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1626;
      doubleArray0[1] = (double) 1626;
      doubleArray0[2] = (double) 1626;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 1626;
      doubleArray0[5] = (double) 1626;
      doubleArray0[6] = (double) 1626;
      Matrix matrix0 = Matrix.from1DArray(1626, 1626, doubleArray0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      matrix0.iteratorOfColumn(1630);
      Matrix.zero(978, 1230);
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Matrix matrix1 = Matrix.from2DArray(doubleArray1);
      matrix1.min();
      matrix1.euclideanNorm();
      // Undeclared exception!
      try { 
        matrix0.multiply(matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 1626 does not equal to 7.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      sparseVector0.toRowMatrix();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-5567.4544038956);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-2303.06);
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 1963.679981964769;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 1963.679981964769;
      doubleArray3[1] = (-2303.06);
      doubleArray3[2] = (-2303.06);
      doubleArray3[3] = 1.0;
      doubleArray3[4] = (-5567.4544038956);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 1963.679981964769;
      doubleArray4[1] = (-2303.06);
      doubleArray4[2] = (-5567.4544038956);
      doubleArray4[3] = (-5567.4544038956);
      doubleArray4[4] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 1.0;
      doubleArray0[4] = doubleArray5;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = matrix0.non(matrixPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(3);
      SparseVector sparseVector0 = SparseVector.zero(3, 1);
      // Undeclared exception!
      try { 
        sparseMatrix0.insertRow(3, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(2);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        ((Matrix)cRSMatrix0).ensureIndexesAreInBounds((-2018), 598);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2018' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(3, 3);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(3);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      double double0 = new Integer(3);
      matrix0.iterator();
      rowMajorSparseMatrix0.equals((Matrix) columnMajorSparseMatrix0, 0.0);
      Matrix matrix1 = Matrix.constant(3, 2674, 2953.24);
      // Undeclared exception!
      try { 
        matrix1.insert(matrix0, (-1737), 3251, 1037, 3, 3, 2940);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 1037, 3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket vector array real\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected object: vector.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 3278, (-508.32768813864476));
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3278, 0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, sparseMatrix0);
      matrix0.iterator();
      Matrix matrix1 = matrix0.transpose();
      denseMatrix0.toSparseMatrix();
      sparseMatrix0.shuffle();
      // Undeclared exception!
      try { 
        matrix1.sliceBottomRight(7, 3278);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [7..0][3278..3278].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 5;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(5);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      rowMajorSparseMatrix0.non(matrixPredicate0);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(52);
      denseMatrix0.minInRow(5);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.multiply((Matrix) denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 5 does not equal to 52.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("1");
      matrix0.columnMajorIterator();
      int int0 = 1432;
      // Undeclared exception!
      try { 
        matrix0.maxInRow(1432);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insertColumn(8, (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 358;
      double double0 = (-1687.43519);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(358, 358, (-1687.43519));
      int int1 = 9;
      double double1 = (-447.21);
      Vector vector0 = Vector.constant(9, (-447.21));
      // Undeclared exception!
      try { 
        denseMatrix0.insertColumn(9, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 9. Should be: 358.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 1181;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1181, 1181);
      // Undeclared exception!
      denseMatrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 1;
      int int1 = 2415;
      Matrix matrix0 = Matrix.constant(1, 2415, (-4389.91238800193));
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 2415;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(936, 1464, 936);
      int int0 = 2;
      double double0 = new Integer(936);
      // Undeclared exception!
      columnMajorSparseMatrix0.norm();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 318;
      Matrix matrix0 = Matrix.constant(318, 318, 0.0);
      // Undeclared exception!
      matrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(958, 958, 958);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, 1, 958, 387, 958, (-83), 958);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -83x958
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 882;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(882, 882, 882);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 882;
      doubleArray0[1] = (double) 882;
      doubleArray0[2] = (-354.466095148);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(882, 0.0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) columnMajorSparseMatrix0, 882, 882, 882, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 882 rows and 0 cols at 882, 882 in a 882x882 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(10, 10, 0.0);
      matrix0.iteratorOfRow(10);
      matrix0.determinant();
      double[][] doubleArray0 = new double[9][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 10;
      doubleArray1[1] = 539.8055;
      doubleArray1[2] = (double) 10;
      doubleArray1[3] = (double) 10;
      doubleArray1[4] = (double) 10;
      doubleArray1[5] = (double) 10;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 10;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 539.8055;
      doubleArray2[3] = (double) 10;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 10;
      doubleArray3[1] = (double) 10;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (double) 10;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) 10;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 770.4176078508086;
      doubleArray5[1] = (double) 10;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (double) 10;
      doubleArray5[4] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      doubleArray8[0] = (double) 10;
      doubleArray8[1] = 539.8055;
      doubleArray8[2] = 539.8055;
      doubleArray8[3] = 0.0;
      doubleArray8[4] = 539.8055;
      doubleArray8[5] = 539.8055;
      double[] doubleArray9 = new double[2];
      doubleArray9[0] = 0.0;
      doubleArray9[1] = 0.0;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 10;
      int int1 = 178;
      double double0 = 0.0;
      Matrix matrix0 = Matrix.constant(10, 178, 0.0);
      matrix0.iteratorOfRow(10);
      // Undeclared exception!
      try { 
        matrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(37);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      matrix0.toRowVector();
      MockRandom mockRandom0 = new MockRandom(390L);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.randomSymmetric(37, 2787.53416, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 1369.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(2308, 3025.7249537);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(102);
      Double double0 = new Double(593);
      hashMap0.put(integer0, double0);
      Vector vector0 = Vector.fromMap(hashMap0, 2308);
      matrix0.setRow(593, vector0);
      matrix0.minInColumn(108);
      // Undeclared exception!
      try { 
        matrix0.minInRow(2308);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2309
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 287;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(287, 287);
      denseMatrix0.iteratorOfColumn(287);
      denseMatrix0.diagonalProduct();
      // Undeclared exception!
      denseMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 1101;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1101);
      rowMajorSparseMatrix0.slice(1101, 1101, 1101, 1101);
      rowMajorSparseMatrix0.swapRows(1101, 1101);
      int int1 = 0;
      int int2 = (-940);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.updateColumn((-1386), vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1386' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 1029;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1029, 1029);
      Matrix matrix0 = rowMajorSparseMatrix0.blankOfShape(1029, 13);
      matrix0.columnMajorIterator();
      rowMajorSparseMatrix0.iteratorOfColumn(1029);
      int int1 = (-214);
      int int2 = 1667;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.swapColumns((-214), 1667);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-214' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 237;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(237);
      double[][] doubleArray0 = new double[9][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 237;
      doubleArray2[1] = (double) 5;
      doubleArray2[2] = (double) 237;
      doubleArray2[3] = (double) 237;
      doubleArray2[4] = (double) 237;
      doubleArray2[5] = (double) 237;
      doubleArray2[6] = (double) 237;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) 5;
      doubleArray3[1] = (double) 237;
      doubleArray3[2] = (double) 237;
      doubleArray3[3] = (double) 5;
      doubleArray3[4] = (double) 237;
      doubleArray3[5] = (double) 237;
      doubleArray3[6] = (double) 5;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 237;
      doubleArray4[1] = (double) 5;
      doubleArray4[2] = (double) 237;
      doubleArray4[3] = (double) 5;
      doubleArray4[4] = (double) 5;
      doubleArray4[5] = (-2390.8969901);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (-2390.8969901);
      doubleArray5[1] = (double) 237;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (-2390.8969901);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (-2390.8969901);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (-2390.8969901);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = (double) 5;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = (double) 237;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = (double) 5;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 0.0;
      doubleArray7[7] = (double) 237;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = (double) 5;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[0];
      doubleArray0[8] = doubleArray9;
      Matrix.from2DArray(doubleArray0);
      columnMajorSparseMatrix0.copyOfRows(5);
      columnMajorSparseMatrix0.min();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        mockRandom0.longs((-2056L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 6;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(6, 6);
      sparseMatrix0.max();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.transformRow(6, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(7, 7);
      denseMatrix0.toString();
      int int0 = (-2004318070);
      // Undeclared exception!
      try { 
        denseMatrix0.removeColumn((-2004318070));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseVector0.toRowMatrix();
      cRSMatrix0.swapColumns(2333, 2333);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      Matrix matrix0 = rowMajorSparseMatrix0.multiplyByItsTranspose();
      // Undeclared exception!
      try { 
        matrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1037.6273367);
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = rowMajorSparseMatrix0.slice(16, 1757, 16, 1757);
      matrix0.min();
      matrix0.transform((MatrixFunction) null);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.setRow((-1929), (-347.15726));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1929
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 148;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 148;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 148;
      doubleArray0[3] = (double) 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(148, 0, doubleArray0);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      matrix0.kroneckerProduct(columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.subtract(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 148x0 does not equal to 0x148.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(17, (-773.63729679288));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(17, 1031);
      ooPlaceMatricesMultiplication0.ensureApplicableTo(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      columnMajorSparseMatrix0.iteratorOfColumn(1031);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      matrix0.insert((Matrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.slice((-29), (-1), 6, (-29));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [-29..6][-1..-29].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 5;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(5);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      rowMajorSparseMatrix0.non(matrixPredicate0);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(52);
      denseMatrix0.minInRow(5);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.multiply((Matrix) denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 5 does not equal to 52.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 6;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(6, 37);
      int int1 = 8;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = denseMatrix0.transformColumn(8, vectorFunction0);
      denseMatrix0.toCSV();
      denseMatrix0.sum();
      Vector vector0 = Vector.unit(6);
      // Undeclared exception!
      try { 
        matrix0.multiply(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 6 does not equal to 37.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(16, mockRandom0);
      denseMatrix0.setColumn(9, 743.3483768);
      // Undeclared exception!
      try { 
        denseMatrix0.swapColumns(1, (-1123));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1123
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      String string0 = "org.la4j.vector.DenseVector";
      rowMajorSparseMatrix0.rank();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.setDecimalSeparator('<');
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("org.la4j.vector.DenseVector", decimalFormatSymbols0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \"org.la4j.vector.DenseVector\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 100.0;
      doubleArray0[2] = 2898.852625914;
      doubleArray0[3] = 25.244780491393;
      doubleArray0[4] = 230.0756;
      doubleArray0[5] = 0.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      String string0 = matrix0.toCSV((NumberFormat) decimalFormat0);
      assertEquals("         1,        -100,    -2,898.853,    -25.245,    -230.076, 0\n      -100,      10,000,   289,885.263,  2,524.478,   23,007.56, 0\n-2,898.853, 289,885.263, 8,403,346.547, 73,180.898, 666,955.257, 0\n   -25.245,   2,524.478,    73,180.898,    637.299,   5,808.208, 0\n  -230.076,   23,007.56,   666,955.257,  5,808.208,  52,934.782, 0\n         0,           0,             0,          0,           0, 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(16);
      // Undeclared exception!
      try { 
        denseMatrix0.removeRow(16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..15
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(1779);
      // Undeclared exception!
      try { 
        matrix0.slice(1779, 1779, 1067, 1067);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [1779..1067][1779..1067].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 132;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(132);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      Matrix matrix1 = matrix0.blankOfRows(938);
      int int1 = 2225;
      // Undeclared exception!
      matrix1.hashCode();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 5557;
      Matrix matrix0 = Matrix.diagonal(5557, 5557);
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        matrix0.blankOfColumns(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 1000;
      double double0 = 907.7081780912;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1000, 907.7081780912);
      int int1 = 1138;
      // Undeclared exception!
      try { 
        sparseMatrix0.sliceTopLeft(1000, 1138);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1000' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 11;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(11);
      Locale locale0 = Locale.CHINA;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      columnMajorSparseMatrix0.mkString(numberFormat0);
      String string0 = "0.000";
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(608, 11);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.hadamardProduct(sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 11x11 does not equal to 608x608.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(2, 2);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      boolean boolean0 = matrix0.equals((Object) denseMatrix0);
      assertEquals(2, denseMatrix0.rows());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-371.46542);
      doubleArray1[3] = 4.9E-324;
      doubleArray1[4] = (-464.03546072758814);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 939.369643;
      doubleArray1[7] = 1822.636244021856;
      doubleArray1[8] = (-80.03466952875637);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 939.369643;
      doubleArray2[1] = 1822.636244021856;
      doubleArray2[2] = 1822.636244021856;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1822.636244021856;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-80.03466952875637);
      doubleArray2[7] = 1822.636244021856;
      doubleArray2[8] = (-1.0);
      doubleArray0[1] = doubleArray2;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      double double0 = sparseMatrix0.product();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1907.223325799);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1907.223325799);
      doubleArray2[1] = (-1907.223325799);
      doubleArray2[2] = (-1907.223325799);
      doubleArray2[3] = (-1907.223325799);
      doubleArray2[4] = (-1907.223325799);
      doubleArray2[5] = (-1907.223325799);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-1907.223325799);
      doubleArray3[1] = (-1907.223325799);
      doubleArray3[2] = (-1907.223325799);
      doubleArray3[3] = (-1907.223325799);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-1907.223325799);
      doubleArray4[1] = (-1907.223325799);
      doubleArray0[3] = doubleArray4;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert(matrix0, 449, (-22));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 449x-22
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom((-2673L));
      Matrix matrix0 = Matrix.randomSymmetric(1, mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      mockRandom0.nextBoolean();
      mockRandom0.doubles((double) (-2673L), (double) 1);
      rowMajorSparseMatrix0.setAll((-3075.2749838039954));
      rowMajorSparseMatrix0.iterator();
      Matrix matrix1 = matrix0.divide(0.0);
      matrix1.removeFirstColumn();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      int int1 = 1654;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.transformColumn(1654, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 1621;
      int int1 = 0;
      Matrix matrix0 = Matrix.zero(1621, 0);
      // Undeclared exception!
      try { 
        matrix0.updateColumn(0, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1586));
      // Undeclared exception!
      try { 
        Matrix.random((-1586), (-1586), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3559.919110805;
      doubleArray0[1] = 3679.80352160212;
      doubleArray0[2] = (-1426.8313508);
      doubleArray0[3] = 1152.4;
      doubleArray0[4] = 73.497997;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-2492.0);
      doubleArray0[7] = (-2252.965090259497);
      doubleArray0[8] = (-547.47954);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        DenseMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(40, mockRandom0);
      matrix0.max();
      // Undeclared exception!
      try { 
        Matrix.constant((-5975), (-5975), (-3043.3));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(4, 4);
      matrix0.toCSV();
      // Undeclared exception!
      try { 
        matrix0.maxInColumn(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(32);
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseMatrix0.removeLastColumn();
      assertEquals(0.03125, cRSMatrix0.density(), 0.01);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)sparseMatrix0.toDenseMatrix();
      assertEquals(32, basic2DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1883);
      // Undeclared exception!
      Matrix.randomSymmetric(1883, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 1885;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1885, 1885);
      // Undeclared exception!
      try { 
        Matrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-4671.911993961);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 3326.36614;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 2649.3;
      doubleArray2[7] = (-433.261958);
      doubleArray2[8] = 2100.836651392;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 2100.836651392;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-433.261958);
      doubleArray4[3] = 2100.836651392;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = Double.POSITIVE_INFINITY;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 2064.8;
      doubleArray5[5] = (-1881.1052924);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 2649.3;
      doubleArray7[1] = (-4671.911993961);
      doubleArray7[2] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (-1881.1052924);
      doubleArray8[2] = Double.POSITIVE_INFINITY;
      doubleArray8[3] = 0.0;
      doubleArray8[4] = 2064.8;
      doubleArray8[5] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[5];
      doubleArray9[0] = 2064.8;
      doubleArray9[1] = 3326.36614;
      doubleArray9[2] = (-433.261958);
      doubleArray9[3] = 3326.36614;
      doubleArray9[4] = 0.0;
      doubleArray0[8] = doubleArray9;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = columnMajorSparseMatrix0.add(2064.8);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.block(matrix0, matrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      Matrix matrix1 = columnMajorSparseMatrix1.multiply(0.0);
      int[] intArray0 = new int[9];
      intArray0[0] = 425;
      intArray0[1] = 7;
      intArray0[2] = (-5123);
      intArray0[3] = 9;
      intArray0[4] = (-2282);
      intArray0[5] = (-3596);
      intArray0[6] = 1368;
      intArray0[7] = (-219);
      intArray0[8] = (-659);
      // Undeclared exception!
      try { 
        matrix1.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '425' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = 3;
      double double0 = 0.5;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(3, 0.5);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      int int1 = 2387;
      int int2 = 0;
      int int3 = 6;
      // Undeclared exception!
      try { 
        matrix0.swapColumns(0, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      // Undeclared exception!
      try { 
        matrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(32, 32);
      matrix0.copyOfShape(32, 1618);
      CRSMatrix cRSMatrix0 = (CRSMatrix)matrix0.removeFirstRow();
      assertEquals(0.03125, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 68;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(68, mockRandom0);
      // Undeclared exception!
      denseMatrix0.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      Matrix matrix1 = matrix0.removeFirstRow();
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-906.69565442426);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 100.0;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 100.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 100.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 100.0;
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 100.0;
      doubleArray3[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 100.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-966.0);
      doubleArray4[3] = 100.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = Double.NEGATIVE_INFINITY;
      doubleArray5[1] = 100.0;
      doubleArray5[2] = 100.0;
      doubleArray5[3] = (-966.0);
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (-966.0);
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 0.0;
      doubleArray5[8] = 100.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (-966.0);
      doubleArray6[1] = Double.NEGATIVE_INFINITY;
      doubleArray6[2] = 100.0;
      doubleArray6[3] = (-966.0);
      doubleArray6[4] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (-906.69565442426);
      doubleArray7[1] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      doubleArray0[7] = doubleArray8;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.rank();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.divide(1.0);
      int int0 = 334;
      // Undeclared exception!
      try { 
        denseMatrix0.setRow(334, (-1327.43058230277));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1, 1);
      // Undeclared exception!
      try { 
        denseMatrix0.updateRow(1, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 8;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(8, 6);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      matrix0.subtract((double) 8);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.entrySet();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 8);
      // Undeclared exception!
      try { 
        denseMatrix0.multiply((Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 8 does not equal to 6.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(2416);
      matrix0.trace();
      // Undeclared exception!
      try { 
        matrix0.add((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 855.953128357487;
      doubleArray2[1] = (-727.0);
      doubleArray2[2] = (-2285.506458);
      doubleArray2[3] = 309.0;
      doubleArray2[4] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-2285.506458);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 855.953128357487;
      doubleArray3[3] = (-2285.506458);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 2408.95;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 309.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 855.953128357487;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 855.953128357487;
      doubleArray6[1] = 309.0;
      doubleArray6[2] = (-727.0);
      doubleArray6[3] = 855.953128357487;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 2408.95;
      doubleArray6[6] = 0.0;
      doubleArray6[7] = 0.0;
      doubleArray6[8] = 2408.95;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (-2285.506458);
      doubleArray7[1] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = 2408.95;
      doubleArray0[7] = doubleArray8;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = sparseMatrix0.subtract(309.0);
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(3, 3);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(3);
      assertEquals(3, columnMajorSparseMatrix0.columns());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      cRSMatrix0.infinityNorm();
      cRSMatrix0.iterator();
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      MockRandom mockRandom0 = new MockRandom(16L);
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV(" ");
      // Undeclared exception!
      try { 
        sparseMatrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 3014;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3014, 3014);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      matrix0.hadamardProduct(columnMajorSparseMatrix0);
      String string0 = "%%MatrixMarket";
      // Undeclared exception!
      columnMajorSparseMatrix0.kroneckerProduct(matrix0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(16, 6);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      matrix0.trace();
      Matrix matrix1 = Matrix.constant(1, 2740, 1);
      assertEquals(2740, matrix1.columns());
      assertEquals(1, matrix1.rows());
      
      matrix0.iteratorOfColumn(16);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(48, 0, 48);
      // Undeclared exception!
      try { 
        matrix0.getColumn((-3482));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 1629);
      rowMajorSparseMatrix0.columnMajorIterator();
      rowMajorSparseMatrix0.setColumn(0, (double) 0);
      // Undeclared exception!
      try { 
        Matrix.unit((-2216), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1547, 1574.98);
      // Undeclared exception!
      try { 
        denseMatrix0.minInRow(1547);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      String string0 = "cD4%`N6L=$";
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("cD4%`N6L=$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(32, 0);
      rowMajorSparseMatrix0.toColumnVector();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.swapRows(10, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-0.857);
      doubleArray0[2] = (-2593.23);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 4085.228964434;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = (-1359.854054365);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      assertEquals(7, matrix0.columns());
      
      Matrix matrix1 = matrix0.slice(1000, 1000, 1000, 1000);
      assertEquals(0, matrix1.rows());
      assertEquals(1, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1681);
      doubleArray0[1] = (double) (-2112278997);
      doubleArray0[2] = (double) (-2112278997);
      doubleArray0[3] = 100.0;
      doubleArray0[4] = (double) (-2112278997);
      doubleArray0[5] = 2279.515117;
      doubleArray0[6] = (double) (-1681);
      doubleArray0[7] = (double) (-1681);
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-1681), (-2112278997), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1681x-2112278997
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 8;
      int int1 = 5;
      Matrix matrix0 = Matrix.zero(8, 5);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      // Undeclared exception!
      try { 
        matrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 0);
      denseVector0.toCSV();
      Matrix matrix0 = denseVector0.toColumnMatrix();
      denseVector0.sliceRight(0);
      matrix0.swapColumns(0, 0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      matrix0.withSolver(linearAlgebra_SolverFactory0);
      matrix0.mkString("", "thc_J{Jrb~+0#Mi");
      int int0 = (-1016);
      // Undeclared exception!
      try { 
        matrix0.power((-1016));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1016.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 873.386;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1079.1275466;
      doubleArray1[5] = 2166.30268;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      int int0 = 37;
      sparseMatrix0.copyOfColumns(37);
      // Undeclared exception!
      try { 
        sparseMatrix0.slice(37, 1790, 1790, (-1140));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [37..1790][1790..-1140].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(3278, 0.0, (Random) mockRandom0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      matrix0.sliceBottomRight(575, 659);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 2248;
      Matrix matrix0 = Matrix.diagonal(2248, 2248);
      // Undeclared exception!
      matrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[][] doubleArray0 = new double[9][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-10.13);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-162.644594);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = (-608.7595038018);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-10.13);
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (-162.644594);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-162.644594);
      doubleArray5[3] = 0.0;
      doubleArray5[4] = Double.NEGATIVE_INFINITY;
      doubleArray5[5] = (-608.7595038018);
      doubleArray5[6] = 0.0;
      doubleArray5[7] = Double.NEGATIVE_INFINITY;
      doubleArray5[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = (-10.13);
      doubleArray6[6] = (-10.13);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = Double.NEGATIVE_INFINITY;
      doubleArray7[1] = (-162.644594);
      doubleArray7[2] = (-10.13);
      doubleArray7[3] = (-162.644594);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (-608.7595038018);
      doubleArray8[2] = (-10.13);
      doubleArray8[3] = 0.0;
      doubleArray8[4] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      doubleArray9[0] = Double.NEGATIVE_INFINITY;
      doubleArray9[1] = (-608.7595038018);
      doubleArray9[2] = 0.0;
      doubleArray9[3] = 0.0;
      doubleArray9[4] = Double.NEGATIVE_INFINITY;
      doubleArray9[5] = Double.NEGATIVE_INFINITY;
      doubleArray9[6] = (-608.7595038018);
      doubleArray9[7] = 0.0;
      doubleArray0[8] = doubleArray9;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.sum();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Infinite or NaN
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      String string0 = "5";
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("5");
      int int0 = 13;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(13, 13, 13);
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, columnMajorSparseMatrix0);
      denseMatrix0.rotate();
      Matrix.identity(1644);
      columnMajorSparseMatrix0.toRowMajorSparseMatrix();
      // Undeclared exception!
      try { 
        ooPlaceMatricesMultiplication0.ensureApplicableTo(columnMajorSparseMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 13 does not equal to 1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = (-2102);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero((-2102), (-2102));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2102x-2102
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 0;
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      matrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 719.0326003;
      doubleArray1[2] = (-4548.472);
      doubleArray1[3] = 571.3569211787283;
      doubleArray1[4] = (-395.0137521406678);
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-395.0137521406678);
      doubleArray2[1] = 719.0326003;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 719.0326003;
      doubleArray2[6] = (-395.0137521406678);
      doubleArray2[7] = (-4548.472);
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 719.0326003;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-4548.472);
      doubleArray5[3] = (-4548.472);
      doubleArray5[4] = 635.7913;
      doubleArray5[5] = (-4548.472);
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 571.3569211787283;
      doubleArray5[8] = (-395.0137521406678);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 1.0;
      doubleArray6[1] = 571.3569211787283;
      doubleArray6[2] = 1.0;
      doubleArray6[3] = 571.3569211787283;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = (-395.0137521406678);
      doubleArray7[1] = (-4548.472);
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 635.7913;
      doubleArray7[7] = 571.3569211787283;
      doubleArray7[8] = 571.3569211787283;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = (-395.0137521406678);
      doubleArray0[7] = doubleArray8;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = (-1386);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        DenseMatrix.from1DArray(37, (-1386), (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 37x-1386
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 470;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        SparseMatrix.randomSymmetric(470, (-495.86), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -109535474.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 1267;
      int int1 = (-2768);
      // Undeclared exception!
      try { 
        Matrix.zero(1267, (-2768));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "%%MatrixMarket matrix coordinate real general ";
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(16, 16, mockRandom0);
      mockRandom0.ints();
      mockRandom0.longs((long) 16);
      mockRandom0.nextDouble();
      denseMatrix0.setRow(0, 1183.0);
      mockRandom0.ints(2490L);
      mockRandom0.nextLong();
      double double0 = denseMatrix0.trace();
      assertEquals(1190.0, double0, 0.01);
      
      int int0 = denseMatrix0.rows();
      Matrix matrix0 = denseMatrix0.blankOfColumns(16);
      denseMatrix0.rows();
      int int1 = denseMatrix0.hashCode();
      assertFalse(int1 == int0);
      
      matrix0.toMatrixMarket();
      double[][] doubleArray0 = new double[0][5];
      Matrix.from2DArray(doubleArray0);
      double double1 = matrix0.diagonalProduct();
      assertEquals(0.0, double1, 0.01);
      
      Matrix matrix1 = matrix0.blankOfShape(16, 1697);
      assertEquals(16, matrix0.columns());
      assertEquals(16, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 1146;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero(1146, (-1), 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1146x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 9;
      MockRandom mockRandom0 = new MockRandom((-22L));
      DenseVector denseVector0 = DenseVector.random(9, mockRandom0);
      mockRandom0.setSeed((-22L));
      Matrix matrix0 = denseVector0.toRowMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-22L), (double)(-22L), 1.0, 2.0, (-1.0)).when(vectorAccumulator0).accumulate();
      matrix0.foldColumns(vectorAccumulator0);
      int int1 = (-2135);
      // Undeclared exception!
      try { 
        Matrix.zero((-2135), (-2135));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2135x-2135
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(32, (-966.0));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 175;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1105, 175, doubleArray0);
      sparseMatrix0.equals((Object) denseMatrix0);
      // Undeclared exception!
      try { 
        denseMatrix0.euclideanNorm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 4.9E-324;
      doubleArray1[1] = (-703.3624486663463);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 2.0;
      doubleArray1[4] = 623.4972920157;
      doubleArray1[5] = 2.220446049250313E-14;
      doubleArray1[6] = 1937.0056064;
      doubleArray1[7] = (-3987.0639924);
      doubleArray1[8] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = 2.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 623.4972920157;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = (-703.3624486663463);
      doubleArray3[4] = 2.0;
      doubleArray3[5] = (-703.3624486663463);
      doubleArray3[6] = 4.9E-324;
      doubleArray3[7] = (-3987.0639924);
      doubleArray3[8] = 1937.0056064;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 1937.0056064;
      doubleArray5[1] = 2.220446049250313E-14;
      doubleArray5[2] = 1.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = 2.220446049250313E-14;
      doubleArray6[1] = 1937.0056064;
      doubleArray6[2] = 1937.0056064;
      doubleArray6[3] = 623.4972920157;
      doubleArray6[4] = 2.220446049250313E-14;
      doubleArray6[5] = (-3987.0639924);
      doubleArray6[6] = 2.0;
      doubleArray6[7] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = 4.9E-324;
      doubleArray7[1] = 2.220446049250313E-14;
      doubleArray7[2] = (-703.3624486663463);
      doubleArray7[3] = 2.220446049250313E-14;
      doubleArray7[4] = 1493.5129137331;
      doubleArray0[6] = doubleArray7;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV("dKZ#2uk");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 929.89072;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 929.89072;
      doubleArray2[1] = 929.89072;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 4640.7277;
      doubleArray3[1] = 929.89072;
      doubleArray3[2] = 929.89072;
      doubleArray3[3] = 929.89072;
      doubleArray3[4] = 929.89072;
      doubleArray3[5] = 929.89072;
      doubleArray3[6] = 929.89072;
      doubleArray3[7] = 929.89072;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 929.89072;
      doubleArray4[1] = 929.89072;
      doubleArray4[2] = 4640.7277;
      doubleArray4[3] = 4640.7277;
      doubleArray4[4] = 4640.7277;
      doubleArray4[5] = 4640.7277;
      doubleArray0[3] = doubleArray4;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      MatrixFactory<ColumnMajorSparseMatrix> matrixFactory0 = (MatrixFactory<ColumnMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        matrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(15, 19);
      assertEquals(19, denseMatrix0.columns());
      
      denseMatrix0.mkString((String) null, "Iz[|Lx");
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)19, (double)15, (-1427.6978628261), 0.0, (double)19).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = denseMatrix0.foldRows(vectorAccumulator0);
      double[][] doubleArray1 = new double[3][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray1);
      denseMatrix0.equals((Matrix) columnMajorSparseMatrix0, (double) 19);
      assertEquals(0.9333333333333333, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(15, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 1806;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1806);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      columnMajorSparseMatrix0.transform(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 205;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from1DArray(Integer.MAX_VALUE, 205, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
