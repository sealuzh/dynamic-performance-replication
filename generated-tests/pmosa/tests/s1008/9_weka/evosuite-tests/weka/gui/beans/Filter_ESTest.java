/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 12:46:07 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Canvas;
import java.awt.Choice;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.beans.EventSetDescriptor;
import java.beans.IntrospectionException;
import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.Period;
import java.time.chrono.IsoChronology;
import java.time.chrono.MinguoDate;
import javax.swing.KeyStroke;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.plaf.multi.MultiPanelUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.misc.SerializedClassifier;
import weka.core.BinarySparseInstance;
import weka.core.ChebyshevDistance;
import weka.core.CheckGOE;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.supervised.instance.StratifiedRemoveFolds;
import weka.gui.Logger;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.Classifier;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataSourceListener;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.IncrementalClassifierEvaluator;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceListener;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.KnowledgeFlowApp;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setCustomName((String) null);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.addTestSetListener(scatterPlotMatrix0);
      Class<Choice> class0 = Choice.class;
      Class<ScatterPlotMatrix> class1 = ScatterPlotMatrix.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      EventSetDescriptor eventSetDescriptor0 = null;
      try {
        eventSetDescriptor0 = new EventSetDescriptor(class0, "", class1, stringArray0, "", "", "co");
        fail("Expecting exception: IntrospectionException");
      
      } catch(Throwable e) {
         //
         // Method not found:  on class weka.gui.beans.ScatterPlotMatrix
         //
         verifyException("java.beans.EventSetDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getVisibleRect();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      filter0.firePropertyChange("ERROR: Can't process streamed instances; can't continue.", (-2398), (-2398));
      filter0.getHierarchyListeners();
      Clusterer clusterer0 = new Clusterer();
      filter0.addTestSetListener(clusterer0);
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("AllFilter", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setCustomName((String) null);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertFalse(filter0.isBusy());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.isBusy();
      KnowledgeFlowApp knowledgeFlowApp0 = null;
      try {
        knowledgeFlowApp0 = new KnowledgeFlowApp(false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("AllFilter", filter0.getCustomName());
      
      filter0.setCustomName((String) null);
      boolean boolean0 = filter0.connectionAllowed("*M8v<[=8:W:Yd*mJV4N");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isBusy();
      filter0.setCustomName("");
      filter0.getX();
      filter0.connectionNotification(" test set interrupted!", " test set interrupted!");
      filter0.connectionNotification("IF}$FB7M%+SFxpeU&", "IF}$FB7M%+SFxpeU&");
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      filter0.addTestSetListener(attributeSummarizer0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      substringReplacer0.isDoubleBuffered();
      filter0.addInstanceListener(substringReplacer0);
      ClassAssigner classAssigner0 = new ClassAssigner();
      substringReplacer0.getHeight();
      BeanVisual beanVisual0 = classAssigner0.m_visual;
      filter0.setVisual(beanVisual0);
      // Undeclared exception!
      try { 
        filter0.performRequest("_animated.gif");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // _animated.gif not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.addInstanceListener((InstanceListener) null);
      MinguoDate minguoDate0 = MockMinguoDate.now();
      filter0.connectionNotification("y", minguoDate0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.list();
      filter0.disconnectionNotification("", "");
      // Undeclared exception!
      try { 
        filter0.performRequest("(>,-!6LXr5F)c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (>,-!6LXr5F)c not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.removeFocusListener((FocusListener) null);
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(scatterPlotMatrix0, instances0, 125, 125, 125, 125);
      trainingSetEvent0.m_trainingSet = instances0;
      trainingSetEvent0.m_maxSetNumber = 125;
      trainingSetEvent0.m_setNumber = 125;
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.addTrainingSetListener(scatterPlotMatrix0);
      AllFilter allFilter0 = (AllFilter)filter0.getWrappedAlgorithm();
      assertFalse(allFilter0.isOutputFormatDefined());
      
      filter0.removeDataSourceListener(scatterPlotMatrix0);
      filter0.getCustomName();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      boolean boolean0 = filter0.connectionAllowed("AllFilter");
      filter0.addTestSetListener(scatterPlotMatrix0);
      filter0.removeTrainingSetListener(scatterPlotMatrix0);
      boolean boolean1 = filter0.isBusy();
      assertFalse(boolean1 == boolean0);
      
      String string1 = filter0.getCustomName();
      assertEquals("AllFilter", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      testSetMaker0.getWidth();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      Logger logger0 = testSetMaker0.m_logger;
      filter0.setLog((Logger) null);
      filter0.enumerateRequests();
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      
      filter0.getWrappedAlgorithm();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.removeTestSetListener(scatterPlotMatrix0);
      filter0.enumerateRequests();
      boolean boolean0 = filter0.connectionAllowed("");
      assertTrue(boolean0);
      
      filter0.removeTrainingSetListener(scatterPlotMatrix0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      filter0.addDataSourceListener(trainingSetMaker0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      // Undeclared exception!
      try { 
        filter0.acceptInstance((InstanceEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      filter0.addHierarchyListener((HierarchyListener) null);
      filter0.stop();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      logPanel0.removeInputMethodListener((InputMethodListener) null);
      logPanel0.getKeyListeners();
      logPanel0.getInputMap();
      logPanel0.taskFinished();
      filter0.setLog(logPanel0);
      filter0.notifyInstanceListeners((InstanceEvent) null);
      filter0.useDefaultVisual();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TrainingSetEvent trainingSetEvent0 = null;
      try {
        trainingSetEvent0 = new TrainingSetEvent((Object) null, instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.connectionAllowed("B@Z");
      boolean boolean1 = filter0.eventGeneratable("B@Z");
      assertFalse(boolean1 == boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("");
      assertFalse(boolean0);
      
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.getGraphics();
      flowByExpression0.paintAll((Graphics) null);
      flowByExpression0.firePropertyChange("8", false, false);
      filter0.addDataSourceListener(flowByExpression0);
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      Logger logger0 = trainingSetMaker0.m_logger;
      filter0.setLog((Logger) null);
      filter0.stop();
      filter0.stop();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      Border border0 = LineBorder.createBlackLineBorder();
      filter0.setBorder(border0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      filter0.getFilter();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        matlabLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      ListOptions listOptions0 = new ListOptions();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      testSetMaker0.getStructure("HV[/?G4ri%");
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(listOptions0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      TestSetEvent testSetEvent0 = new TestSetEvent(trainingSetEvent0, (Instances) null, 46, 46, 1333, 0);
      assertEquals(1333, testSetEvent0.getSetNumber());
      
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      ListOptions listOptions0 = new ListOptions();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      testSetMaker0.getStructure("HV[/?G4ri%");
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(listOptions0, (Instances) null);
      filter0.connectionNotification("USV_%Mt,\"htk|yU5u=", "HV[/?G4ri%");
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.addDataSourceListener(testSetMaker0);
      boolean boolean0 = filter0.eventGeneratable("USV_%Mt,\"htk|yU5u=");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("l1k:", "l1k:");
      boolean boolean0 = filter0.eventGeneratable("l1k:");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      filter0.connectionNotification("com.thoughtworks.xstream.converters.reflection.LambdaConverter", instanceEvent0);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("q|)~toyvGw$Y8Gz", "q|)~toyvGw$Y8Gz");
      Sorter sorter0 = new Sorter();
      Logger logger0 = sorter0.m_log;
      filter0.setLog((Logger) null);
      filter0.enumerateRequests();
      boolean boolean0 = filter0.connectionAllowed("");
      assertTrue(boolean0);
      
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.firePropertyChange("No file provided with option '-file'!", (short)1648, (short)0);
      filter0.connectionAllowed("By@Z");
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm("By@Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.lang.String : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      filter0.globalInfo();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      Filter filter1 = new Filter();
      filter0.addInstanceListener(filter1);
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      filter0.acceptInstance(instanceEvent0);
      filter0.notifyInstanceListeners(instanceEvent0);
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      String[] stringArray0 = new String[0];
      try { 
        weka.filters.Filter.batchFilterFile(stratifiedRemoveFolds0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // No first input file given.
         // 
         // Filter options:
         // 
         // -V
         // \tSpecifies if inverse of selection is to be output.
         // 
         // -N <number of folds>
         // \tSpecifies number of folds dataset is split into. 
         // \t(default 10)
         // 
         // -F <fold>
         // \tSpecifies which fold is selected. (default 1)
         // 
         // -S <seed>
         // \tSpecifies random number seed. (default 0, no randomizing)
         // 
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // -i <filename>
         // \tThe file containing first input instances.
         // -o <filename>
         // \tThe file first output instances will be written to.
         // -r <filename>
         // \tThe file containing second input instances.
         // -s <filename>
         // \tThe file second output instances will be written to.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      Filter filter1 = new Filter();
      ClassOrder classOrder0 = new ClassOrder();
      filter1.setWrappedAlgorithm(classOrder0);
      assertEquals("ClassOrder", filter1.getCustomName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      DataSetEvent dataSetEvent0 = new DataSetEvent(predictionAppender0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      InstanceEvent instanceEvent0 = new InstanceEvent(predictionAppender0, (Instances) null);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      serializedModelSaver0.getBaselineResizeBehavior();
      CheckGOE checkGOE0 = new CheckGOE();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      Period period0 = Period.ofYears(1);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      TestSetEvent testSetEvent0 = new TestSetEvent(localDate0, instances0, 0, 10000);
      filter0.acceptTestSet(testSetEvent0);
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(attributeSummarizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.AttributeSummarizer : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Font font0 = new Font("", (-436), (-436));
      filter0.setFont(font0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.setName("configuration");
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      textDirectoryLoader0.reset();
      filter0.addDataSourceListener(substringLabeler0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setDirectory(file0);
      filter0.addTrainingSetListener(substringLabeler0);
      Instances instances1 = textDirectoryLoader0.getStructure();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      substringLabeler0.removeInstanceListener(filter0);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(attributeSelection0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.addDataSourceListener(substringLabeler0);
      boolean boolean0 = filter0.eventGeneratable("4;");
      assertFalse(boolean0);
      
      substringLabeler0.getFocusTraversalPolicy();
      filter0.addTrainingSetListener(substringLabeler0);
      filter0.removeDataSourceListener(substringLabeler0);
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      DataSetEvent dataSetEvent1 = new DataSetEvent(incrementalClassifierEvaluator0, instances1);
      filter0.acceptDataSet(dataSetEvent1);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("instance", "instance");
      boolean boolean0 = filter0.eventGeneratable("instance");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      filter0.connectionNotification("trainingSet", instanceStreamToBatchMaker0);
      boolean boolean0 = filter0.eventGeneratable("trainingSet");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Filter filter1 = new Filter();
      ThreadGroup threadGroup0 = new ThreadGroup("N=l'z6#");
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null);
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "");
      filter1.m_filterThread = (Thread) mockThread1;
      InstanceEvent instanceEvent0 = new InstanceEvent(filter1, (Instances) null);
      filter1.acceptInstance(instanceEvent0);
      assertTrue(filter1.isBusy());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      MockThread mockThread0 = new MockThread((Runnable) null);
      filter0.m_filterThread = (Thread) mockThread0;
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0, (Instances) null);
      instanceEvent0.setStructure((Instances) null);
      filter0.acceptInstance(instanceEvent0);
      boolean boolean0 = filter0.connectionAllowed("I\"");
      assertTrue(filter0.isBusy());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Associator associator0 = new Associator();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(associator0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, instances0, 1225, (-6176));
      filter0.acceptTrainingSet(trainingSetEvent0);
      Classifier classifier0 = new Classifier();
      TestSetEvent testSetEvent0 = new TestSetEvent(classifier0, instances0, (-37), (-1), (-1), 1225);
      filter0.acceptTestSet(testSetEvent0);
      TestSetMaker testSetMaker0 = new TestSetMaker();
      Canvas canvas0 = new Canvas();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(canvas0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.awt.Canvas : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      MultiFilter multiFilter0 = new MultiFilter();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@data";
      stringArray0[1] = "Toggle perspectives";
      stringArray0[2] = "Fb^N-tSB\"";
      stringArray0[3] = "oXrU=eV}0OT2{l q-";
      stringArray0[4] = "nox(F:^vFmLt~6jN7$4";
      weka.filters.Filter.runFilter((weka.filters.Filter) null, stringArray0);
      filter0.setFilter(multiFilter0);
      filter0.transferFocus();
      boolean boolean0 = filter0.connectionAllowed("instance");
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.removeTestSetListener(filter0);
      boolean boolean0 = filter0.eventGeneratable("configuration");
      boolean boolean1 = filter0.isBusy();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      filter0.isRequestFocusEnabled();
      Associator associator0 = new Associator();
      filter0.connectionNotification("\n\nCost Matrix\n", associator0);
      boolean boolean0 = filter0.eventGeneratable("\n\nCost Matrix\n");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.getConnectedFormat();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.removeInstanceListener(flowByExpression0);
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Filter filter0 = new Filter();
      Filter filter1 = new Filter();
      MockThread mockThread0 = new MockThread((Runnable) null);
      filter1.m_filterThread = (Thread) mockThread0;
      InstanceEvent instanceEvent0 = new InstanceEvent(filter1, (Instances) null);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(substringReplacer0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter1.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter1.getCustomName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0, (Instances) null);
      instanceEvent0.setStatus((-1486));
      filter0.acceptInstance(instanceEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0, (Instances) null);
      instanceEvent0.setStatus((-1486));
      filter0.acceptInstance(instanceEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0, (Instances) null);
      instanceEvent0.setStatus((-1486));
      int[] intArray0 = new int[2];
      intArray0[0] = 272;
      intArray0[1] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1093.4335), intArray0, (-1934));
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      instanceEvent0.setInstance(sparseInstance0);
      instanceEvent0.setStatus(1);
      filter0.acceptInstance(instanceEvent0);
      filter0.globalInfo();
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Filter filter0 = new Filter();
      filter0.setFilter(multiFilter0);
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance((Instances) null);
      InstanceEvent instanceEvent0 = new InstanceEvent(chebyshevDistance0, (Instances) null);
      instanceEvent0.setStatus(2);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 1000000);
      instanceEvent0.setInstance(binarySparseInstance0);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }
}
