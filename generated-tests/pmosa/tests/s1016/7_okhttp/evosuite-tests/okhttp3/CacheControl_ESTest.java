/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 09:19:04 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.toString();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      // Undeclared exception!
      try { 
        headers_Builder0.set("cache-control", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // value == null
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("pragma", "cnHent =vuyl");
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      String string0 = cacheControl0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      int int0 = ObjectStreamConstants.baseWireHandle;
      cacheControl0.isPublic();
      cacheControl0.toString();
      boolean boolean0 = cacheControl0.noTransform();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      headers0.toString();
      CacheControl.parse(headers0);
      cacheControl0.FORCE_CACHE.toString();
      cacheControl0.headerValue = null;
      cacheControl0.mustRevalidate();
      cacheControl0.mustRevalidate();
      headers0.names();
      cacheControl0.maxAgeSeconds();
      cacheControl0.noTransform();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.onlyIfCached();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noTransform();
      cacheControl_Builder1.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      cacheControl0.FORCE_CACHE.toString();
      // Undeclared exception!
      try { 
        cacheControl_Builder2.maxAge((-1), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.headerValue = "Unexpected header: ";
      cacheControl0.minFreshSeconds();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noTransform();
      int int0 = 2;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.maxAge(2, timeUnit0);
      int int1 = 0;
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.maxStale(0, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      CacheControl.Builder cacheControl_Builder6 = cacheControl_Builder5.minFresh(2824, timeUnit1);
      cacheControl0.headerValue = "Unexpected header: ";
      TimeUnit timeUnit2 = TimeUnit.DAYS;
      cacheControl_Builder2.noStore();
      cacheControl_Builder6.noTransform();
      cacheControl0.FORCE_NETWORK.toString();
      // Undeclared exception!
      try { 
        cacheControl_Builder1.maxStale((-1727), timeUnit2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -1727
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxStale((-1026), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -1026
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(2658, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noStore();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder2);
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertEquals(0, cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPublic());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      cacheControl0.FORCE_NETWORK.toString();
      cacheControl0.FORCE_CACHE.headerValue = null;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(Integer.MAX_VALUE, timeUnit0);
      cacheControl_Builder1.onlyIfCached();
      cacheControl_Builder1.noTransform();
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      cacheControl_Builder1.maxAge(0, timeUnit1);
      cacheControl_Builder0.noTransform();
      cacheControl0.sMaxAgeSeconds();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      // Undeclared exception!
      try { 
        headers_Builder0.set("3A{OYWA", "0'w1_C]:\"BR\u0007T^0n!B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected char 0x07 at 11 in 3A{OYWA value: 0'w1_C]:\"BR\u0007T^0n!B
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxAge(1, timeUnit0);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noTransform();
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.maxStale(32, timeUnit1);
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder3);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl.parse(headers0);
      cacheControl0.mustRevalidate();
      cacheControl0.noCache();
      cacheControl0.headerValue = "RPrLxj-cjqA8x=";
      cacheControl_Builder4.noTransform();
      // Undeclared exception!
      try { 
        cacheControl_Builder3.maxStale((-1383), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -1383
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      cacheControl_Builder1.onlyIfCached();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      cacheControl_Builder2.maxAge(0, timeUnit0);
      cacheControl_Builder2.noTransform();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.minFresh(2820, timeUnit0);
      CacheControl cacheControl0 = cacheControl_Builder3.build();
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals(2820, cacheControl0.minFreshSeconds());
      assertEquals(0, cacheControl0.maxAgeSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      
      cacheControl_Builder3.noTransform();
      CacheControl cacheControl1 = CacheControl.FORCE_NETWORK;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      cacheControl1.FORCE_CACHE.headerValue = "'gKS@:=nsAm9";
      Headers.Builder headers_Builder1 = headers_Builder0.removeAll("ody27");
      Headers.Builder headers_Builder2 = headers_Builder1.addLenient("", "VHT[s~");
      headers_Builder2.set("NoYg\"0n", "");
      Headers headers0 = new Headers(headers_Builder2);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "NoYg\"0n";
      stringArray0[1] = "'gKS@:=nsAm9";
      stringArray0[2] = "'gKS@:=nsAm9";
      stringArray0[3] = "'gKS@:=nsAm9";
      stringArray0[4] = "'gKS@:=nsAm9";
      stringArray0[5] = "YhR^L9{%I/";
      Headers.of(stringArray0);
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      assertFalse(cacheControl2.noTransform());
      assertEquals((-1), cacheControl2.sMaxAgeSeconds());
      assertFalse(cacheControl2.onlyIfCached());
      assertFalse(cacheControl2.noCache());
      assertEquals((-1), cacheControl2.minFreshSeconds());
      assertEquals((-1), cacheControl2.maxAgeSeconds());
      assertFalse(cacheControl2.noStore());
      assertFalse(cacheControl2.mustRevalidate());
      
      cacheControl1.maxStaleSeconds();
      cacheControl1.mustRevalidate();
      String string0 = cacheControl1.toString();
      assertNotNull(string0);
      assertEquals((-1), cacheControl1.maxStaleSeconds());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(1876, timeUnit0);
      cacheControl_Builder1.onlyIfCached();
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxAge(1876, timeUnit1);
      TimeUnit timeUnit2 = TimeUnit.MILLISECONDS;
      cacheControl_Builder2.minFresh(0, timeUnit2);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.onlyIfCached();
      cacheControl_Builder2.maxStale(1, timeUnit2);
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.noStore();
      cacheControl_Builder4.noTransform();
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.minFresh(820, timeUnit0);
      cacheControl_Builder5.noTransform();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.FORCE_NETWORK.headerValue = "Q-[2t!\"";
      cacheControl0.noStore();
      int int0 = cacheControl0.minFreshSeconds();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("_+rR7RGY/Gw#");
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      String string0 = cacheControl0.FORCE_NETWORK.toString();
      assertEquals("Q-[2t!\"", string0);
      
      boolean boolean0 = cacheControl0.mustRevalidate();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(32, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.maxAge(32, timeUnit1);
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.noTransform();
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.minFresh(32, timeUnit0);
      cacheControl_Builder5.noTransform();
      int int0 = cacheControl0.sMaxAgeSeconds();
      assertEquals((-1), int0);
      
      boolean boolean1 = cacheControl0.noTransform();
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = cacheControl0.isPublic();
      assertFalse(boolean2);
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(Integer.MAX_VALUE, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noCache();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noTransform();
      cacheControl_Builder3.onlyIfCached();
      cacheControl_Builder1.noStore();
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      cacheControl_Builder3.maxStale(0, timeUnit1);
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.maxStale(0, timeUnit0);
      CacheControl cacheControl0 = cacheControl_Builder4.build();
      cacheControl0.sMaxAgeSeconds();
      boolean boolean0 = cacheControl0.noStore();
      assertTrue(boolean0);
      
      boolean boolean1 = cacheControl0.mustRevalidate();
      cacheControl_Builder1.noStore();
      cacheControl_Builder0.noCache();
      TimeUnit timeUnit2 = TimeUnit.SECONDS;
      cacheControl_Builder4.minFresh(Integer.MAX_VALUE, timeUnit2);
      int int0 = cacheControl0.sMaxAgeSeconds();
      assertEquals((-1), int0);
      
      boolean boolean2 = cacheControl0.onlyIfCached();
      assertTrue(cacheControl0.noTransform());
      assertEquals(2147483, cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertTrue(cacheControl0.noCache());
      assertFalse(boolean2 == boolean1);
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertEquals(0, cacheControl0.maxStaleSeconds());
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxStale(318, timeUnit0);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder1.noTransform();
      CacheControl cacheControl0 = cacheControl_Builder3.build();
      cacheControl0.FORCE_CACHE.headerValue = null;
      CacheControl cacheControl1 = cacheControl_Builder3.build();
      cacheControl1.headerValue = "W&^";
      cacheControl_Builder2.noStore();
      cacheControl_Builder3.noTransform();
      cacheControl1.FORCE_NETWORK.toString();
      cacheControl1.isPrivate();
      cacheControl0.FORCE_NETWORK.toString();
      cacheControl1.noCache();
      cacheControl0.noStore();
      CacheControl cacheControl2 = cacheControl_Builder1.build();
      cacheControl2.toString();
      cacheControl1.maxStaleSeconds();
      CacheControl cacheControl3 = cacheControl_Builder0.build();
      cacheControl3.FORCE_CACHE.toString();
      cacheControl2.toString();
      cacheControl_Builder2.noTransform();
      int int0 = 1329;
      // Undeclared exception!
      try { 
        cacheControl_Builder3.maxAge((-406), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -406
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      cacheControl_Builder1.onlyIfCached();
      cacheControl_Builder1.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.minFresh(2820, timeUnit0);
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder2);
      String string0 = cacheControl0.toString();
      assertNotNull(string0);
      assertEquals("min-fresh=169200, only-if-cached, no-transform", string0);
      
      cacheControl_Builder1.maxStale(2820, timeUnit0);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.onlyIfCached();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder0.noTransform();
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      cacheControl_Builder4.maxAge(0, timeUnit1);
      cacheControl_Builder3.noTransform();
      cacheControl0.sMaxAgeSeconds();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.set("pragma", "cache-control");
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertFalse(cacheControl1.mustRevalidate());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.onlyIfCached());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.noTransform());
      assertFalse(cacheControl1.isPublic());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.noCache());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder1.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder1.minFresh(2820, timeUnit0);
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder4);
      String string0 = cacheControl0.toString();
      assertEquals("min-fresh=169200, only-if-cached, no-transform", string0);
      assertNotNull(string0);
      
      CacheControl.Builder cacheControl_Builder5 = new CacheControl.Builder();
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder6 = new CacheControl.Builder();
      cacheControl_Builder2.onlyIfCached();
      CacheControl.Builder cacheControl_Builder7 = cacheControl_Builder3.noTransform();
      cacheControl_Builder5.maxAge(0, timeUnit1);
      cacheControl_Builder7.noTransform();
      cacheControl0.sMaxAgeSeconds();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.set("pragma", "no-cache, ");
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      CacheControl.parse(headers0);
      boolean boolean0 = cacheControl1.mustRevalidate();
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertTrue(cacheControl1.noCache());
      assertFalse(cacheControl1.isPublic());
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(boolean0);
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.onlyIfCached());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("cache-control", "n8`hAsn");
      headers_Builder1.removeAll("n8`hAsn");
      headers_Builder1.set("pragma", "cache-control");
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.FORCE_NETWORK.headerValue = "cache-control";
      boolean boolean0 = cacheControl0.mustRevalidate();
      boolean boolean1 = cacheControl0.noTransform();
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.removeAll("");
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noCache();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.maxStale(169200, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.minFresh(169200, timeUnit1);
      cacheControl_Builder5.minFresh(3494, timeUnit1);
      CacheControl cacheControl1 = new CacheControl(cacheControl_Builder5);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Headers headers1 = Headers.of((Map<String, String>) hashMap1);
      String string0 = cacheControl0.toString();
      assertEquals("", string0);
      
      cacheControl_Builder4.maxStale(65, timeUnit1);
      cacheControl_Builder1.onlyIfCached();
      CacheControl.Builder cacheControl_Builder6 = cacheControl_Builder0.noTransform();
      cacheControl_Builder6.noTransform();
      cacheControl_Builder2.noTransform();
      int int0 = cacheControl1.sMaxAgeSeconds();
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertEquals(10152000, cacheControl1.maxStaleSeconds());
      assertEquals(209640, cacheControl1.minFreshSeconds());
      assertEquals((-1), int0);
      
      Headers.Builder headers_Builder1 = new Headers.Builder();
      headers_Builder0.set("cache-control", "Lv]@rki &W[FHq`9U");
      Headers headers2 = headers_Builder0.build();
      CacheControl.parse(headers2);
      CacheControl cacheControl2 = CacheControl.parse(headers1);
      assertFalse(cacheControl2.isPrivate());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      cacheControl_Builder1.onlyIfCached();
      cacheControl_Builder1.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.minFresh(2820, timeUnit0);
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder2);
      String string0 = cacheControl0.toString();
      assertEquals("min-fresh=169200, only-if-cached, no-transform", string0);
      
      cacheControl_Builder1.maxStale(2820, timeUnit0);
      cacheControl_Builder0.maxStale(254, timeUnit0);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.onlyIfCached();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder0.noTransform();
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      cacheControl_Builder4.maxAge(0, timeUnit1);
      cacheControl_Builder3.noTransform();
      cacheControl0.sMaxAgeSeconds();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("pragma", "content == null");
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.isPublic());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.onlyIfCached());
      assertFalse(cacheControl1.noTransform());
      assertFalse(cacheControl1.mustRevalidate());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.noStore());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("pragma", "cent =vul");
      headers_Builder1.build();
      Headers.Builder headers_Builder2 = headers_Builder0.set("pragma", "max-stale=");
      Headers headers0 = headers_Builder2.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
  }
}
