/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 07:06:09 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Map<Integer, HashMap<Map<Object, String>, Object>>> hashMap0 = new HashMap<String, Map<Integer, HashMap<Map<Object, String>, Object>>>();
      HashMap<Integer, HashMap<Map<Object, String>, Object>> hashMap1 = new HashMap<Integer, HashMap<Map<Object, String>, Object>>();
      hashMap0.put("", hashMap1);
      DoubleKeyMap<String, Integer, HashMap<Map<Object, String>, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Integer, HashMap<Map<Object, String>, Object>>(hashMap0);
      Map<Integer, HashMap<Map<Object, String>, Object>> map0 = doubleKeyMap0.remove("");
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put("", "", integer0);
      Map<String, Integer> map0 = doubleKeyMap0.remove("");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Integer, String>, Map<Map<Object, String>, String>> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Integer, String>, Map<Map<Object, String>, String>>((Map<String, Map<HashMap<Integer, String>, Map<Map<Object, String>, String>>>) null);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      DoubleKeyMap<Map<Map<Object, String>, String>, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<Map<Object, String>, String>, Integer, Integer>();
      Map<Map<Object, String>, String> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put("us.codecraft.webmagic.utils.DoubleKeyMap", hashMap0, map0);
      Map<Map<Object, String>, String> map1 = doubleKeyMap0.get("us.codecraft.webmagic.utils.DoubleKeyMap", hashMap0);
      assertSame(map1, map0);
      assertNotNull(map1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Map<Integer, Integer>, Map<Object, Object>> hashMap0 = new HashMap<Map<Integer, Integer>, Map<Object, Object>>();
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      Map<Integer, Integer> map0 = doubleKeyMap0.newMap();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put(map0, hashMap1);
      DoubleKeyMap<Map<Integer, Integer>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Integer>, Object, Object>(hashMap0);
      Map<Object, Object> map1 = doubleKeyMap1.get(map0);
      assertTrue(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      DoubleKeyMap<Map<Object, String>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, String, Integer>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      doubleKeyMap0.put((Map<Object, String>) hashMap0, "", integer0);
      Map<String, Integer> map0 = doubleKeyMap0.get((Map<Object, String>) hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>();
      DoubleKeyMap<Integer, Object, Map<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Map<Object, String>>();
      Map<Object, String> map0 = doubleKeyMap1.remove(integer0, (Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, Map<Object, Map<Object, String>>> hashMap0 = new HashMap<Integer, Map<Object, Map<Object, String>>>();
      DoubleKeyMap<Integer, Object, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Map<Object, String>>();
      Map<Object, String> map0 = doubleKeyMap0.remove((Integer) null, (Object) hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      Object object0 = new Object();
      String string0 = doubleKeyMap0.remove(object0, "P.@g%^jzWn");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Map<Integer, Object> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Map<HashMap<Object, String>, Integer>> hashMap0 = new HashMap<String, Map<HashMap<Object, String>, Integer>>();
      DoubleKeyMap<String, HashMap<Object, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, String>, Integer>(hashMap0);
      DoubleKeyMap<Object, HashMap<Object, String>, String> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, String>, String>();
      Map<HashMap<Object, String>, String> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Map<Object, Map<Object, String>>, Map<Map<Object, String>, HashMap<String, Integer>>> hashMap0 = new HashMap<Map<Object, Map<Object, String>>, Map<Map<Object, String>, HashMap<String, Integer>>>();
      DoubleKeyMap<Map<Object, Map<Object, String>>, Map<Object, String>, HashMap<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Map<Object, String>>, Map<Object, String>, HashMap<String, Integer>>(hashMap0);
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>();
      Integer integer0 = new Integer((-1));
      Object object0 = doubleKeyMap1.put((Object) doubleKeyMap0, integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<Object, String>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, String>, String>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>();
      Integer integer0 = new Integer((-1440));
      Integer integer1 = doubleKeyMap1.put((Object) integer0, (Object) doubleKeyMap0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Object, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, HashMap<Integer, Object>>();
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>(0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(hashMap0, class0);
      Integer integer0 = new Integer((-438));
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) doubleKeyMap0, (Object) "us.codecraft.webmagic.utils.DoubleKeyMap", (Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      DoubleKeyMap<Integer, Map<Object, String>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, String>, String>();
      String string0 = doubleKeyMap0.get(integer0, (Map<Object, String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<Object, String>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, String>, String>();
      HashMap<HashMap<Integer, Object>, Map<Object, Object>> hashMap0 = new HashMap<HashMap<Integer, Object>, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Integer, Object>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, Object>, Object, Object>(hashMap0, class0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Object object0 = doubleKeyMap1.get(hashMap1, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Integer integer0 = new Integer(1972);
      Object object0 = doubleKeyMap0.get((Object) null, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<Object, String>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, String>, String>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Map<Object, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(hashMap0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, "Y>Jel]vq4|}J4o", "<rjL`Uo");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Integer) null, (Object) "TN", "TN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<String, Object, Map<Object, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, Map<Object, String>>((Map<String, Map<Object, Map<Object, String>>>) null, (Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, String>, Object, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Object, Integer>((Map<HashMap<Object, String>, Map<Object, Integer>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(hashMap0);
      Map<String, Object> map0 = doubleKeyMap0.get((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleKeyMap<HashMap<Map<Object, String>, Integer>, String, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<Object, String>, Integer>, String, Map<Object, String>>();
      HashMap<Map<Object, String>, Integer> hashMap0 = new HashMap<Map<Object, String>, Integer>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      doubleKeyMap0.put(hashMap0, "", (Map<Object, String>) hashMap1);
      Map<Object, String> map0 = doubleKeyMap0.remove(hashMap0, (String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      Integer integer0 = new Integer(269);
      doubleKeyMap0.put("", (String) null, integer0);
      Integer integer1 = doubleKeyMap0.put("", "", (Integer) null);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<HashMap<Object, String>, Map<Object, Integer>> hashMap0 = new HashMap<HashMap<Object, String>, Map<Object, Integer>>();
      DoubleKeyMap<HashMap<Object, String>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Object, Integer>(hashMap0, class0);
      HashMap<Object, Map<HashMap<String, Object>, String>> hashMap1 = new HashMap<Object, Map<HashMap<String, Object>, String>>();
      DoubleKeyMap<Object, HashMap<String, Object>, String> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, Object>, String>(hashMap1, class0);
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      String string0 = doubleKeyMap1.get((Object) doubleKeyMap0, hashMap2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, HashMap<String, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Integer, HashMap<String, Object>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Integer, Map<Object, Map<Object, String>>> hashMap0 = new HashMap<Integer, Map<Object, Map<Object, String>>>();
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Integer, Object, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Map<Object, String>>(hashMap0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      doubleKeyMap0.put(integer0, (Object) null, (Map<Object, String>) hashMap1);
      assertFalse(hashMap0.isEmpty());
      
      doubleKeyMap0.remove(integer0, (Object) null);
      assertTrue(hashMap0.isEmpty());
  }
}
