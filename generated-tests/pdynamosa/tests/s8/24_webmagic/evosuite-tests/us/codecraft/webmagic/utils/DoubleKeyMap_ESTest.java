/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 16:57:37 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<HashMap<String, Object>, Map<String, Map<Object, HashMap<Object, Object>>>> hashMap0 = new HashMap<HashMap<String, Object>, Map<String, Map<Object, HashMap<Object, Object>>>>();
      HashMap<String, Map<Object, HashMap<Object, Object>>> hashMap1 = new HashMap<String, Map<Object, HashMap<Object, Object>>>();
      HashMap<Object, HashMap<Object, Object>> hashMap2 = new HashMap<Object, HashMap<Object, Object>>();
      hashMap1.put("", hashMap2);
      HashMap<String, Object> hashMap3 = new HashMap<String, Object>();
      hashMap0.put(hashMap3, hashMap1);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Object>, String, Map<Object, HashMap<Object, Object>>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, Map<Object, HashMap<Object, Object>>>(hashMap0, class0);
      doubleKeyMap0.remove(hashMap3, "");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<HashMap<String, Object>, Map<String, Map<Object, HashMap<Object, Object>>>> hashMap0 = new HashMap<HashMap<String, Object>, Map<String, Map<Object, HashMap<Object, Object>>>>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<String, Map<Object, HashMap<Object, Object>>> hashMap2 = new HashMap<String, Map<Object, HashMap<Object, Object>>>();
      hashMap0.put(hashMap1, hashMap2);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Object>, String, Map<Object, HashMap<Object, Object>>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, Map<Object, HashMap<Object, Object>>>(hashMap0, class0);
      Map<String, Map<Object, HashMap<Object, Object>>> map0 = doubleKeyMap0.remove(hashMap1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<Integer, Map<String, Integer>> hashMap0 = new HashMap<Integer, Map<String, Integer>>();
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>(hashMap0);
      doubleKeyMap0.put(integer0, "IDT[*<qyo>dl6(SZJ|", integer0);
      Map<String, Integer> map0 = doubleKeyMap0.remove(integer0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<Integer, String>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Integer, String>, String>();
      Integer integer0 = new Integer(1);
      String string0 = doubleKeyMap0.remove(integer0, (HashMap<Integer, String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Integer, Integer>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>();
      Integer integer0 = new Integer(0);
      Object object0 = doubleKeyMap1.remove(integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(hashMap0);
      Object object0 = doubleKeyMap0.remove((Integer) null, "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Object, String>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Integer, Object>(class0);
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Integer, Integer>((Map<String, Map<Integer, Integer>>) null, class0);
      Map<Object, Map<HashMap<Integer, Object>, Integer>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, HashMap<Integer, Object>, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, HashMap<Integer, Object>, Integer>(map0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = doubleKeyMap2.remove((Object) doubleKeyMap0, hashMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Object, Map<String, Object>, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, Object>, Map<String, Object>>((Map<Object, Map<Map<String, Object>, Map<String, Object>>>) null);
      Map<Map<String, Object>, Map<String, Object>> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Integer, Integer>();
      DoubleKeyMap<Object, Map<Object, Object>, String> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Object, Object>, String>();
      Map<Map<Object, Object>, String> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Map<Object, Map<Object, HashMap<Object, Object>>>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Map<Object, HashMap<Object, Object>>>, Object, Integer>();
      HashMap<Object, Map<Object, HashMap<Object, Object>>> hashMap0 = new HashMap<Object, Map<Object, HashMap<Object, Object>>>();
      Object object0 = new Object();
      Integer integer0 = new Integer((-2191));
      Integer integer1 = doubleKeyMap0.put((Map<Object, Map<Object, HashMap<Object, Object>>>) hashMap0, object0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>((Map<Integer, Map<Integer, Object>>) null);
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>((Map<String, Map<String, Object>>) null);
      Map<Integer, Object> map0 = doubleKeyMap1.newMap();
      Object object0 = doubleKeyMap0.put((Integer) null, (Integer) null, (Object) map0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Integer, Integer>();
      DoubleKeyMap<Object, Map<String, Object>, Map<String, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Map<String, Object>, Map<String, Object>>((Map<Object, Map<Map<String, Object>, Map<String, Object>>>) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Map<String, Object> map0 = doubleKeyMap1.put((Object) doubleKeyMap0, (Map<String, Object>) hashMap0, (Map<String, Object>) hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Map<Object, HashMap<Object, Object>>, Map<HashMap<String, String>, String>> hashMap0 = new HashMap<Map<Object, HashMap<Object, Object>>, Map<HashMap<String, String>, String>>();
      DoubleKeyMap<Map<Object, HashMap<Object, Object>>, HashMap<String, String>, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, HashMap<Object, Object>>, HashMap<String, String>, String>(hashMap0);
      Map<Object, Map<Map<Object, HashMap<Object, Object>>, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Object, HashMap<Object, Object>>, String> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Object, HashMap<Object, Object>>, String>(map0, class0);
      HashMap<String, Map<String, Object>> hashMap1 = new HashMap<String, Map<String, Object>>();
      DoubleKeyMap<String, String, Object> doubleKeyMap2 = new DoubleKeyMap<String, String, Object>(hashMap1);
      Map<HashMap<String, Object>, Object> map1 = doubleKeyMap2.newMap();
      String string0 = doubleKeyMap1.get((Object) map1, (Map<Object, HashMap<Object, Object>>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<String, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, String>, Object>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(class0);
      Object object0 = doubleKeyMap1.get((Object) null, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      Map<Object, Integer> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      Object object0 = new Object();
      Map<String, String> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(hashMap0);
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Integer>();
      Map<Integer, Map<Object, Object>> map0 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Integer, Object, Object>(map0, class0);
      Integer integer0 = new Integer(1148);
      // Undeclared exception!
      try { 
        doubleKeyMap2.put(integer0, (Object) integer0, (Object) doubleKeyMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Integer, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Integer, Object>, Object>();
      doubleKeyMap0.put("='T%w%w7-HMeNL_N", (HashMap<Integer, Object>) null, (Object) "='T%w%w7-HMeNL_N");
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Object object0 = doubleKeyMap0.remove("='T%w%w7-HMeNL_N", hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = new Integer(739);
      HashMap<HashMap<String, Object>, Map<Integer, Integer>> hashMap1 = new HashMap<HashMap<String, Object>, Map<Integer, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Object>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Integer, Integer>(hashMap1, class0);
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      hashMap1.putIfAbsent(hashMap0, hashMap2);
      Integer integer1 = doubleKeyMap0.put(hashMap0, integer0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, String, Map<Object, HashMap<Object, Object>>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, Map<Object, HashMap<Object, Object>>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      doubleKeyMap0.put(hashMap0, "hX3}KwcZ_3&?1", (Map<Object, HashMap<Object, Object>>) null);
      Map<Object, HashMap<Object, Object>> map0 = doubleKeyMap0.get(hashMap0, "q");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Integer, Integer>();
      HashMap<Object, Map<HashMap<Integer, Integer>, Integer>> hashMap0 = new HashMap<Object, Map<HashMap<Integer, Integer>, Integer>>();
      DoubleKeyMap<Object, HashMap<Integer, Integer>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Integer, Integer>, Integer>(hashMap0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Integer integer0 = doubleKeyMap1.get((Object) doubleKeyMap0, hashMap1);
      assertNull(integer0);
  }
}
