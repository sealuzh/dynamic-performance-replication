/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 20:29:02 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FilterOutputStream;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.selector.RegexSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("D");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider0.setSpiderListeners(linkedList0);
      linkedList0.clone();
      // Undeclared exception!
      try { 
        spider1.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<,D}lX}s");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " stop fail!");
      FilePipeline filePipeline0 = new FilePipeline(" stop fail!");
      ResultItems resultItems0 = new ResultItems();
      resultItems0.setSkip(true);
      ForkJoinPool.commonPool();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "POST";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "'>V");
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      spider1.setScheduler(priorityScheduler0);
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      Spider spider3 = spider2.setUUID("'>V");
      Spider spider4 = spider3.setSpawnUrl(false);
      CollectorPipeline collectorPipeline0 = spider4.getCollectorPipeline();
      spider3.pipeline(collectorPipeline0);
      SynchronousQueue<Request> synchronousQueue0 = new SynchronousQueue<Request>();
      LinkedList<Request> linkedList0 = new LinkedList<Request>(synchronousQueue0);
      Spider spider5 = spider2.startRequest(linkedList0);
      spider5.getStatus();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider4.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "'>V";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string1 = "";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "'>V");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      Spider spider2 = spider1.setScheduler(fileCacheQueueScheduler0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider2.startRequests = (List<Request>) linkedList0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FilePipeline filePipeline0 = new FilePipeline("");
      Spider spider3 = spider1.addPipeline(filePipeline0);
      ResultItems resultItems0 = new ResultItems();
      spider0.runAsync();
      resultItems0.setSkip(false);
      Spider spider4 = spider3.setSpawnUrl(true);
      // Undeclared exception!
      try { 
        filePipeline0.process(resultItems0, spider4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.pipeline.FilePipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      FilePipeline filePipeline0 = new FilePipeline("x;RVO9");
      spider0.clearPipeline();
      ForkJoinPool.commonPool();
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      boolean boolean0 = spider0.isExitWhenComplete();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(boolean0);
      
      ForkJoinTask.getPool();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=]p");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.pipeline(filePipeline0);
      ForkJoinPool.commonPool();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("x;RVO9");
      Spider spider1 = spider0.clearPipeline();
      ForkJoinPool.commonPool();
      spider0.getThreadAlive();
      Request request0 = new Request();
      Request request1 = request0.setBinaryContent(true);
      Request request2 = request1.setPriority(0);
      Request request3 = request2.addHeader("_cycle_tried_times", "_cycle_tried_times");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      request3.setExtras(hashMap0);
      Request request4 = request3.addCookie(" stop fail!", "_cycle_tried_times");
      request4.putExtra("POST", hashMap0);
      // Undeclared exception!
      try { 
        spider1.onError(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("");
      Spider spider1 = spider0.clearPipeline();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "'>V";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("'>V");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"RY~ P$/1`Wy5?;D");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.thread(31);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider1.scheduler(priorityScheduler0);
      Spider spider4 = spider3.addPipeline(collectorPipeline0);
      spider3.getSpiderListeners();
      spider4.getThreadAlive();
      spider2.thread(30000);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\"RY~ P$/1`Wy5?;D";
      stringArray0[1] = "\"RY~ P$/1`Wy5?;D";
      stringArray0[2] = "\"RY~ P$/1`Wy5?;D";
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isExitWhenComplete();
      int int0 = (-158);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-158), threadPoolExecutor_CallerRunsPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "process request ";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>(34, comparator0);
      priorityBlockingQueue0.clear();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) priorityBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("D'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      spider0.clearPipeline();
      ForkJoinPool.commonPool();
      Request request0 = new Request();
      spider0.getCollectorPipeline();
      Request request1 = request0.setUrl("D'>V");
      Request request2 = request1.setBinaryContent(true);
      StringReader stringReader0 = new StringReader("_cycle_tried_times");
      // Undeclared exception!
      try { 
        spider0.onError(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=]p");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string0 = "";
      Spider spider1 = spider0.setUUID("");
      FilePipeline filePipeline0 = new FilePipeline("");
      Spider spider2 = spider1.pipeline(filePipeline0);
      Request[] requestArray0 = new Request[0];
      Spider spider3 = spider2.addRequest(requestArray0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider4 = spider3.startRequest(linkedList0);
      spider4.setDownloader((Downloader) null);
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("'>V");
      Spider spider1 = spider0.clearPipeline();
      ForkJoinPool.commonPool();
      int int0 = spider1.getThreadAlive();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, int0);
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("7<xPJ4?lW^p1OtF", "&=S4>>&Ro)h}");
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("`.o$fg&b_lEk", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader1);
      spider1.downloader(phantomJSDownloader1);
      spider0.pageProcessor = (PageProcessor) simplePageProcessor0;
      List<Pipeline> list0 = null;
      Spider spider2 = new Spider(simplePageProcessor0);
      spider2.setPipelines((List<Pipeline>) null);
      SpiderMonitor.instance();
      String string0 = "";
      PhantomJSDownloader phantomJSDownloader2 = null;
      try {
        phantomJSDownloader2 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider.Status.fromValue((-39));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&H[l.:iT:U>teY%");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("&H[l.:iT:U>teY%");
      Spider spider2 = spider0.setSpawnUrl(true);
      CollectorPipeline collectorPipeline0 = spider2.getCollectorPipeline();
      spider1.getSpiderListeners();
      spider1.setEmptySleepTime((-940));
      Spider spider3 = spider0.pipeline(collectorPipeline0);
      // Undeclared exception!
      try { 
        spider3.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("'>V");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Request request0 = new Request("'>V");
      Request request1 = request0.setPriority(0L);
      ResultItems resultItems0 = new ResultItems();
      Map<String, Object> map0 = resultItems0.getAll();
      Request request2 = request1.setExtras(map0);
      Request request3 = request2.setCharset("Spider is already running!");
      Request request4 = request3.addCookie("_cycle_tried_times", "Spider is already running!");
      request4.setPriority((-2212L));
      request4.addHeader("Spider is already running!", ", method='");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request5 = request2.setExtras(map0);
      Request request6 = new Request("'>V");
      Request request7 = request2.addHeader("", "_cycle_tried_times");
      request7.putExtra("_cycle_tried_times", request5);
      // Undeclared exception!
      try { 
        spider0.onError(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      FilePipeline filePipeline0 = new FilePipeline();
      Page page0 = new Page();
      assertNull(page0.getCharset());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=]p");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider2.startRequest(linkedList0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Spider.Status.fromValue(1);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'Z)I=a]bG$s83l=`A$L");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      // Undeclared exception!
      try { 
        spider2.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"RY~ P$/1`Wy5?;D");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader((Downloader) null);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      spider1.getPageCount();
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor((-1960), (-1), (-1), timeUnit0, linkedBlockingQueue0, threadFactory0, (RejectedExecutionHandler) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider.Status.fromValue((-39));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&H[l.:iT:U>teY%");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      
      Spider spider1 = spider0.setExitWhenComplete(false);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider1.pipeline(jsonFilePipeline0);
      ForkJoinPool.commonPool();
      boolean boolean0 = spider0.isSpawnUrl();
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(boolean0);
      
      spider1.sleep(0);
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6r");
      Spider spider0 = Spider.create(simplePageProcessor0);
      boolean boolean0 = spider0.isExitWhenComplete();
      assertTrue(boolean0);
      
      ForkJoinTask.getPool();
      Spider spider1 = spider0.clearPipeline();
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(1009);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      Page page0 = new Page();
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      Spider spider2 = spider0.setSpiderListeners((List<SpiderListener>) null);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isExitWhenComplete();
      ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "q";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("q");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider.Status.fromValue((-39));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&H[l.:iT:U>teY%");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setExitWhenComplete(false);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("D");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Request[] requestArray0 = new Request[8];
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Request request0 = queueScheduler0.poll(spider1);
      requestArray0[0] = null;
      queueScheduler0.poll(spider1);
      requestArray0[1] = null;
      String[] stringArray0 = new String[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider0.startRequest(linkedList0);
      stringArray0[0] = "_cycle_tried_times";
      // Undeclared exception!
      try { 
        spider2.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("'>V");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ForkJoinTask.getPool();
      ForkJoinPool.commonPool();
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      Spider.Status spider_Status0 = spider1.getStatus();
      assertEquals(Spider.Status.Init, spider_Status0);
      
      long long0 = spider1.getPageCount();
      assertEquals(0L, long0);
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "H";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "H";
      stringArray0[5] = "H";
      stringArray0[6] = "";
      stringArray0[7] = "H";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6r");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      spider0.clearPipeline();
      spider0.setUUID("6r");
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UtX 5$j,");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      boolean boolean0 = spider2.isExitWhenComplete();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Spider spider0 = null;
      try {
        spider0 = new Spider((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=]p");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      Request[] requestArray0 = new Request[0];
      spider1.addRequest(requestArray0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      Spider spider2 = spider0.setPipelines(linkedList1);
      // Undeclared exception!
      try { 
        spider2.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Spider.Status.valueOf("Stopped");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Stopped");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5000);
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      LinkedTransferQueue<Request> linkedTransferQueue0 = new LinkedTransferQueue<Request>();
      LinkedList<Request> linkedList0 = new LinkedList<Request>(linkedTransferQueue0);
      spider1.startRequest(linkedList0);
      LinkedTransferQueue<String> linkedTransferQueue1 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedTransferQueue1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("*-!^B5T`");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getScheduler();
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("*-!^B5T`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.*-!^B5T`
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(693);
      Spider spider2 = spider1.scheduler((Scheduler) null);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1328);
      spider2.thread((ExecutorService) forkJoinPool0, 693);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider3 = spider0.addPipeline(multiPagePipeline0);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("Spider ");
      spider3.pageProcessor = (PageProcessor) simplePageProcessor1;
      spider2.getStartTime();
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "'>V");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setSpawnUrl(true);
      Spider spider3 = spider2.thread(213);
      CollectorPipeline collectorPipeline0 = spider2.getCollectorPipeline();
      Spider spider4 = spider3.addPipeline(collectorPipeline0);
      spider0.getSpiderListeners();
      Spider spider5 = spider4.setSpiderListeners((List<SpiderListener>) null);
      // Undeclared exception!
      try { 
        spider5.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "UEFtkvv@.>8'9$";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UEFtkvv@.>8'9$");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.scheduler(queueScheduler0);
      // Undeclared exception!
      try { 
        spider2.thread((-47));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" Ub8JUP^&FXMJ(");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setExitWhenComplete(false);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider.Status.fromValue((-39));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&H[l.:iT:U>teY%");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.setSpawnUrl(false);
      Spider spider3 = spider2.thread(1747);
      CollectorPipeline collectorPipeline0 = spider3.getCollectorPipeline();
      Spider spider4 = spider3.addPipeline(collectorPipeline0);
      spider0.getSpiderListeners();
      Spider spider5 = spider4.setSpiderListeners((List<SpiderListener>) null);
      // Undeclared exception!
      try { 
        spider5.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      Page page0 = new Page();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Spider ";
      stringArray0[1] = "Spider ";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isExitWhenComplete();
      ForkJoinTask.getPool();
      spider0.getStartTime();
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("yoWj,4};");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      spider0.getUUID();
      Spider spider1 = spider0.addRequest(requestArray0);
      spider1.addPipeline((Pipeline) null);
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<,D}lX}s");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline(" stop fail!");
      Page.fail();
      ForkJoinPool.commonPool();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("9(in&wdCFT_Y&MA");
      Spider spider0 = new Spider(simplePageProcessor0);
      ExecutorService executorService0 = null;
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      spider2.setExitWhenComplete(false);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "'>V");
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 2279);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider2 = spider1.setUUID("");
      spider2.addPipeline(multiPagePipeline0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider0.setScheduler(priorityScheduler0);
      spider0.downloader(phantomJSDownloader0);
      spider3.getCollectorPipeline();
      Spider spider4 = spider2.pipeline(multiPagePipeline0);
      spider0.getThreadAlive();
      Spider spider5 = spider3.setDownloader(phantomJSDownloader0);
      spider4.getStatus();
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider5.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider.Status.fromValue((-2812));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("?");
      Spider spider0 = Spider.create(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.pipeline(multiPagePipeline0);
      boolean boolean0 = false;
      Spider spider2 = spider1.setExitWhenComplete(false);
      Spider spider3 = spider2.clearPipeline();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ", skip=";
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<,D}lX}s");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " stop fail!");
      FilePipeline filePipeline0 = new FilePipeline(" stop fail!");
      ResultItems resultItems0 = new ResultItems();
      resultItems0.setSkip(false);
      Page.fail();
      ForkJoinPool.commonPool();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.sleep(5);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("R0teXS9N&P");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider0.addPipeline(multiPagePipeline0);
      String string0 = "D?rw`Ktq\"!Nlcg8OJ";
      int int0 = 1405;
      RegexSelector regexSelector0 = null;
      try {
        regexSelector0 = new RegexSelector("D?rw`Ktq\"!Nlcg8OJ", 1405);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.selector.RegexSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isExitWhenComplete();
      ForkJoinTask.getPool();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.startRequest(linkedList0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6r");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isExitWhenComplete();
      ForkJoinTask.getPool();
      Spider spider1 = spider0.clearPipeline();
      Spider.Status spider_Status0 = Spider.Status.fromValue(1009);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      spider1.setEmptySleepTime(1009);
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=]p");
      Spider spider0 = new Spider(simplePageProcessor0);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider1 = new Spider(simplePageProcessor1);
      FilePipeline filePipeline0 = new FilePipeline();
      spider1.pipeline(filePipeline0);
      ForkJoinPool.commonPool();
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
      
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertEquals(0L, spider0.getPageCount());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=]p");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider2.startRequest(linkedList0);
      Page page0 = new Page();
      ForkJoinPool.commonPool();
      spider1.isSpawnUrl();
      // Undeclared exception!
      try { 
        spider1.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6r");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      Spider spider1 = spider0.clearPipeline();
      spider1.thread((ExecutorService) null, 4145);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler$2");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler$2", "us.codecraft.webmagic.scheduler.FileCacheQueueScheduler$2");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider0.thread(213);
      spider0.clearPipeline();
      ForkJoinPool.commonPool();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.clearPipeline();
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("x;RVO9");
      Spider spider1 = spider0.clearPipeline();
      ForkJoinPool.commonPool();
      spider1.pipeline(filePipeline0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request("POST");
      requestArray0[0] = request0;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("'>V");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=]p");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("=]p");
      Spider spider0 = new Spider(simplePageProcessor1);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.clearPipeline();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider1.pipeline(resultItemsCollectorPipeline0);
      ForkJoinPool.commonPool();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider1.getCollectorPipeline();
      spider0.getUUID();
      Page page0 = Page.fail();
      Page page1 = page0.setRawText("POST");
      Json json0 = page1.getJson();
      // Undeclared exception!
      try { 
        json0.removePadding("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // us/codecraft/xsoup/XTokenQueue
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=]p");
      Spider spider0 = new Spider(simplePageProcessor0);
      Scheduler scheduler0 = null;
      Spider spider1 = spider0.setScheduler((Scheduler) null);
      FilePipeline filePipeline0 = new FilePipeline("=]p");
      Spider spider2 = spider1.addPipeline(filePipeline0);
      ResultItems resultItems0 = new ResultItems();
      ResultItems resultItems1 = resultItems0.setSkip(true);
      FilePipeline filePipeline1 = new FilePipeline("");
      // Undeclared exception!
      try { 
        filePipeline1.process(resultItems1, spider2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.pipeline.FilePipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("U!XB 5$j,");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "U!XB 5$j,");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setSpawnUrl(true);
      Spider spider3 = spider2.thread(213);
      CollectorPipeline collectorPipeline0 = spider2.getCollectorPipeline();
      Spider spider4 = spider3.addPipeline(collectorPipeline0);
      spider0.getSpiderListeners();
      spider2.getThreadAlive();
      spider0.thread(213);
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(true);
      ResultItems resultItems0 = page1.getResultItems();
      ResultItems resultItems1 = resultItems0.setSkip(false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 3462);
      ResultItems resultItems2 = resultItems1.put("(", (FilterOutputStream) bufferedOutputStream0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider3.setUUID("");
      priorityScheduler0.poll(spider4);
      ResultItems resultItems3 = resultItems2.setRequest((Request) null);
      resultItems3.setSkip(true);
      FilePipeline filePipeline0 = new FilePipeline();
      // Undeclared exception!
      try { 
        filePipeline0.process(resultItems3, spider3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.pipeline.FilePipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("U!XB 5$j,");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "U!XB 5$j,");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setSpawnUrl(true);
      Spider spider3 = spider2.thread(213);
      CollectorPipeline collectorPipeline0 = spider2.getCollectorPipeline();
      spider3.addPipeline(collectorPipeline0);
      spider0.getSpiderListeners();
      spider2.getThreadAlive();
      Spider spider4 = spider0.thread(213);
      String[] stringArray0 = new String[0];
      Spider spider5 = spider4.addUrl(stringArray0);
      spider5.setDownloader(phantomJSDownloader0);
      spider5.getStatus();
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider4.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".R2~<EOtlBsA4{I,3[Y");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setUUID("jiXxbU)o,;?m");
      String string0 = "d*k5ik/l-";
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("d*k5ik/l-");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<,D}lX}s");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("<,D}lX}s");
      Spider spider1 = spider0.clearPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      spider1.scheduler(fileCacheQueueScheduler0);
      ForkJoinPool.commonPool();
      boolean boolean0 = spider0.isSpawnUrl();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("D");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Request[] requestArray0 = new Request[8];
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider1);
      requestArray0[0] = null;
      queueScheduler0.poll(spider1);
      requestArray0[1] = null;
      String[] stringArray0 = new String[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.startRequest(linkedList0);
      stringArray0[0] = "_cycle_tried_times";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6r");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      spider0.clearPipeline();
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) null, (-512));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"RY~ P$/1`Wy5?;D");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader((Downloader) null);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) forkJoinPool0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "U$yS23D0kbf|r";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("U$yS23D0kbf|r");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      FilePipeline filePipeline0 = new FilePipeline("U$yS23D0kbf|r");
      spider1.addPipeline(filePipeline0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("POST");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler$2");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler$2", "us.codecraft.webmagic.scheduler.FileCacheQueueScheduler$2");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider0.thread(213);
      Spider spider2 = spider0.startRequest((List<Request>) null);
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      List<Pipeline> list0 = spider2.getAll((Collection<String>) priorityBlockingQueue0);
      spider1.setPipelines(list0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      spider2.getScheduler();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider2.startUrls(linkedList0);
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "=]p";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=]p");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      // Undeclared exception!
      try { 
        spider1.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isExitWhenComplete();
      ForkJoinTask.getPool();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider0.addPipeline(resultItemsCollectorPipeline0);
      Request request0 = new Request();
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      Request request1 = request0.putExtra("", spiderMonitor_MonitorSpiderListener0);
      Request request2 = request1.addHeader("", "e>YIZgPti.UL");
      Request request3 = request2.addCookie("!\"52Q]/UR/5BY", "");
      Request request4 = request3.setPriority(1847L);
      // Undeclared exception!
      try { 
        spider0.onSuccess(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=]p");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      spider2.clearPipeline();
      Spider.Status.fromValue(1009);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.scheduler.FileCacheQueueScheduler$2";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler$2");
      Spider spider0 = new Spider(simplePageProcessor0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-28);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      spider0.extractAndAddRequests((Page) null, false);
      // Undeclared exception!
      try { 
        spider0.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$lS&+XQ`MX0jF!}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isExitWhenComplete();
      ForkJoinTask.getPool();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      // Undeclared exception!
      try { 
        spider0.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "'>V");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setSpawnUrl(true);
      Spider spider3 = spider2.thread(213);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      Spider spider4 = spider1.pipeline(jsonFilePipeline0);
      Spider spider5 = spider4.startRequest((List<Request>) null);
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      List<Pipeline> list0 = spider5.getAll((Collection<String>) priorityBlockingQueue0);
      spider3.setPipelines(list0);
      Spider.Status spider_Status0 = Spider.Status.fromValue(554);
      spider_Status0.getValue();
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=]p");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string0 = "";
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      Request[] requestArray0 = new Request[0];
      spider1.addRequest(requestArray0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("7FLtjB6[", "qaA#2~bq");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(2);
      spider0.downloader = (Downloader) phantomJSDownloader1;
      // Undeclared exception!
      try { 
        linkedList0.remove(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7]p");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "'>V");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.setSpawnUrl(true);
      Spider spider2 = spider0.setUUID("");
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      Spider spider3 = spider1.pipeline(jsonFilePipeline0);
      Spider spider4 = spider3.startRequest((List<Request>) null);
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      List<Pipeline> list0 = spider4.getAll((Collection<String>) priorityBlockingQueue0);
      spider2.setPipelines(list0);
      Spider.Status spider_Status0 = Spider.Status.fromValue(554);
      spider_Status0.getValue();
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ForkJoinTask.getPool();
      Spider.create(simplePageProcessor0);
      int int0 = spider0.getThreadAlive();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, int0);
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(0);
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "2wg/}6";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("2wg/}6");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider0.startUrls(linkedList0);
      System.setCurrentTimeMillis(429L);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=]p");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Locale locale0 = Locale.TAIWAN;
      locale0.getUnicodeLocaleKeys();
      spider0.setUUID("POST");
      ForkJoinPool.commonPool();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      String string0 = spider0.getUUID();
      assertNotNull(string0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=]p");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      Request[] requestArray0 = new Request[0];
      spider1.addRequest(requestArray0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      ResultItems resultItems0 = new ResultItems();
      resultItems0.setSkip(false);
      Page.fail();
      ForkJoinPool.commonPool();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      // Undeclared exception!
      try { 
        spider1.sleep((-559));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Spider.Status.fromValue((-29));
      String string0 = null;
      SimplePageProcessor simplePageProcessor0 = null;
      try {
        simplePageProcessor0 = new SimplePageProcessor((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.processor.SimplePageProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<,D}lX}s");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(" stop fail!");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      FilePipeline filePipeline0 = new FilePipeline(" stop fail!");
      Spider spider2 = spider1.clearPipeline();
      Page.fail();
      ForkJoinPool.commonPool();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider2.getSite();
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "_";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isExitWhenComplete();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      spider0.thread((ExecutorService) forkJoinPool0, 3467);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.setPipelines((List<Pipeline>) null);
      // Undeclared exception!
      try { 
        spider1.addPipeline(multiPagePipeline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "'>V");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setSpawnUrl(true);
      Spider spider3 = spider2.thread(3457);
      CollectorPipeline collectorPipeline0 = spider2.getCollectorPipeline();
      Spider spider4 = spider3.addPipeline(collectorPipeline0);
      spider4.startRequest((List<Request>) null);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      Spider spider5 = spider4.setSpiderListeners((List<SpiderListener>) null);
      spider5.pipelines = null;
      Spider spider6 = spider0.clearPipeline();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider6.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=]p");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider3 = spider2.startRequest(linkedList0);
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        spider3.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Request request0 = new Request();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      fileCacheQueueScheduler0.poll(spider0);
      // Undeclared exception!
      try { 
        spider0.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(2, 2, 0L, timeUnit0, priorityBlockingQueue0);
      spider1.setExitWhenComplete(true);
      spider1.setExitWhenComplete(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "'>V";
      stringArray0[1] = "'>V";
      stringArray0[1] = "'>V";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("push to queue {}", "4nm6");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("'>V");
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("Spider {} started!");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler1.getDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler2 = new FileCacheQueueScheduler("'>V");
      fileCacheQueueScheduler2.setDuplicateRemover(duplicateRemover0);
      spider0.setEmptySleepTime((-3905));
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("'>V");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      Page page0 = Page.fail();
      page0.setCharset("0pwcf{:7p4~8).");
      // Undeclared exception!
      try { 
        spider1.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isExitWhenComplete();
      ForkJoinTask.getPool();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", (String) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider0.setSpawnUrl(false);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3, threadPoolExecutor_DiscardPolicy0);
      Spider spider3 = spider2.setExecutorService(scheduledThreadPoolExecutor0);
      Spider spider4 = spider3.thread(3);
      CollectorPipeline collectorPipeline0 = spider4.getCollectorPipeline();
      spider2.addPipeline(collectorPipeline0);
      spider2.checkIfRunning();
      spider1.getSpiderListeners();
      spider3.setSpiderListeners((List<SpiderListener>) null);
      // Undeclared exception!
      try { 
        spider3.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<,D}lX}s");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(" stop fail!");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      FilePipeline filePipeline0 = new FilePipeline(" stop fail!");
      spider1.addPipeline(filePipeline0);
      List<Pipeline> list0 = null;
      ResultItems resultItems0 = new ResultItems();
      ResultItems resultItems1 = resultItems0.setSkip(true);
      // Undeclared exception!
      try { 
        filePipeline0.process(resultItems1, spider1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.pipeline.FilePipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"RY~ P$/1`Wy5?;D");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader((Downloader) null);
      ForkJoinTask.getPool();
      Spider spider2 = spider0.downloader((Downloader) null);
      AtomicInteger atomicInteger0 = new AtomicInteger(135);
      Spider spider3 = spider1.setUUID("\"RY~ P$/1`Wy5?;D");
      CollectorPipeline collectorPipeline0 = spider2.getCollectorPipeline();
      spider3.addPipeline(collectorPipeline0);
      List<SpiderListener> list0 = spider2.getSpiderListeners();
      assertNull(list0);
      
      spider3.setSpiderListeners((List<SpiderListener>) null);
      spider1.setUUID("\"RY~ P$/1`Wy5?;D");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider4 = spider1.scheduler((Scheduler) null);
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=]p");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.setSpawnUrl(false);
      spider0.pipeline(filePipeline0);
      ForkJoinPool.commonPool();
      boolean boolean0 = spider0.isSpawnUrl();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("WqX)IqR;[cN$");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider3 = spider2.addPipeline(consolePipeline0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        spider3.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler$2");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler$2", "us.codecraft.webmagic.scheduler.FileCacheQueueScheduler$2");
      spider0.downloader(phantomJSDownloader0);
      spider0.startRequest((List<Request>) null);
      Page page0 = new Page();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=]p");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.setUUID("POST");
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(2, 2, 0L, timeUnit0, priorityBlockingQueue0);
      spider2.thread((ExecutorService) threadPoolExecutor0, 391);
      boolean boolean0 = true;
      spider1.setExitWhenComplete(true);
      spider1.setExitWhenComplete(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "'>V";
      stringArray0[1] = "'>V";
      stringArray0[2] = "'>V";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "'>V");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setSpawnUrl(true);
      Spider spider3 = spider2.thread(213);
      CollectorPipeline collectorPipeline0 = spider2.getCollectorPipeline();
      Spider spider4 = spider3.addPipeline(collectorPipeline0);
      spider0.getSpiderListeners();
      Spider spider5 = spider4.setSpiderListeners((List<SpiderListener>) null);
      // Undeclared exception!
      try { 
        spider5.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.pipeline.ConsolePipeline");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setExitWhenComplete(true);
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("0Fqg>)`");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("D");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("D");
      Request[] requestArray0 = new Request[8];
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.setPipelines(linkedList0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider1);
      requestArray0[0] = null;
      requestArray0[1] = null;
      spider1.setUUID((String) null);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isExitWhenComplete();
      ForkJoinTask.getPool();
      Page page0 = new Page();
      spider0.extractAndAddRequests(page0, false);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "$a";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$a");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque0.putFirst("$a");
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=]p");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.setSpawnUrl(false);
      spider0.getCollectorPipeline();
      ForkJoinPool.commonPool();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ForkJoinTask.getPool();
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=]p");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.pipeline(filePipeline0);
      ForkJoinPool.commonPool();
      spider0.isSpawnUrl();
      Spider spider1 = spider0.setSpawnUrl(true);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("7<xPJ4?lW^p1OtF", "&=S4>>&Ro)h}");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      List<Pipeline> list0 = null;
      spider0.pipelines = null;
      Request request0 = new Request("");
      Request request1 = request0.setUrl("7<xPJ4?lW^p1OtF");
      // Undeclared exception!
      try { 
        spider3.onSuccess(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "/yOW t|y(";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/yOW t|y(");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-687));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>mV");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "D";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("D");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Request[] requestArray0 = new Request[8];
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider1);
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FilePipeline filePipeline0 = new FilePipeline(" stop fail!");
      Spider spider1 = spider0.addPipeline(filePipeline0);
      spider1.getSpiderListeners();
      spider0.setSpiderListeners((List<SpiderListener>) null);
      ResultItems resultItems0 = new ResultItems();
      resultItems0.setSkip(true);
      // Undeclared exception!
      try { 
        filePipeline0.process(resultItems0, spider1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.pipeline.FilePipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("7<xPJ4?lW^p1OtF", "&=S4>>&Ro)h}");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      List<Pipeline> list0 = null;
      spider0.pipelines = null;
      spider3.setPipelines((List<Pipeline>) null);
      SpiderMonitor.instance();
      // Undeclared exception!
      try { 
        phantomJSDownloader0.download("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.setUUID("POST");
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(2, 2, 0L, timeUnit0, priorityBlockingQueue0);
      spider2.thread((ExecutorService) threadPoolExecutor0, 391);
      spider1.checkIfRunning();
      spider1.setExitWhenComplete(true);
      spider1.setExitWhenComplete(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "'>V";
      stringArray0[2] = "'>V";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "'>V");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setSpawnUrl(false);
      Spider spider3 = spider2.setUUID("");
      CollectorPipeline collectorPipeline0 = spider2.getCollectorPipeline();
      Spider spider4 = spider3.addPipeline(collectorPipeline0);
      spider0.getSpiderListeners();
      Spider spider5 = spider4.setSpiderListeners((List<SpiderListener>) null);
      // Undeclared exception!
      try { 
        spider5.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop fail!", "<,D}lX}s");
      Request request0 = new Request();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<,D}lX}s");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("'>V");
      Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.get("'>V");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("'>V");
      spider0.setScheduler(fileCacheQueueScheduler0);
      FilePipeline filePipeline0 = new FilePipeline("c");
      Page page0 = new Page();
      Spider spider1 = spider0.clearPipeline();
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("BL,");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      Request[] requestArray0 = new Request[6];
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = (-5891);
      Spider.Status.fromValue((-5891));
      String string0 = "VBM";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VBM");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.start();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("D");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("D", "D");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum((-1270));
      Spider spider2 = spider1.downloader(phantomJSDownloader1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      AtomicInteger atomicInteger0 = new AtomicInteger(34);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider3 = spider0.pipeline(filePipeline0);
      Spider spider4 = spider3.setUUID("ToT23qt6*@,2");
      spider4.getCollectorPipeline();
      Spider spider5 = spider3.addPipeline(filePipeline0);
      spider5.getSpiderListeners();
      Spider spider6 = spider3.downloader(phantomJSDownloader0);
      spider2.setUUID("POST");
      // Undeclared exception!
      try { 
        spider6.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("charsets*=s*['\"]*([^s;'\"]*)");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("\"RY~ P$/1`Wy5?;D");
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider1 = spider0.pipeline(collectorPipeline0);
      spider1.setScheduler(fileCacheQueueScheduler0);
      FilePipeline filePipeline0 = new FilePipeline("");
      spider1.clearPipeline();
      Page.fail();
      ForkJoinPool.commonPool();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      boolean boolean0 = spider1.isSpawnUrl();
      assertTrue(boolean0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<,D}lX}s");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(" stop fail!");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      FilePipeline filePipeline0 = new FilePipeline(" stop fail!");
      Spider spider2 = spider1.clearPipeline();
      Page.fail();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      // Undeclared exception!
      try { 
        spider2.thread((ExecutorService) forkJoinPool0, (-1550));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=]p");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string0 = "b";
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Request request0 = new Request();
      Request request1 = request0.setPriority(0L);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1784), (-790));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)9);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      Request request2 = request1.putExtra((String) null, dataInputStream0);
      Request request3 = request2.setMethod("");
      Request request4 = request3.setExtras((Map<String, Object>) null);
      linkedList0.add(request4);
      spider2.startRequest(linkedList0);
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("b");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=]p");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.pipeline(filePipeline0);
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"RY~ P$/1`Wy5?;D");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader((Downloader) null);
      ForkJoinTask.getPool();
      Spider spider2 = spider0.downloader((Downloader) null);
      AtomicInteger atomicInteger0 = new AtomicInteger(135);
      Spider spider3 = spider1.thread(199);
      CollectorPipeline collectorPipeline0 = spider2.getCollectorPipeline();
      spider3.addPipeline(collectorPipeline0);
      spider2.getSpiderListeners();
      spider3.setSpiderListeners((List<SpiderListener>) null);
      spider3.pipeline(collectorPipeline0);
      // Undeclared exception!
      try { 
        spider3.get("\"RY~ P$/1`Wy5?;D");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6r");
      Spider spider0 = Spider.create(simplePageProcessor0);
      boolean boolean0 = spider0.isExitWhenComplete();
      assertTrue(boolean0);
      
      ForkJoinTask.getPool();
      Spider spider1 = spider0.clearPipeline();
      Spider.Status spider_Status0 = Spider.Status.fromValue(1009);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("y>bpJ%");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setDownloader((Downloader) null);
      ForkJoinTask.getPool();
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.downloader((Downloader) null);
      AtomicInteger atomicInteger0 = new AtomicInteger(2354);
      String string0 = "\\";
      Spider spider3 = spider0.setUUID("");
      spider3.getCollectorPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider4 = spider1.addPipeline(multiPagePipeline0);
      spider4.getSpiderListeners();
      spider4.setSpiderListeners((List<SpiderListener>) null);
      // Undeclared exception!
      try { 
        spider2.thread((ExecutorService) null, (-534));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HB");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.scheduler(queueScheduler0);
      spider2.getSpiderListeners();
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      spider3.setExitWhenComplete(false);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-647), threadFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "'>V");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setSpawnUrl(true);
      Spider spider3 = spider2.thread(213);
      CollectorPipeline collectorPipeline0 = spider2.getCollectorPipeline();
      Spider spider4 = spider3.addPipeline(collectorPipeline0);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      spider4.setSpiderListeners((List<SpiderListener>) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider5 = spider0.startUrls(linkedList0);
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("B", "'>V");
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("'>V", "'>V");
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.clearPipeline();
      spider1.downloader(phantomJSDownloader1);
      Spider spider2 = spider1.setSpawnUrl(false);
      spider0.thread(213);
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      spider0.addPipeline(collectorPipeline0);
      spider2.getSpiderListeners();
      spider2.setSpiderListeners((List<SpiderListener>) null);
      // Undeclared exception!
      try { 
        spider1.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"RY~ P$/1`Wy5?;D");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setDownloader((Downloader) null);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.downloader((Downloader) null);
      Spider spider2 = spider1.setSpawnUrl(true);
      Spider spider3 = spider2.thread(213);
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      spider3.addPipeline(collectorPipeline0);
      spider1.getSpiderListeners();
      spider3.setSpiderListeners((List<SpiderListener>) null);
      // Undeclared exception!
      try { 
        spider2.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<,D}lX}s");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("<,D}lX}s");
      spider0.clearPipeline();
      ForkJoinPool.commonPool();
      // Undeclared exception!
      try { 
        spider0.sleep((-3290));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      spider1.start();
      spider1.isExitWhenComplete();
      ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) null, (-1395));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("D");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page.fail();
      ForkJoinPool.commonPool();
      spider0.stat = null;
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("'>V");
      spider0.setScheduler(fileCacheQueueScheduler0);
      FilePipeline filePipeline0 = new FilePipeline("c");
      Page page0 = new Page();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.getSite();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isExitWhenComplete();
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      spider0.startRequest(list0);
      ForkJoinTask.getPool();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"RY~ P$/1`Wy5?;D");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      Downloader downloader0 = null;
      Spider spider2 = spider1.setDownloader((Downloader) null);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      // Undeclared exception!
      try { 
        spider2.thread((ExecutorService) forkJoinPool0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("content");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider.Status.fromValue((-31));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&H[l.:iT:U>teY%");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      
      Spider spider1 = spider0.setExitWhenComplete(false);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider1.pipeline(jsonFilePipeline0);
      ForkJoinPool.commonPool();
      spider0.isSpawnUrl();
      Spider spider2 = spider1.startRequest((List<Request>) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.utils.DoubleKeyMap", "$VALUES");
      spider2.setDownloader(phantomJSDownloader0);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 3998;
      Spider.Status.fromValue(3998);
      String string0 = null;
      SimplePageProcessor simplePageProcessor0 = null;
      try {
        simplePageProcessor0 = new SimplePageProcessor((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.processor.SimplePageProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'>V");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "'>V");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setSpawnUrl(true);
      spider2.getCollectorPipeline();
      spider0.getSpiderListeners();
      spider2.setEmptySleepTime(3);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertNull(list0);
  }
}
