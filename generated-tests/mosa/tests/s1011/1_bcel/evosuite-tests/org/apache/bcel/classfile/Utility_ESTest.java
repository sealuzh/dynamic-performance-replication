/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:13:43 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.EOFException;
import java.io.ObjectStreamConstants;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.LineNumberTable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.RuntimeInvisibleParameterAnnotations;
import org.apache.bcel.classfile.Synthetic;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("impdep2", "H7L*W\".4", "H7L*W\".4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: impdep2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.lang.0:    l2i\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n";
      String string0 = Utility.methodTypeToSignature("java.lang.0:    l2i\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", stringArray0);
      assertEquals("(Ljava/lang/0:;)Ljava/lang/0:;", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("NBQ|/\u0000Un{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NBQ|/\u0000Un{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType(" arg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` arg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("impdep1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `impdep1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("'{7v{kj|DgwY&'7z.33");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '{7v{kj|DgwY&'7z.33
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = Utility.clearBit((-137), 4);
      assertEquals((-153), int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte) (-56);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-91);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)103, (int) (byte) (-56), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.typeOfSignature("ZqA\"b`/~7'+ei)g3J#_");
      String string0 = Utility.methodTypeToSignature("ZqA\"b`/~7'+ei)g3J#_", (String[]) null);
      String string1 = Utility.signatureToString("ZqA\"b`/~7'+ei)g3J#_");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("ZqA\"b`/~7'+ei)g3J#_");
      assertEquals((byte)4, byte0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("04", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("<!-6zQ)hxoqPk3$*zE", false);
      String string0 = Utility.fillup("<!-6zQ)hxoqPk3$*zE", 5, false, 'R');
      assertEquals("<!-6zQ)hxoqPk3$*zE", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("3c 21 2d 36 7a 51 29 68 78 6f 71 50 6b 33 00 7a 45", string1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.isSet(131, 81);
      byte[] byteArray0 = new byte[7];
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("00 00 00 00 00 00 00", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `00 00 00 00 00 00 00'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("areturn", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("b0", string1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("SYSTEM");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.searchOpcode("8$J%i?\"`:DVM)1O'vR");
      // Undeclared exception!
      try { 
        Utility.signatureToString("8$J%i?\"`:DVM)1O'vR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `8$J%i?\"`:DVM)1O'vR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      short short0 = Utility.searchOpcode("breakpoint");
      assertEquals((short)202, short0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = Utility.convertString("d}E]*;B=NG");
      assertEquals("d}E]*;B=NG", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = Utility.fillup("[``HnK1_bk)", 8, false, 'c');
      assertEquals("[``HnK1_bk)", string0);
      
      byte[] byteArray0 = new byte[1];
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("00", string1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = Utility.format(597, 2533, true, '1');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      short short0 = Constants.BASTORE;
      String string0 = Utility.convertString("8$J%i?\"`:DVM)1O'vR");
      assertEquals("8$J%i?\\\"`:DVM)1O\\'vR", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("7:5=n{bUzB(T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7:5=n{bUzB(T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      short short0 = Utility.searchOpcode("8$J%i?\"`:DVM)1O'vR");
      assertEquals((short) (-1), short0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[0];
      Object object0 = new Object();
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.decode(".L799/$W+4}MRk", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("Unreachable default case reached!", (String[]) null);
      assertEquals("()LUnreachable;", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      try { 
        Utility.typeOfSignature("<init>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <init>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      try { 
        Utility.typeOfSignature("astore_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: astore_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = Utility.convertString(":Oz");
      assertEquals(":Oz", string0);
      
      String string1 = Utility.classOrInterface((byte) (-71));
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = true;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      Utility.printArray(objectArray0, true, true);
      try { 
        Utility.typeOfSignature("WdFr)1j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WdFr)1j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "Op";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[5] = (Object) "Op";
      Object object1 = new Object();
      objectArray0[6] = object1;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("float");
      assertEquals("float", string1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.getSignature("char");
      try { 
        Utility.typeOfSignature("ifnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("void", stringArray0);
      assertEquals("()V", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = Utility.accessToString((-1569), true);
      assertEquals("public private protected static final volatile transient native strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-1794586372), (-1794586372));
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString((-1794586372), true);
      String string1 = Utility.getSignature("protected static final volatile transient strictfp enum");
      assertEquals("Lprotected;", string1);
      
      String string2 = Utility.compactClassName("protected static final volatile transient strictfp enum", true);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Op", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Op'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, false, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = Utility.compactClassName("Types", "Types", false);
      assertEquals("Types", string0);
      
      String string1 = Utility.accessToString((-2362), true);
      assertEquals("private protected volatile transient abstract synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("The wildcar8 a-ray must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The wildcar8 a-ray must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("FbA`sw^");
      assertEquals((byte)6, byte0);
      
      String string0 = Utility.signatureToString("FbA`sw^", false);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("L<illegal;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Utility.signatureToString("L:7N$ev/I&;vq4v?;V");
      assertEquals(":7N$ev.I&", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      short short0 = Constants.BASTORE;
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      String string1 = Utility.replace("<clinit>", "Br[m38<Rd]\"j1$rLQ%", "q$DMC<p'@/A18");
      assertEquals("<clinit>", string1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.signatureToString("V7_yu_8ZmH(z?R", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("V7_yu_8ZmH(z?R", (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("org.apache.bcel.CoTst", stringArray0);
      assertEquals("()Lorg/apache/bcel/CoTst;", string0);
      
      byte byte0 = Utility.typeOfMethodSignature("()Lorg/apache/bcel/CoTst;");
      assertEquals((byte)14, byte0);
      
      byte byte1 = Utility.typeOfSignature("Z");
      assertEquals((byte)4, byte1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("u,=P?JUJ-v+L[p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("-0[N]8D7QB-8&95a*", (String[]) null);
      String string1 = Utility.compactClassName("()[L-0;");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("freturn", false);
      Utility.encode(byteArray0, true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "freturn";
      String string0 = "7";
      stringArray0[1] = "7";
      stringArray0[2] = "freturn";
      stringArray0[3] = "freturn";
      stringArray0[4] = "freturn";
      stringArray0[5] = "[^KXu~T+rUo=N2K";
      stringArray0[6] = "$l$8b$I$A$A$A$A$A$A$A";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("freturn", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [^KXu~T+rUo=N2K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"qYcS@l`{;od\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"qYcS@l`{;od\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.getSignature(")\n");
      try { 
        Utility.typeOfSignature(")\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      short short0 = Constants.BASTORE;
      try { 
        Utility.typeOfSignature("EnclosingMethod");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EnclosingMethod
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8$J%?\"`:DVM)1O'vR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8$J%?\"`:DVM)1O'vR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid frame type found while parsing stack map table: ", false);
      assertEquals("int", string0);
      
      String string1 = Utility.convertString("\n");
      assertEquals("\\n", string1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(".L799/$W+4}MRk", false);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature(".L799/$W+4}MRk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .L799/$W+4}MRk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Synthetic");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = Utility.getSignature(" ");
      assertEquals("L;", string0);
      
      short short0 = Constants.BASTORE;
      byte byte0 = Utility.typeOfSignature("L;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Unrecognizrd,attribute type tag pa{sed: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unrecognizrd,attribute type tag pa{sed: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-46);
      short short0 = Constants.BASTORE;
      try { 
        Utility.typeOfSignature("H&{Id");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H&{Id
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&+tL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &+tL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("J");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "0g.5_Rz ^W]";
      Utility.getSignature("0g.5_Rz ^W]");
      String string1 = "checkcast";
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("0g.5_Rz ^W]", stringArray0);
      Utility.methodSignatureReturnType("()L0g/5_Rz;", false);
      String string2 = "class";
      String string3 = "5'R8):oY235i#;p53";
      try { 
        Utility.typeOfSignature("5'R8):oY235i#;p53");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5'R8):oY235i#;p53
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byte byte0 = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)98;
      try { 
        Utility.typeOfSignature("!*e2kT<ChqK-1 x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: e2kT<ChqK-1 x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("!#Zu&d^ u/~g`7.", stringArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.lookup(linkedList0, (Collection<Locale>) null);
      try { 
        Utility.typeOfSignature("!#Zu&d^ u/~g`7.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #Zu&d^ u/~g`7.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.searchOpcode("8$J%i?\"`:DVM)1O'vR");
      try { 
        Utility.typeOfSignature("4Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = false;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      Utility.printArray(objectArray0, false, false);
      Utility.accessToString(87);
      String string0 = "A~2wsWWJWhP&f`:KB";
      Utility.compactClassName("A~2wsWWJWhP&f`:KB", false);
      try { 
        Utility.typeOfSignature("A~2wsWWJWhP&f`:KB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A~2wsWWJWhP&f`:KB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid frame type found while parsing stack map table: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("EJDw[ 3L8W", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EJDw[ 3L8W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The wildcar8 a-ray must not be null");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = Utility.replace("monitorexit", "monitorexit", "monitorexit");
      assertEquals("monitorexit", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = Utility.methodSignatureReturnType("BS#7SydIl9s", true);
      assertEquals("byte", string1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[8];
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)100;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 55, (int) (byte) (-80), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("byte", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 71, 4400, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.compactClassName("=sXjUq}Y07\"=$}_02", true);
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.methodTypeToSignature("aaload", (String[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-123);
      Utility.encode(byteArray0, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1), (-2533), true);
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      try { 
        Utility.methodSignatureArgumentTypes("8#}>TR3z>sFL5{", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8#}>TR3z>sFL5{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Utility.signatureToString("D-", true);
      assertEquals("double", string0);
      
      byte byte0 = Utility.typeOfSignature("D-");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utility.clearBit(187, 187);
      String string0 = ")K(";
      try { 
        Utility.methodSignatureReturnType(")K(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(\"", "(\"", "oy#x5<1R5*f!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.SC_EXTERNALIZABLE;
      try { 
        Utility.typeOfSignature("7SOD3{EZk`\"Lh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7SOD3{EZk`\"Lh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+P=\"M`u! 'zq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P=\"M`u! 'zq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(".L799/$W+4}MRk", false);
      Utility.encode(byteArray0, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-117), 14, false);
      try { 
        Utility.typeOfSignature("$$L799$_$W$x4$7dMRk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $$L799$_$W$x4$7dMRk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-j[N]8D7QB-8&95a*";
      stringArray0[1] = "-j[N]8D7QB-8&95a*";
      stringArray0[2] = "-j[N]8D7QB-8&95a*";
      stringArray0[3] = "-j[N]8D7QB-8&95a*";
      String string0 = Utility.printArray((Object[]) stringArray0, true);
      assertEquals("{-j[N]8D7QB-8&95a*, -j[N]8D7QB-8&95a*, -j[N]8D7QB-8&95a*, -j[N]8D7QB-8&95a*, null}", string0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "Op";
      String string1 = "DDsT^&<@Oiq4fd";
      Utility.signatureToString("DDsT^&<@Oiq4fd");
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "DDsT^&<@Oiq4fd";
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "double";
      objectArray0[5] = (Object) "Op";
      objectArray0[6] = (Object) "double";
      String string2 = "XP";
      // Undeclared exception!
      try { 
        Utility.signatureToString("XP", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "H[%";
      try { 
        Utility.methodSignatureReturnType("H[%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H[%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        Utility.typeOfSignature("UNKNOWN (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UNKNOWN (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      try { 
        Utility.typeOfSignature("-j[NA]8D7QB-8&95a*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -j[NA]8D7QB-8&95a*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)1, (int) (byte)1, true);
      try { 
        Utility.typeOfSignature("1:    daload\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1:    daload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("<!-6zQ)hxoqPk3$*zE", false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1053), (int) (byte)75, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.methodSignatureReturnType("InitObjecKt");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Mt.9r;O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mt.9r;O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "?[D1[yRa%V";
      String[] stringArray0 = new String[6];
      stringArray0[1] = "?[D1[yRa%V";
      stringArray0[2] = "?[D1[yRa%V";
      stringArray0[4] = "?[D1[yRa%V";
      stringArray0[0] = "\t";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("?[D1[yRa%V", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[D1[yRa%V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";/yB}|k}n%]=t]]#i7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;/yB}|k}n%]=t]]#i7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-88);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-88), (int) (byte) (-88), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Utility.typeOfSignature("FbA`sw^");
      String string0 = "putstatic";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("FbA`sw^", "FbA`sw^", "putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: FbA`sw^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'{7v{kj|DgwY&'7z.33");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '{7v{kj|DgwY&'7z.33
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("freturn", false);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-82), (int) (byte) (-80), false);
      assertEquals("0:    fsub\n1:    frem\n2:    lsub\n3:    ineg\n4:    lneg\n5:    frem\n6:    fdiv\n", string1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("P?)zk??", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P?)zk??'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)18, (int) (byte) (-124), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("X 3<QO+=?T9^", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 65, 8, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = Pattern.quote("u,=P?0UJ-(+L[p");
      assertNotNull(string0);
      assertEquals("\\Qu,=P?0UJ-(+L[p\\E", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)93;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), (int) (byte)93, true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    lcmp\n1:    monitorenter\n2:    dup2_x1\n", string1);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-62), (byte)93}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("(XKc|B^oFP", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)88, (byte)75, (byte)99, (byte)124, (byte)66, (byte)94, (byte)111, (byte)70, (byte)80}, byteArray0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 71, 71, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1302, (int) (byte) (-54), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "Op";
      try { 
        Utility.typeOfSignature("Op");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Op
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = Utility.decode("D<Wl8599\"4@@S|WB", false);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 71, 71, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 183, 9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 224, true);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.typeOfSignature("0:    nop\n1:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[``HnK1_bk)");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-4);
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("$bb$e4$fc$e4$bb$fc", string0);
      assertArrayEquals(new byte[] {(byte) (-69), (byte) (-28), (byte) (-4), (byte) (-28), (byte) (-69), (byte) (-4)}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-69), (byte) (-28), (byte) (-4), (byte) (-28), (byte) (-69), (byte) (-4)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "$ax'";
      // Undeclared exception!
      try { 
        Utility.decode("$ax'", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ax\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)67, 5828, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = Utility.convertString(" in\n");
      assertNotNull(string0);
      assertEquals(" in\\n", string0);
      
      try { 
        Utility.typeOfSignature(" in\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  in
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-57);
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-57)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5, 58, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-68);
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)49;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)49, (-889275714), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "=g{Y:s2B2";
      try { 
        Utility.typeOfSignature("=g{Y:s2B2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =g{Y:s2B2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)30;
      byte[] byteArray1 = Utility.decode("*R(mCr~j$h2g~bj0MLn", false);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals("$e1$7d$k$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte) (-31), (byte)125, (byte)30, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)30, 198, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-71)}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[``HnK1_bk)", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ```HnK1_bk)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("aaload", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)108, (byte)111, (byte)97, (byte)100}, byteArray0);
      
      byte byte0 = Utility.typeOfSignature("DDsT^&<@Oiq4fd");
      assertEquals((byte)7, byte0);
      
      try { 
        Utility.typeOfSignature("3>UrI!xeJc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3>UrI!xeJc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), (int) (byte) (-59), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Cv!eL");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (byte) (-40), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)31;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)31, 1470, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, 16, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-107);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-40), (int) (byte) (-107), false);
      assertNotNull(string0);
      assertEquals("0:    fcmpl\n", string0);
      assertArrayEquals(new byte[] {(byte) (-107)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 41, (int) (byte) (-94), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)44;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 90, 46, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte) (-100);
      byteArray1[2] = (byte)125;
      byteArray1[3] = (byte)125;
      byteArray1[4] = (byte)125;
      byteArray1[5] = (byte)125;
      byteArray1[6] = (byte) (-100);
      byteArray1[7] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)125, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte byte0 = (byte) (-31);
      byte byte1 = (byte)125;
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("'{7v{kj|DgwY&'7z.33", false);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-31);
      byteArray1[1] = (byte)30;
      byteArray1[2] = (byte) (-104);
      byteArray1[3] = (byte)125;
      byteArray1[4] = (byte)30;
      byteArray1[5] = (byte)125;
      String string0 = Utility.encode(byteArray1, true);
      assertNotNull(string0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte) (-31), (byte)30, (byte) (-104), (byte)125, (byte)30, (byte)125}, byteArray1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)30, (int) (byte)30, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)100;
      byte byte0 = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)100, (-2251), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), (int) (byte) (-70), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("LS/''9No", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LS/''9No
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.decode("<!-6zQ)hxoqPk3$*zE", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-124);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2510), (int) (byte) (-124), true);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    iinc\t\t%0\t0\n4:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-124), (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      try { 
        Utility.methodSignatureReturnType("G_}U7{P<TT0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G_}U7{P<TT0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-101);
      byteArray0[7] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-6294), (int) (byte) (-101), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iflt\t\t#0
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-84);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-84), 87, false);
      assertNotNull(string0);
      assertEquals("0:    fneg\n1:    ireturn\n", string0);
      assertArrayEquals(new byte[] {(byte)118, (byte) (-84)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte) (-56);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-86);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)103, (int) (byte) (-56), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" in\n", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)105, (byte)110, (byte)10}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 71, 157, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 69, (int) (byte)26, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "&+tL";
      stringArray0[1] = "<illegal type>";
      stringArray0[2] = "&+tL";
      stringArray0[3] = "&+tL";
      stringArray0[4] = "&+tL";
      stringArray0[5] = "<illegal type>";
      stringArray0[6] = "&+tL";
      try { 
        Utility.typeOfSignature("6%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)91, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 544, (int) (byte)65, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)45;
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)59, (byte) (-88), (byte)82, (byte)45}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 155, 87, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)61;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-102), 221, false);
      assertNotNull(string0);
      assertEquals("0:    ifnull\t\t#19137\n3:    <illegal opcode>\n4:    ifne\t\t#65\n", string0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)74, (byte) (-63), (byte) (-7), (byte) (-102), (byte)0, (byte)61}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[0] = (byte)48;
      byteArray0[2] = (byte)48;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 2407, false);
      assertNotNull(string0);
      assertEquals("0:    faload\n1:    nop\n2:    faload\n", string0);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)48}, byteArray0);
      
      String string1 = Utility.convertString("0:    faload\n1:    nop\n2:    faload\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    faload\\n1:    nop\\n2:    faload\\n", string1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 75, 75, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)88;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2510), (int) (byte)88, true);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    pop2\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)88, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte)0;
      byteArray0[1] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-63), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-126), (byte)10, (byte)15}, byteArray0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, (int) (byte)15, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      short short0 = Constants.FLOAD;
      assertEquals((short)23, short0);
      
      byte byte0 = Utility.typeOfSignature("*Z1\";}ao:6.*");
      assertEquals((byte)4, byte0);
      
      try { 
        Utility.typeOfMethodSignature("8$J%i?\"`:DVM)1O'vR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8$J%i?\"`:DVM)1O'vR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-120);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), (int) (byte) (-120), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Q{'Q_NJ4Ud]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q{'Q_NJ4Ud]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), 189, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.getSignature("=g%B(Fn~95o<\"M[5[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[5[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)12;
      byteArray0[3] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)12, 77, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-105);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 70, 190, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)11;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)11, (int) (byte)11, false);
      assertNotNull(string0);
      assertEquals("11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)118, (int) (byte)118, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(")\n", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)10}, byteArray0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("$v$K", string0);
      assertArrayEquals(new byte[] {(byte)41, (byte)10}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 26666, 68, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = Pattern.quote("u,=P?0UJ-(+L[p");
      assertNotNull(string0);
      assertEquals("\\Qu,=P?0UJ-(+L[p\\E", string0);
      
      // Undeclared exception!
      try { 
        Utility.decode("Ne|>o$5}QZ~R", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Utility.decode("\tFQ3S$h4|_2jy", false);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.convertString("H7L*W\".4");
      assertNotNull(string0);
      assertEquals("H7L*W\\\".4", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      short short0 = Constants.BASTORE;
      assertEquals((short)84, short0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)74}, byteArray0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals("dstore_3", string0);
      assertArrayEquals(new byte[] {(byte)74}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)105;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-880), 161, true);
      assertNotNull(string0);
      assertEquals("0:    lreturn\n1:    lmul\n", string0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)105}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Myt//+N]e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Myt//+N]e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("(", true);
      assertNotNull(string0);
      assertEquals("(", string0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal type>", string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)100;
      String string2 = Utility.encode(byteArray0, true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)100, (byte)100}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 82, (int) (byte) (-102), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "e~Q/dh8o~y$Dt2i");
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("VsiLf5:(Gh/", false);
      assertNotNull(byteArray0);
      
      ConstantInteger constantInteger0 = new ConstantInteger(493);
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(493, constantInteger0.getBytes());
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-31), (int) (byte) (-31), false);
      assertNotNull(string0);
      assertEquals("0:    sastore\n1:    drem\n2:    lmul\n3:    astore_1\n4:    fsub\n5:    saload\n6:    astore\t\t%40\n8:    dstore_0\n9:    imul\n10:   laload\n", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 493, 1191);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)66, 301, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-63), 59, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      short short0 = Constants.FSTORE_2;
      assertEquals((short)69, short0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-65);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)61, (int) (short)69, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-96);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-96), false);
      assertNotNull(string0);
      assertEquals("0:    fstore_1\n1:    if_icmpne\t\t#1\n", string0);
      assertArrayEquals(new byte[] {(byte)68, (byte) (-96), (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)68, (byte) (-96), (byte)0, (byte)0}, byteArray0);
      
      float float0 = byteSequence0.readFloat();
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(1280.0F, float0, 0.01F);
      assertArrayEquals(new byte[] {(byte)68, (byte) (-96), (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.typeOfSignature("0:    fstore_1\n1:    if_icmpne\t\t#1\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    fstore_1
         // 1:    if_icmpne\t\t#1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      short short0 = Constants.FSTORE_2;
      assertEquals((short)69, short0);
      
      String string0 = Utility.convertString("XS");
      assertNotNull(string0);
      assertEquals("XS", string0);
      
      try { 
        Utility.typeOfSignature("XS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("constant pool\t\t", false);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 71, 3068, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_INT;
      assertEquals((byte)73, byte0);
      
      String string0 = Utility.methodTypeToSignature(">BrGoCe@x~dz", (String[]) null);
      assertNotNull(string0);
      assertEquals("()L>BrGoCe@x~dz;", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte) (-79);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-79), (int) (byte) (-79));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    dstore_2\n1:    return\n2:    fconst_1\n3:    astore_3\n4:    astore_3\n5:    return\n", string1);
      assertArrayEquals(new byte[] {(byte)73, (byte) (-79), (byte)12, (byte)78, (byte)78, (byte) (-79)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-40), 52, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)80;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-3), 61, false);
      assertNotNull(string0);
      assertEquals("0:    <illegal opcode>\n1:    astore\t\t%24\n3:    dstore_0\n4:    lastore\n", string0);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)58, (byte)24, (byte)71, (byte)80}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)126;
      try { 
        Utility.typeOfSignature("GBzp,.XW?ix?,tdXG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GBzp,.XW?ix?,tdXG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-30);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)21, (byte) (-111), (byte)93, (byte)92, (byte) (-30)}, byteArray0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("iload\t\t%145", string0);
      assertArrayEquals(new byte[] {(byte)21, (byte) (-111), (byte)93, (byte)92, (byte) (-30)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = Utility.convertString(" in\n");
      assertNotNull(string0);
      assertEquals(" in\\n", string0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-35);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4430, (int) (byte)12, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-40), (int) (byte) (-111), false);
      assertNotNull(string0);
      assertEquals("0:    i2b\n", string0);
      assertArrayEquals(new byte[] {(byte) (-111)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-125), (byte)58}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)1, (int) (byte)1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Jg}|ci'iM>v{[~ewj%4");
      assertNotNull(string0);
      assertEquals("long", string0);
      
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)7;
      byteArray0[7] = (byte)45;
      byteArray0[7] = (byte) (-62);
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)89, (byte)89, (byte) (-90), (byte)102, (byte)45, (byte)7, (byte)0, (byte) (-62)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, (int) (byte)89, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[9] = (byte)37;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2316), (int) (byte)66, true);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    fload_3\n10:   nop\n11:   nop\n12:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte) (-32);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-350), (int) (byte)59, true);
      assertNotNull(string0);
      assertEquals("0:    istore_0\n1:    iconst_4\n2:    lstore_2\n3:    <illegal opcode>\n4:    <illegal opcode>\n", string0);
      assertArrayEquals(new byte[] {(byte)59, (byte)7, (byte)65, (byte) (-42), (byte) (-32)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)65, (int) (byte)65, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-120);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), (int) (byte) (-120), true);
      assertNotNull(string0);
      assertEquals("0:    l2i\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)8;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-114), (int) (byte) (-92), false);
      assertNotNull(string0);
      assertEquals("0:    d2i\n1:    iconst_5\n2:    nop\n3:    nop\n4:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)8, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.typeOfSignature("0:    d2i\n1:    iconst_5\n2:    nop\n3:    nop\n4:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    d2i
         // 1:    iconst_5
         // 2:    nop
         // 3:    nop
         // 4:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte) (-70);
      byteArray0[8] = (byte) (-31);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 73, 1158, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)91;
      byte byte1 = (byte)95;
      byteArray0[1] = (byte)95;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)95);
      assertNotNull(constantInteger0);
      assertEquals(95, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)95, (int) (byte)95, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)72;
      boolean boolean0 = true;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)72, (int) (byte) (-96), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1233), (-2048), true);
      assertNotNull(string0);
      assertEquals("0:    aaload\n", string0);
      assertArrayEquals(new byte[] {(byte)50}, byteArray0);
      
      byte byte0 = ElementValue.CLASS;
      assertEquals((byte)99, byte0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)67;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1737), (-2597), true);
      assertNotNull(string0);
      assertEquals("0:    castore\n1:    faload\n2:    nop\n3:    fstore_0\n", string0);
      assertArrayEquals(new byte[] {(byte)85, (byte)48, (byte)0, (byte)67}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = Utility.compactClassName("Q/bIm`Jv1B ]", "=]3qV", true);
      assertNotNull(string0);
      assertEquals("Q.bIm`Jv1B ]", string0);
      
      try { 
        Utility.methodSignatureReturnType("Q.bIm`Jv1B ]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q.bIm`Jv1B ]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, 2480, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[3] = (byte) (-62);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), (int) (byte)5, false);
      assertNotNull(string0);
      assertEquals("0:    iconst_2\n1:    iconst_2\n2:    nop\n3:    monitorenter\n", string0);
      assertArrayEquals(new byte[] {(byte)5, (byte)5, (byte)0, (byte) (-62)}, byteArray0);
      
      byte byte0 = ElementValue.CLASS;
      assertEquals((byte)99, byte0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-36);
      byteArray0[2] = (byte)16;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1107), (int) (byte) (-36), false);
      assertNotNull(string0);
      assertEquals("0:    <illegal opcode>\n1:    nop\n2:    bipush\t\t0\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-36), (byte)0, (byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)67, (byte)17, (byte)90, (byte) (-79), (byte)42, (byte) (-9), (byte)36}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)67, (byte)17, (byte)90, (byte) (-79), (byte)42, (byte) (-9), (byte)36}, byteArray0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertArrayEquals(new byte[] {(byte)67, (byte)17, (byte)90, (byte) (-79), (byte)42, (byte) (-9), (byte)36}, byteArray0);
      
      int int0 = byteSequence2.read();
      assertEquals(1, byteSequence2.getIndex());
      assertNotSame(byteSequence2, byteSequence0);
      assertNotSame(byteSequence2, byteSequence1);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertEquals(67, int0);
      assertArrayEquals(new byte[] {(byte)67, (byte)17, (byte)90, (byte) (-79), (byte)42, (byte) (-9), (byte)36}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals(4, byteSequence2.getIndex());
      assertNotSame(byteSequence2, byteSequence0);
      assertNotSame(byteSequence2, byteSequence1);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertEquals("sipush\t\t23217", string0);
      assertArrayEquals(new byte[] {(byte)67, (byte)17, (byte)90, (byte) (-79), (byte)42, (byte) (-9), (byte)36}, byteArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[3] = (Object) byteSequence1;
      objectArray0[4] = (Object) byteSequence2;
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("freturn", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)114, (byte)101, (byte)116, (byte)117, (byte)114, (byte)110}, byteArray0);
      
      String string0 = Utility.compactClassName("freturn", false);
      assertNotNull(string0);
      assertEquals("freturn", string0);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-122);
      byteArray0[6] = (byte)93;
      byteArray1[2] = (byte)92;
      byteArray1[3] = (byte) (-122);
      byteArray1[4] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)92, (byte) (-122), (byte) (-122)}, byteArray1);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("i2f", string1);
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)92, (byte) (-122), (byte) (-122)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-5);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 156, (-1327), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-75), (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)8, (int) (byte)8, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = Utility.signatureToString("CONSTANT_Long");
      assertNotNull(string0);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-79);
      byteArray0[0] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-97), (byte) (-79), (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-79), (int) (byte) (-79), true);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    if_icmpeq\t\t#-20224\n3:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-97), (byte) (-79), (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-79);
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-79), (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-79), (int) (byte) (-79), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">[)~e^+|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >[)~e^+|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 181, (int) (byte)92, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, 2561, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)63;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-672), (int) (byte) (-99), false);
      assertNotNull(string0);
      assertEquals("0:    lconst_0\n1:    ifgt\t\t#26944\n", string0);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-99), (byte)105, (byte)63}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      try { 
        Utility.typeOfSignature("@%O9IQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @%O9IQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      short short0 = Constants.BASTORE;
      assertEquals((short)84, short0);
      
      try { 
        Utility.methodSignatureReturnType("YAVuNb6@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YAVuNb6@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)76, 93, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.signatureToString("LL);;V", true);
      assertNotNull(string0);
      assertEquals("L)", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)22;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)22, (int) (byte)90, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-6);
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("$ed$5b$a3$fa", string0);
      assertArrayEquals(new byte[] {(byte) (-19), (byte)91, (byte) (-93), (byte) (-6)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1610), (-143), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    dup_x2
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-88);
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)100, (byte) (-117), (byte)82, (byte) (-88)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 87, (int) (byte) (-117), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = Pattern.quote("u,=P?0UJ-(+L[p");
      assertNotNull(string0);
      assertEquals("\\Qu,=P?0UJ-(+L[p\\E", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)27;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, 3, 35, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new byte[] {(byte)39, (byte)62, (byte)27}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = Pattern.quote("u,=P?0UJ-(+L[p");
      assertNotNull(string0);
      assertEquals("\\Qu,=P?0UJ-(+L[p\\E", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)62, (byte) (-47), (byte)97}, byteArray0);
      
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, (int) (byte)62, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)23, (int) (byte)23, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)25;
      byteArray0[4] = (byte)125;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), 1067, true);
      assertNotNull(string0);
      assertEquals("0:    aload_1\n1:    lcmp\n2:    aload\t\t%0\n4:    lushr\n", string0);
      assertArrayEquals(new byte[] {(byte)43, (byte) (-108), (byte)25, (byte)0, (byte)125}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-97);
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte) (-113);
      byteArray0[8] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)36, (byte)99, (byte)0, (byte) (-97), (byte)0, (byte)72, (byte) (-113), (byte)87}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte) (-20);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-34), (byte) (-62), (byte) (-76), (byte) (-92), (byte)73, (byte) (-20)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)73, (int) (byte) (-62), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-79);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-79), 76, true);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    return\n2:    nop\n3:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-79), (byte)0, (byte)0}, byteArray0);
      
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      assertEquals((byte)119, byte0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-79);
      byteArray1[1] = (byte)119;
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (-3123), 13, true);
      assertNotNull(string1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    return\n1:    dneg\n", string1);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)119}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-98);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-46);
      byteArray0[7] = (byte)82;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2875), (-190), false);
      assertNotNull(string0);
      assertEquals("0:    dup_x2\n1:    ifle\t\t#-20769\n4:    iinc\t\t%78\t-46\n7:    dastore\n", string0);
      assertArrayEquals(new byte[] {(byte)91, (byte) (-98), (byte) (-82), (byte) (-34), (byte) (-124), (byte)78, (byte) (-46), (byte)82}, byteArray0);
      
      String string1 = Utility.fillup("\t\t", (byte) (-124), true, 'm');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\t\t", string1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.Class");
      assertNotNull(string0);
      assertEquals("Class", string0);
      
      byte[] byteArray0 = new byte[16];
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-48);
      byteArray0[3] = (byte) (-82);
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 153, 1190, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), 71, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.Class");
      assertNotNull(string0);
      assertEquals("Class", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-120);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)80;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), 190, true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    l2i\n1:    nop\n2:    dcmpg\n3:    lastore\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string1);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)0, (byte) (-104), (byte)80, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = Utility.setBit((byte)80, 170);
      assertEquals(1104, int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String[] stringArray0 = new String[32];
      stringArray0[0] = "boolean";
      stringArray0[4] = "boolean";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-109);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)52, 2187, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-125), (byte)0}, byteArray0);
      
      byte[] byteArray1 = Utility.decode("`]'op{ACPt", false);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)96, (byte)93, (byte)39, (byte)111, (byte)112, (byte)123, (byte)65, (byte)67, (byte)80, (byte)116}, byteArray1);
      
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 980, 157, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)67;
      byteArray0[4] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-756), (int) (byte)67, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-85);
      byteArray1[1] = (byte) (-85);
      byteArray1[2] = (byte) (-85);
      byteArray1[3] = (byte)24;
      byteArray1[4] = (byte) (-85);
      byteArray1[5] = (byte) (-85);
      byteArray1[6] = (byte) (-40);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (-1767), (int) (byte) (-85), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)30;
      byteArray0[8] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), (int) (byte)69, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    swap
         // 1:    f2l
         // 2:    goto\t\t#17863
         // 5:    ifgt\t\t#-14045
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1, 16, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 1:    dastore
         // 2:    dastore
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/$kw/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /$kw/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-81);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 197, 186, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[2] = (byte)38;
      byteArray0[2] = (byte)77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, (int) (byte)77, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 125, (-1753), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.typeOfSignature("Na");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Na
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      try { 
        Utility.typeOfSignature("%-0:z]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %-0:z]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      try { 
        Utility.typeOfSignature("R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("Y,=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y,=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_ENDBLOCKDATA;
      assertEquals((byte)120, byte0);
      
      try { 
        Utility.typeOfSignature("2??p9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2??p9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      try { 
        Utility.typeOfSignature("KzcQE6iiDEh<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KzcQE6iiDEh<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte) (-56);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)82, (int) (byte) (-86), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.compactClassName("$A$A$A$A$A$A$A", "ifnonnull", false);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("$A$A$A$A$A$A$A", string1);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)70;
      byteArray1[2] = (byte)70;
      byteArray1[3] = (byte)70;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)70, (byte)0, (byte)70, (byte)70, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      byte[] byteArray2 = Utility.decode("$A$A$A$A$A$A$A", false);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)19;
      byteArray0[0] = (byte)19;
      String string0 = "iNlbc3S1%?BYVk~ew";
      boolean boolean1 = true;
      String string1 = Utility.compactClassName("iNlbc3S1%?BYVk~ew", "iNlbc3S1%?BYVk~ew", true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new byte[] {(byte)19}, byteArray0);
      
      try { 
        Utility.decode("r~QUJ0VR.}6*ciN$b", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.9*Ms_CR7.'UWWu");
      assertNotNull(string0);
      assertEquals("java.lang.9*Ms_CR7.'UWWu", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-36);
      byteArray0[2] = (byte)16;
      String string0 = Utility.methodSignatureReturnType("[V|ReWL");
      assertNotNull(string0);
      assertEquals("void[]", string0);
  }
}
