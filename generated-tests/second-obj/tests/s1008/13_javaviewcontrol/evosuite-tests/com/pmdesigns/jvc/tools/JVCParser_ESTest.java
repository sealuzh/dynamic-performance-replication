/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:15:38 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParser;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.ParseException;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParser_ESTest extends JVCParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(32);
      JVCParser jVCParser0 = new JVCParser(pipedInputStream0);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      String string0 = null;
      pipedOutputStream0.flush();
      JVCParser jVCParser0 = new JVCParser(dataInputStream0, (String) null);
      jVCParser0.enable_tracing();
      // Undeclared exception!
      try { 
        jVCParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JVCParser jVCParser0 = new JVCParser((Reader) null);
      Token token0 = jVCParser0.getToken((-1714));
      Token token1 = Token.newToken(4373, ">Br}*Gu(p*8hX");
      token1.specialToken = token0;
      Token token2 = Token.newToken(5364);
      token0.specialToken = token2;
      token2.specialToken = token1;
      token0.next = token1;
      jVCParser0.getNextToken();
      jVCParser0.ReInit((Reader) null);
      jVCParser0.enable_tracing();
      jVCParser0.disable_tracing();
      // Undeclared exception!
      try { 
        jVCParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      JVCParser jVCParser0 = new JVCParser((JVCParserTokenManager) null);
      jVCParser0.ReInit((JVCParserTokenManager) null);
      jVCParser0.disable_tracing();
      // Undeclared exception!
      try { 
        jVCParser0.getToken(7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JVCParser jVCParser0 = new JVCParser(dataInputStream0, (String) null);
      jVCParser0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JVCParser.main(stringArray0);
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, 783, 783);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JVCParser jVCParser0 = new JVCParser((Reader) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JVCParser.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JVCParser jVCParser0 = new JVCParser((Reader) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JVCParser jVCParser1 = new JVCParser((Reader) null);
      jVCParser0.disable_tracing();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      jVCParser1.ReInit((InputStream) mockFileInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 100);
      jVCParser0.token_source = jVCParser1.token_source;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/13_javaviewcontrol");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      JVCParser jVCParser2 = new JVCParser(pushbackInputStream0, (String) null);
      jVCParser2.getToken(100);
      jVCParser0.disable_tracing();
      String string0 = jVCParser2.parse();
      assertEquals("", string0);
      assertEquals(100, jVCParser2.debugColumn);
      
      jVCParser1.getToken((-137));
      assertEquals(100, jVCParser1.debugColumn);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = 'P';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader1, 0, (-2097));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      JVCParser jVCParser0 = new JVCParser(jVCParserTokenManager0);
      jVCParser0.getToken(3);
      jVCParser0.disable_tracing();
      jVCParser0.parse();
      jVCParser0.getNextToken();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JVCParser.main(jVCParserTokenManager0.lexStateNames);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JVCParser jVCParser0 = new JVCParser((Reader) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JVCParser jVCParser1 = new JVCParser((Reader) null);
      jVCParser0.disable_tracing();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      jVCParser1.ReInit((InputStream) mockFileInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 100);
      jVCParser0.token_source = jVCParser1.token_source;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 100, 100);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      JVCParser jVCParser2 = new JVCParser(jVCParser0.token_source);
      jVCParser0.getToken(100);
      jVCParser2.disable_tracing();
      jVCParser1.parse();
      jVCParser0.getToken(12);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jVCParser1.disable_tracing();
      jVCParser0.generateParseException();
      JVCParser.main(jVCParserTokenManager0.lexStateNames);
      jVCParser1.enable_tracing();
      assertFalse(jVCParser1.equals((Object)jVCParser0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      char[] charArray0 = new char[9];
      charArray0[0] = '+';
      charArray0[2] = 'P';
      charArray0[3] = 'B';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = 'Q';
      charArray0[7] = 'O';
      StringReader stringReader0 = new StringReader("2P{QWit$!\"usB 'qZ{#");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1492, 1492);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      JVCParser jVCParser0 = new JVCParser(jVCParserTokenManager0);
      jVCParser0.disable_tracing();
      JVCParser jVCParser1 = new JVCParser(stringReader0);
      jVCParser0.parse();
      jVCParser1.enable_tracing();
      jVCParser1.getToken((-1371));
      PipedInputStream pipedInputStream1 = new PipedInputStream(1492);
      jVCParser1.ReInit((InputStream) pipedInputStream1);
      JVCParser.main(jVCParserTokenManager0.lexStateNames);
      jVCParser1.ReInit((Reader) stringReader0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = 'Y';
      charArray0[3] = '$';
      charArray0[4] = '\\';
      charArray0[5] = 'Y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 94, (-1826));
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      JVCParser jVCParser0 = new JVCParser(jVCParserTokenManager0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jVCParser0.disable_tracing();
      jVCParser0.parse();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jVCParser0.ReInit(jVCParserTokenManager0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String[] stringArray0 = new String[2];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/13_javaviewcontrol/jA");
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)29;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)19;
      byteArray0[8] = (byte)0;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      stringArray0[0] = "jA";
      JVCParser.main(stringArray0);
      Locale locale0 = Locale.forLanguageTag("<kD>");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      JVCParser jVCParser0 = null;
      try {
        jVCParser0 = new JVCParser("<PD>", set0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
